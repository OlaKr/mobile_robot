
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800c188  0800c188  0001c188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c4  0800c5c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5c4  0800c5c4  0001c5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5cc  0800c5cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001e0  0800c7b4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0800c7b4  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f271  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf2  00000000  00000000  0003f481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  000445f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026123  00000000  00000000  000458e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0f7  00000000  00000000  0006ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc75e  00000000  00000000  00087b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a4  00000000  00000000  001642b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c16c 	.word	0x0800c16c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c16c 	.word	0x0800c16c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <BH1750_Init>:
BH1750_mode 		Bh1750_Mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c1;
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <BH1750_Init+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	bh1750_i2c2 = hi2c2;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <BH1750_Init+0x40>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f16:	f000 f815 	bl	8000f44 <BH1750_Reset>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <BH1750_Init+0x34>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG))	// Set default value;
 8000f20:	2046      	movs	r0, #70	; 0x46
 8000f22:	f000 f867 	bl	8000ff4 <BH1750_SetMtreg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BH1750_Init+0x30>
		{
			return BH1750_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e001      	b.n	8000f34 <BH1750_Init+0x34>
		}

		return BH1750_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e7ff      	b.n	8000f34 <BH1750_Init+0x34>
	}

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000268 	.word	0x20000268
 8000f40:	20000264 	.word	0x20000264

08000f44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <BH1750_Reset+0x38>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	230a      	movs	r3, #10
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2146      	movs	r1, #70	; 0x46
 8000f5c:	f002 feac 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp, 1, 10))
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <BH1750_Reset+0x3c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2146      	movs	r1, #70	; 0x46
 8000f6e:	f002 fea3 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	return BH1750_OK;
 8000f72:	2300      	movs	r3, #0
//	return BH1750_ERROR;

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000268 	.word	0x20000268
 8000f80:	20000264 	.word	0x20000264

08000f84 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_mode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <BH1750_SetMode+0x30>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e015      	b.n	8000fe0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BH1750_SetMode+0x64>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <BH1750_SetMode+0x68>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2146      	movs	r1, #70	; 0x46
 8000fc8:	f002 fe76 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &Mode, 1, 10))
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BH1750_SetMode+0x6c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2146      	movs	r1, #70	; 0x46
 8000fda:	f002 fe6d 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	return BH1750_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	20000268 	.word	0x20000268
 8000ff0:	20000264 	.word	0x20000264

08000ff4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode, retCode2;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1e      	cmp	r3, #30
 8001002:	d902      	bls.n	800100a <BH1750_SetMtreg+0x16>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d101      	bne.n	800100e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e056      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	Bh1750_Mtreg = Mtreg;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <BH1750_SetMtreg+0xd0>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2146      	movs	r1, #70	; 0x46
 8001046:	f002 fe37 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[0], 1, 10);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2146      	movs	r1, #70	; 0x46
 800105e:	f002 fe2b 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK != retCode || HAL_OK != retCode2) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BH1750_SetMtreg+0x7e>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BH1750_SetMtreg+0x82>
		return BH1750_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e022      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	230a      	movs	r3, #10
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	2146      	movs	r1, #70	; 0x46
 8001088:	f002 fe16 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f002 fe09 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK == retCode && HAL_OK == retCode2) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
		return BH1750_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	return BH1750_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000026c 	.word	0x2000026c
 80010c8:	20000268 	.word	0x20000268
 80010cc:	20000264 	.word	0x20000264

080010d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <BH1750_ReadLight+0xa0>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	230a      	movs	r3, #10
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	f002 fee4 	bl	8003eb4 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	7a7a      	ldrb	r2, [r7, #9]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d00f      	beq.n	800112e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001178 <BH1750_ReadLight+0xa8>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b21      	cmp	r3, #33	; 0x21
 8001134:	d003      	beq.n	800113e <BH1750_ReadLight+0x6e>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <BH1750_ReadLight+0xac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d107      	bne.n	800114e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800114e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001180 <BH1750_ReadLight+0xb0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000268 	.word	0x20000268
 8001174:	2000026c 	.word	0x2000026c
 8001178:	428c0000 	.word	0x428c0000
 800117c:	20000260 	.word	0x20000260
 8001180:	3f99999a 	.word	0x3f99999a

08001184 <BH1750_ReadLight2>:

BH1750_STATUS BH1750_ReadLight2(float *Result)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c2, BH1750_ADDRESS, tmp, 2, 10))
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <BH1750_ReadLight2+0xa0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	230a      	movs	r3, #10
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	2146      	movs	r1, #70	; 0x46
 800119c:	f002 fe8a 	bl	8003eb4 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d138      	bne.n	8001218 <BH1750_ReadLight2+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	7a7a      	ldrb	r2, [r7, #9]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d00f      	beq.n	80011e2 <BH1750_ReadLight2+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800122c <BH1750_ReadLight2+0xa8>
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d003      	beq.n	80011f2 <BH1750_ReadLight2+0x6e>
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d107      	bne.n	8001202 <BH1750_ReadLight2+0x7e>
		{
			result /= 2.0;
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001202:	ed97 7a03 	vldr	s14, [r7, #12]
 8001206:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001234 <BH1750_ReadLight2+0xb0>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <BH1750_ReadLight2+0x96>
	}
	return BH1750_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000264 	.word	0x20000264
 8001228:	2000026c 	.word	0x2000026c
 800122c:	428c0000 	.word	0x428c0000
 8001230:	20000260 	.word	0x20000260
 8001234:	3f99999a 	.word	0x3f99999a

08001238 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_DAC_Init+0x4c>)
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_DAC_Init+0x50>)
 800124a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_DAC_Init+0x4c>)
 800124e:	f001 fe46 	bl	8002ede <HAL_DAC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001258:	f000 fdc0 	bl	8001ddc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800125c:	2304      	movs	r3, #4
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_DAC_Init+0x4c>)
 800126c:	f001 fe59 	bl	8002f22 <HAL_DAC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001276:	f000 fdb1 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002d0 	.word	0x200002d0
 8001288:	40007400 	.word	0x40007400

0800128c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d157      	bne.n	800135e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f002 f9eb 	bl	80036d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001344:	f001 fe3c 	bl	8002fc0 <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800134e:	f000 fd45 	bl	8001ddc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	20000270 	.word	0x20000270
 8001378:	40026088 	.word	0x40026088

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MX_DMA_Init+0x3c>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2010      	movs	r0, #16
 80013a4:	f001 fd65 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013a8:	2010      	movs	r0, #16
 80013aa:	f001 fd7e 	bl	8002eaa <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <MX_GPIO_Init+0x160>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a50      	ldr	r2, [pc, #320]	; (800151c <MX_GPIO_Init+0x160>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <MX_GPIO_Init+0x160>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_GPIO_Init+0x160>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <MX_GPIO_Init+0x160>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_GPIO_Init+0x160>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <MX_GPIO_Init+0x160>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <MX_GPIO_Init+0x160>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <MX_GPIO_Init+0x160>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_GPIO_Init+0x160>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <MX_GPIO_Init+0x160>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_GPIO_Init+0x160>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <MX_GPIO_Init+0x160>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 800145e:	2200      	movs	r2, #0
 8001460:	f640 114c 	movw	r1, #2380	; 0x94c
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <MX_GPIO_Init+0x164>)
 8001466:	f002 fac9 	bl	80039fc <HAL_GPIO_WritePin>
                          |DIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	482d      	ldr	r0, [pc, #180]	; (8001524 <MX_GPIO_Init+0x168>)
 8001470:	f002 fac4 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	482b      	ldr	r0, [pc, #172]	; (8001528 <MX_GPIO_Init+0x16c>)
 800147a:	f002 fabf 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2118      	movs	r1, #24
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <MX_GPIO_Init+0x170>)
 8001484:	f002 faba 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x164>)
 800149e:	f002 f919 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 80014a2:	f640 134c 	movw	r3, #2380	; 0x94c
 80014a6:	617b      	str	r3, [r7, #20]
                          |DIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0x164>)
 80014bc:	f002 f90a 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0x168>)
 80014d8:	f002 f8fc 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 80014dc:	2304      	movs	r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0x16c>)
 80014f4:	f002 f8ee 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80014f8:	2318      	movs	r3, #24
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_GPIO_Init+0x170>)
 8001510:	f002 f8e0 	bl	80036d4 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40020400 	.word	0x40020400

08001530 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 fa5f 	bl	8003a30 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fc30 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002e4 	.word	0x200002e4
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f002 fa31 	bl	8003a30 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 fc02 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000338 	.word	0x20000338
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_I2C_MspInit+0x148>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13d      	bne.n	8001686 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001626:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	483d      	ldr	r0, [pc, #244]	; (8001738 <HAL_I2C_MspInit+0x150>)
 8001644:	f002 f846 	bl	80036d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201f      	movs	r0, #31
 800166a:	f001 fc02 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166e:	201f      	movs	r0, #31
 8001670:	f001 fc1b 	bl	8002eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2020      	movs	r0, #32
 800167a:	f001 fbfa 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167e:	2020      	movs	r0, #32
 8001680:	f001 fc13 	bl	8002eaa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001684:	e050      	b.n	8001728 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x154>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d14b      	bne.n	8001728 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016da:	2304      	movs	r3, #4
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_I2C_MspInit+0x150>)
 80016e6:	f001 fff5 	bl	80036d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_I2C_MspInit+0x158>)
 8001708:	f001 ffe4 	bl	80036d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	40005800 	.word	0x40005800
 8001740:	40020800 	.word	0x40020800

08001744 <setMax>:

#define MIN_SUB -500
#define MAX_SUB 500
#define MAX_V 50

void setMax(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	if(BH1750_lux_sub>MAX_SUB) BH1750_lux_sub=MAX_SUB;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <setMax+0x44>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800178c <setMax+0x48>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd02      	ble.n	8001762 <setMax+0x1e>
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <setMax+0x44>)
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <setMax+0x4c>)
 8001760:	601a      	str	r2, [r3, #0]
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <setMax+0x44>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001794 <setMax+0x50>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d400      	bmi.n	8001778 <setMax+0x34>
}
 8001776:	e002      	b.n	800177e <setMax+0x3a>
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <setMax+0x44>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <setMax+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200003fc 	.word	0x200003fc
 800178c:	43fa0000 	.word	0x43fa0000
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	c3fa0000 	.word	0xc3fa0000
 8001798:	c3fa0000 	.word	0xc3fa0000

0800179c <proportionalPID>:

void proportionalPID(){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	float sub_for_one_lux = (float)MAX_V/(float)MAX_SUB;					//wartosc w prędkosci dla 1lux
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <proportionalPID+0x2c>)
 80017a4:	607b      	str	r3, [r7, #4]
	change = BH1750_lux_sub*sub_for_one_lux;								//wartosc w predkosci dla SUB
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <proportionalPID+0x30>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <proportionalPID+0x34>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	200003fc 	.word	0x200003fc
 80017d0:	2000038c 	.word	0x2000038c

080017d4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int __io_putchar(int sign)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d109      	bne.n	80017f6 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 80017e2:	230d      	movs	r3, #13
 80017e4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 80017e6:	f107 010f 	add.w	r1, r7, #15
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2201      	movs	r2, #1
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <__io_putchar+0x3c>)
 80017f2:	f007 f826 	bl	8008842 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2201      	movs	r2, #1
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <__io_putchar+0x3c>)
 8001800:	f007 f81f 	bl	8008842 <HAL_UART_Transmit>
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200005d8 	.word	0x200005d8

08001814 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b0d      	cmp	r3, #13
 8001822:	d002      	beq.n	800182a <line_append+0x16>
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d10c      	bne.n	8001844 <line_append+0x30>
	{
		if(line_length>0)
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <line_append+0x5c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d018      	beq.n	8001864 <line_append+0x50>
		{
			line_buffer[line_length]='\0';
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <line_append+0x5c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <line_append+0x60>)
 8001838:	2100      	movs	r1, #0
 800183a:	54d1      	strb	r1, [r2, r3]
			line_length=0;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <line_append+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8001842:	e00f      	b.n	8001864 <line_append+0x50>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <line_append+0x5c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b4f      	cmp	r3, #79	; 0x4f
 800184a:	d902      	bls.n	8001852 <line_append+0x3e>
		{
			line_length=0;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <line_append+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <line_append+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <line_append+0x5c>)
 800185a:	600a      	str	r2, [r1, #0]
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <line_append+0x60>)
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	54ca      	strb	r2, [r1, r3]
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20000250 	.word	0x20000250
 8001874:	200001fc 	.word	0x200001fc

08001878 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d104      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffc1 	bl	8001814 <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001898:	f007 f865 	bl	8008966 <HAL_UART_Receive_IT>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200005d8 	.word	0x200005d8
 80018a8:	20000400 	.word	0x20000400

080018ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d16d      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		if (strcmp(line_buffer, "on")==0){
 80018bc:	495d      	ldr	r1, [pc, #372]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018be:	485e      	ldr	r0, [pc, #376]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018c0:	f7fe fca6 	bl	8000210 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	485b      	ldr	r0, [pc, #364]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018d0:	f002 f894 	bl	80039fc <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018d4:	4958      	ldr	r1, [pc, #352]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018d6:	485a      	ldr	r0, [pc, #360]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018d8:	f008 fbca 	bl	800a070 <iprintf>
 80018dc:	e05c      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "off")==0){
 80018de:	4959      	ldr	r1, [pc, #356]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80018e0:	4855      	ldr	r0, [pc, #340]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018e2:	f7fe fc95 	bl	8000210 <strcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	4852      	ldr	r0, [pc, #328]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018f2:	f002 f883 	bl	80039fc <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018f6:	4950      	ldr	r1, [pc, #320]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018f8:	4851      	ldr	r0, [pc, #324]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018fa:	f008 fbb9 	bl	800a070 <iprintf>
 80018fe:	e04b      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "w")==0){
 8001900:	4951      	ldr	r1, [pc, #324]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001902:	484d      	ldr	r0, [pc, #308]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001904:	f7fe fc84 	bl	8000210 <strcmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x6a>
			setCommand = SLOW;
 800190e:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001910:	2205      	movs	r2, #5
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e040      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "s")==0){
 8001916:	494e      	ldr	r1, [pc, #312]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001918:	4847      	ldr	r0, [pc, #284]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800191a:	f7fe fc79 	bl	8000210 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_TIM_PeriodElapsedCallback+0x80>
			setCommand = STOP;
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e035      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "t")==0){
 800192c:	4949      	ldr	r1, [pc, #292]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800192e:	4842      	ldr	r0, [pc, #264]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001930:	f7fe fc6e 	bl	8000210 <strcmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x96>
			setCommand = FAST;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800193c:	2206      	movs	r2, #6
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e02a      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "f")==0){
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001944:	483c      	ldr	r0, [pc, #240]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xac>
			setCommand = FORWARD;
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e01f      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "b")==0){
 8001958:	4940      	ldr	r1, [pc, #256]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800195a:	4837      	ldr	r0, [pc, #220]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800195c:	f7fe fc58 	bl	8000210 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0xc2>
			setCommand = BACKWARD;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e014      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "l")==0){
 800196e:	493c      	ldr	r1, [pc, #240]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001972:	f7fe fc4d 	bl	8000210 <strcmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xd8>
			setCommand = LEFT;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e009      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "r")==0){
 8001984:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001986:	482c      	ldr	r0, [pc, #176]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001988:	f7fe fc42 	bl	8000210 <strcmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
			setCommand = RIGHT;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
		}
		//else printf("Unrecognized command: %s\n", line_buffer);
	}

	if(htim==&htim5)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d129      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
 80019a0:	4832      	ldr	r0, [pc, #200]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019a2:	f7ff fb95 	bl	80010d0 <BH1750_ReadLight>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			//sprintf(buffer,"BH1750 Lux: %.2f\r\n", BH1750_lux);
			len=strlen(buffer);
 80019ac:	4830      	ldr	r0, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ae:	f7fe fc39 	bl	8000224 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019b8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019c4:	482c      	ldr	r0, [pc, #176]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019c6:	f006 ff3c 	bl	8008842 <HAL_UART_Transmit>
		}
		if(BH1750_OK == BH1750_ReadLight2(&BH1750_lux2))
 80019ca:	482c      	ldr	r0, [pc, #176]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019cc:	f7ff fbda 	bl	8001184 <BH1750_ReadLight2>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
		{
			//sprintf(buffer,"BH1750 Lux2: %.2f\r\n", BH1750_lux2);
			len=strlen(buffer);
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019d8:	f7fe fc24 	bl	8000224 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	4920      	ldr	r1, [pc, #128]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019f0:	f006 ff27 	bl	8008842 <HAL_UART_Transmit>
		}
	}

	if(htim==&htim9)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d114      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
	{
		BH1750_lux_sub=BH1750_lux2-BH1750_lux;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(buffer,"SUB: %.2f\r\n", BH1750_lux_sub);
		if(strcmp(line_buffer, "i")==0)
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a16:	f7fe fbfb 	bl	8000210 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
		{
			setCommand = LIGHT;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000590 	.word	0x20000590
 8001a34:	0800c188 	.word	0x0800c188
 8001a38:	200001fc 	.word	0x200001fc
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	0800c18c 	.word	0x0800c18c
 8001a44:	0800c19c 	.word	0x0800c19c
 8001a48:	0800c1a0 	.word	0x0800c1a0
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	0800c1a4 	.word	0x0800c1a4
 8001a54:	0800c1a8 	.word	0x0800c1a8
 8001a58:	0800c1ac 	.word	0x0800c1ac
 8001a5c:	0800c1b0 	.word	0x0800c1b0
 8001a60:	0800c1b4 	.word	0x0800c1b4
 8001a64:	0800c1b8 	.word	0x0800c1b8
 8001a68:	20000428 	.word	0x20000428
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	20000398 	.word	0x20000398
 8001a74:	20000404 	.word	0x20000404
 8001a78:	200005d8 	.word	0x200005d8
 8001a7c:	20000394 	.word	0x20000394
 8001a80:	20000548 	.word	0x20000548
 8001a84:	200003fc 	.word	0x200003fc
 8001a88:	0800c1bc 	.word	0x0800c1bc

08001a8c <robotControl>:

void robotControl()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	if(setCommand==FORWARD)
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <robotControl+0xa8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <robotControl+0x18>
	{
		TB6612_init(99,99,99,99);
 8001a98:	2363      	movs	r3, #99	; 0x63
 8001a9a:	2263      	movs	r2, #99	; 0x63
 8001a9c:	2163      	movs	r1, #99	; 0x63
 8001a9e:	2063      	movs	r0, #99	; 0x63
 8001aa0:	f000 fc3a 	bl	8002318 <TB6612_init>
	}
	if(setCommand==BACKWARD)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <robotControl+0xa8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10a      	bne.n	8001ac2 <robotControl+0x36>
	{
		TB6612_init(-99,-99,-99,-99);
 8001aac:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001ab0:	f06f 0262 	mvn.w	r2, #98	; 0x62
 8001ab4:	f06f 0162 	mvn.w	r1, #98	; 0x62
 8001ab8:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8001abc:	f000 fc2c 	bl	8002318 <TB6612_init>
	}
	else if(setCommand==FAST)
	{
		TB6612_init(99,99,99,99);
	}
}
 8001ac0:	e035      	b.n	8001b2e <robotControl+0xa2>
	else if(setCommand==LEFT)
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <robotControl+0xa8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d106      	bne.n	8001ad8 <robotControl+0x4c>
		TB6612_init(0,80,80,0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	2250      	movs	r2, #80	; 0x50
 8001ace:	2150      	movs	r1, #80	; 0x50
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 fc21 	bl	8002318 <TB6612_init>
}
 8001ad6:	e02a      	b.n	8001b2e <robotControl+0xa2>
	else if(setCommand==RIGHT)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <robotControl+0xa8>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d106      	bne.n	8001aee <robotControl+0x62>
		TB6612_init(80,0,0,80);
 8001ae0:	2350      	movs	r3, #80	; 0x50
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2050      	movs	r0, #80	; 0x50
 8001ae8:	f000 fc16 	bl	8002318 <TB6612_init>
}
 8001aec:	e01f      	b.n	8001b2e <robotControl+0xa2>
	else if(setCommand==STOP)
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <robotControl+0xa8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d106      	bne.n	8001b04 <robotControl+0x78>
		TB6612_init(0,0,0,0);
 8001af6:	2300      	movs	r3, #0
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 fc0b 	bl	8002318 <TB6612_init>
}
 8001b02:	e014      	b.n	8001b2e <robotControl+0xa2>
	else if(setCommand==SLOW)
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <robotControl+0xa8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d106      	bne.n	8001b1a <robotControl+0x8e>
		TB6612_init(40,40,40,40);
 8001b0c:	2328      	movs	r3, #40	; 0x28
 8001b0e:	2228      	movs	r2, #40	; 0x28
 8001b10:	2128      	movs	r1, #40	; 0x28
 8001b12:	2028      	movs	r0, #40	; 0x28
 8001b14:	f000 fc00 	bl	8002318 <TB6612_init>
}
 8001b18:	e009      	b.n	8001b2e <robotControl+0xa2>
	else if(setCommand==FAST)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <robotControl+0xa8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d105      	bne.n	8001b2e <robotControl+0xa2>
		TB6612_init(99,99,99,99);
 8001b22:	2363      	movs	r3, #99	; 0x63
 8001b24:	2263      	movs	r2, #99	; 0x63
 8001b26:	2163      	movs	r1, #99	; 0x63
 8001b28:	2063      	movs	r0, #99	; 0x63
 8001b2a:	f000 fbf5 	bl	8002318 <TB6612_init>
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <followTheLight>:

void followTheLight(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
	if(BH1750_lux>30 && BH1750_lux2>30)
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <followTheLight+0xb4>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	dd40      	ble.n	8001bd4 <followTheLight+0x9c>
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <followTheLight+0xb8>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	dd36      	ble.n	8001bd4 <followTheLight+0x9c>
	{
		TB6612_init(49-change,49+change,49+change,49-change);
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <followTheLight+0xbc>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001bf8 <followTheLight+0xc0>
 8001b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b7c:	793b      	ldrb	r3, [r7, #4]
 8001b7e:	b258      	sxtb	r0, r3
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <followTheLight+0xbc>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bf8 <followTheLight+0xc0>
 8001b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b92:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b96:	793b      	ldrb	r3, [r7, #4]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <followTheLight+0xbc>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bf8 <followTheLight+0xc0>
 8001ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bb0:	793b      	ldrb	r3, [r7, #4]
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <followTheLight+0xbc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <followTheLight+0xc0>
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bca:	793b      	ldrb	r3, [r7, #4]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	f000 fba3 	bl	8002318 <TB6612_init>
 8001bd2:	e006      	b.n	8001be2 <followTheLight+0xaa>
	}
	else
	{
		TB6612_init(0,0,0,0);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 fb9c 	bl	8002318 <TB6612_init>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000390 	.word	0x20000390
 8001bf0:	20000394 	.word	0x20000394
 8001bf4:	2000038c 	.word	0x2000038c
 8001bf8:	42440000 	.word	0x42440000

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f000 ffea 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f854 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f7ff fbd8 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0c:	f7ff fbb6 	bl	800137c <MX_DMA_Init>
  MX_TIM2_Init();
 8001c10:	f000 fc6a 	bl	80024e8 <MX_TIM2_Init>
  MX_RTC_Init();
 8001c14:	f000 f8e8 	bl	8001de8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c18:	f000 ff06 	bl	8002a28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c1c:	f000 fbb8 	bl	8002390 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001c20:	f7ff fc86 	bl	8001530 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c24:	f7ff fcb2 	bl	800158c <MX_I2C2_Init>
  MX_TIM5_Init();
 8001c28:	f000 fd2c 	bl	8002684 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fcaa 	bl	8002584 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001c30:	f000 fdac 	bl	800278c <MX_TIM9_Init>
  MX_DAC_Init();
 8001c34:	f7ff fb00 	bl	8001238 <MX_DAC_Init>
  MX_TIM6_Init();
 8001c38:	f000 fd72 	bl	8002720 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4912      	ldr	r1, [pc, #72]	; (8001c88 <main+0x8c>)
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <main+0x90>)
 8001c42:	f006 fe90 	bl	8008966 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <main+0x94>)
 8001c48:	f005 fd70 	bl	800772c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <main+0x98>)
 8001c4e:	f005 fd6d 	bl	800772c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <main+0x9c>)
 8001c54:	f005 fd6a 	bl	800772c <HAL_TIM_Base_Start_IT>

  BH1750_Init(&hi2c1, &hi2c2);
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <main+0xa0>)
 8001c5a:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <main+0xa4>)
 8001c5c:	f7ff f950 	bl	8000f00 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001c60:	2011      	movs	r0, #17
 8001c62:	f7ff f98f 	bl	8000f84 <BH1750_SetMode>

  setMax();
 8001c66:	f7ff fd6d 	bl	8001744 <setMax>

  wave_player_init(&htim6, &hdac);
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <main+0xa8>)
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <main+0xac>)
 8001c6e:	f000 ff75 	bl	8002b5c <wave_player_init>
  while (1)
  {
	  //wave_player_start(audio_file);
	  //HAL_Delay(2000);

	  robotControl();
 8001c72:	f7ff ff0b 	bl	8001a8c <robotControl>

	  proportionalPID();
 8001c76:	f7ff fd91 	bl	800179c <proportionalPID>
	  if(setCommand==LIGHT) followTheLight();
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <main+0xb0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d1f7      	bne.n	8001c72 <main+0x76>
 8001c82:	f7ff ff59 	bl	8001b38 <followTheLight>
	  robotControl();
 8001c86:	e7f4      	b.n	8001c72 <main+0x76>
 8001c88:	20000400 	.word	0x20000400
 8001c8c:	200005d8 	.word	0x200005d8
 8001c90:	20000590 	.word	0x20000590
 8001c94:	20000428 	.word	0x20000428
 8001c98:	20000548 	.word	0x20000548
 8001c9c:	20000338 	.word	0x20000338
 8001ca0:	200002e4 	.word	0x200002e4
 8001ca4:	200002d0 	.word	0x200002d0
 8001ca8:	200004b8 	.word	0x200004b8
 8001cac:	20000000 	.word	0x20000000

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0ac      	sub	sp, #176	; 0xb0
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cba:	2234      	movs	r2, #52	; 0x34
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f007 fd64 	bl	800978c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	225c      	movs	r2, #92	; 0x5c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f007 fd55 	bl	800978c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <SystemClock_Config+0x124>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a3a      	ldr	r2, [pc, #232]	; (8001dd4 <SystemClock_Config+0x124>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <SystemClock_Config+0x124>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <SystemClock_Config+0x128>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <SystemClock_Config+0x128>)
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <SystemClock_Config+0x128>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d40:	2304      	movs	r3, #4
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d46:	23b4      	movs	r3, #180	; 0xb4
 8001d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f910 	bl	8006f88 <HAL_RCC_OscConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d6e:	f000 f835 	bl	8001ddc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d72:	f004 fac3 	bl	80062fc <HAL_PWREx_EnableOverDrive>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d7c:	f000 f82e 	bl	8001ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d80:	230f      	movs	r3, #15
 8001d82:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d84:	2302      	movs	r3, #2
 8001d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fafc 	bl	800639c <HAL_RCC_ClockConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001daa:	f000 f817 	bl	8001ddc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dae:	2320      	movs	r3, #32
 8001db0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 fc07 	bl	80065d0 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001dc8:	f000 f808 	bl	8001ddc <Error_Handler>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	; 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <Error_Handler+0x8>
	...

08001de8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_RTC_Init+0x44>)
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <MX_RTC_Init+0x48>)
 8001df0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_RTC_Init+0x44>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_RTC_Init+0x44>)
 8001dfa:	227f      	movs	r2, #127	; 0x7f
 8001dfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_RTC_Init+0x44>)
 8001e00:	22ff      	movs	r2, #255	; 0xff
 8001e02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_RTC_Init+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_RTC_Init+0x44>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_RTC_Init+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_RTC_Init+0x44>)
 8001e18:	f005 fb54 	bl	80074c4 <HAL_RTC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e22:	f7ff ffdb 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000408 	.word	0x20000408
 8001e30:	40002800 	.word	0x40002800

08001e34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_RTC_MspInit+0x24>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d102      	bne.n	8001e4c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RTC_MspInit+0x28>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40002800 	.word	0x40002800
 8001e5c:	42470e3c 	.word	0x42470e3c

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_MspInit+0x4c>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_MspInit+0x4c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <NMI_Handler+0x4>

08001eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f000 febe 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA1_Stream5_IRQHandler+0x10>)
 8001f0a:	f001 f999 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000270 	.word	0x20000270

08001f18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001f1e:	f005 fd97 	bl	8007a50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001f24:	f005 fd94 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000500 	.word	0x20000500
 8001f30:	20000548 	.word	0x20000548

08001f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM2_IRQHandler+0x10>)
 8001f3a:	f005 fd89 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000590 	.word	0x20000590

08001f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM3_IRQHandler+0x10>)
 8001f4e:	f005 fd7f 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000470 	.word	0x20000470

08001f5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <I2C1_EV_IRQHandler+0x10>)
 8001f62:	f002 f9cd 	bl	8004300 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002e4 	.word	0x200002e4

08001f70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <I2C1_ER_IRQHandler+0x10>)
 8001f76:	f002 fb34 	bl	80045e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002e4 	.word	0x200002e4

08001f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <USART1_IRQHandler+0x10>)
 8001f8a:	f006 fd1d 	bl	80089c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200005d8 	.word	0x200005d8

08001f98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM5_IRQHandler+0x10>)
 8001f9e:	f005 fd57 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000428 	.word	0x20000428

08001fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	return 1;
 8001fb0:	2301      	movs	r3, #1
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_kill>:

int _kill(int pid, int sig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fc6:	f007 fbb7 	bl	8009738 <__errno>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2216      	movs	r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
	return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_exit>:

void _exit (int status)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffe7 	bl	8001fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fee:	e7fe      	b.n	8001fee <_exit+0x12>

08001ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e00a      	b.n	8002018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002002:	f3af 8000 	nop.w
 8002006:	4601      	mov	r1, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf0      	blt.n	8002002 <_read+0x12>
	}

return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e009      	b.n	8002050 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	60ba      	str	r2, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fbc5 	bl	80017d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf1      	blt.n	800203c <_write+0x12>
	}
	return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_close>:

int _close(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208a:	605a      	str	r2, [r3, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_isatty>:

int _isatty(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	return 1;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
	return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f007 fb1c 	bl	8009738 <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20020000 	.word	0x20020000
 800212c:	00000400 	.word	0x00000400
 8002130:	20000254 	.word	0x20000254
 8002134:	20000a70 	.word	0x20000a70

08002138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <SystemInit+0x20>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <SystemInit+0x20>)
 8002144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <set_motorA>:
#include "tb6612fng.h"
#include "main.h"


void set_motorA(int8_t speed)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0a      	blt.n	8002184 <set_motorA+0x28>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2108      	movs	r1, #8
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <set_motorA+0x64>)
 8002174:	f001 fc42 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2110      	movs	r1, #16
 800217c:	4810      	ldr	r0, [pc, #64]	; (80021c0 <set_motorA+0x64>)
 800217e:	f001 fc3d 	bl	80039fc <HAL_GPIO_WritePin>
 8002182:	e009      	b.n	8002198 <set_motorA+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2108      	movs	r1, #8
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <set_motorA+0x64>)
 800218a:	f001 fc37 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2110      	movs	r1, #16
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <set_motorA+0x64>)
 8002194:	f001 fc32 	bl	80039fc <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 8002198:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <set_motorA+0x68>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d303      	bcc.n	80021ae <set_motorA+0x52>
		speed=htim1.Instance->ARR;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <set_motorA+0x68>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <set_motorA+0x68>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80021b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40020400 	.word	0x40020400
 80021c4:	20000500 	.word	0x20000500

080021c8 <set_motorB>:

void set_motorB(int8_t speed)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <set_motorB+0x2a>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4814      	ldr	r0, [pc, #80]	; (8002230 <set_motorB+0x68>)
 80021e0:	f001 fc0c 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <set_motorB+0x68>)
 80021ec:	f001 fc06 	bl	80039fc <HAL_GPIO_WritePin>
 80021f0:	e00a      	b.n	8002208 <set_motorB+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	480e      	ldr	r0, [pc, #56]	; (8002230 <set_motorB+0x68>)
 80021f8:	f001 fc00 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <set_motorB+0x68>)
 8002204:	f001 fbfa 	bl	80039fc <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 8002208:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <set_motorB+0x6c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	429a      	cmp	r2, r3
 8002214:	d303      	bcc.n	800221e <set_motorB+0x56>
		speed=htim1.Instance->ARR;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <set_motorB+0x6c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <set_motorB+0x6c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40020800 	.word	0x40020800
 8002234:	20000500 	.word	0x20000500

08002238 <set_motorC>:

void set_motorC(int8_t speed)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0a      	blt.n	8002260 <set_motorC+0x28>
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, SET);
 800224a:	2201      	movs	r2, #1
 800224c:	2104      	movs	r1, #4
 800224e:	4813      	ldr	r0, [pc, #76]	; (800229c <set_motorC+0x64>)
 8002250:	f001 fbd4 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	2108      	movs	r1, #8
 8002258:	4810      	ldr	r0, [pc, #64]	; (800229c <set_motorC+0x64>)
 800225a:	f001 fbcf 	bl	80039fc <HAL_GPIO_WritePin>
 800225e:	e009      	b.n	8002274 <set_motorC+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	2104      	movs	r1, #4
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <set_motorC+0x64>)
 8002266:	f001 fbc9 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, SET);
 800226a:	2201      	movs	r2, #1
 800226c:	2108      	movs	r1, #8
 800226e:	480b      	ldr	r0, [pc, #44]	; (800229c <set_motorC+0x64>)
 8002270:	f001 fbc4 	bl	80039fc <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 8002274:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <set_motorC+0x68>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	429a      	cmp	r2, r3
 8002280:	d303      	bcc.n	800228a <set_motorC+0x52>
		speed=htim3.Instance->ARR;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <set_motorC+0x68>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <set_motorC+0x68>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40020800 	.word	0x40020800
 80022a0:	20000470 	.word	0x20000470

080022a4 <set_motorD>:

void set_motorD(int8_t speed)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <set_motorD+0x2a>
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022bc:	4813      	ldr	r0, [pc, #76]	; (800230c <set_motorD+0x68>)
 80022be:	f001 fb9d 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2104      	movs	r1, #4
 80022c6:	4812      	ldr	r0, [pc, #72]	; (8002310 <set_motorD+0x6c>)
 80022c8:	f001 fb98 	bl	80039fc <HAL_GPIO_WritePin>
 80022cc:	e00a      	b.n	80022e4 <set_motorD+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <set_motorD+0x68>)
 80022d6:	f001 fb91 	bl	80039fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2104      	movs	r1, #4
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <set_motorD+0x6c>)
 80022e0:	f001 fb8c 	bl	80039fc <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 80022e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <set_motorD+0x70>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d303      	bcc.n	80022fa <set_motorD+0x56>
		speed=htim3.Instance->ARR;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <set_motorD+0x70>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <set_motorD+0x70>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	20000470 	.word	0x20000470

08002318 <TB6612_init>:

void TB6612_init(int8_t speedA, int8_t speedB, int8_t speedC, int8_t speedD)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	4603      	mov	r3, r0
 800232c:	71bb      	strb	r3, [r7, #6]
 800232e:	460b      	mov	r3, r1
 8002330:	717b      	strb	r3, [r7, #5]
 8002332:	4613      	mov	r3, r2
 8002334:	713b      	strb	r3, [r7, #4]
	set_motorA(speedA);
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff0e 	bl	800215c <set_motorA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002340:	2100      	movs	r1, #0
 8002342:	4811      	ldr	r0, [pc, #68]	; (8002388 <TB6612_init+0x70>)
 8002344:	f005 fabc 	bl	80078c0 <HAL_TIM_PWM_Start>
	set_motorB(speedB);
 8002348:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff3b 	bl	80021c8 <set_motorB>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002352:	2104      	movs	r1, #4
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <TB6612_init+0x70>)
 8002356:	f005 fab3 	bl	80078c0 <HAL_TIM_PWM_Start>
	set_motorC(speedC);
 800235a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff6a 	bl	8002238 <set_motorC>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002364:	2100      	movs	r1, #0
 8002366:	4809      	ldr	r0, [pc, #36]	; (800238c <TB6612_init+0x74>)
 8002368:	f005 faaa 	bl	80078c0 <HAL_TIM_PWM_Start>
	set_motorD(speedD);
 800236c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff97 	bl	80022a4 <set_motorD>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002376:	2104      	movs	r1, #4
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <TB6612_init+0x74>)
 800237a:	f005 faa1 	bl	80078c0 <HAL_TIM_PWM_Start>
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop
 8002388:	20000500 	.word	0x20000500
 800238c:	20000470 	.word	0x20000470

08002390 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2220      	movs	r2, #32
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f007 f9df 	bl	800978c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023d0:	4a44      	ldr	r2, [pc, #272]	; (80024e4 <MX_TIM1_Init+0x154>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 80023d4:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023d6:	222c      	movs	r2, #44	; 0x2c
 80023d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023e2:	2263      	movs	r2, #99	; 0x63
 80023e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ec:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f8:	4839      	ldr	r0, [pc, #228]	; (80024e0 <MX_TIM1_Init+0x150>)
 80023fa:	f005 f948 	bl	800768e <HAL_TIM_Base_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002404:	f7ff fcea 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800240e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002412:	4619      	mov	r1, r3
 8002414:	4832      	ldr	r0, [pc, #200]	; (80024e0 <MX_TIM1_Init+0x150>)
 8002416:	f005 fce5 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002420:	f7ff fcdc 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002424:	482e      	ldr	r0, [pc, #184]	; (80024e0 <MX_TIM1_Init+0x150>)
 8002426:	f005 f9f1 	bl	800780c <HAL_TIM_PWM_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002430:	f7ff fcd4 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800243c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002440:	4619      	mov	r1, r3
 8002442:	4827      	ldr	r0, [pc, #156]	; (80024e0 <MX_TIM1_Init+0x150>)
 8002444:	f006 f8ce 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800244e:	f7ff fcc5 	bl	8001ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002452:	2360      	movs	r3, #96	; 0x60
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002472:	2200      	movs	r2, #0
 8002474:	4619      	mov	r1, r3
 8002476:	481a      	ldr	r0, [pc, #104]	; (80024e0 <MX_TIM1_Init+0x150>)
 8002478:	f005 fbf2 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002482:	f7ff fcab 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248a:	2204      	movs	r2, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4814      	ldr	r0, [pc, #80]	; (80024e0 <MX_TIM1_Init+0x150>)
 8002490:	f005 fbe6 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800249a:	f7ff fc9f 	bl	8001ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4807      	ldr	r0, [pc, #28]	; (80024e0 <MX_TIM1_Init+0x150>)
 80024c2:	f006 f90b 	bl	80086dc <HAL_TIMEx_ConfigBreakDeadTime>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024cc:	f7ff fc86 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <MX_TIM1_Init+0x150>)
 80024d2:	f000 fa49 	bl	8002968 <HAL_TIM_MspPostInit>

}
 80024d6:	bf00      	nop
 80024d8:	3758      	adds	r7, #88	; 0x58
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000500 	.word	0x20000500
 80024e4:	40010000 	.word	0x40010000

080024e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	463b      	mov	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0x98>)
 8002506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800250a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_TIM2_Init+0x98>)
 800250e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM2_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MX_TIM2_Init+0x98>)
 800251c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <MX_TIM2_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <MX_TIM2_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <MX_TIM2_Init+0x98>)
 8002530:	f005 f8ad 	bl	800768e <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800253a:	f7ff fc4f 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_TIM2_Init+0x98>)
 800254c:	f005 fc4a 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002556:	f7ff fc41 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800255a:	2320      	movs	r3, #32
 800255c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002562:	463b      	mov	r3, r7
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <MX_TIM2_Init+0x98>)
 8002568:	f006 f83c 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002572:	f7ff fc33 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000590 	.word	0x20000590

08002584 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	f107 0320 	add.w	r3, r7, #32
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <MX_TIM3_Init+0xf8>)
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <MX_TIM3_Init+0xfc>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <MX_TIM3_Init+0xf8>)
 80025bc:	222c      	movs	r2, #44	; 0x2c
 80025be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <MX_TIM3_Init+0xf8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <MX_TIM3_Init+0xf8>)
 80025c8:	2263      	movs	r2, #99	; 0x63
 80025ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <MX_TIM3_Init+0xf8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <MX_TIM3_Init+0xf8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d8:	4828      	ldr	r0, [pc, #160]	; (800267c <MX_TIM3_Init+0xf8>)
 80025da:	f005 f858 	bl	800768e <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80025e4:	f7ff fbfa 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f2:	4619      	mov	r1, r3
 80025f4:	4821      	ldr	r0, [pc, #132]	; (800267c <MX_TIM3_Init+0xf8>)
 80025f6:	f005 fbf5 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002600:	f7ff fbec 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002604:	481d      	ldr	r0, [pc, #116]	; (800267c <MX_TIM3_Init+0xf8>)
 8002606:	f005 f901 	bl	800780c <HAL_TIM_PWM_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002610:	f7ff fbe4 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261c:	f107 0320 	add.w	r3, r7, #32
 8002620:	4619      	mov	r1, r3
 8002622:	4816      	ldr	r0, [pc, #88]	; (800267c <MX_TIM3_Init+0xf8>)
 8002624:	f005 ffde 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800262e:	f7ff fbd5 	bl	8001ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002632:	2360      	movs	r3, #96	; 0x60
 8002634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	4619      	mov	r1, r3
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_TIM3_Init+0xf8>)
 800264a:	f005 fb09 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002654:	f7ff fbc2 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2204      	movs	r2, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <MX_TIM3_Init+0xf8>)
 8002660:	f005 fafe 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800266a:	f7ff fbb7 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800266e:	4803      	ldr	r0, [pc, #12]	; (800267c <MX_TIM3_Init+0xf8>)
 8002670:	f000 f97a 	bl	8002968 <HAL_TIM_MspPostInit>

}
 8002674:	bf00      	nop
 8002676:	3738      	adds	r7, #56	; 0x38
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000470 	.word	0x20000470
 8002680:	40000400 	.word	0x40000400

08002684 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_TIM5_Init+0x94>)
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <MX_TIM5_Init+0x98>)
 80026a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <MX_TIM5_Init+0x94>)
 80026a8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80026ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_TIM5_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <MX_TIM5_Init+0x94>)
 80026b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <MX_TIM5_Init+0x94>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <MX_TIM5_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <MX_TIM5_Init+0x94>)
 80026ca:	f004 ffe0 	bl	800768e <HAL_TIM_Base_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026d4:	f7ff fb82 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MX_TIM5_Init+0x94>)
 80026e6:	f005 fb7d 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026f0:	f7ff fb74 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026f4:	2320      	movs	r3, #32
 80026f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_TIM5_Init+0x94>)
 8002702:	f005 ff6f 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800270c:	f7ff fb66 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000428 	.word	0x20000428
 800271c:	40000c00 	.word	0x40000c00

08002720 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002726:	463b      	mov	r3, r7
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <MX_TIM6_Init+0x64>)
 8002730:	4a15      	ldr	r2, [pc, #84]	; (8002788 <MX_TIM6_Init+0x68>)
 8002732:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <MX_TIM6_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <MX_TIM6_Init+0x64>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <MX_TIM6_Init+0x64>)
 8002742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002746:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_TIM6_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_TIM6_Init+0x64>)
 8002750:	f004 ff9d 	bl	800768e <HAL_TIM_Base_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800275a:	f7ff fb3f 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800275e:	2320      	movs	r3, #32
 8002760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002766:	463b      	mov	r3, r7
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_TIM6_Init+0x64>)
 800276c:	f005 ff3a 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002776:	f7ff fb31 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200004b8 	.word	0x200004b8
 8002788:	40001000 	.word	0x40001000

0800278c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	463b      	mov	r3, r7
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <MX_TIM9_Init+0x70>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8000-1;
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027a6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80027aa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027b8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80027c6:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027c8:	f004 ff61 	bl	800768e <HAL_TIM_Base_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80027d2:	f7ff fb03 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027da:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_TIM9_Init+0x6c>)
 80027e2:	f005 faff 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80027ec:	f7ff faf6 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000548 	.word	0x20000548
 80027fc:	40014000 	.word	0x40014000

08002800 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <HAL_TIM_Base_MspInit+0x150>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d116      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2018      	movs	r0, #24
 8002834:	f000 fb1d 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002838:	2018      	movs	r0, #24
 800283a:	f000 fb36 	bl	8002eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800283e:	e082      	b.n	8002946 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d116      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a40      	ldr	r2, [pc, #256]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201c      	movs	r0, #28
 800286c:	f000 fb01 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002870:	201c      	movs	r0, #28
 8002872:	f000 fb1a 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 8002876:	e066      	b.n	8002946 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a36      	ldr	r2, [pc, #216]	; (8002958 <HAL_TIM_Base_MspInit+0x158>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d116      	bne.n	80028b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	201d      	movs	r0, #29
 80028a4:	f000 fae5 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a8:	201d      	movs	r0, #29
 80028aa:	f000 fafe 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 80028ae:	e04a      	b.n	8002946 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a29      	ldr	r2, [pc, #164]	; (800295c <HAL_TIM_Base_MspInit+0x15c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d116      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2032      	movs	r0, #50	; 0x32
 80028dc:	f000 fac9 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028e0:	2032      	movs	r0, #50	; 0x32
 80028e2:	f000 fae2 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 80028e6:	e02e      	b.n	8002946 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_TIM_Base_MspInit+0x160>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 80028fc:	f043 0310 	orr.w	r3, r3, #16
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
}
 800290e:	e01a      	b.n	8002946 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_TIM_Base_MspInit+0x164>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d115      	bne.n	8002946 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_TIM_Base_MspInit+0x154>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2018      	movs	r0, #24
 800293c:	f000 fa99 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002940:	2018      	movs	r0, #24
 8002942:	f000 fab2 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40023800 	.word	0x40023800
 8002958:	40000400 	.word	0x40000400
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40001000 	.word	0x40001000
 8002964:	40014000 	.word	0x40014000

08002968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <HAL_TIM_MspPostInit+0xb0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d11f      	bne.n	80029ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin|PWM2_Pin;
 80029a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4817      	ldr	r0, [pc, #92]	; (8002a20 <HAL_TIM_MspPostInit+0xb8>)
 80029c4:	f000 fe86 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029c8:	e022      	b.n	8002a10 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_TIM_MspPostInit+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d11d      	bne.n	8002a10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6313      	str	r3, [r2, #48]	; 0x30
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_TIM_MspPostInit+0xb4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 80029f0:	23c0      	movs	r3, #192	; 0xc0
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a00:	2302      	movs	r3, #2
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <HAL_TIM_MspPostInit+0xb8>)
 8002a0c:	f000 fe62 	bl	80036d4 <HAL_GPIO_Init>
}
 8002a10:	bf00      	nop
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40000400 	.word	0x40000400

08002a28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <MX_USART1_UART_Init+0x50>)
 8002a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a4e:	220c      	movs	r2, #12
 8002a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a60:	f005 fea2 	bl	80087a8 <HAL_UART_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a6a:	f7ff f9b7 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200005d8 	.word	0x200005d8
 8002a78:	40011000 	.word	0x40011000

08002a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_UART_MspInit+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d152      	bne.n	8002b44 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002aa8:	f043 0310 	orr.w	r3, r3, #16
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
 8002aae:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_UART_MspInit+0xd4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b04:	2307      	movs	r3, #7
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4811      	ldr	r0, [pc, #68]	; (8002b54 <HAL_UART_MspInit+0xd8>)
 8002b10:	f000 fde0 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b24:	2307      	movs	r3, #7
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480a      	ldr	r0, [pc, #40]	; (8002b58 <HAL_UART_MspInit+0xdc>)
 8002b30:	f000 fdd0 	bl	80036d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	2025      	movs	r0, #37	; 0x25
 8002b3a:	f000 f99a 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b3e:	2025      	movs	r0, #37	; 0x25
 8002b40:	f000 f9b3 	bl	8002eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400

08002b5c <wave_player_init>:
#include "main.h"

struct wave_player_s wave_player;

void wave_player_init(TIM_HandleTypeDef *_htim, DAC_HandleTypeDef *_hdac)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	wave_player.htim = _htim;
 8002b66:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <wave_player_init+0x24>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6013      	str	r3, [r2, #0]
	wave_player.hdac = _hdac;
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <wave_player_init+0x24>)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6053      	str	r3, [r2, #4]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000061c 	.word	0x2000061c

08002b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b88:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8a:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba0:	4c0b      	ldr	r4, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bae:	f7ff fac3 	bl	8002138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f006 fdc7 	bl	8009744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb6:	f7ff f821 	bl	8001bfc <main>
  bx  lr    
 8002bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bc8:	0800c5d4 	.word	0x0800c5d4
  ldr r2, =_sbss
 8002bcc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bd0:	20000a6c 	.word	0x20000a6c

08002bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC_IRQHandler>
	...

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_Init+0x40>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_Init+0x40>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_Init+0x40>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f000 f92b 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f000 f808 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0c:	f7ff f928 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_InitTick+0x54>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_InitTick+0x58>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f943 	bl	8002ec6 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00e      	b.n	8002c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d80a      	bhi.n	8002c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f000 f90b 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c5c:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <HAL_InitTick+0x5c>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000004 	.word	0x20000004
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	20000008 	.word	0x20000008

08002c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	20000a58 	.word	0x20000a58

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000a58 	.word	0x20000a58

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff29 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e84:	f7ff ff3e 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7ff ff8e 	bl	8002db0 <NVIC_EncodePriority>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff5d 	bl	8002d5c <__NVIC_SetPriority>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff31 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffa2 	bl	8002e18 <SysTick_Config>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e014      	b.n	8002f1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	791b      	ldrb	r3, [r3, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe f9c3 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b087      	sub	sp, #28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	795b      	ldrb	r3, [r3, #5]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_DAC_ConfigChannel+0x18>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e03c      	b.n	8002fb4 <HAL_DAC_ConfigChannel+0x92>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2202      	movs	r2, #2
 8002f44:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	22c0      	movs	r2, #192	; 0xc0
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fe6a 	bl	8002ca4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e099      	b.n	8003110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffc:	e00f      	b.n	800301e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffe:	f7ff fe51 	bl	8002ca4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b05      	cmp	r3, #5
 800300a:	d908      	bls.n	800301e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e078      	b.n	8003110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e8      	bne.n	8002ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_DMA_Init+0x158>)
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d117      	bne.n	80030e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa89 	bl	80035dc <DMA_CheckFifoParam>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030de:	2301      	movs	r3, #1
 80030e0:	e016      	b.n	8003110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa40 	bl	8003570 <DMA_CalcBaseAndBitshift>
 80030f0:	4603      	mov	r3, r0
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	f010803f 	.word	0xf010803f

0800311c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7ff fdbb 	bl	8002ca4 <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e052      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_Abort+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	e013      	b.n	80031c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a0:	f7ff fd80 	bl	8002ca4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d90c      	bls.n	80031c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e015      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00c      	b.n	8003234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_DMA_IRQHandler+0x258>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a92      	ldr	r2, [pc, #584]	; (800349c <HAL_DMA_IRQHandler+0x25c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2208      	movs	r2, #8
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2204      	movs	r2, #4
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2204      	movs	r2, #4
 8003306:	409a      	lsls	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d043      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2210      	movs	r2, #16
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e01f      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e016      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2220      	movs	r2, #32
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 808e 	beq.w	80034de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8086 	beq.w	80034de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d136      	bne.n	8003458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0216 	bic.w	r2, r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_DMA_IRQHandler+0x1da>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	223f      	movs	r2, #63	; 0x3f
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d07d      	beq.n	800354a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
        }
        return;
 8003456:	e078      	b.n	800354a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01c      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	2b00      	cmp	r3, #0
 800347a:	d030      	beq.n	80034de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e02b      	b.n	80034de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d027      	beq.n	80034de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e022      	b.n	80034de <HAL_DMA_IRQHandler+0x29e>
 8003498:	20000004 	.word	0x20000004
 800349c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0210 	bic.w	r2, r2, #16
 80034bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d032      	beq.n	800354c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2205      	movs	r2, #5
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	429a      	cmp	r2, r3
 8003514:	d307      	bcc.n	8003526 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f2      	bne.n	800350a <HAL_DMA_IRQHandler+0x2ca>
 8003524:	e000      	b.n	8003528 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003526:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e000      	b.n	800354c <HAL_DMA_IRQHandler+0x30c>
        return;
 800354a:	bf00      	nop
    }
  }
}
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop

08003554 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b10      	subs	r3, #16
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <DMA_CalcBaseAndBitshift+0x68>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d909      	bls.n	80035b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58
 80035b0:	e007      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	0800c1d8 	.word	0x0800c1d8

080035dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0x5a>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d856      	bhi.n	80036aa <DMA_CheckFifoParam+0xce>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <DMA_CheckFifoParam+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003615 	.word	0x08003615
 8003610:	080036ab 	.word	0x080036ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e043      	b.n	80036ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362e:	d140      	bne.n	80036b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e03d      	b.n	80036b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363e:	d121      	bne.n	8003684 <DMA_CheckFifoParam+0xa8>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d837      	bhi.n	80036b6 <DMA_CheckFifoParam+0xda>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x70>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003663 	.word	0x08003663
 8003654:	0800365d 	.word	0x0800365d
 8003658:	08003675 	.word	0x08003675
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e030      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e022      	b.n	80036ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003682:	e01c      	b.n	80036be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d903      	bls.n	8003692 <DMA_CheckFifoParam+0xb6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003690:	e018      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e015      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e00b      	b.n	80036c2 <DMA_CheckFifoParam+0xe6>
      break;
 80036aa:	bf00      	nop
 80036ac:	e00a      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e008      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
    }
  } 
  
  return status; 
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e165      	b.n	80039bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	f040 8154 	bne.w	80039b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	2b02      	cmp	r3, #2
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ae 	beq.w	80039b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_GPIO_Init+0x300>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_GPIO_Init+0x300>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <HAL_GPIO_Init+0x308>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x21a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4e      	ldr	r2, [pc, #312]	; (80039e0 <HAL_GPIO_Init+0x30c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x216>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <HAL_GPIO_Init+0x310>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x212>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4c      	ldr	r2, [pc, #304]	; (80039e8 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x20e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x20a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x206>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <HAL_GPIO_Init+0x320>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x202>
 80038d2:	2306      	movs	r3, #6
 80038d4:	e00c      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e00a      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038da:	2305      	movs	r3, #5
 80038dc:	e008      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038de:	2304      	movs	r3, #4
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e004      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e002      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038ee:	2300      	movs	r3, #0
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f002 0203 	and.w	r2, r2, #3
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	4093      	lsls	r3, r2
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003900:	4935      	ldr	r1, [pc, #212]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800390e:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003932:	4a31      	ldr	r2, [pc, #196]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <HAL_GPIO_Init+0x324>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <HAL_GPIO_Init+0x324>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003962:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_GPIO_Init+0x324>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b0:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <HAL_GPIO_Init+0x324>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	f67f ae96 	bls.w	80036f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fdc6 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f002 fd74 	bl	8006580 <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	817b      	strh	r3, [r7, #10]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fe ffea 	bl	8002ca4 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	f040 80e0 	bne.w	8003ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2319      	movs	r3, #25
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4970      	ldr	r1, [pc, #448]	; (8003eac <HAL_I2C_Master_Transmit+0x1f4>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f002 f8dc 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0d3      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x50>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0cc      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d007      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	893a      	ldrh	r2, [r7, #8]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f001 fe9e 	bl	8005ab8 <I2C_MasterRequestWrite>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08d      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d9c:	e066      	b.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f002 f956 	bl	8006054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f002 f946 	bl	80060d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e01a      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d194      	bne.n	8003d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	00100002 	.word	0x00100002
 8003eb0:	ffff0000 	.word	0xffff0000

08003eb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	817b      	strh	r3, [r7, #10]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7fe feec 	bl	8002ca4 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	f040 820b 	bne.w	80042f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2319      	movs	r3, #25
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	497c      	ldr	r1, [pc, #496]	; (80040d8 <HAL_I2C_Master_Receive+0x224>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f001 ffde 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e1fe      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_I2C_Master_Receive+0x50>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e1f7      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d007      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2222      	movs	r2, #34	; 0x22
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2210      	movs	r2, #16
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a5c      	ldr	r2, [pc, #368]	; (80040dc <HAL_I2C_Master_Receive+0x228>)
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f6c:	8979      	ldrh	r1, [r7, #10]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f001 fe22 	bl	8005bbc <I2C_MasterRequestRead>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1b8      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e18c      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e16c      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d11b      	bne.n	8004032 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	e14c      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004058:	e138      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	2b03      	cmp	r3, #3
 8004060:	f200 80f1 	bhi.w	8004246 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b01      	cmp	r3, #1
 800406a:	d123      	bne.n	80040b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f002 f8a3 	bl	80061bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e139      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b2:	e10b      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d14e      	bne.n	800415a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	2200      	movs	r2, #0
 80040c4:	4906      	ldr	r1, [pc, #24]	; (80040e0 <HAL_I2C_Master_Receive+0x22c>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f001 feee 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e10e      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
 80040d6:	bf00      	nop
 80040d8:	00100002 	.word	0x00100002
 80040dc:	ffff0000 	.word	0xffff0000
 80040e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004158:	e0b8      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2200      	movs	r2, #0
 8004162:	4966      	ldr	r1, [pc, #408]	; (80042fc <HAL_I2C_Master_Receive+0x448>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f001 fe9f 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0bf      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	2200      	movs	r2, #0
 80041be:	494f      	ldr	r1, [pc, #316]	; (80042fc <HAL_I2C_Master_Receive+0x448>)
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f001 fe71 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e091      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004244:	e042      	b.n	80042cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f001 ffb6 	bl	80061bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e04c      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d118      	bne.n	80042cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f aec2 	bne.w	800405a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	00010004 	.word	0x00010004

08004300 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004320:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d003      	beq.n	8004338 <HAL_I2C_EV_IRQHandler+0x38>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	f040 80c1 	bne.w	80044ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <HAL_I2C_EV_IRQHandler+0x6e>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004358:	d003      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x62>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004360:	d101      	bne.n	8004366 <HAL_I2C_EV_IRQHandler+0x66>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_I2C_EV_IRQHandler+0x68>
 8004366:	2300      	movs	r3, #0
 8004368:	2b01      	cmp	r3, #1
 800436a:	f000 8132 	beq.w	80045d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x92>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 ff9e 	bl	80062c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fd79 	bl	8004e82 <I2C_Master_SB>
 8004390:	e092      	b.n	80044b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fdef 	bl	8004f8e <I2C_Master_ADD10>
 80043b0:	e082      	b.n	80044b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fe09 	bl	8004fe2 <I2C_Master_ADDR>
 80043d0:	e072      	b.n	80044b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03b      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ec:	f000 80f3 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00f      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	0a9b      	lsrs	r3, r3, #10
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f9f3 	bl	8004800 <I2C_MasterTransmit_TXE>
 800441a:	e04d      	b.n	80044b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80d6 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	0a5b      	lsrs	r3, r3, #9
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80cf 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	2b21      	cmp	r3, #33	; 0x21
 800443c:	d103      	bne.n	8004446 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa7a 	bl	8004938 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004444:	e0c7      	b.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	f040 80c4 	bne.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fae8 	bl	8004a24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004454:	e0bf      	b.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	f000 80b7 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x194>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	0a9b      	lsrs	r3, r3, #10
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x194>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb5d 	bl	8004b4c <I2C_MasterReceive_RXNE>
 8004492:	e011      	b.n	80044b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 809a 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8093 	beq.w	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fbfc 	bl	8004cae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b6:	e08e      	b.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044b8:	e08d      	b.n	80045d6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	e007      	b.n	80044dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <HAL_I2C_EV_IRQHandler+0x20e>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	0a5b      	lsrs	r3, r3, #9
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 ffba 	bl	8005480 <I2C_Slave_ADDR>
 800450c:	e066      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_I2C_EV_IRQHandler+0x22e>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fff4 	bl	8005514 <I2C_Slave_STOPF>
 800452c:	e056      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b21      	cmp	r3, #33	; 0x21
 8004532:	d002      	beq.n	800453a <HAL_I2C_EV_IRQHandler+0x23a>
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b29      	cmp	r3, #41	; 0x29
 8004538:	d125      	bne.n	8004586 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00f      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x266>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	0a9b      	lsrs	r3, r3, #10
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x266>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fed0 	bl	8005304 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004564:	e039      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d033      	beq.n	80045da <HAL_I2C_EV_IRQHandler+0x2da>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0a5b      	lsrs	r3, r3, #9
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02d      	beq.n	80045da <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fefd 	bl	800537e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004584:	e029      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	099b      	lsrs	r3, r3, #6
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	0a9b      	lsrs	r3, r3, #10
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 ff08 	bl	80053c0 <I2C_SlaveReceive_RXNE>
 80045b0:	e014      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00e      	beq.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	0a5b      	lsrs	r3, r3, #9
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ff36 	bl	800543c <I2C_SlaveReceive_BTF>
 80045d0:	e004      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80045d2:	bf00      	nop
 80045d4:	e002      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b08a      	sub	sp, #40	; 0x28
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004604:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00e      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0x4e>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800462e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	0a5b      	lsrs	r3, r3, #9
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <HAL_I2C_ER_IRQHandler+0x78>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004658:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	0a9b      	lsrs	r3, r3, #10
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03f      	beq.n	80046e6 <HAL_I2C_ER_IRQHandler+0x104>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d039      	beq.n	80046e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004672:	7efb      	ldrb	r3, [r7, #27]
 8004674:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800468c:	7ebb      	ldrb	r3, [r7, #26]
 800468e:	2b20      	cmp	r3, #32
 8004690:	d112      	bne.n	80046b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b21      	cmp	r3, #33	; 0x21
 800469c:	d008      	beq.n	80046b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b29      	cmp	r3, #41	; 0x29
 80046a2:	d005      	beq.n	80046b0 <HAL_I2C_ER_IRQHandler+0xce>
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b28      	cmp	r3, #40	; 0x28
 80046a8:	d106      	bne.n	80046b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b21      	cmp	r3, #33	; 0x21
 80046ae:	d103      	bne.n	80046b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 f85f 	bl	8005774 <I2C_Slave_AF>
 80046b6:	e016      	b.n	80046e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046ca:	7efb      	ldrb	r3, [r7, #27]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d002      	beq.n	80046d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80046d0:	7efb      	ldrb	r3, [r7, #27]
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	0adb      	lsrs	r3, r3, #11
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <HAL_I2C_ER_IRQHandler+0x12e>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	f043 0308 	orr.w	r3, r3, #8
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800470e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f001 f896 	bl	8005854 <I2C_ITError>
  }
}
 8004728:	bf00      	nop
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
 800478c:	4613      	mov	r3, r2
 800478e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004816:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d150      	bne.n	80048c8 <I2C_MasterTransmit_TXE+0xc8>
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b21      	cmp	r3, #33	; 0x21
 800482a:	d14d      	bne.n	80048c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d01d      	beq.n	800486e <I2C_MasterTransmit_TXE+0x6e>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b20      	cmp	r3, #32
 8004836:	d01a      	beq.n	800486e <I2C_MasterTransmit_TXE+0x6e>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483e:	d016      	beq.n	800486e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2211      	movs	r2, #17
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff62 	bl	8004730 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800486c:	e060      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800487c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d107      	bne.n	80048b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff7d 	bl	80047b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048b6:	e03b      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff35 	bl	8004730 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048c6:	e033      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b21      	cmp	r3, #33	; 0x21
 80048cc:	d005      	beq.n	80048da <I2C_MasterTransmit_TXE+0xda>
 80048ce:	7bbb      	ldrb	r3, [r7, #14]
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d12d      	bne.n	8004930 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b22      	cmp	r3, #34	; 0x22
 80048d8:	d12a      	bne.n	8004930 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80048f4:	e01c      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d103      	bne.n	800490a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f88e 	bl	8004a24 <I2C_MemoryTransmit_TXE_BTF>
}
 8004908:	e012      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800492e:	e7ff      	b.n	8004930 <I2C_MasterTransmit_TXE+0x130>
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b21      	cmp	r3, #33	; 0x21
 8004950:	d164      	bne.n	8004a1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004980:	e04c      	b.n	8004a1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d01d      	beq.n	80049c4 <I2C_MasterTransmit_BTF+0x8c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b20      	cmp	r3, #32
 800498c:	d01a      	beq.n	80049c4 <I2C_MasterTransmit_BTF+0x8c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004994:	d016      	beq.n	80049c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2211      	movs	r2, #17
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff feb7 	bl	8004730 <HAL_I2C_MasterTxCpltCallback>
}
 80049c2:	e02b      	b.n	8004a1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d107      	bne.n	8004a0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fed2 	bl	80047b0 <HAL_I2C_MemTxCpltCallback>
}
 8004a0c:	e006      	b.n	8004a1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff fe8a 	bl	8004730 <HAL_I2C_MasterTxCpltCallback>
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11d      	bne.n	8004a78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10b      	bne.n	8004a5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a5a:	e073      	b.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	121b      	asrs	r3, r3, #8
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a76:	e065      	b.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d10b      	bne.n	8004a98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a96:	e055      	b.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d151      	bne.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b22      	cmp	r3, #34	; 0x22
 8004aa4:	d10d      	bne.n	8004ac2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ac0:	e040      	b.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d112      	bne.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	781a      	ldrb	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004af6:	e025      	b.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d120      	bne.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b21      	cmp	r3, #33	; 0x21
 8004b06:	d11d      	bne.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe36 	bl	80047b0 <HAL_I2C_MemTxCpltCallback>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b22      	cmp	r3, #34	; 0x22
 8004b5e:	f040 80a2 	bne.w	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d921      	bls.n	8004bb4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	f040 8082 	bne.w	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bb2:	e078      	b.n	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d074      	beq.n	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d002      	beq.n	8004bc8 <I2C_MasterReceive_RXNE+0x7c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d16e      	bne.n	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fac5 	bl	8006158 <I2C_WaitOnSTOPRequestThroughIT>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d142      	bne.n	8004c5a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d10a      	bne.n	8004c44 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fdc1 	bl	80047c4 <HAL_I2C_MemRxCpltCallback>
}
 8004c42:	e030      	b.n	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2212      	movs	r2, #18
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fd76 	bl	8004744 <HAL_I2C_MasterRxCpltCallback>
}
 8004c58:	e025      	b.n	8004ca6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fd99 	bl	80047d8 <HAL_I2C_ErrorCallback>
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d11b      	bne.n	8004cfe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cfc:	e0bd      	b.n	8004e7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d129      	bne.n	8004d5c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d00a      	beq.n	8004d34 <I2C_MasterReceive_BTF+0x86>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d007      	beq.n	8004d34 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d5a:	e08e      	b.n	8004e7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d176      	bne.n	8004e54 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d002      	beq.n	8004d72 <I2C_MasterReceive_BTF+0xc4>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d108      	bne.n	8004d84 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e019      	b.n	8004db8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d002      	beq.n	8004d90 <I2C_MasterReceive_BTF+0xe2>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d108      	bne.n	8004da2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e00a      	b.n	8004db8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d007      	beq.n	8004db8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e12:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d10a      	bne.n	8004e3e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fcc4 	bl	80047c4 <HAL_I2C_MemRxCpltCallback>
}
 8004e3c:	e01d      	b.n	8004e7a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2212      	movs	r2, #18
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fc79 	bl	8004744 <HAL_I2C_MasterRxCpltCallback>
}
 8004e52:	e012      	b.n	8004e7a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d117      	bne.n	8004ec6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004eb0:	e067      	b.n	8004f82 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
}
 8004ec4:	e05d      	b.n	8004f82 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ece:	d133      	bne.n	8004f38 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b21      	cmp	r3, #33	; 0x21
 8004eda:	d109      	bne.n	8004ef0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eec:	611a      	str	r2, [r3, #16]
 8004eee:	e008      	b.n	8004f02 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <I2C_Master_SB+0x92>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d108      	bne.n	8004f26 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d032      	beq.n	8004f82 <I2C_Master_SB+0x100>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d02d      	beq.n	8004f82 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	605a      	str	r2, [r3, #4]
}
 8004f36:	e024      	b.n	8004f82 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10e      	bne.n	8004f5e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	11db      	asrs	r3, r3, #7
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 0306 	and.w	r3, r3, #6
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f063 030f 	orn	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]
}
 8004f5c:	e011      	b.n	8004f82 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d10d      	bne.n	8004f82 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	11db      	asrs	r3, r3, #7
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f003 0306 	and.w	r3, r3, #6
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f063 030e 	orn	r3, r3, #14
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d004      	beq.n	8004fb4 <I2C_Master_ADD10+0x26>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d108      	bne.n	8004fc6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <I2C_Master_ADD10+0x48>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd4:	605a      	str	r2, [r3, #4]
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b091      	sub	sp, #68	; 0x44
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b22      	cmp	r3, #34	; 0x22
 800500a:	f040 8169 	bne.w	80052e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <I2C_Master_ADDR+0x54>
 8005016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d10b      	bne.n	8005036 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	633b      	str	r3, [r7, #48]	; 0x30
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	e160      	b.n	80052f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11d      	bne.n	800507a <I2C_Master_ADDR+0x98>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005046:	d118      	bne.n	800507a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	651a      	str	r2, [r3, #80]	; 0x50
 8005078:	e13e      	b.n	80052f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d113      	bne.n	80050ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e115      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	f040 808a 	bne.w	80051cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050be:	d137      	bne.n	8005130 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d113      	bne.n	8005108 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	e0e7      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005108:	2300      	movs	r3, #0
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	623b      	str	r3, [r7, #32]
 800511c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e0d3      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	2b08      	cmp	r3, #8
 8005134:	d02e      	beq.n	8005194 <I2C_Master_ADDR+0x1b2>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b20      	cmp	r3, #32
 800513a:	d02b      	beq.n	8005194 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	2b12      	cmp	r3, #18
 8005140:	d102      	bne.n	8005148 <I2C_Master_ADDR+0x166>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b01      	cmp	r3, #1
 8005146:	d125      	bne.n	8005194 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	2b04      	cmp	r3, #4
 800514c:	d00e      	beq.n	800516c <I2C_Master_ADDR+0x18a>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b02      	cmp	r3, #2
 8005152:	d00b      	beq.n	800516c <I2C_Master_ADDR+0x18a>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b10      	cmp	r3, #16
 8005158:	d008      	beq.n	800516c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e007      	b.n	800517c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800517a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	e0a1      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e085      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d14d      	bne.n	8005272 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d016      	beq.n	800520a <I2C_Master_ADDR+0x228>
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d013      	beq.n	800520a <I2C_Master_ADDR+0x228>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d010      	beq.n	800520a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e007      	b.n	800521a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005218:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d117      	bne.n	800525a <I2C_Master_ADDR+0x278>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005230:	d00b      	beq.n	800524a <I2C_Master_ADDR+0x268>
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2b01      	cmp	r3, #1
 8005236:	d008      	beq.n	800524a <I2C_Master_ADDR+0x268>
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b08      	cmp	r3, #8
 800523c:	d005      	beq.n	800524a <I2C_Master_ADDR+0x268>
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b10      	cmp	r3, #16
 8005242:	d002      	beq.n	800524a <I2C_Master_ADDR+0x268>
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	2b20      	cmp	r3, #32
 8005248:	d107      	bne.n	800525a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005258:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	e032      	b.n	80052d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005290:	d117      	bne.n	80052c2 <I2C_Master_ADDR+0x2e0>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005298:	d00b      	beq.n	80052b2 <I2C_Master_ADDR+0x2d0>
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b01      	cmp	r3, #1
 800529e:	d008      	beq.n	80052b2 <I2C_Master_ADDR+0x2d0>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d005      	beq.n	80052b2 <I2C_Master_ADDR+0x2d0>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d002      	beq.n	80052b2 <I2C_Master_ADDR+0x2d0>
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d107      	bne.n	80052c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052de:	e00b      	b.n	80052f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	e7ff      	b.n	80052f8 <I2C_Master_ADDR+0x316>
 80052f8:	bf00      	nop
 80052fa:	3744      	adds	r7, #68	; 0x44
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02b      	beq.n	8005376 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d114      	bne.n	8005376 <I2C_SlaveTransmit_TXE+0x72>
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b29      	cmp	r3, #41	; 0x29
 8005350:	d111      	bne.n	8005376 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2228      	movs	r2, #40	; 0x28
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff f9f1 	bl	8004758 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d011      	beq.n	80053b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02c      	beq.n	8005434 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d114      	bne.n	8005434 <I2C_SlaveReceive_RXNE+0x74>
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b2a      	cmp	r3, #42	; 0x2a
 800540e:	d111      	bne.n	8005434 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2222      	movs	r2, #34	; 0x22
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2228      	movs	r2, #40	; 0x28
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff f99c 	bl	800476c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d012      	beq.n	8005474 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800549a:	2b28      	cmp	r3, #40	; 0x28
 800549c:	d127      	bne.n	80054ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	09db      	lsrs	r3, r3, #7
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	81bb      	strh	r3, [r7, #12]
 80054d0:	e002      	b.n	80054d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054e0:	89ba      	ldrh	r2, [r7, #12]
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff f94a 	bl	8004780 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054ec:	e00e      	b.n	800550c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005532:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005560:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005570:	d172      	bne.n	8005658 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b22      	cmp	r3, #34	; 0x22
 8005576:	d002      	beq.n	800557e <I2C_Slave_STOPF+0x6a>
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b2a      	cmp	r3, #42	; 0x2a
 800557c:	d135      	bne.n	80055ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0204 	orr.w	r2, r3, #4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd ffcc 	bl	8003554 <HAL_DMA_GetState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d049      	beq.n	8005656 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a69      	ldr	r2, [pc, #420]	; (800576c <I2C_Slave_STOPF+0x258>)
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fe14 	bl	80031fc <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d03d      	beq.n	8005656 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055e8:	e035      	b.n	8005656 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800561c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd ff96 	bl	8003554 <HAL_DMA_GetState>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d014      	beq.n	8005658 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	4a4e      	ldr	r2, [pc, #312]	; (800576c <I2C_Slave_STOPF+0x258>)
 8005634:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd fdde 	bl	80031fc <HAL_DMA_Abort_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	e000      	b.n	8005658 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005656:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03e      	beq.n	80056e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d112      	bne.n	8005696 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d112      	bne.n	80056ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8b3 	bl	8005854 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056ee:	e039      	b.n	8005764 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b2a      	cmp	r3, #42	; 0x2a
 80056f4:	d109      	bne.n	800570a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2228      	movs	r2, #40	; 0x28
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff f831 	bl	800476c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b28      	cmp	r3, #40	; 0x28
 8005714:	d111      	bne.n	800573a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <I2C_Slave_STOPF+0x25c>)
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff f832 	bl	800479c <HAL_I2C_ListenCpltCallback>
}
 8005738:	e014      	b.n	8005764 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	2b22      	cmp	r3, #34	; 0x22
 8005740:	d002      	beq.n	8005748 <I2C_Slave_STOPF+0x234>
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	2b22      	cmp	r3, #34	; 0x22
 8005746:	d10d      	bne.n	8005764 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff f804 	bl	800476c <HAL_I2C_SlaveRxCpltCallback>
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	08005d59 	.word	0x08005d59
 8005770:	ffff0000 	.word	0xffff0000

08005774 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d002      	beq.n	8005796 <I2C_Slave_AF+0x22>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b20      	cmp	r3, #32
 8005794:	d129      	bne.n	80057ea <I2C_Slave_AF+0x76>
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b28      	cmp	r3, #40	; 0x28
 800579a:	d126      	bne.n	80057ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <I2C_Slave_AF+0xdc>)
 80057a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fe ffda 	bl	800479c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057e8:	e02e      	b.n	8005848 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b21      	cmp	r3, #33	; 0x21
 80057ee:	d126      	bne.n	800583e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <I2C_Slave_AF+0xdc>)
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2221      	movs	r2, #33	; 0x21
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800581a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005824:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005834:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fe ff8e 	bl	8004758 <HAL_I2C_SlaveTxCpltCallback>
}
 800583c:	e004      	b.n	8005848 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005846:	615a      	str	r2, [r3, #20]
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	ffff0000 	.word	0xffff0000

08005854 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b10      	cmp	r3, #16
 8005870:	d002      	beq.n	8005878 <I2C_ITError+0x24>
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d10a      	bne.n	800588e <I2C_ITError+0x3a>
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b22      	cmp	r3, #34	; 0x22
 800587c:	d107      	bne.n	800588e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005894:	2b28      	cmp	r3, #40	; 0x28
 8005896:	d107      	bne.n	80058a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2228      	movs	r2, #40	; 0x28
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058a6:	e015      	b.n	80058d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b6:	d00a      	beq.n	80058ce <I2C_ITError+0x7a>
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b60      	cmp	r3, #96	; 0x60
 80058bc:	d007      	beq.n	80058ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e2:	d162      	bne.n	80059aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d020      	beq.n	8005944 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	4a6a      	ldr	r2, [pc, #424]	; (8005ab0 <I2C_ITError+0x25c>)
 8005908:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590e:	4618      	mov	r0, r3
 8005910:	f7fd fc74 	bl	80031fc <HAL_DMA_Abort_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8089 	beq.w	8005a2e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800593e:	4610      	mov	r0, r2
 8005940:	4798      	blx	r3
 8005942:	e074      	b.n	8005a2e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	4a59      	ldr	r2, [pc, #356]	; (8005ab0 <I2C_ITError+0x25c>)
 800594a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	4618      	mov	r0, r3
 8005952:	f7fd fc53 	bl	80031fc <HAL_DMA_Abort_IT>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d068      	beq.n	8005a2e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d10b      	bne.n	8005982 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a4:	4610      	mov	r0, r2
 80059a6:	4798      	blx	r3
 80059a8:	e041      	b.n	8005a2e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b60      	cmp	r3, #96	; 0x60
 80059b4:	d125      	bne.n	8005a02 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d10b      	bne.n	80059ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fe fef6 	bl	80047ec <HAL_I2C_AbortCpltCallback>
 8005a00:	e015      	b.n	8005a2e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d10b      	bne.n	8005a28 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fe fed5 	bl	80047d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d113      	bne.n	8005aa8 <I2C_ITError+0x254>
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b28      	cmp	r3, #40	; 0x28
 8005a84:	d110      	bne.n	8005aa8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <I2C_ITError+0x260>)
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fe fe7a 	bl	800479c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08005d59 	.word	0x08005d59
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d006      	beq.n	8005ae2 <I2C_MasterRequestWrite+0x2a>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d003      	beq.n	8005ae2 <I2C_MasterRequestWrite+0x2a>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae0:	d108      	bne.n	8005af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00b      	b.n	8005b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	2b12      	cmp	r3, #18
 8005afa:	d107      	bne.n	8005b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f9c5 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b32:	d103      	bne.n	8005b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e035      	b.n	8005bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b48:	d108      	bne.n	8005b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b4a:	897b      	ldrh	r3, [r7, #10]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b58:	611a      	str	r2, [r3, #16]
 8005b5a:	e01b      	b.n	8005b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b5c:	897b      	ldrh	r3, [r7, #10]
 8005b5e:	11db      	asrs	r3, r3, #7
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0306 	and.w	r3, r3, #6
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f063 030f 	orn	r3, r3, #15
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <I2C_MasterRequestWrite+0xfc>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f9eb 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e010      	b.n	8005bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4907      	ldr	r1, [pc, #28]	; (8005bb8 <I2C_MasterRequestWrite+0x100>)
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f9db 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	00010008 	.word	0x00010008
 8005bb8:	00010002 	.word	0x00010002

08005bbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005be0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d006      	beq.n	8005bf6 <I2C_MasterRequestRead+0x3a>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d003      	beq.n	8005bf6 <I2C_MasterRequestRead+0x3a>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf4:	d108      	bne.n	8005c08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e00b      	b.n	8005c20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	2b11      	cmp	r3, #17
 8005c0e:	d107      	bne.n	8005c20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f93b 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d103      	bne.n	8005c50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e079      	b.n	8005d48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5c:	d108      	bne.n	8005c70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]
 8005c6e:	e05f      	b.n	8005d30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c70:	897b      	ldrh	r3, [r7, #10]
 8005c72:	11db      	asrs	r3, r3, #7
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 0306 	and.w	r3, r3, #6
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f063 030f 	orn	r3, r3, #15
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4930      	ldr	r1, [pc, #192]	; (8005d50 <I2C_MasterRequestRead+0x194>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f961 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e054      	b.n	8005d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4929      	ldr	r1, [pc, #164]	; (8005d54 <I2C_MasterRequestRead+0x198>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f951 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e044      	b.n	8005d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f8d9 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0a:	d103      	bne.n	8005d14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e017      	b.n	8005d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d18:	897b      	ldrh	r3, [r7, #10]
 8005d1a:	11db      	asrs	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0306 	and.w	r3, r3, #6
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f063 030e 	orn	r3, r3, #14
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4907      	ldr	r1, [pc, #28]	; (8005d54 <I2C_MasterRequestRead+0x198>)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f90d 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	00010008 	.word	0x00010008
 8005d54:	00010002 	.word	0x00010002

08005d58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d72:	4b4b      	ldr	r3, [pc, #300]	; (8005ea0 <I2C_DMAAbort+0x148>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	08db      	lsrs	r3, r3, #3
 8005d78:	4a4a      	ldr	r2, [pc, #296]	; (8005ea4 <I2C_DMAAbort+0x14c>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0a1a      	lsrs	r2, r3, #8
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00da      	lsls	r2, r3, #3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d9e:	e00a      	b.n	8005db6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db4:	d0ea      	beq.n	8005d8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2200      	movs	r2, #0
 8005dea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	2200      	movs	r2, #0
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	2200      	movs	r2, #0
 8005e0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d10e      	bne.n	8005e46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7fe fcd4 	bl	80047ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e44:	e027      	b.n	8005e96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e4c:	2b28      	cmp	r3, #40	; 0x28
 8005e4e:	d117      	bne.n	8005e80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2228      	movs	r2, #40	; 0x28
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e7e:	e007      	b.n	8005e90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f7fe fca1 	bl	80047d8 <HAL_I2C_ErrorCallback>
}
 8005e96:	bf00      	nop
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000004 	.word	0x20000004
 8005ea4:	14f8b589 	.word	0x14f8b589

08005ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb8:	e025      	b.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d021      	beq.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fc feef 	bl	8002ca4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f043 0220 	orr.w	r2, r3, #32
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e023      	b.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10d      	bne.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	e00c      	b.n	8005f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d0b6      	beq.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f64:	e051      	b.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d123      	bne.n	8005fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e046      	b.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d021      	beq.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fc fe6d 	bl	8002ca4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d116      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e020      	b.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10c      	bne.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	43da      	mvns	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	e00b      	b.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	43da      	mvns	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d18d      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006060:	e02d      	b.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f900 	bl	8006268 <I2C_IsAcknowledgeFailed>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e02d      	b.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d021      	beq.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607a:	f7fc fe13 	bl	8002ca4 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d116      	bne.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f043 0220 	orr.w	r2, r3, #32
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e007      	b.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d1ca      	bne.n	8006062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060e2:	e02d      	b.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f8bf 	bl	8006268 <I2C_IsAcknowledgeFailed>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02d      	b.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d021      	beq.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fc:	f7fc fdd2 	bl	8002ca4 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d116      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e007      	b.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b04      	cmp	r3, #4
 800614c:	d1ca      	bne.n	80060e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	0a1a      	lsrs	r2, r3, #8
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b01      	subs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d107      	bne.n	8006196 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f043 0220 	orr.w	r2, r3, #32
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e008      	b.n	80061a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a4:	d0e9      	beq.n	800617a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	20000004 	.word	0x20000004
 80061b8:	14f8b589 	.word	0x14f8b589

080061bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c8:	e042      	b.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d119      	bne.n	800620c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e029      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620c:	f7fc fd4a 	bl	8002ca4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d116      	bne.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d1b5      	bne.n	80061ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627e:	d11b      	bne.n	80062b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062d6:	d103      	bne.n	80062e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062de:	e007      	b.n	80062f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062e8:	d102      	bne.n	80062f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2208      	movs	r2, #8
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <HAL_PWREx_EnableOverDrive+0x90>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a1f      	ldr	r2, [pc, #124]	; (800638c <HAL_PWREx_EnableOverDrive+0x90>)
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <HAL_PWREx_EnableOverDrive+0x90>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <HAL_PWREx_EnableOverDrive+0x94>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006328:	f7fc fcbc 	bl	8002ca4 <HAL_GetTick>
 800632c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800632e:	e009      	b.n	8006344 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006330:	f7fc fcb8 	bl	8002ca4 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633e:	d901      	bls.n	8006344 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e01f      	b.n	8006384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_PWREx_EnableOverDrive+0x98>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d1ee      	bne.n	8006330 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006352:	4b11      	ldr	r3, [pc, #68]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006358:	f7fc fca4 	bl	8002ca4 <HAL_GetTick>
 800635c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800635e:	e009      	b.n	8006374 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006360:	f7fc fca0 	bl	8002ca4 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800636e:	d901      	bls.n	8006374 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e007      	b.n	8006384 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_PWREx_EnableOverDrive+0x98>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006380:	d1ee      	bne.n	8006360 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40023800 	.word	0x40023800
 8006390:	420e0040 	.word	0x420e0040
 8006394:	40007000 	.word	0x40007000
 8006398:	420e0044 	.word	0x420e0044

0800639c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0cc      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063b0:	4b68      	ldr	r3, [pc, #416]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d90c      	bls.n	80063d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063be:	4b65      	ldr	r3, [pc, #404]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c6:	4b63      	ldr	r3, [pc, #396]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0b8      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d020      	beq.n	8006426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063f0:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4a58      	ldr	r2, [pc, #352]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006408:	4b53      	ldr	r3, [pc, #332]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a52      	ldr	r2, [pc, #328]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006414:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	494d      	ldr	r1, [pc, #308]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d044      	beq.n	80064bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643a:	4b47      	ldr	r3, [pc, #284]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d119      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e07f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d003      	beq.n	800645a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006456:	2b03      	cmp	r3, #3
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646a:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e067      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800647a:	4b37      	ldr	r3, [pc, #220]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 0203 	bic.w	r2, r3, #3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4934      	ldr	r1, [pc, #208]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	4313      	orrs	r3, r2
 800648a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800648c:	f7fc fc0a 	bl	8002ca4 <HAL_GetTick>
 8006490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	e00a      	b.n	80064aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006494:	f7fc fc06 	bl	8002ca4 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e04f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 020c 	and.w	r2, r3, #12
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d1eb      	bne.n	8006494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d20c      	bcs.n	80064e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ca:	4b22      	ldr	r3, [pc, #136]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	4b20      	ldr	r3, [pc, #128]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e032      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f0:	4b19      	ldr	r3, [pc, #100]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4916      	ldr	r1, [pc, #88]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	490e      	ldr	r1, [pc, #56]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006522:	f000 fb7f 	bl	8006c24 <HAL_RCC_GetSysClockFreq>
 8006526:	4602      	mov	r2, r0
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	490a      	ldr	r1, [pc, #40]	; (800655c <HAL_RCC_ClockConfig+0x1c0>)
 8006534:	5ccb      	ldrb	r3, [r1, r3]
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	4a09      	ldr	r2, [pc, #36]	; (8006560 <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_RCC_ClockConfig+0x1c8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc fb6a 	bl	8002c1c <HAL_InitTick>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40023c00 	.word	0x40023c00
 8006558:	40023800 	.word	0x40023800
 800655c:	0800c1c0 	.word	0x0800c1c0
 8006560:	20000004 	.word	0x20000004
 8006564:	20000008 	.word	0x20000008

08006568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <HAL_RCC_GetHCLKFreq+0x14>)
 800656e:	681b      	ldr	r3, [r3, #0]
}
 8006570:	4618      	mov	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000004 	.word	0x20000004

08006580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006584:	f7ff fff0 	bl	8006568 <HAL_RCC_GetHCLKFreq>
 8006588:	4602      	mov	r2, r0
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0a9b      	lsrs	r3, r3, #10
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	4903      	ldr	r1, [pc, #12]	; (80065a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006596:	5ccb      	ldrb	r3, [r1, r3]
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800659c:	4618      	mov	r0, r3
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40023800 	.word	0x40023800
 80065a4:	0800c1d0 	.word	0x0800c1d0

080065a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065ac:	f7ff ffdc 	bl	8006568 <HAL_RCC_GetHCLKFreq>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	0b5b      	lsrs	r3, r3, #13
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	4903      	ldr	r1, [pc, #12]	; (80065cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40023800 	.word	0x40023800
 80065cc:	0800c1d0 	.word	0x0800c1d0

080065d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	; 0x30
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006608:	4b6f      	ldr	r3, [pc, #444]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800660a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	496c      	ldr	r1, [pc, #432]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006626:	2301      	movs	r3, #1
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006636:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	4960      	ldr	r1, [pc, #384]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006654:	2301      	movs	r3, #1
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	4955      	ldr	r1, [pc, #340]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006682:	d101      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006684:	2301      	movs	r3, #1
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006690:	2301      	movs	r3, #1
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066a0:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	4946      	ldr	r1, [pc, #280]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066be:	d101      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80066c0:	2301      	movs	r3, #1
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80066cc:	2301      	movs	r3, #1
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 808a 	beq.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066fa:	4b34      	ldr	r3, [pc, #208]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a33      	ldr	r2, [pc, #204]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006706:	f7fc facd 	bl	8002ca4 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800670e:	f7fc fac9 	bl	8002ca4 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e278      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672c:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006734:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02f      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	429a      	cmp	r2, r3
 8006748:	d028      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800674a:	4b1f      	ldr	r3, [pc, #124]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006752:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006760:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006766:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d114      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006772:	f7fc fa97 	bl	8002ca4 <HAL_GetTick>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fc fa93 	bl	8002ca4 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e240      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ee      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a8:	d114      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	4902      	ldr	r1, [pc, #8]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
 80067c4:	e00c      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470e40 	.word	0x42470e40
 80067d4:	4b4a      	ldr	r3, [pc, #296]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4a49      	ldr	r2, [pc, #292]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067de:	6093      	str	r3, [r2, #8]
 80067e0:	4b47      	ldr	r3, [pc, #284]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ec:	4944      	ldr	r1, [pc, #272]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006804:	4b3f      	ldr	r3, [pc, #252]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006806:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006814:	4b3a      	ldr	r3, [pc, #232]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	4937      	ldr	r1, [pc, #220]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006836:	4b32      	ldr	r3, [pc, #200]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	492e      	ldr	r1, [pc, #184]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d011      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800685a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	4926      	ldr	r1, [pc, #152]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006876:	d101      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800688a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800688e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	491a      	ldr	r1, [pc, #104]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d011      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b8:	4911      	ldr	r1, [pc, #68]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c8:	d101      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80068ca:	2301      	movs	r3, #1
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d005      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068dc:	f040 80ff 	bne.w	8006ade <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068e6:	f7fc f9dd 	bl	8002ca4 <HAL_GetTick>
 80068ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	e00e      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ee:	f7fc f9d9 	bl	8002ca4 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d907      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e188      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006900:	40023800 	.word	0x40023800
 8006904:	424711e0 	.word	0x424711e0
 8006908:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800690c:	4b7e      	ldr	r3, [pc, #504]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ea      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006934:	2b00      	cmp	r3, #0
 8006936:	d028      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d124      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006940:	4b71      	ldr	r3, [pc, #452]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	3301      	adds	r3, #1
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006952:	4b6d      	ldr	r3, [pc, #436]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	431a      	orrs	r2, r3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	3b01      	subs	r3, #1
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	431a      	orrs	r2, r3
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	4961      	ldr	r1, [pc, #388]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d00a      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d035      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b4:	d130      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80069b6:	4b54      	ldr	r3, [pc, #336]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	3301      	adds	r3, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069c8:	4b4f      	ldr	r3, [pc, #316]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ce:	0f1b      	lsrs	r3, r3, #28
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	019b      	lsls	r3, r3, #6
 80069e0:	431a      	orrs	r2, r3
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	3b01      	subs	r3, #1
 80069e8:	041b      	lsls	r3, r3, #16
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	061b      	lsls	r3, r3, #24
 80069f2:	431a      	orrs	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	071b      	lsls	r3, r3, #28
 80069f8:	4943      	ldr	r1, [pc, #268]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a00:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a06:	f023 021f 	bic.w	r2, r3, #31
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	493d      	ldr	r1, [pc, #244]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d029      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d124      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a2e:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a40:	4b31      	ldr	r3, [pc, #196]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a46:	0f1b      	lsrs	r3, r3, #28
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	019b      	lsls	r3, r3, #6
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	3b01      	subs	r3, #1
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	431a      	orrs	r2, r3
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	071b      	lsls	r3, r3, #28
 8006a70:	4925      	ldr	r1, [pc, #148]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d016      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	019b      	lsls	r3, r3, #6
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	3b01      	subs	r3, #1
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	071b      	lsls	r3, r3, #28
 8006aaa:	4917      	ldr	r1, [pc, #92]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ab2:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab8:	f7fc f8f4 	bl	8002ca4 <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ac0:	f7fc f8f0 	bl	8002ca4 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e09f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	f040 8095 	bne.w	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aec:	f7fc f8da 	bl	8002ca4 <HAL_GetTick>
 8006af0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006af2:	e00f      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006af4:	f7fc f8d6 	bl	8002ca4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d908      	bls.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e085      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006b06:	bf00      	nop
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	42470068 	.word	0x42470068
 8006b10:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b14:	4b41      	ldr	r3, [pc, #260]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b20:	d0e8      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02b      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d127      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006b4a:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	3301      	adds	r3, #1
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	019b      	lsls	r3, r3, #6
 8006b66:	431a      	orrs	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	061b      	lsls	r3, r3, #24
 8006b78:	4928      	ldr	r1, [pc, #160]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b80:	4b26      	ldr	r3, [pc, #152]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	4922      	ldr	r1, [pc, #136]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01d      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bae:	d118      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bb0:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	0e1b      	lsrs	r3, r3, #24
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	4910      	ldr	r1, [pc, #64]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006be8:	f7fc f85c 	bl	8002ca4 <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bf0:	f7fc f858 	bl	8002ca4 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e007      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0e:	d1ef      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3730      	adds	r7, #48	; 0x30
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	42470070 	.word	0x42470070

08006c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c40:	4bce      	ldr	r3, [pc, #824]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	f200 818d 	bhi.w	8006f68 <HAL_RCC_GetSysClockFreq+0x344>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_RCC_GetSysClockFreq+0x30>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006f69 	.word	0x08006f69
 8006c5c:	08006f69 	.word	0x08006f69
 8006c60:	08006f69 	.word	0x08006f69
 8006c64:	08006c8f 	.word	0x08006c8f
 8006c68:	08006f69 	.word	0x08006f69
 8006c6c:	08006f69 	.word	0x08006f69
 8006c70:	08006f69 	.word	0x08006f69
 8006c74:	08006c95 	.word	0x08006c95
 8006c78:	08006f69 	.word	0x08006f69
 8006c7c:	08006f69 	.word	0x08006f69
 8006c80:	08006f69 	.word	0x08006f69
 8006c84:	08006e09 	.word	0x08006e09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c88:	4bbd      	ldr	r3, [pc, #756]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c8a:	61bb      	str	r3, [r7, #24]
       break;
 8006c8c:	e16f      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c8e:	4bbd      	ldr	r3, [pc, #756]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x360>)
 8006c90:	61bb      	str	r3, [r7, #24]
      break;
 8006c92:	e16c      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c94:	4bb9      	ldr	r3, [pc, #740]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9e:	4bb7      	ldr	r3, [pc, #732]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d053      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006caa:	4bb4      	ldr	r3, [pc, #720]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	099b      	lsrs	r3, r3, #6
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	ea02 0400 	and.w	r4, r2, r0
 8006cc2:	603c      	str	r4, [r7, #0]
 8006cc4:	400b      	ands	r3, r1
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	014b      	lsls	r3, r1, #5
 8006cda:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cde:	0142      	lsls	r2, r0, #5
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	1ac0      	subs	r0, r0, r3
 8006ce8:	462b      	mov	r3, r5
 8006cea:	eb61 0103 	sbc.w	r1, r1, r3
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	018b      	lsls	r3, r1, #6
 8006cf8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cfc:	0182      	lsls	r2, r0, #6
 8006cfe:	1a12      	subs	r2, r2, r0
 8006d00:	eb63 0301 	sbc.w	r3, r3, r1
 8006d04:	f04f 0000 	mov.w	r0, #0
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	00d9      	lsls	r1, r3, #3
 8006d0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d12:	00d0      	lsls	r0, r2, #3
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4621      	mov	r1, r4
 8006d1a:	1852      	adds	r2, r2, r1
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	eb43 0101 	adc.w	r1, r3, r1
 8006d22:	460b      	mov	r3, r1
 8006d24:	f04f 0000 	mov.w	r0, #0
 8006d28:	f04f 0100 	mov.w	r1, #0
 8006d2c:	0259      	lsls	r1, r3, #9
 8006d2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006d32:	0250      	lsls	r0, r2, #9
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	f7f9 ff60 	bl	8000c08 <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e04c      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d52:	4b8a      	ldr	r3, [pc, #552]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d62:	f04f 0100 	mov.w	r1, #0
 8006d66:	ea02 0a00 	and.w	sl, r2, r0
 8006d6a:	ea03 0b01 	and.w	fp, r3, r1
 8006d6e:	4650      	mov	r0, sl
 8006d70:	4659      	mov	r1, fp
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	014b      	lsls	r3, r1, #5
 8006d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d80:	0142      	lsls	r2, r0, #5
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	ebb0 000a 	subs.w	r0, r0, sl
 8006d8a:	eb61 010b 	sbc.w	r1, r1, fp
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	018b      	lsls	r3, r1, #6
 8006d98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d9c:	0182      	lsls	r2, r0, #6
 8006d9e:	1a12      	subs	r2, r2, r0
 8006da0:	eb63 0301 	sbc.w	r3, r3, r1
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	00d9      	lsls	r1, r3, #3
 8006dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006db2:	00d0      	lsls	r0, r2, #3
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	eb12 020a 	adds.w	r2, r2, sl
 8006dbc:	eb43 030b 	adc.w	r3, r3, fp
 8006dc0:	f04f 0000 	mov.w	r0, #0
 8006dc4:	f04f 0100 	mov.w	r1, #0
 8006dc8:	0299      	lsls	r1, r3, #10
 8006dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006dce:	0290      	lsls	r0, r2, #10
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	f7f9 ff12 	bl	8000c08 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dec:	4b63      	ldr	r3, [pc, #396]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	3301      	adds	r3, #1
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	61bb      	str	r3, [r7, #24]
      break;
 8006e06:	e0b2      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e08:	4b5c      	ldr	r3, [pc, #368]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e10:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e12:	4b5a      	ldr	r3, [pc, #360]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04d      	beq.n	8006eba <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1e:	4b57      	ldr	r3, [pc, #348]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	461a      	mov	r2, r3
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	ea02 0800 	and.w	r8, r2, r0
 8006e36:	ea03 0901 	and.w	r9, r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	014b      	lsls	r3, r1, #5
 8006e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e4c:	0142      	lsls	r2, r0, #5
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	ebb0 0008 	subs.w	r0, r0, r8
 8006e56:	eb61 0109 	sbc.w	r1, r1, r9
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	018b      	lsls	r3, r1, #6
 8006e64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e68:	0182      	lsls	r2, r0, #6
 8006e6a:	1a12      	subs	r2, r2, r0
 8006e6c:	eb63 0301 	sbc.w	r3, r3, r1
 8006e70:	f04f 0000 	mov.w	r0, #0
 8006e74:	f04f 0100 	mov.w	r1, #0
 8006e78:	00d9      	lsls	r1, r3, #3
 8006e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e7e:	00d0      	lsls	r0, r2, #3
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	eb12 0208 	adds.w	r2, r2, r8
 8006e88:	eb43 0309 	adc.w	r3, r3, r9
 8006e8c:	f04f 0000 	mov.w	r0, #0
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	0259      	lsls	r1, r3, #9
 8006e96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e9a:	0250      	lsls	r0, r2, #9
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	f7f9 feac 	bl	8000c08 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e04a      	b.n	8006f50 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eba:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	099b      	lsrs	r3, r3, #6
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	ea02 0400 	and.w	r4, r2, r0
 8006ed2:	ea03 0501 	and.w	r5, r3, r1
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	014b      	lsls	r3, r1, #5
 8006ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ee8:	0142      	lsls	r2, r0, #5
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	1b00      	subs	r0, r0, r4
 8006ef0:	eb61 0105 	sbc.w	r1, r1, r5
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	018b      	lsls	r3, r1, #6
 8006efe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f02:	0182      	lsls	r2, r0, #6
 8006f04:	1a12      	subs	r2, r2, r0
 8006f06:	eb63 0301 	sbc.w	r3, r3, r1
 8006f0a:	f04f 0000 	mov.w	r0, #0
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	00d9      	lsls	r1, r3, #3
 8006f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f18:	00d0      	lsls	r0, r2, #3
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	1912      	adds	r2, r2, r4
 8006f20:	eb45 0303 	adc.w	r3, r5, r3
 8006f24:	f04f 0000 	mov.w	r0, #0
 8006f28:	f04f 0100 	mov.w	r1, #0
 8006f2c:	0299      	lsls	r1, r3, #10
 8006f2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f32:	0290      	lsls	r0, r2, #10
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	f7f9 fe60 	bl	8000c08 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	0f1b      	lsrs	r3, r3, #28
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	61bb      	str	r3, [r7, #24]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006f6a:	61bb      	str	r3, [r7, #24]
      break;
 8006f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	00f42400 	.word	0x00f42400
 8006f84:	007a1200 	.word	0x007a1200

08006f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e28d      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8083 	beq.w	80070ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fa8:	4b94      	ldr	r3, [pc, #592]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 030c 	and.w	r3, r3, #12
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d019      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fb4:	4b91      	ldr	r3, [pc, #580]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d106      	bne.n	8006fce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fc0:	4b8e      	ldr	r3, [pc, #568]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fcc:	d00c      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fce:	4b8b      	ldr	r3, [pc, #556]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	d112      	bne.n	8007000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fda:	4b88      	ldr	r3, [pc, #544]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe6:	d10b      	bne.n	8007000 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe8:	4b84      	ldr	r3, [pc, #528]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05b      	beq.n	80070ac <HAL_RCC_OscConfig+0x124>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d157      	bne.n	80070ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e25a      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007008:	d106      	bne.n	8007018 <HAL_RCC_OscConfig+0x90>
 800700a:	4b7c      	ldr	r3, [pc, #496]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a7b      	ldr	r2, [pc, #492]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e01d      	b.n	8007054 <HAL_RCC_OscConfig+0xcc>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007020:	d10c      	bne.n	800703c <HAL_RCC_OscConfig+0xb4>
 8007022:	4b76      	ldr	r3, [pc, #472]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a75      	ldr	r2, [pc, #468]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4b73      	ldr	r3, [pc, #460]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a72      	ldr	r2, [pc, #456]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	e00b      	b.n	8007054 <HAL_RCC_OscConfig+0xcc>
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4b6c      	ldr	r3, [pc, #432]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6b      	ldr	r2, [pc, #428]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800704e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d013      	beq.n	8007084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fb fe22 	bl	8002ca4 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007064:	f7fb fe1e 	bl	8002ca4 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e21f      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007076:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0xdc>
 8007082:	e014      	b.n	80070ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fb fe0e 	bl	8002ca4 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800708c:	f7fb fe0a 	bl	8002ca4 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e20b      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800709e:	4b57      	ldr	r3, [pc, #348]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0x104>
 80070aa:	e000      	b.n	80070ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06f      	beq.n	800719a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070ba:	4b50      	ldr	r3, [pc, #320]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d017      	beq.n	80070f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070c6:	4b4d      	ldr	r3, [pc, #308]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d105      	bne.n	80070de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070d2:	4b4a      	ldr	r3, [pc, #296]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070de:	4b47      	ldr	r3, [pc, #284]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070e6:	2b0c      	cmp	r3, #12
 80070e8:	d11c      	bne.n	8007124 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ea:	4b44      	ldr	r3, [pc, #272]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d116      	bne.n	8007124 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070f6:	4b41      	ldr	r3, [pc, #260]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_RCC_OscConfig+0x186>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d001      	beq.n	800710e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e1d3      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710e:	4b3b      	ldr	r3, [pc, #236]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	e03a      	b.n	800719a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d020      	beq.n	800716e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800712c:	4b34      	ldr	r3, [pc, #208]	; (8007200 <HAL_RCC_OscConfig+0x278>)
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fb fdb7 	bl	8002ca4 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713a:	f7fb fdb3 	bl	8002ca4 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e1b4      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800714c:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007158:	4b28      	ldr	r3, [pc, #160]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4925      	ldr	r1, [pc, #148]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007168:	4313      	orrs	r3, r2
 800716a:	600b      	str	r3, [r1, #0]
 800716c:	e015      	b.n	800719a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <HAL_RCC_OscConfig+0x278>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007174:	f7fb fd96 	bl	8002ca4 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800717c:	f7fb fd92 	bl	8002ca4 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e193      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800718e:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d036      	beq.n	8007214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <HAL_RCC_OscConfig+0x27c>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b4:	f7fb fd76 	bl	8002ca4 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071bc:	f7fb fd72 	bl	8002ca4 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e173      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_OscConfig+0x274>)
 80071d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0x234>
 80071da:	e01b      	b.n	8007214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_RCC_OscConfig+0x27c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e2:	f7fb fd5f 	bl	8002ca4 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e8:	e00e      	b.n	8007208 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071ea:	f7fb fd5b 	bl	8002ca4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d907      	bls.n	8007208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e15c      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
 80071fc:	40023800 	.word	0x40023800
 8007200:	42470000 	.word	0x42470000
 8007204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007208:	4b8a      	ldr	r3, [pc, #552]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1ea      	bne.n	80071ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8097 	beq.w	8007350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007226:	4b83      	ldr	r3, [pc, #524]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	4b7f      	ldr	r3, [pc, #508]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	4a7e      	ldr	r2, [pc, #504]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007240:	6413      	str	r3, [r2, #64]	; 0x40
 8007242:	4b7c      	ldr	r3, [pc, #496]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007252:	4b79      	ldr	r3, [pc, #484]	; (8007438 <HAL_RCC_OscConfig+0x4b0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d118      	bne.n	8007290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800725e:	4b76      	ldr	r3, [pc, #472]	; (8007438 <HAL_RCC_OscConfig+0x4b0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a75      	ldr	r2, [pc, #468]	; (8007438 <HAL_RCC_OscConfig+0x4b0>)
 8007264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726a:	f7fb fd1b 	bl	8002ca4 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007272:	f7fb fd17 	bl	8002ca4 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e118      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007284:	4b6c      	ldr	r3, [pc, #432]	; (8007438 <HAL_RCC_OscConfig+0x4b0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d106      	bne.n	80072a6 <HAL_RCC_OscConfig+0x31e>
 8007298:	4b66      	ldr	r3, [pc, #408]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	4a65      	ldr	r2, [pc, #404]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	6713      	str	r3, [r2, #112]	; 0x70
 80072a4:	e01c      	b.n	80072e0 <HAL_RCC_OscConfig+0x358>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d10c      	bne.n	80072c8 <HAL_RCC_OscConfig+0x340>
 80072ae:	4b61      	ldr	r3, [pc, #388]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	4a60      	ldr	r2, [pc, #384]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072b4:	f043 0304 	orr.w	r3, r3, #4
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ba:	4b5e      	ldr	r3, [pc, #376]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a5d      	ldr	r2, [pc, #372]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
 80072c6:	e00b      	b.n	80072e0 <HAL_RCC_OscConfig+0x358>
 80072c8:	4b5a      	ldr	r3, [pc, #360]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	4a59      	ldr	r2, [pc, #356]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	6713      	str	r3, [r2, #112]	; 0x70
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	4a56      	ldr	r2, [pc, #344]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80072da:	f023 0304 	bic.w	r3, r3, #4
 80072de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d015      	beq.n	8007314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e8:	f7fb fcdc 	bl	8002ca4 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ee:	e00a      	b.n	8007306 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072f0:	f7fb fcd8 	bl	8002ca4 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fe:	4293      	cmp	r3, r2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e0d7      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007306:	4b4b      	ldr	r3, [pc, #300]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0ee      	beq.n	80072f0 <HAL_RCC_OscConfig+0x368>
 8007312:	e014      	b.n	800733e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fb fcc6 	bl	8002ca4 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800731a:	e00a      	b.n	8007332 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731c:	f7fb fcc2 	bl	8002ca4 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f241 3288 	movw	r2, #5000	; 0x1388
 800732a:	4293      	cmp	r3, r2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0c1      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007332:	4b40      	ldr	r3, [pc, #256]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ee      	bne.n	800731c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d105      	bne.n	8007350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007344:	4b3b      	ldr	r3, [pc, #236]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	4a3a      	ldr	r2, [pc, #232]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800734a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80ad 	beq.w	80074b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	2b08      	cmp	r3, #8
 8007364:	d060      	beq.n	8007428 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d145      	bne.n	80073fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736e:	4b33      	ldr	r3, [pc, #204]	; (800743c <HAL_RCC_OscConfig+0x4b4>)
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fb fc96 	bl	8002ca4 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800737c:	f7fb fc92 	bl	8002ca4 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e093      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738e:	4b29      	ldr	r3, [pc, #164]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f0      	bne.n	800737c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	019b      	lsls	r3, r3, #6
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	061b      	lsls	r3, r3, #24
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	071b      	lsls	r3, r3, #28
 80073c6:	491b      	ldr	r1, [pc, #108]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073cc:	4b1b      	ldr	r3, [pc, #108]	; (800743c <HAL_RCC_OscConfig+0x4b4>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d2:	f7fb fc67 	bl	8002ca4 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073da:	f7fb fc63 	bl	8002ca4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e064      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCC_OscConfig+0x452>
 80073f8:	e05c      	b.n	80074b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <HAL_RCC_OscConfig+0x4b4>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fb fc50 	bl	8002ca4 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007408:	f7fb fc4c 	bl	8002ca4 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e04d      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <HAL_RCC_OscConfig+0x4ac>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x480>
 8007426:	e045      	b.n	80074b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d107      	bne.n	8007440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e040      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
 8007434:	40023800 	.word	0x40023800
 8007438:	40007000 	.word	0x40007000
 800743c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007440:	4b1f      	ldr	r3, [pc, #124]	; (80074c0 <HAL_RCC_OscConfig+0x538>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d030      	beq.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007458:	429a      	cmp	r2, r3
 800745a:	d129      	bne.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d122      	bne.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007470:	4013      	ands	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007478:	4293      	cmp	r3, r2
 800747a:	d119      	bne.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	3b01      	subs	r3, #1
 800748a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d10f      	bne.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d107      	bne.n	80074b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40023800 	.word	0x40023800

080074c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e083      	b.n	80075de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7f5b      	ldrb	r3, [r3, #29]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fa fca4 	bl	8001e34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	22ca      	movs	r2, #202	; 0xca
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2253      	movs	r2, #83	; 0x53
 8007500:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f897 	bl	8007636 <RTC_EnterInitMode>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	22ff      	movs	r2, #255	; 0xff
 8007514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e05e      	b.n	80075de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800752e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007532:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6899      	ldr	r1, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68d2      	ldr	r2, [r2, #12]
 800755a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6919      	ldr	r1, [r3, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	041a      	lsls	r2, r3, #16
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800757e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10e      	bne.n	80075ac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f829 	bl	80075e6 <HAL_RTC_WaitForSynchro>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	22ff      	movs	r2, #255	; 0xff
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2204      	movs	r2, #4
 80075a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e018      	b.n	80075de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	22ff      	movs	r2, #255	; 0xff
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80075dc:	2300      	movs	r3, #0
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007600:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007602:	f7fb fb4f 	bl	8002ca4 <HAL_GetTick>
 8007606:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007608:	e009      	b.n	800761e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800760a:	f7fb fb4b 	bl	8002ca4 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007618:	d901      	bls.n	800761e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e007      	b.n	800762e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0ee      	beq.n	800760a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d119      	bne.n	8007684 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800765a:	f7fb fb23 	bl	8002ca4 <HAL_GetTick>
 800765e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007660:	e009      	b.n	8007676 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007662:	f7fb fb1f 	bl	8002ca4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007670:	d901      	bls.n	8007676 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e007      	b.n	8007686 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ee      	beq.n	8007662 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e041      	b.n	8007724 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7fb f8a3 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f000 fc79 	bl	8007fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d001      	beq.n	8007744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e04e      	b.n	80077e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d022      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d01d      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d018      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_TIM_Base_Start_IT+0xd0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <HAL_TIM_Base_Start_IT+0xd4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <HAL_TIM_Base_Start_IT+0xd8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x80>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <HAL_TIM_Base_Start_IT+0xdc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d111      	bne.n	80077d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b06      	cmp	r3, #6
 80077bc:	d010      	beq.n	80077e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ce:	e007      	b.n	80077e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40001800 	.word	0x40001800

0800780c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e041      	b.n	80078a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f839 	bl	80078aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fbba 	bl	8007fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_TIM_PWM_Start+0x24>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e022      	b.n	800792a <HAL_TIM_PWM_Start+0x6a>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d109      	bne.n	80078fe <HAL_TIM_PWM_Start+0x3e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	bf14      	ite	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2300      	moveq	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	e015      	b.n	800792a <HAL_TIM_PWM_Start+0x6a>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b08      	cmp	r3, #8
 8007902:	d109      	bne.n	8007918 <HAL_TIM_PWM_Start+0x58>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b01      	cmp	r3, #1
 800790e:	bf14      	ite	ne
 8007910:	2301      	movne	r3, #1
 8007912:	2300      	moveq	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	e008      	b.n	800792a <HAL_TIM_PWM_Start+0x6a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	bf14      	ite	ne
 8007924:	2301      	movne	r3, #1
 8007926:	2300      	moveq	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e07c      	b.n	8007a2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <HAL_TIM_PWM_Start+0x82>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	e013      	b.n	800796a <HAL_TIM_PWM_Start+0xaa>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0x92>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007950:	e00b      	b.n	800796a <HAL_TIM_PWM_Start+0xaa>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b08      	cmp	r3, #8
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0xa2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007960:	e003      	b.n	800796a <HAL_TIM_PWM_Start+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2201      	movs	r2, #1
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fe10 	bl	8008598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a2d      	ldr	r2, [pc, #180]	; (8007a34 <HAL_TIM_PWM_Start+0x174>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIM_PWM_Start+0xcc>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2c      	ldr	r2, [pc, #176]	; (8007a38 <HAL_TIM_PWM_Start+0x178>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d101      	bne.n	8007990 <HAL_TIM_PWM_Start+0xd0>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_TIM_PWM_Start+0xd2>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <HAL_TIM_PWM_Start+0x174>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d01d      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1f      	ldr	r2, [pc, #124]	; (8007a3c <HAL_TIM_PWM_Start+0x17c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <HAL_TIM_PWM_Start+0x180>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <HAL_TIM_PWM_Start+0x184>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a16      	ldr	r2, [pc, #88]	; (8007a38 <HAL_TIM_PWM_Start+0x178>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <HAL_TIM_PWM_Start+0x188>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x136>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <HAL_TIM_PWM_Start+0x18c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d111      	bne.n	8007a1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d010      	beq.n	8007a2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	e007      	b.n	8007a2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800
 8007a44:	40000c00 	.word	0x40000c00
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40001800 	.word	0x40001800

08007a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d122      	bne.n	8007aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d11b      	bne.n	8007aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f06f 0202 	mvn.w	r2, #2
 8007a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa77 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007a98:	e005      	b.n	8007aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa69 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fa7a 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d122      	bne.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d11b      	bne.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0204 	mvn.w	r2, #4
 8007ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa4d 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa3f 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa50 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d122      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0208 	mvn.w	r2, #8
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2204      	movs	r2, #4
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa23 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007b40:	e005      	b.n	8007b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa15 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa26 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0210 	mvn.w	r2, #16
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9f9 	bl	8007f86 <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9eb 	bl	8007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9fc 	bl	8007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0201 	mvn.w	r2, #1
 8007bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7f9 fe6c 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b80      	cmp	r3, #128	; 0x80
 8007be0:	d10e      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d107      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fdca 	bl	8008794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d10e      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	d107      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9c1 	bl	8007fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d10e      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d107      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0220 	mvn.w	r2, #32
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fd94 	bl	8008780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e0ae      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	f200 809f 	bhi.w	8007dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007dcd 	.word	0x08007dcd
 8007c9c:	08007dcd 	.word	0x08007dcd
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007dcd 	.word	0x08007dcd
 8007cac:	08007dcd 	.word	0x08007dcd
 8007cb0:	08007dcd 	.word	0x08007dcd
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007dcd 	.word	0x08007dcd
 8007cbc:	08007dcd 	.word	0x08007dcd
 8007cc0:	08007dcd 	.word	0x08007dcd
 8007cc4:	08007d8b 	.word	0x08007d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fa18 	bl	8008104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0208 	orr.w	r2, r2, #8
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0204 	bic.w	r2, r2, #4
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
      break;
 8007d06:	e064      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fa68 	bl	80081e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6999      	ldr	r1, [r3, #24]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	021a      	lsls	r2, r3, #8
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	619a      	str	r2, [r3, #24]
      break;
 8007d48:	e043      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fabd 	bl	80082d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0208 	orr.w	r2, r2, #8
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0204 	bic.w	r2, r2, #4
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	61da      	str	r2, [r3, #28]
      break;
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fb11 	bl	80083b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69d9      	ldr	r1, [r3, #28]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	61da      	str	r2, [r3, #28]
      break;
 8007dca:	e002      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIM_ConfigClockSource+0x1c>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e0b4      	b.n	8007f6a <HAL_TIM_ConfigClockSource+0x186>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d03e      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3e:	f200 8087 	bhi.w	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e46:	f000 8086 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x172>
 8007e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4e:	d87f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b70      	cmp	r3, #112	; 0x70
 8007e52:	d01a      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0xa6>
 8007e54:	2b70      	cmp	r3, #112	; 0x70
 8007e56:	d87b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e58:	2b60      	cmp	r3, #96	; 0x60
 8007e5a:	d050      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x11a>
 8007e5c:	2b60      	cmp	r3, #96	; 0x60
 8007e5e:	d877      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e60:	2b50      	cmp	r3, #80	; 0x50
 8007e62:	d03c      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xfa>
 8007e64:	2b50      	cmp	r3, #80	; 0x50
 8007e66:	d873      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e68:	2b40      	cmp	r3, #64	; 0x40
 8007e6a:	d058      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x13a>
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d86f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e70:	2b30      	cmp	r3, #48	; 0x30
 8007e72:	d064      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	d86b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d060      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d867      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05c      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d05a      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e88:	e062      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6899      	ldr	r1, [r3, #8]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f000 fb5d 	bl	8008558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	609a      	str	r2, [r3, #8]
      break;
 8007eb6:	e04f      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6899      	ldr	r1, [r3, #8]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f000 fb46 	bl	8008558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eda:	609a      	str	r2, [r3, #8]
      break;
 8007edc:	e03c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 faba 	bl	8008464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2150      	movs	r1, #80	; 0x50
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fb13 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007efc:	e02c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f000 fad9 	bl	80084c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2160      	movs	r1, #96	; 0x60
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fb03 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6859      	ldr	r1, [r3, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f000 fa9a 	bl	8008464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2140      	movs	r1, #64	; 0x40
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 faf3 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f000 faea 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007f4e:	e003      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e000      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a40      	ldr	r2, [pc, #256]	; (80080d8 <TIM_Base_SetConfig+0x114>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d013      	beq.n	8008004 <TIM_Base_SetConfig+0x40>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe2:	d00f      	beq.n	8008004 <TIM_Base_SetConfig+0x40>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a3d      	ldr	r2, [pc, #244]	; (80080dc <TIM_Base_SetConfig+0x118>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00b      	beq.n	8008004 <TIM_Base_SetConfig+0x40>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a3c      	ldr	r2, [pc, #240]	; (80080e0 <TIM_Base_SetConfig+0x11c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d007      	beq.n	8008004 <TIM_Base_SetConfig+0x40>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a3b      	ldr	r2, [pc, #236]	; (80080e4 <TIM_Base_SetConfig+0x120>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <TIM_Base_SetConfig+0x40>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a3a      	ldr	r2, [pc, #232]	; (80080e8 <TIM_Base_SetConfig+0x124>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d108      	bne.n	8008016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a2f      	ldr	r2, [pc, #188]	; (80080d8 <TIM_Base_SetConfig+0x114>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02b      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008024:	d027      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <TIM_Base_SetConfig+0x118>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d023      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a2b      	ldr	r2, [pc, #172]	; (80080e0 <TIM_Base_SetConfig+0x11c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01f      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a2a      	ldr	r2, [pc, #168]	; (80080e4 <TIM_Base_SetConfig+0x120>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01b      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a29      	ldr	r2, [pc, #164]	; (80080e8 <TIM_Base_SetConfig+0x124>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d017      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a28      	ldr	r2, [pc, #160]	; (80080ec <TIM_Base_SetConfig+0x128>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d013      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a27      	ldr	r2, [pc, #156]	; (80080f0 <TIM_Base_SetConfig+0x12c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00f      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a26      	ldr	r2, [pc, #152]	; (80080f4 <TIM_Base_SetConfig+0x130>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00b      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a25      	ldr	r2, [pc, #148]	; (80080f8 <TIM_Base_SetConfig+0x134>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d007      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a24      	ldr	r2, [pc, #144]	; (80080fc <TIM_Base_SetConfig+0x138>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d003      	beq.n	8008076 <TIM_Base_SetConfig+0xb2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a23      	ldr	r2, [pc, #140]	; (8008100 <TIM_Base_SetConfig+0x13c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d108      	bne.n	8008088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a0a      	ldr	r2, [pc, #40]	; (80080d8 <TIM_Base_SetConfig+0x114>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_Base_SetConfig+0xf8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <TIM_Base_SetConfig+0x124>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d103      	bne.n	80080c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	615a      	str	r2, [r3, #20]
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40010400 	.word	0x40010400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40014400 	.word	0x40014400
 80080f4:	40014800 	.word	0x40014800
 80080f8:	40001800 	.word	0x40001800
 80080fc:	40001c00 	.word	0x40001c00
 8008100:	40002000 	.word	0x40002000

08008104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f023 0201 	bic.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f023 0302 	bic.w	r3, r3, #2
 800814c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a20      	ldr	r2, [pc, #128]	; (80081dc <TIM_OC1_SetConfig+0xd8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC1_SetConfig+0x64>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <TIM_OC1_SetConfig+0xdc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d10c      	bne.n	8008182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f023 0308 	bic.w	r3, r3, #8
 800816e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f023 0304 	bic.w	r3, r3, #4
 8008180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a15      	ldr	r2, [pc, #84]	; (80081dc <TIM_OC1_SetConfig+0xd8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d003      	beq.n	8008192 <TIM_OC1_SetConfig+0x8e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <TIM_OC1_SetConfig+0xdc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d111      	bne.n	80081b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	621a      	str	r2, [r3, #32]
}
 80081d0:	bf00      	nop
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	40010000 	.word	0x40010000
 80081e0:	40010400 	.word	0x40010400

080081e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0210 	bic.w	r2, r3, #16
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0320 	bic.w	r3, r3, #32
 800822e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <TIM_OC2_SetConfig+0xe4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_OC2_SetConfig+0x68>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <TIM_OC2_SetConfig+0xe8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d10d      	bne.n	8008268 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <TIM_OC2_SetConfig+0xe4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_OC2_SetConfig+0x94>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a16      	ldr	r2, [pc, #88]	; (80082cc <TIM_OC2_SetConfig+0xe8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d113      	bne.n	80082a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a21      	ldr	r2, [pc, #132]	; (80083b0 <TIM_OC3_SetConfig+0xe0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_OC3_SetConfig+0x66>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <TIM_OC3_SetConfig+0xe4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10d      	bne.n	8008352 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800833c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <TIM_OC3_SetConfig+0xe0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC3_SetConfig+0x92>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <TIM_OC3_SetConfig+0xe4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d113      	bne.n	800838a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40010400 	.word	0x40010400

080083b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	031b      	lsls	r3, r3, #12
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a12      	ldr	r2, [pc, #72]	; (800845c <TIM_OC4_SetConfig+0xa4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d003      	beq.n	8008420 <TIM_OC4_SetConfig+0x68>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a11      	ldr	r2, [pc, #68]	; (8008460 <TIM_OC4_SetConfig+0xa8>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d109      	bne.n	8008434 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	019b      	lsls	r3, r3, #6
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	621a      	str	r2, [r3, #32]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40010000 	.word	0x40010000
 8008460:	40010400 	.word	0x40010400

08008464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f023 0201 	bic.w	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800848e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f023 030a 	bic.w	r3, r3, #10
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b087      	sub	sp, #28
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0210 	bic.w	r2, r3, #16
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	031b      	lsls	r3, r3, #12
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	f043 0307 	orr.w	r3, r3, #7
 8008544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	609a      	str	r2, [r3, #8]
}
 800854c:	bf00      	nop
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	021a      	lsls	r2, r3, #8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	431a      	orrs	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4313      	orrs	r3, r2
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	609a      	str	r2, [r3, #8]
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 031f 	and.w	r3, r3, #31
 80085aa:	2201      	movs	r2, #1
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a1a      	ldr	r2, [r3, #32]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	43db      	mvns	r3, r3
 80085ba:	401a      	ands	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1a      	ldr	r2, [r3, #32]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	fa01 f303 	lsl.w	r3, r1, r3
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e05a      	b.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d022      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d01d      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d018      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1a      	ldr	r2, [pc, #104]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00e      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d10c      	bne.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4313      	orrs	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40010400 	.word	0x40010400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40001800 	.word	0x40001800

080086dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e03d      	b.n	8008774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e03f      	b.n	800883a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fa f954 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2224      	movs	r2, #36	; 0x24
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fddb 	bl	80093a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b08a      	sub	sp, #40	; 0x28
 8008846:	af02      	add	r7, sp, #8
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	603b      	str	r3, [r7, #0]
 800884e:	4613      	mov	r3, r2
 8008850:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b20      	cmp	r3, #32
 8008860:	d17c      	bne.n	800895c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_UART_Transmit+0x2c>
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e075      	b.n	800895e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_UART_Transmit+0x3e>
 800887c:	2302      	movs	r3, #2
 800887e:	e06e      	b.n	800895e <HAL_UART_Transmit+0x11c>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2221      	movs	r2, #33	; 0x21
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008896:	f7fa fa05 	bl	8002ca4 <HAL_GetTick>
 800889a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	88fa      	ldrh	r2, [r7, #6]
 80088a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b0:	d108      	bne.n	80088c4 <HAL_UART_Transmit+0x82>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d104      	bne.n	80088c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e003      	b.n	80088cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80088d4:	e02a      	b.n	800892c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fb1f 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e036      	b.n	800895e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008904:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	3302      	adds	r3, #2
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	e007      	b.n	800891e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	781a      	ldrb	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1cf      	bne.n	80088d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	2140      	movs	r1, #64	; 0x40
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 faef 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e006      	b.n	800895e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	e000      	b.n	800895e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800895c:	2302      	movs	r3, #2
  }
}
 800895e:	4618      	mov	r0, r3
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	4613      	mov	r3, r2
 8008972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b20      	cmp	r3, #32
 800897e:	d11d      	bne.n	80089bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_UART_Receive_IT+0x26>
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e016      	b.n	80089be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_UART_Receive_IT+0x38>
 800899a:	2302      	movs	r3, #2
 800899c:	e00f      	b.n	80089be <HAL_UART_Receive_IT+0x58>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	461a      	mov	r2, r3
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fb24 	bl	8009000 <UART_Start_Receive_IT>
 80089b8:	4603      	mov	r3, r0
 80089ba:	e000      	b.n	80089be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b0ba      	sub	sp, #232	; 0xe8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10f      	bne.n	8008a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <HAL_UART_IRQHandler+0x66>
 8008a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc03 	bl	8009232 <UART_Receive_IT>
      return;
 8008a2c:	e256      	b.n	8008edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80de 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x22c>
 8008a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80d1 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00b      	beq.n	8008a76 <HAL_UART_IRQHandler+0xae>
 8008a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d005      	beq.n	8008a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	f043 0201 	orr.w	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <HAL_UART_IRQHandler+0xd2>
 8008a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	f043 0202 	orr.w	r2, r3, #2
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00b      	beq.n	8008abe <HAL_UART_IRQHandler+0xf6>
 8008aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	f043 0204 	orr.w	r2, r3, #4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d011      	beq.n	8008aee <HAL_UART_IRQHandler+0x126>
 8008aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f043 0208 	orr.w	r2, r3, #8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 81ed 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_UART_IRQHandler+0x14e>
 8008b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb8e 	bl	8009232 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <HAL_UART_IRQHandler+0x17a>
 8008b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d04f      	beq.n	8008be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa96 	bl	8009074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b40      	cmp	r3, #64	; 0x40
 8008b54:	d141      	bne.n	8008bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1d9      	bne.n	8008b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d013      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	4a7d      	ldr	r2, [pc, #500]	; (8008da4 <HAL_UART_IRQHandler+0x3dc>)
 8008bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fa fb20 	bl	80031fc <HAL_DMA_Abort_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d016      	beq.n	8008bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	e00e      	b.n	8008bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f990 	bl	8008ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd8:	e00a      	b.n	8008bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f98c 	bl	8008ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be0:	e006      	b.n	8008bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f988 	bl	8008ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bee:	e170      	b.n	8008ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	bf00      	nop
    return;
 8008bf2:	e16e      	b.n	8008ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	f040 814a 	bne.w	8008e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 8143 	beq.w	8008e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 813c 	beq.w	8008e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60bb      	str	r3, [r7, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	f040 80b4 	bne.w	8008da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8140 	beq.w	8008ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f080 8139 	bcs.w	8008ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c76:	f000 8088 	beq.w	8008d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	330c      	adds	r3, #12
 8008ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d9      	bne.n	8008c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3314      	adds	r3, #20
 8008ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e1      	bne.n	8008cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3314      	adds	r3, #20
 8008d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3314      	adds	r3, #20
 8008d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e3      	bne.n	8008d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5a:	f023 0310 	bic.w	r3, r3, #16
 8008d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	330c      	adds	r3, #12
 8008d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e3      	bne.n	8008d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fa f9c9 	bl	800311c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8b6 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008da0:	e099      	b.n	8008ed6 <HAL_UART_IRQHandler+0x50e>
 8008da2:	bf00      	nop
 8008da4:	0800913b 	.word	0x0800913b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 808b 	beq.w	8008eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8086 	beq.w	8008eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008df2:	647a      	str	r2, [r7, #68]	; 0x44
 8008df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e3      	bne.n	8008dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3314      	adds	r3, #20
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	623b      	str	r3, [r7, #32]
   return(result);
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	f023 0301 	bic.w	r3, r3, #1
 8008e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3314      	adds	r3, #20
 8008e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e3      	bne.n	8008e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	330c      	adds	r3, #12
 8008e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0310 	bic.w	r3, r3, #16
 8008e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e70:	61fa      	str	r2, [r7, #28]
 8008e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	69b9      	ldr	r1, [r7, #24]
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e3      	bne.n	8008e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f83e 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e90:	e023      	b.n	8008eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x4ea>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f959 	bl	8009162 <UART_Transmit_IT>
    return;
 8008eb0:	e014      	b.n	8008edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00e      	beq.n	8008edc <HAL_UART_IRQHandler+0x514>
 8008ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d008      	beq.n	8008edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f999 	bl	8009202 <UART_EndTransmit_IT>
    return;
 8008ed0:	e004      	b.n	8008edc <HAL_UART_IRQHandler+0x514>
    return;
 8008ed2:	bf00      	nop
 8008ed4:	e002      	b.n	8008edc <HAL_UART_IRQHandler+0x514>
      return;
 8008ed6:	bf00      	nop
 8008ed8:	e000      	b.n	8008edc <HAL_UART_IRQHandler+0x514>
      return;
 8008eda:	bf00      	nop
  }
}
 8008edc:	37e8      	adds	r7, #232	; 0xe8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b090      	sub	sp, #64	; 0x40
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f34:	e050      	b.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d04c      	beq.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f44:	f7f9 feae 	bl	8002ca4 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d241      	bcs.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	330c      	adds	r3, #12
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	330c      	adds	r3, #12
 8008f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f74:	637a      	str	r2, [r7, #52]	; 0x34
 8008f76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	613b      	str	r3, [r7, #16]
   return(result);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f023 0301 	bic.w	r3, r3, #1
 8008f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa8:	623a      	str	r2, [r7, #32]
 8008faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	69f9      	ldr	r1, [r7, #28]
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e5      	bne.n	8008f88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e00f      	b.n	8008ff8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	bf0c      	ite	eq
 8008fe8:	2301      	moveq	r3, #1
 8008fea:	2300      	movne	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d09f      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3740      	adds	r7, #64	; 0x40
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	88fa      	ldrh	r2, [r7, #6]
 8009018:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	88fa      	ldrh	r2, [r7, #6]
 800901e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2222      	movs	r2, #34	; 0x22
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009044:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0220 	orr.w	r2, r2, #32
 8009064:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009074:	b480      	push	{r7}
 8009076:	b095      	sub	sp, #84	; 0x54
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	330c      	adds	r3, #12
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800909c:	643a      	str	r2, [r7, #64]	; 0x40
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e5      	bne.n	800907c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3314      	adds	r3, #20
 80090b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e5      	bne.n	80090b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d119      	bne.n	8009120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f023 0310 	bic.w	r3, r3, #16
 8009102:	647b      	str	r3, [r7, #68]	; 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800910c:	61ba      	str	r2, [r7, #24]
 800910e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6979      	ldr	r1, [r7, #20]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	613b      	str	r3, [r7, #16]
   return(result);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e5      	bne.n	80090ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2220      	movs	r2, #32
 8009124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800912e:	bf00      	nop
 8009130:	3754      	adds	r7, #84	; 0x54
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fecf 	bl	8008ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800915a:	bf00      	nop
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b21      	cmp	r3, #33	; 0x21
 8009174:	d13e      	bne.n	80091f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917e:	d114      	bne.n	80091aa <UART_Transmit_IT+0x48>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d110      	bne.n	80091aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800919c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	1c9a      	adds	r2, r3, #2
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	621a      	str	r2, [r3, #32]
 80091a8:	e008      	b.n	80091bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6211      	str	r1, [r2, #32]
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	4619      	mov	r1, r3
 80091ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10f      	bne.n	80091f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009218:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff fe5e 	bl	8008ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b08c      	sub	sp, #48	; 0x30
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b22      	cmp	r3, #34	; 0x22
 8009244:	f040 80ab 	bne.w	800939e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009250:	d117      	bne.n	8009282 <UART_Receive_IT+0x50>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d113      	bne.n	8009282 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009270:	b29a      	uxth	r2, r3
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	1c9a      	adds	r2, r3, #2
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	629a      	str	r2, [r3, #40]	; 0x28
 8009280:	e026      	b.n	80092d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009294:	d007      	beq.n	80092a6 <UART_Receive_IT+0x74>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <UART_Receive_IT+0x82>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d106      	bne.n	80092b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e008      	b.n	80092c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29b      	uxth	r3, r3
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4619      	mov	r1, r3
 80092de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d15a      	bne.n	800939a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0220 	bic.w	r2, r2, #32
 80092f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009302:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0201 	bic.w	r2, r2, #1
 8009312:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2220      	movs	r2, #32
 8009318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	2b01      	cmp	r3, #1
 8009322:	d135      	bne.n	8009390 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	330c      	adds	r3, #12
 8009330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	613b      	str	r3, [r7, #16]
   return(result);
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f023 0310 	bic.w	r3, r3, #16
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	330c      	adds	r3, #12
 8009348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934a:	623a      	str	r2, [r7, #32]
 800934c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	69f9      	ldr	r1, [r7, #28]
 8009350:	6a3a      	ldr	r2, [r7, #32]
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	61bb      	str	r3, [r7, #24]
   return(result);
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e5      	bne.n	800932a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b10      	cmp	r3, #16
 800936a:	d10a      	bne.n	8009382 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fdbf 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
 800938e:	e002      	b.n	8009396 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7f8 fa71 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e002      	b.n	80093a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	; 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b09f      	sub	sp, #124	; 0x7c
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093be:	68d9      	ldr	r1, [r3, #12]
 80093c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	ea40 0301 	orr.w	r3, r0, r1
 80093c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	431a      	orrs	r2, r3
 80093da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	4313      	orrs	r3, r2
 80093e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80093e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093ec:	f021 010c 	bic.w	r1, r1, #12
 80093f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093f6:	430b      	orrs	r3, r1
 80093f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009406:	6999      	ldr	r1, [r3, #24]
 8009408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	ea40 0301 	orr.w	r3, r0, r1
 8009410:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4bc5      	ldr	r3, [pc, #788]	; (800972c <UART_SetConfig+0x384>)
 8009418:	429a      	cmp	r2, r3
 800941a:	d004      	beq.n	8009426 <UART_SetConfig+0x7e>
 800941c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	4bc3      	ldr	r3, [pc, #780]	; (8009730 <UART_SetConfig+0x388>)
 8009422:	429a      	cmp	r2, r3
 8009424:	d103      	bne.n	800942e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009426:	f7fd f8bf 	bl	80065a8 <HAL_RCC_GetPCLK2Freq>
 800942a:	6778      	str	r0, [r7, #116]	; 0x74
 800942c:	e002      	b.n	8009434 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800942e:	f7fd f8a7 	bl	8006580 <HAL_RCC_GetPCLK1Freq>
 8009432:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943c:	f040 80b6 	bne.w	80095ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009442:	461c      	mov	r4, r3
 8009444:	f04f 0500 	mov.w	r5, #0
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	1891      	adds	r1, r2, r2
 800944e:	6439      	str	r1, [r7, #64]	; 0x40
 8009450:	415b      	adcs	r3, r3
 8009452:	647b      	str	r3, [r7, #68]	; 0x44
 8009454:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009458:	1912      	adds	r2, r2, r4
 800945a:	eb45 0303 	adc.w	r3, r5, r3
 800945e:	f04f 0000 	mov.w	r0, #0
 8009462:	f04f 0100 	mov.w	r1, #0
 8009466:	00d9      	lsls	r1, r3, #3
 8009468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800946c:	00d0      	lsls	r0, r2, #3
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	1911      	adds	r1, r2, r4
 8009474:	6639      	str	r1, [r7, #96]	; 0x60
 8009476:	416b      	adcs	r3, r5
 8009478:	667b      	str	r3, [r7, #100]	; 0x64
 800947a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	461a      	mov	r2, r3
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	1891      	adds	r1, r2, r2
 8009486:	63b9      	str	r1, [r7, #56]	; 0x38
 8009488:	415b      	adcs	r3, r3
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009490:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009494:	f7f7 fbb8 	bl	8000c08 <__aeabi_uldivmod>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4ba5      	ldr	r3, [pc, #660]	; (8009734 <UART_SetConfig+0x38c>)
 800949e:	fba3 2302 	umull	r2, r3, r3, r2
 80094a2:	095b      	lsrs	r3, r3, #5
 80094a4:	011e      	lsls	r6, r3, #4
 80094a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094a8:	461c      	mov	r4, r3
 80094aa:	f04f 0500 	mov.w	r5, #0
 80094ae:	4622      	mov	r2, r4
 80094b0:	462b      	mov	r3, r5
 80094b2:	1891      	adds	r1, r2, r2
 80094b4:	6339      	str	r1, [r7, #48]	; 0x30
 80094b6:	415b      	adcs	r3, r3
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094be:	1912      	adds	r2, r2, r4
 80094c0:	eb45 0303 	adc.w	r3, r5, r3
 80094c4:	f04f 0000 	mov.w	r0, #0
 80094c8:	f04f 0100 	mov.w	r1, #0
 80094cc:	00d9      	lsls	r1, r3, #3
 80094ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094d2:	00d0      	lsls	r0, r2, #3
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	1911      	adds	r1, r2, r4
 80094da:	65b9      	str	r1, [r7, #88]	; 0x58
 80094dc:	416b      	adcs	r3, r5
 80094de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	461a      	mov	r2, r3
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	1891      	adds	r1, r2, r2
 80094ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80094ee:	415b      	adcs	r3, r3
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094fa:	f7f7 fb85 	bl	8000c08 <__aeabi_uldivmod>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4b8c      	ldr	r3, [pc, #560]	; (8009734 <UART_SetConfig+0x38c>)
 8009504:	fba3 1302 	umull	r1, r3, r3, r2
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	2164      	movs	r1, #100	; 0x64
 800950c:	fb01 f303 	mul.w	r3, r1, r3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	3332      	adds	r3, #50	; 0x32
 8009516:	4a87      	ldr	r2, [pc, #540]	; (8009734 <UART_SetConfig+0x38c>)
 8009518:	fba2 2303 	umull	r2, r3, r2, r3
 800951c:	095b      	lsrs	r3, r3, #5
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009524:	441e      	add	r6, r3
 8009526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009528:	4618      	mov	r0, r3
 800952a:	f04f 0100 	mov.w	r1, #0
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	1894      	adds	r4, r2, r2
 8009534:	623c      	str	r4, [r7, #32]
 8009536:	415b      	adcs	r3, r3
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
 800953a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800953e:	1812      	adds	r2, r2, r0
 8009540:	eb41 0303 	adc.w	r3, r1, r3
 8009544:	f04f 0400 	mov.w	r4, #0
 8009548:	f04f 0500 	mov.w	r5, #0
 800954c:	00dd      	lsls	r5, r3, #3
 800954e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009552:	00d4      	lsls	r4, r2, #3
 8009554:	4622      	mov	r2, r4
 8009556:	462b      	mov	r3, r5
 8009558:	1814      	adds	r4, r2, r0
 800955a:	653c      	str	r4, [r7, #80]	; 0x50
 800955c:	414b      	adcs	r3, r1
 800955e:	657b      	str	r3, [r7, #84]	; 0x54
 8009560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	461a      	mov	r2, r3
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	1891      	adds	r1, r2, r2
 800956c:	61b9      	str	r1, [r7, #24]
 800956e:	415b      	adcs	r3, r3
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009576:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800957a:	f7f7 fb45 	bl	8000c08 <__aeabi_uldivmod>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4b6c      	ldr	r3, [pc, #432]	; (8009734 <UART_SetConfig+0x38c>)
 8009584:	fba3 1302 	umull	r1, r3, r3, r2
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	2164      	movs	r1, #100	; 0x64
 800958c:	fb01 f303 	mul.w	r3, r1, r3
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	3332      	adds	r3, #50	; 0x32
 8009596:	4a67      	ldr	r2, [pc, #412]	; (8009734 <UART_SetConfig+0x38c>)
 8009598:	fba2 2303 	umull	r2, r3, r2, r3
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	f003 0207 	and.w	r2, r3, #7
 80095a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4432      	add	r2, r6
 80095a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095aa:	e0b9      	b.n	8009720 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ae:	461c      	mov	r4, r3
 80095b0:	f04f 0500 	mov.w	r5, #0
 80095b4:	4622      	mov	r2, r4
 80095b6:	462b      	mov	r3, r5
 80095b8:	1891      	adds	r1, r2, r2
 80095ba:	6139      	str	r1, [r7, #16]
 80095bc:	415b      	adcs	r3, r3
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095c4:	1912      	adds	r2, r2, r4
 80095c6:	eb45 0303 	adc.w	r3, r5, r3
 80095ca:	f04f 0000 	mov.w	r0, #0
 80095ce:	f04f 0100 	mov.w	r1, #0
 80095d2:	00d9      	lsls	r1, r3, #3
 80095d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095d8:	00d0      	lsls	r0, r2, #3
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	eb12 0804 	adds.w	r8, r2, r4
 80095e2:	eb43 0905 	adc.w	r9, r3, r5
 80095e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f04f 0100 	mov.w	r1, #0
 80095f0:	f04f 0200 	mov.w	r2, #0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	008b      	lsls	r3, r1, #2
 80095fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095fe:	0082      	lsls	r2, r0, #2
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f7 fb00 	bl	8000c08 <__aeabi_uldivmod>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4b49      	ldr	r3, [pc, #292]	; (8009734 <UART_SetConfig+0x38c>)
 800960e:	fba3 2302 	umull	r2, r3, r3, r2
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	011e      	lsls	r6, r3, #4
 8009616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009618:	4618      	mov	r0, r3
 800961a:	f04f 0100 	mov.w	r1, #0
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	1894      	adds	r4, r2, r2
 8009624:	60bc      	str	r4, [r7, #8]
 8009626:	415b      	adcs	r3, r3
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800962e:	1812      	adds	r2, r2, r0
 8009630:	eb41 0303 	adc.w	r3, r1, r3
 8009634:	f04f 0400 	mov.w	r4, #0
 8009638:	f04f 0500 	mov.w	r5, #0
 800963c:	00dd      	lsls	r5, r3, #3
 800963e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009642:	00d4      	lsls	r4, r2, #3
 8009644:	4622      	mov	r2, r4
 8009646:	462b      	mov	r3, r5
 8009648:	1814      	adds	r4, r2, r0
 800964a:	64bc      	str	r4, [r7, #72]	; 0x48
 800964c:	414b      	adcs	r3, r1
 800964e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	f04f 0100 	mov.w	r1, #0
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	f04f 0300 	mov.w	r3, #0
 8009662:	008b      	lsls	r3, r1, #2
 8009664:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009668:	0082      	lsls	r2, r0, #2
 800966a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800966e:	f7f7 facb 	bl	8000c08 <__aeabi_uldivmod>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4b2f      	ldr	r3, [pc, #188]	; (8009734 <UART_SetConfig+0x38c>)
 8009678:	fba3 1302 	umull	r1, r3, r3, r2
 800967c:	095b      	lsrs	r3, r3, #5
 800967e:	2164      	movs	r1, #100	; 0x64
 8009680:	fb01 f303 	mul.w	r3, r1, r3
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	3332      	adds	r3, #50	; 0x32
 800968a:	4a2a      	ldr	r2, [pc, #168]	; (8009734 <UART_SetConfig+0x38c>)
 800968c:	fba2 2303 	umull	r2, r3, r2, r3
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009696:	441e      	add	r6, r3
 8009698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800969a:	4618      	mov	r0, r3
 800969c:	f04f 0100 	mov.w	r1, #0
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	1894      	adds	r4, r2, r2
 80096a6:	603c      	str	r4, [r7, #0]
 80096a8:	415b      	adcs	r3, r3
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b0:	1812      	adds	r2, r2, r0
 80096b2:	eb41 0303 	adc.w	r3, r1, r3
 80096b6:	f04f 0400 	mov.w	r4, #0
 80096ba:	f04f 0500 	mov.w	r5, #0
 80096be:	00dd      	lsls	r5, r3, #3
 80096c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096c4:	00d4      	lsls	r4, r2, #3
 80096c6:	4622      	mov	r2, r4
 80096c8:	462b      	mov	r3, r5
 80096ca:	eb12 0a00 	adds.w	sl, r2, r0
 80096ce:	eb43 0b01 	adc.w	fp, r3, r1
 80096d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f04f 0100 	mov.w	r1, #0
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	008b      	lsls	r3, r1, #2
 80096e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096ea:	0082      	lsls	r2, r0, #2
 80096ec:	4650      	mov	r0, sl
 80096ee:	4659      	mov	r1, fp
 80096f0:	f7f7 fa8a 	bl	8000c08 <__aeabi_uldivmod>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <UART_SetConfig+0x38c>)
 80096fa:	fba3 1302 	umull	r1, r3, r3, r2
 80096fe:	095b      	lsrs	r3, r3, #5
 8009700:	2164      	movs	r1, #100	; 0x64
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	3332      	adds	r3, #50	; 0x32
 800970c:	4a09      	ldr	r2, [pc, #36]	; (8009734 <UART_SetConfig+0x38c>)
 800970e:	fba2 2303 	umull	r2, r3, r2, r3
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	f003 020f 	and.w	r2, r3, #15
 8009718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4432      	add	r2, r6
 800971e:	609a      	str	r2, [r3, #8]
}
 8009720:	bf00      	nop
 8009722:	377c      	adds	r7, #124	; 0x7c
 8009724:	46bd      	mov	sp, r7
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	bf00      	nop
 800972c:	40011000 	.word	0x40011000
 8009730:	40011400 	.word	0x40011400
 8009734:	51eb851f 	.word	0x51eb851f

08009738 <__errno>:
 8009738:	4b01      	ldr	r3, [pc, #4]	; (8009740 <__errno+0x8>)
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000010 	.word	0x20000010

08009744 <__libc_init_array>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4d0d      	ldr	r5, [pc, #52]	; (800977c <__libc_init_array+0x38>)
 8009748:	4c0d      	ldr	r4, [pc, #52]	; (8009780 <__libc_init_array+0x3c>)
 800974a:	1b64      	subs	r4, r4, r5
 800974c:	10a4      	asrs	r4, r4, #2
 800974e:	2600      	movs	r6, #0
 8009750:	42a6      	cmp	r6, r4
 8009752:	d109      	bne.n	8009768 <__libc_init_array+0x24>
 8009754:	4d0b      	ldr	r5, [pc, #44]	; (8009784 <__libc_init_array+0x40>)
 8009756:	4c0c      	ldr	r4, [pc, #48]	; (8009788 <__libc_init_array+0x44>)
 8009758:	f002 fd08 	bl	800c16c <_init>
 800975c:	1b64      	subs	r4, r4, r5
 800975e:	10a4      	asrs	r4, r4, #2
 8009760:	2600      	movs	r6, #0
 8009762:	42a6      	cmp	r6, r4
 8009764:	d105      	bne.n	8009772 <__libc_init_array+0x2e>
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	f855 3b04 	ldr.w	r3, [r5], #4
 800976c:	4798      	blx	r3
 800976e:	3601      	adds	r6, #1
 8009770:	e7ee      	b.n	8009750 <__libc_init_array+0xc>
 8009772:	f855 3b04 	ldr.w	r3, [r5], #4
 8009776:	4798      	blx	r3
 8009778:	3601      	adds	r6, #1
 800977a:	e7f2      	b.n	8009762 <__libc_init_array+0x1e>
 800977c:	0800c5cc 	.word	0x0800c5cc
 8009780:	0800c5cc 	.word	0x0800c5cc
 8009784:	0800c5cc 	.word	0x0800c5cc
 8009788:	0800c5d0 	.word	0x0800c5d0

0800978c <memset>:
 800978c:	4402      	add	r2, r0
 800978e:	4603      	mov	r3, r0
 8009790:	4293      	cmp	r3, r2
 8009792:	d100      	bne.n	8009796 <memset+0xa>
 8009794:	4770      	bx	lr
 8009796:	f803 1b01 	strb.w	r1, [r3], #1
 800979a:	e7f9      	b.n	8009790 <memset+0x4>

0800979c <__cvt>:
 800979c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	ec55 4b10 	vmov	r4, r5, d0
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	460e      	mov	r6, r1
 80097a8:	4619      	mov	r1, r3
 80097aa:	462b      	mov	r3, r5
 80097ac:	bfbb      	ittet	lt
 80097ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097b2:	461d      	movlt	r5, r3
 80097b4:	2300      	movge	r3, #0
 80097b6:	232d      	movlt	r3, #45	; 0x2d
 80097b8:	700b      	strb	r3, [r1, #0]
 80097ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097c0:	4691      	mov	r9, r2
 80097c2:	f023 0820 	bic.w	r8, r3, #32
 80097c6:	bfbc      	itt	lt
 80097c8:	4622      	movlt	r2, r4
 80097ca:	4614      	movlt	r4, r2
 80097cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097d0:	d005      	beq.n	80097de <__cvt+0x42>
 80097d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097d6:	d100      	bne.n	80097da <__cvt+0x3e>
 80097d8:	3601      	adds	r6, #1
 80097da:	2102      	movs	r1, #2
 80097dc:	e000      	b.n	80097e0 <__cvt+0x44>
 80097de:	2103      	movs	r1, #3
 80097e0:	ab03      	add	r3, sp, #12
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	ab02      	add	r3, sp, #8
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	ec45 4b10 	vmov	d0, r4, r5
 80097ec:	4653      	mov	r3, sl
 80097ee:	4632      	mov	r2, r6
 80097f0:	f000 fce2 	bl	800a1b8 <_dtoa_r>
 80097f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097f8:	4607      	mov	r7, r0
 80097fa:	d102      	bne.n	8009802 <__cvt+0x66>
 80097fc:	f019 0f01 	tst.w	r9, #1
 8009800:	d022      	beq.n	8009848 <__cvt+0xac>
 8009802:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009806:	eb07 0906 	add.w	r9, r7, r6
 800980a:	d110      	bne.n	800982e <__cvt+0x92>
 800980c:	783b      	ldrb	r3, [r7, #0]
 800980e:	2b30      	cmp	r3, #48	; 0x30
 8009810:	d10a      	bne.n	8009828 <__cvt+0x8c>
 8009812:	2200      	movs	r2, #0
 8009814:	2300      	movs	r3, #0
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f7 f985 	bl	8000b28 <__aeabi_dcmpeq>
 800981e:	b918      	cbnz	r0, 8009828 <__cvt+0x8c>
 8009820:	f1c6 0601 	rsb	r6, r6, #1
 8009824:	f8ca 6000 	str.w	r6, [sl]
 8009828:	f8da 3000 	ldr.w	r3, [sl]
 800982c:	4499      	add	r9, r3
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f7 f977 	bl	8000b28 <__aeabi_dcmpeq>
 800983a:	b108      	cbz	r0, 8009840 <__cvt+0xa4>
 800983c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009840:	2230      	movs	r2, #48	; 0x30
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	454b      	cmp	r3, r9
 8009846:	d307      	bcc.n	8009858 <__cvt+0xbc>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800984c:	1bdb      	subs	r3, r3, r7
 800984e:	4638      	mov	r0, r7
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	b004      	add	sp, #16
 8009854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009858:	1c59      	adds	r1, r3, #1
 800985a:	9103      	str	r1, [sp, #12]
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e7f0      	b.n	8009842 <__cvt+0xa6>

08009860 <__exponent>:
 8009860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009862:	4603      	mov	r3, r0
 8009864:	2900      	cmp	r1, #0
 8009866:	bfb8      	it	lt
 8009868:	4249      	neglt	r1, r1
 800986a:	f803 2b02 	strb.w	r2, [r3], #2
 800986e:	bfb4      	ite	lt
 8009870:	222d      	movlt	r2, #45	; 0x2d
 8009872:	222b      	movge	r2, #43	; 0x2b
 8009874:	2909      	cmp	r1, #9
 8009876:	7042      	strb	r2, [r0, #1]
 8009878:	dd2a      	ble.n	80098d0 <__exponent+0x70>
 800987a:	f10d 0407 	add.w	r4, sp, #7
 800987e:	46a4      	mov	ip, r4
 8009880:	270a      	movs	r7, #10
 8009882:	46a6      	mov	lr, r4
 8009884:	460a      	mov	r2, r1
 8009886:	fb91 f6f7 	sdiv	r6, r1, r7
 800988a:	fb07 1516 	mls	r5, r7, r6, r1
 800988e:	3530      	adds	r5, #48	; 0x30
 8009890:	2a63      	cmp	r2, #99	; 0x63
 8009892:	f104 34ff 	add.w	r4, r4, #4294967295
 8009896:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800989a:	4631      	mov	r1, r6
 800989c:	dcf1      	bgt.n	8009882 <__exponent+0x22>
 800989e:	3130      	adds	r1, #48	; 0x30
 80098a0:	f1ae 0502 	sub.w	r5, lr, #2
 80098a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098a8:	1c44      	adds	r4, r0, #1
 80098aa:	4629      	mov	r1, r5
 80098ac:	4561      	cmp	r1, ip
 80098ae:	d30a      	bcc.n	80098c6 <__exponent+0x66>
 80098b0:	f10d 0209 	add.w	r2, sp, #9
 80098b4:	eba2 020e 	sub.w	r2, r2, lr
 80098b8:	4565      	cmp	r5, ip
 80098ba:	bf88      	it	hi
 80098bc:	2200      	movhi	r2, #0
 80098be:	4413      	add	r3, r2
 80098c0:	1a18      	subs	r0, r3, r0
 80098c2:	b003      	add	sp, #12
 80098c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098ce:	e7ed      	b.n	80098ac <__exponent+0x4c>
 80098d0:	2330      	movs	r3, #48	; 0x30
 80098d2:	3130      	adds	r1, #48	; 0x30
 80098d4:	7083      	strb	r3, [r0, #2]
 80098d6:	70c1      	strb	r1, [r0, #3]
 80098d8:	1d03      	adds	r3, r0, #4
 80098da:	e7f1      	b.n	80098c0 <__exponent+0x60>

080098dc <_printf_float>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	ed2d 8b02 	vpush	{d8}
 80098e4:	b08d      	sub	sp, #52	; 0x34
 80098e6:	460c      	mov	r4, r1
 80098e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098ec:	4616      	mov	r6, r2
 80098ee:	461f      	mov	r7, r3
 80098f0:	4605      	mov	r5, r0
 80098f2:	f001 fb43 	bl	800af7c <_localeconv_r>
 80098f6:	f8d0 a000 	ldr.w	sl, [r0]
 80098fa:	4650      	mov	r0, sl
 80098fc:	f7f6 fc92 	bl	8000224 <strlen>
 8009900:	2300      	movs	r3, #0
 8009902:	930a      	str	r3, [sp, #40]	; 0x28
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	f8d8 3000 	ldr.w	r3, [r8]
 800990c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009910:	3307      	adds	r3, #7
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	f103 0208 	add.w	r2, r3, #8
 800991a:	f8c8 2000 	str.w	r2, [r8]
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009926:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800992a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800992e:	9307      	str	r3, [sp, #28]
 8009930:	f8cd 8018 	str.w	r8, [sp, #24]
 8009934:	ee08 0a10 	vmov	s16, r0
 8009938:	4b9f      	ldr	r3, [pc, #636]	; (8009bb8 <_printf_float+0x2dc>)
 800993a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	f7f7 f923 	bl	8000b8c <__aeabi_dcmpun>
 8009946:	bb88      	cbnz	r0, 80099ac <_printf_float+0xd0>
 8009948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800994c:	4b9a      	ldr	r3, [pc, #616]	; (8009bb8 <_printf_float+0x2dc>)
 800994e:	f04f 32ff 	mov.w	r2, #4294967295
 8009952:	f7f7 f8fd 	bl	8000b50 <__aeabi_dcmple>
 8009956:	bb48      	cbnz	r0, 80099ac <_printf_float+0xd0>
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	4640      	mov	r0, r8
 800995e:	4649      	mov	r1, r9
 8009960:	f7f7 f8ec 	bl	8000b3c <__aeabi_dcmplt>
 8009964:	b110      	cbz	r0, 800996c <_printf_float+0x90>
 8009966:	232d      	movs	r3, #45	; 0x2d
 8009968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996c:	4b93      	ldr	r3, [pc, #588]	; (8009bbc <_printf_float+0x2e0>)
 800996e:	4894      	ldr	r0, [pc, #592]	; (8009bc0 <_printf_float+0x2e4>)
 8009970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009974:	bf94      	ite	ls
 8009976:	4698      	movls	r8, r3
 8009978:	4680      	movhi	r8, r0
 800997a:	2303      	movs	r3, #3
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	9b05      	ldr	r3, [sp, #20]
 8009980:	f023 0204 	bic.w	r2, r3, #4
 8009984:	6022      	str	r2, [r4, #0]
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	9700      	str	r7, [sp, #0]
 800998c:	4633      	mov	r3, r6
 800998e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f9d8 	bl	8009d48 <_printf_common>
 8009998:	3001      	adds	r0, #1
 800999a:	f040 8090 	bne.w	8009abe <_printf_float+0x1e2>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	b00d      	add	sp, #52	; 0x34
 80099a4:	ecbd 8b02 	vpop	{d8}
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	4642      	mov	r2, r8
 80099ae:	464b      	mov	r3, r9
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f7 f8ea 	bl	8000b8c <__aeabi_dcmpun>
 80099b8:	b140      	cbz	r0, 80099cc <_printf_float+0xf0>
 80099ba:	464b      	mov	r3, r9
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfbc      	itt	lt
 80099c0:	232d      	movlt	r3, #45	; 0x2d
 80099c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099c6:	487f      	ldr	r0, [pc, #508]	; (8009bc4 <_printf_float+0x2e8>)
 80099c8:	4b7f      	ldr	r3, [pc, #508]	; (8009bc8 <_printf_float+0x2ec>)
 80099ca:	e7d1      	b.n	8009970 <_printf_float+0x94>
 80099cc:	6863      	ldr	r3, [r4, #4]
 80099ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099d2:	9206      	str	r2, [sp, #24]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	d13f      	bne.n	8009a58 <_printf_float+0x17c>
 80099d8:	2306      	movs	r3, #6
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	9b05      	ldr	r3, [sp, #20]
 80099de:	6861      	ldr	r1, [r4, #4]
 80099e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099e4:	2300      	movs	r3, #0
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	ab0a      	add	r3, sp, #40	; 0x28
 80099ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099ee:	ab09      	add	r3, sp, #36	; 0x24
 80099f0:	ec49 8b10 	vmov	d0, r8, r9
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7ff fecd 	bl	800979c <__cvt>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a06:	2b47      	cmp	r3, #71	; 0x47
 8009a08:	4680      	mov	r8, r0
 8009a0a:	d108      	bne.n	8009a1e <_printf_float+0x142>
 8009a0c:	1cc8      	adds	r0, r1, #3
 8009a0e:	db02      	blt.n	8009a16 <_printf_float+0x13a>
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	4299      	cmp	r1, r3
 8009a14:	dd41      	ble.n	8009a9a <_printf_float+0x1be>
 8009a16:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a1a:	fa5f fb8b 	uxtb.w	fp, fp
 8009a1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a22:	d820      	bhi.n	8009a66 <_printf_float+0x18a>
 8009a24:	3901      	subs	r1, #1
 8009a26:	465a      	mov	r2, fp
 8009a28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a2c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a2e:	f7ff ff17 	bl	8009860 <__exponent>
 8009a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a34:	1813      	adds	r3, r2, r0
 8009a36:	2a01      	cmp	r2, #1
 8009a38:	4681      	mov	r9, r0
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	dc02      	bgt.n	8009a44 <_printf_float+0x168>
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	07d2      	lsls	r2, r2, #31
 8009a42:	d501      	bpl.n	8009a48 <_printf_float+0x16c>
 8009a44:	3301      	adds	r3, #1
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d09c      	beq.n	800998a <_printf_float+0xae>
 8009a50:	232d      	movs	r3, #45	; 0x2d
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a56:	e798      	b.n	800998a <_printf_float+0xae>
 8009a58:	9a06      	ldr	r2, [sp, #24]
 8009a5a:	2a47      	cmp	r2, #71	; 0x47
 8009a5c:	d1be      	bne.n	80099dc <_printf_float+0x100>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1bc      	bne.n	80099dc <_printf_float+0x100>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7b9      	b.n	80099da <_printf_float+0xfe>
 8009a66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a6a:	d118      	bne.n	8009a9e <_printf_float+0x1c2>
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	dd0b      	ble.n	8009a8a <_printf_float+0x1ae>
 8009a72:	6121      	str	r1, [r4, #16]
 8009a74:	b913      	cbnz	r3, 8009a7c <_printf_float+0x1a0>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	07d0      	lsls	r0, r2, #31
 8009a7a:	d502      	bpl.n	8009a82 <_printf_float+0x1a6>
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	440b      	add	r3, r1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a84:	f04f 0900 	mov.w	r9, #0
 8009a88:	e7de      	b.n	8009a48 <_printf_float+0x16c>
 8009a8a:	b913      	cbnz	r3, 8009a92 <_printf_float+0x1b6>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	07d2      	lsls	r2, r2, #31
 8009a90:	d501      	bpl.n	8009a96 <_printf_float+0x1ba>
 8009a92:	3302      	adds	r3, #2
 8009a94:	e7f4      	b.n	8009a80 <_printf_float+0x1a4>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7f2      	b.n	8009a80 <_printf_float+0x1a4>
 8009a9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	db05      	blt.n	8009ab0 <_printf_float+0x1d4>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	6121      	str	r1, [r4, #16]
 8009aa8:	07d8      	lsls	r0, r3, #31
 8009aaa:	d5ea      	bpl.n	8009a82 <_printf_float+0x1a6>
 8009aac:	1c4b      	adds	r3, r1, #1
 8009aae:	e7e7      	b.n	8009a80 <_printf_float+0x1a4>
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	bfd4      	ite	le
 8009ab4:	f1c1 0202 	rsble	r2, r1, #2
 8009ab8:	2201      	movgt	r2, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	e7e0      	b.n	8009a80 <_printf_float+0x1a4>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	055a      	lsls	r2, r3, #21
 8009ac2:	d407      	bmi.n	8009ad4 <_printf_float+0x1f8>
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b8      	blx	r7
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d12c      	bne.n	8009b2c <_printf_float+0x250>
 8009ad2:	e764      	b.n	800999e <_printf_float+0xc2>
 8009ad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ad8:	f240 80e0 	bls.w	8009c9c <_printf_float+0x3c0>
 8009adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f7f7 f820 	bl	8000b28 <__aeabi_dcmpeq>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d034      	beq.n	8009b56 <_printf_float+0x27a>
 8009aec:	4a37      	ldr	r2, [pc, #220]	; (8009bcc <_printf_float+0x2f0>)
 8009aee:	2301      	movs	r3, #1
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af51 	beq.w	800999e <_printf_float+0xc2>
 8009afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b00:	429a      	cmp	r2, r3
 8009b02:	db02      	blt.n	8009b0a <_printf_float+0x22e>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	07d8      	lsls	r0, r3, #31
 8009b08:	d510      	bpl.n	8009b2c <_printf_float+0x250>
 8009b0a:	ee18 3a10 	vmov	r3, s16
 8009b0e:	4652      	mov	r2, sl
 8009b10:	4631      	mov	r1, r6
 8009b12:	4628      	mov	r0, r5
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f af41 	beq.w	800999e <_printf_float+0xc2>
 8009b1c:	f04f 0800 	mov.w	r8, #0
 8009b20:	f104 091a 	add.w	r9, r4, #26
 8009b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b26:	3b01      	subs	r3, #1
 8009b28:	4543      	cmp	r3, r8
 8009b2a:	dc09      	bgt.n	8009b40 <_printf_float+0x264>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	079b      	lsls	r3, r3, #30
 8009b30:	f100 8105 	bmi.w	8009d3e <_printf_float+0x462>
 8009b34:	68e0      	ldr	r0, [r4, #12]
 8009b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b38:	4298      	cmp	r0, r3
 8009b3a:	bfb8      	it	lt
 8009b3c:	4618      	movlt	r0, r3
 8009b3e:	e730      	b.n	80099a2 <_printf_float+0xc6>
 8009b40:	2301      	movs	r3, #1
 8009b42:	464a      	mov	r2, r9
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f af27 	beq.w	800999e <_printf_float+0xc2>
 8009b50:	f108 0801 	add.w	r8, r8, #1
 8009b54:	e7e6      	b.n	8009b24 <_printf_float+0x248>
 8009b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dc39      	bgt.n	8009bd0 <_printf_float+0x2f4>
 8009b5c:	4a1b      	ldr	r2, [pc, #108]	; (8009bcc <_printf_float+0x2f0>)
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f af19 	beq.w	800999e <_printf_float+0xc2>
 8009b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b70:	4313      	orrs	r3, r2
 8009b72:	d102      	bne.n	8009b7a <_printf_float+0x29e>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07d9      	lsls	r1, r3, #31
 8009b78:	d5d8      	bpl.n	8009b2c <_printf_float+0x250>
 8009b7a:	ee18 3a10 	vmov	r3, s16
 8009b7e:	4652      	mov	r2, sl
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f af09 	beq.w	800999e <_printf_float+0xc2>
 8009b8c:	f04f 0900 	mov.w	r9, #0
 8009b90:	f104 0a1a 	add.w	sl, r4, #26
 8009b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b96:	425b      	negs	r3, r3
 8009b98:	454b      	cmp	r3, r9
 8009b9a:	dc01      	bgt.n	8009ba0 <_printf_float+0x2c4>
 8009b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9e:	e792      	b.n	8009ac6 <_printf_float+0x1ea>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4652      	mov	r2, sl
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f aef7 	beq.w	800999e <_printf_float+0xc2>
 8009bb0:	f109 0901 	add.w	r9, r9, #1
 8009bb4:	e7ee      	b.n	8009b94 <_printf_float+0x2b8>
 8009bb6:	bf00      	nop
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	0800c1e4 	.word	0x0800c1e4
 8009bc0:	0800c1e8 	.word	0x0800c1e8
 8009bc4:	0800c1f0 	.word	0x0800c1f0
 8009bc8:	0800c1ec 	.word	0x0800c1ec
 8009bcc:	0800c1f4 	.word	0x0800c1f4
 8009bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	bfa8      	it	ge
 8009bd8:	461a      	movge	r2, r3
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	4691      	mov	r9, r2
 8009bde:	dc37      	bgt.n	8009c50 <_printf_float+0x374>
 8009be0:	f04f 0b00 	mov.w	fp, #0
 8009be4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009be8:	f104 021a 	add.w	r2, r4, #26
 8009bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	eba3 0309 	sub.w	r3, r3, r9
 8009bf4:	455b      	cmp	r3, fp
 8009bf6:	dc33      	bgt.n	8009c60 <_printf_float+0x384>
 8009bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	db3b      	blt.n	8009c78 <_printf_float+0x39c>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	07da      	lsls	r2, r3, #31
 8009c04:	d438      	bmi.n	8009c78 <_printf_float+0x39c>
 8009c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c08:	9b05      	ldr	r3, [sp, #20]
 8009c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	eba2 0901 	sub.w	r9, r2, r1
 8009c12:	4599      	cmp	r9, r3
 8009c14:	bfa8      	it	ge
 8009c16:	4699      	movge	r9, r3
 8009c18:	f1b9 0f00 	cmp.w	r9, #0
 8009c1c:	dc35      	bgt.n	8009c8a <_printf_float+0x3ae>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c26:	f104 0a1a 	add.w	sl, r4, #26
 8009c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	eba3 0309 	sub.w	r3, r3, r9
 8009c34:	4543      	cmp	r3, r8
 8009c36:	f77f af79 	ble.w	8009b2c <_printf_float+0x250>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	f43f aeaa 	beq.w	800999e <_printf_float+0xc2>
 8009c4a:	f108 0801 	add.w	r8, r8, #1
 8009c4e:	e7ec      	b.n	8009c2a <_printf_float+0x34e>
 8009c50:	4613      	mov	r3, r2
 8009c52:	4631      	mov	r1, r6
 8009c54:	4642      	mov	r2, r8
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d1c0      	bne.n	8009be0 <_printf_float+0x304>
 8009c5e:	e69e      	b.n	800999e <_printf_float+0xc2>
 8009c60:	2301      	movs	r3, #1
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	47b8      	blx	r7
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	f43f ae97 	beq.w	800999e <_printf_float+0xc2>
 8009c70:	9a05      	ldr	r2, [sp, #20]
 8009c72:	f10b 0b01 	add.w	fp, fp, #1
 8009c76:	e7b9      	b.n	8009bec <_printf_float+0x310>
 8009c78:	ee18 3a10 	vmov	r3, s16
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	d1be      	bne.n	8009c06 <_printf_float+0x32a>
 8009c88:	e689      	b.n	800999e <_printf_float+0xc2>
 8009c8a:	9a05      	ldr	r2, [sp, #20]
 8009c8c:	464b      	mov	r3, r9
 8009c8e:	4442      	add	r2, r8
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	d1c1      	bne.n	8009c1e <_printf_float+0x342>
 8009c9a:	e680      	b.n	800999e <_printf_float+0xc2>
 8009c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c9e:	2a01      	cmp	r2, #1
 8009ca0:	dc01      	bgt.n	8009ca6 <_printf_float+0x3ca>
 8009ca2:	07db      	lsls	r3, r3, #31
 8009ca4:	d538      	bpl.n	8009d18 <_printf_float+0x43c>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4642      	mov	r2, r8
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae74 	beq.w	800999e <_printf_float+0xc2>
 8009cb6:	ee18 3a10 	vmov	r3, s16
 8009cba:	4652      	mov	r2, sl
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f43f ae6b 	beq.w	800999e <_printf_float+0xc2>
 8009cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f7f6 ff2a 	bl	8000b28 <__aeabi_dcmpeq>
 8009cd4:	b9d8      	cbnz	r0, 8009d0e <_printf_float+0x432>
 8009cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd8:	f108 0201 	add.w	r2, r8, #1
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d10e      	bne.n	8009d06 <_printf_float+0x42a>
 8009ce8:	e659      	b.n	800999e <_printf_float+0xc2>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4652      	mov	r2, sl
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae52 	beq.w	800999e <_printf_float+0xc2>
 8009cfa:	f108 0801 	add.w	r8, r8, #1
 8009cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d00:	3b01      	subs	r3, #1
 8009d02:	4543      	cmp	r3, r8
 8009d04:	dcf1      	bgt.n	8009cea <_printf_float+0x40e>
 8009d06:	464b      	mov	r3, r9
 8009d08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d0c:	e6dc      	b.n	8009ac8 <_printf_float+0x1ec>
 8009d0e:	f04f 0800 	mov.w	r8, #0
 8009d12:	f104 0a1a 	add.w	sl, r4, #26
 8009d16:	e7f2      	b.n	8009cfe <_printf_float+0x422>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4642      	mov	r2, r8
 8009d1c:	e7df      	b.n	8009cde <_printf_float+0x402>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	464a      	mov	r2, r9
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f43f ae38 	beq.w	800999e <_printf_float+0xc2>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	68e3      	ldr	r3, [r4, #12]
 8009d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d36:	1a5b      	subs	r3, r3, r1
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	dcf0      	bgt.n	8009d1e <_printf_float+0x442>
 8009d3c:	e6fa      	b.n	8009b34 <_printf_float+0x258>
 8009d3e:	f04f 0800 	mov.w	r8, #0
 8009d42:	f104 0919 	add.w	r9, r4, #25
 8009d46:	e7f4      	b.n	8009d32 <_printf_float+0x456>

08009d48 <_printf_common>:
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	4616      	mov	r6, r2
 8009d4e:	4699      	mov	r9, r3
 8009d50:	688a      	ldr	r2, [r1, #8]
 8009d52:	690b      	ldr	r3, [r1, #16]
 8009d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	bfb8      	it	lt
 8009d5c:	4613      	movlt	r3, r2
 8009d5e:	6033      	str	r3, [r6, #0]
 8009d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d64:	4607      	mov	r7, r0
 8009d66:	460c      	mov	r4, r1
 8009d68:	b10a      	cbz	r2, 8009d6e <_printf_common+0x26>
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	6033      	str	r3, [r6, #0]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	0699      	lsls	r1, r3, #26
 8009d72:	bf42      	ittt	mi
 8009d74:	6833      	ldrmi	r3, [r6, #0]
 8009d76:	3302      	addmi	r3, #2
 8009d78:	6033      	strmi	r3, [r6, #0]
 8009d7a:	6825      	ldr	r5, [r4, #0]
 8009d7c:	f015 0506 	ands.w	r5, r5, #6
 8009d80:	d106      	bne.n	8009d90 <_printf_common+0x48>
 8009d82:	f104 0a19 	add.w	sl, r4, #25
 8009d86:	68e3      	ldr	r3, [r4, #12]
 8009d88:	6832      	ldr	r2, [r6, #0]
 8009d8a:	1a9b      	subs	r3, r3, r2
 8009d8c:	42ab      	cmp	r3, r5
 8009d8e:	dc26      	bgt.n	8009dde <_printf_common+0x96>
 8009d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d94:	1e13      	subs	r3, r2, #0
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	bf18      	it	ne
 8009d9a:	2301      	movne	r3, #1
 8009d9c:	0692      	lsls	r2, r2, #26
 8009d9e:	d42b      	bmi.n	8009df8 <_printf_common+0xb0>
 8009da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009da4:	4649      	mov	r1, r9
 8009da6:	4638      	mov	r0, r7
 8009da8:	47c0      	blx	r8
 8009daa:	3001      	adds	r0, #1
 8009dac:	d01e      	beq.n	8009dec <_printf_common+0xa4>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	68e5      	ldr	r5, [r4, #12]
 8009db2:	6832      	ldr	r2, [r6, #0]
 8009db4:	f003 0306 	and.w	r3, r3, #6
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	bf08      	it	eq
 8009dbc:	1aad      	subeq	r5, r5, r2
 8009dbe:	68a3      	ldr	r3, [r4, #8]
 8009dc0:	6922      	ldr	r2, [r4, #16]
 8009dc2:	bf0c      	ite	eq
 8009dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dc8:	2500      	movne	r5, #0
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	bfc4      	itt	gt
 8009dce:	1a9b      	subgt	r3, r3, r2
 8009dd0:	18ed      	addgt	r5, r5, r3
 8009dd2:	2600      	movs	r6, #0
 8009dd4:	341a      	adds	r4, #26
 8009dd6:	42b5      	cmp	r5, r6
 8009dd8:	d11a      	bne.n	8009e10 <_printf_common+0xc8>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e008      	b.n	8009df0 <_printf_common+0xa8>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4652      	mov	r2, sl
 8009de2:	4649      	mov	r1, r9
 8009de4:	4638      	mov	r0, r7
 8009de6:	47c0      	blx	r8
 8009de8:	3001      	adds	r0, #1
 8009dea:	d103      	bne.n	8009df4 <_printf_common+0xac>
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df4:	3501      	adds	r5, #1
 8009df6:	e7c6      	b.n	8009d86 <_printf_common+0x3e>
 8009df8:	18e1      	adds	r1, r4, r3
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	2030      	movs	r0, #48	; 0x30
 8009dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e02:	4422      	add	r2, r4
 8009e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	e7c7      	b.n	8009da0 <_printf_common+0x58>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4622      	mov	r2, r4
 8009e14:	4649      	mov	r1, r9
 8009e16:	4638      	mov	r0, r7
 8009e18:	47c0      	blx	r8
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d0e6      	beq.n	8009dec <_printf_common+0xa4>
 8009e1e:	3601      	adds	r6, #1
 8009e20:	e7d9      	b.n	8009dd6 <_printf_common+0x8e>
	...

08009e24 <_printf_i>:
 8009e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	4691      	mov	r9, r2
 8009e2c:	7e27      	ldrb	r7, [r4, #24]
 8009e2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e30:	2f78      	cmp	r7, #120	; 0x78
 8009e32:	4680      	mov	r8, r0
 8009e34:	469a      	mov	sl, r3
 8009e36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e3a:	d807      	bhi.n	8009e4c <_printf_i+0x28>
 8009e3c:	2f62      	cmp	r7, #98	; 0x62
 8009e3e:	d80a      	bhi.n	8009e56 <_printf_i+0x32>
 8009e40:	2f00      	cmp	r7, #0
 8009e42:	f000 80d8 	beq.w	8009ff6 <_printf_i+0x1d2>
 8009e46:	2f58      	cmp	r7, #88	; 0x58
 8009e48:	f000 80a3 	beq.w	8009f92 <_printf_i+0x16e>
 8009e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e54:	e03a      	b.n	8009ecc <_printf_i+0xa8>
 8009e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e5a:	2b15      	cmp	r3, #21
 8009e5c:	d8f6      	bhi.n	8009e4c <_printf_i+0x28>
 8009e5e:	a001      	add	r0, pc, #4	; (adr r0, 8009e64 <_printf_i+0x40>)
 8009e60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e64:	08009ebd 	.word	0x08009ebd
 8009e68:	08009ed1 	.word	0x08009ed1
 8009e6c:	08009e4d 	.word	0x08009e4d
 8009e70:	08009e4d 	.word	0x08009e4d
 8009e74:	08009e4d 	.word	0x08009e4d
 8009e78:	08009e4d 	.word	0x08009e4d
 8009e7c:	08009ed1 	.word	0x08009ed1
 8009e80:	08009e4d 	.word	0x08009e4d
 8009e84:	08009e4d 	.word	0x08009e4d
 8009e88:	08009e4d 	.word	0x08009e4d
 8009e8c:	08009e4d 	.word	0x08009e4d
 8009e90:	08009fdd 	.word	0x08009fdd
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009fbf 	.word	0x08009fbf
 8009e9c:	08009e4d 	.word	0x08009e4d
 8009ea0:	08009e4d 	.word	0x08009e4d
 8009ea4:	08009fff 	.word	0x08009fff
 8009ea8:	08009e4d 	.word	0x08009e4d
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009e4d 	.word	0x08009e4d
 8009eb4:	08009e4d 	.word	0x08009e4d
 8009eb8:	08009fc7 	.word	0x08009fc7
 8009ebc:	680b      	ldr	r3, [r1, #0]
 8009ebe:	1d1a      	adds	r2, r3, #4
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	600a      	str	r2, [r1, #0]
 8009ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e0a3      	b.n	800a018 <_printf_i+0x1f4>
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	6808      	ldr	r0, [r1, #0]
 8009ed4:	062e      	lsls	r6, r5, #24
 8009ed6:	f100 0304 	add.w	r3, r0, #4
 8009eda:	d50a      	bpl.n	8009ef2 <_printf_i+0xce>
 8009edc:	6805      	ldr	r5, [r0, #0]
 8009ede:	600b      	str	r3, [r1, #0]
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	da03      	bge.n	8009eec <_printf_i+0xc8>
 8009ee4:	232d      	movs	r3, #45	; 0x2d
 8009ee6:	426d      	negs	r5, r5
 8009ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eec:	485e      	ldr	r0, [pc, #376]	; (800a068 <_printf_i+0x244>)
 8009eee:	230a      	movs	r3, #10
 8009ef0:	e019      	b.n	8009f26 <_printf_i+0x102>
 8009ef2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ef6:	6805      	ldr	r5, [r0, #0]
 8009ef8:	600b      	str	r3, [r1, #0]
 8009efa:	bf18      	it	ne
 8009efc:	b22d      	sxthne	r5, r5
 8009efe:	e7ef      	b.n	8009ee0 <_printf_i+0xbc>
 8009f00:	680b      	ldr	r3, [r1, #0]
 8009f02:	6825      	ldr	r5, [r4, #0]
 8009f04:	1d18      	adds	r0, r3, #4
 8009f06:	6008      	str	r0, [r1, #0]
 8009f08:	0628      	lsls	r0, r5, #24
 8009f0a:	d501      	bpl.n	8009f10 <_printf_i+0xec>
 8009f0c:	681d      	ldr	r5, [r3, #0]
 8009f0e:	e002      	b.n	8009f16 <_printf_i+0xf2>
 8009f10:	0669      	lsls	r1, r5, #25
 8009f12:	d5fb      	bpl.n	8009f0c <_printf_i+0xe8>
 8009f14:	881d      	ldrh	r5, [r3, #0]
 8009f16:	4854      	ldr	r0, [pc, #336]	; (800a068 <_printf_i+0x244>)
 8009f18:	2f6f      	cmp	r7, #111	; 0x6f
 8009f1a:	bf0c      	ite	eq
 8009f1c:	2308      	moveq	r3, #8
 8009f1e:	230a      	movne	r3, #10
 8009f20:	2100      	movs	r1, #0
 8009f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f26:	6866      	ldr	r6, [r4, #4]
 8009f28:	60a6      	str	r6, [r4, #8]
 8009f2a:	2e00      	cmp	r6, #0
 8009f2c:	bfa2      	ittt	ge
 8009f2e:	6821      	ldrge	r1, [r4, #0]
 8009f30:	f021 0104 	bicge.w	r1, r1, #4
 8009f34:	6021      	strge	r1, [r4, #0]
 8009f36:	b90d      	cbnz	r5, 8009f3c <_printf_i+0x118>
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	d04d      	beq.n	8009fd8 <_printf_i+0x1b4>
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f42:	fb03 5711 	mls	r7, r3, r1, r5
 8009f46:	5dc7      	ldrb	r7, [r0, r7]
 8009f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f4c:	462f      	mov	r7, r5
 8009f4e:	42bb      	cmp	r3, r7
 8009f50:	460d      	mov	r5, r1
 8009f52:	d9f4      	bls.n	8009f3e <_printf_i+0x11a>
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d10b      	bne.n	8009f70 <_printf_i+0x14c>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	07df      	lsls	r7, r3, #31
 8009f5c:	d508      	bpl.n	8009f70 <_printf_i+0x14c>
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	6861      	ldr	r1, [r4, #4]
 8009f62:	4299      	cmp	r1, r3
 8009f64:	bfde      	ittt	le
 8009f66:	2330      	movle	r3, #48	; 0x30
 8009f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f70:	1b92      	subs	r2, r2, r6
 8009f72:	6122      	str	r2, [r4, #16]
 8009f74:	f8cd a000 	str.w	sl, [sp]
 8009f78:	464b      	mov	r3, r9
 8009f7a:	aa03      	add	r2, sp, #12
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7ff fee2 	bl	8009d48 <_printf_common>
 8009f84:	3001      	adds	r0, #1
 8009f86:	d14c      	bne.n	800a022 <_printf_i+0x1fe>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	b004      	add	sp, #16
 8009f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f92:	4835      	ldr	r0, [pc, #212]	; (800a068 <_printf_i+0x244>)
 8009f94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	680e      	ldr	r6, [r1, #0]
 8009f9c:	061f      	lsls	r7, r3, #24
 8009f9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fa2:	600e      	str	r6, [r1, #0]
 8009fa4:	d514      	bpl.n	8009fd0 <_printf_i+0x1ac>
 8009fa6:	07d9      	lsls	r1, r3, #31
 8009fa8:	bf44      	itt	mi
 8009faa:	f043 0320 	orrmi.w	r3, r3, #32
 8009fae:	6023      	strmi	r3, [r4, #0]
 8009fb0:	b91d      	cbnz	r5, 8009fba <_printf_i+0x196>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	f023 0320 	bic.w	r3, r3, #32
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	2310      	movs	r3, #16
 8009fbc:	e7b0      	b.n	8009f20 <_printf_i+0xfc>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	f043 0320 	orr.w	r3, r3, #32
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	2378      	movs	r3, #120	; 0x78
 8009fc8:	4828      	ldr	r0, [pc, #160]	; (800a06c <_printf_i+0x248>)
 8009fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fce:	e7e3      	b.n	8009f98 <_printf_i+0x174>
 8009fd0:	065e      	lsls	r6, r3, #25
 8009fd2:	bf48      	it	mi
 8009fd4:	b2ad      	uxthmi	r5, r5
 8009fd6:	e7e6      	b.n	8009fa6 <_printf_i+0x182>
 8009fd8:	4616      	mov	r6, r2
 8009fda:	e7bb      	b.n	8009f54 <_printf_i+0x130>
 8009fdc:	680b      	ldr	r3, [r1, #0]
 8009fde:	6826      	ldr	r6, [r4, #0]
 8009fe0:	6960      	ldr	r0, [r4, #20]
 8009fe2:	1d1d      	adds	r5, r3, #4
 8009fe4:	600d      	str	r5, [r1, #0]
 8009fe6:	0635      	lsls	r5, r6, #24
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	d501      	bpl.n	8009ff0 <_printf_i+0x1cc>
 8009fec:	6018      	str	r0, [r3, #0]
 8009fee:	e002      	b.n	8009ff6 <_printf_i+0x1d2>
 8009ff0:	0671      	lsls	r1, r6, #25
 8009ff2:	d5fb      	bpl.n	8009fec <_printf_i+0x1c8>
 8009ff4:	8018      	strh	r0, [r3, #0]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	4616      	mov	r6, r2
 8009ffc:	e7ba      	b.n	8009f74 <_printf_i+0x150>
 8009ffe:	680b      	ldr	r3, [r1, #0]
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	600a      	str	r2, [r1, #0]
 800a004:	681e      	ldr	r6, [r3, #0]
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	2100      	movs	r1, #0
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 f918 	bl	8000240 <memchr>
 800a010:	b108      	cbz	r0, 800a016 <_printf_i+0x1f2>
 800a012:	1b80      	subs	r0, r0, r6
 800a014:	6060      	str	r0, [r4, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	2300      	movs	r3, #0
 800a01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a020:	e7a8      	b.n	8009f74 <_printf_i+0x150>
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	4632      	mov	r2, r6
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d0ab      	beq.n	8009f88 <_printf_i+0x164>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	079b      	lsls	r3, r3, #30
 800a034:	d413      	bmi.n	800a05e <_printf_i+0x23a>
 800a036:	68e0      	ldr	r0, [r4, #12]
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	4298      	cmp	r0, r3
 800a03c:	bfb8      	it	lt
 800a03e:	4618      	movlt	r0, r3
 800a040:	e7a4      	b.n	8009f8c <_printf_i+0x168>
 800a042:	2301      	movs	r3, #1
 800a044:	4632      	mov	r2, r6
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	47d0      	blx	sl
 800a04c:	3001      	adds	r0, #1
 800a04e:	d09b      	beq.n	8009f88 <_printf_i+0x164>
 800a050:	3501      	adds	r5, #1
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	9903      	ldr	r1, [sp, #12]
 800a056:	1a5b      	subs	r3, r3, r1
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dcf2      	bgt.n	800a042 <_printf_i+0x21e>
 800a05c:	e7eb      	b.n	800a036 <_printf_i+0x212>
 800a05e:	2500      	movs	r5, #0
 800a060:	f104 0619 	add.w	r6, r4, #25
 800a064:	e7f5      	b.n	800a052 <_printf_i+0x22e>
 800a066:	bf00      	nop
 800a068:	0800c1f6 	.word	0x0800c1f6
 800a06c:	0800c207 	.word	0x0800c207

0800a070 <iprintf>:
 800a070:	b40f      	push	{r0, r1, r2, r3}
 800a072:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <iprintf+0x2c>)
 800a074:	b513      	push	{r0, r1, r4, lr}
 800a076:	681c      	ldr	r4, [r3, #0]
 800a078:	b124      	cbz	r4, 800a084 <iprintf+0x14>
 800a07a:	69a3      	ldr	r3, [r4, #24]
 800a07c:	b913      	cbnz	r3, 800a084 <iprintf+0x14>
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 fede 	bl	800ae40 <__sinit>
 800a084:	ab05      	add	r3, sp, #20
 800a086:	9a04      	ldr	r2, [sp, #16]
 800a088:	68a1      	ldr	r1, [r4, #8]
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	4620      	mov	r0, r4
 800a08e:	f001 fbf5 	bl	800b87c <_vfiprintf_r>
 800a092:	b002      	add	sp, #8
 800a094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a098:	b004      	add	sp, #16
 800a09a:	4770      	bx	lr
 800a09c:	20000010 	.word	0x20000010

0800a0a0 <quorem>:
 800a0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	6903      	ldr	r3, [r0, #16]
 800a0a6:	690c      	ldr	r4, [r1, #16]
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	f2c0 8081 	blt.w	800a1b2 <quorem+0x112>
 800a0b0:	3c01      	subs	r4, #1
 800a0b2:	f101 0814 	add.w	r8, r1, #20
 800a0b6:	f100 0514 	add.w	r5, r0, #20
 800a0ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0d8:	d331      	bcc.n	800a13e <quorem+0x9e>
 800a0da:	f04f 0e00 	mov.w	lr, #0
 800a0de:	4640      	mov	r0, r8
 800a0e0:	46ac      	mov	ip, r5
 800a0e2:	46f2      	mov	sl, lr
 800a0e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0e8:	b293      	uxth	r3, r2
 800a0ea:	fb06 e303 	mla	r3, r6, r3, lr
 800a0ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0f8:	0c12      	lsrs	r2, r2, #16
 800a0fa:	f8dc a000 	ldr.w	sl, [ip]
 800a0fe:	fb06 e202 	mla	r2, r6, r2, lr
 800a102:	fa13 f38a 	uxtah	r3, r3, sl
 800a106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a10a:	fa1f fa82 	uxth.w	sl, r2
 800a10e:	f8dc 2000 	ldr.w	r2, [ip]
 800a112:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a120:	4581      	cmp	r9, r0
 800a122:	f84c 3b04 	str.w	r3, [ip], #4
 800a126:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a12a:	d2db      	bcs.n	800a0e4 <quorem+0x44>
 800a12c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a130:	b92b      	cbnz	r3, 800a13e <quorem+0x9e>
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	3b04      	subs	r3, #4
 800a136:	429d      	cmp	r5, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	d32e      	bcc.n	800a19a <quorem+0xfa>
 800a13c:	613c      	str	r4, [r7, #16]
 800a13e:	4638      	mov	r0, r7
 800a140:	f001 f9b8 	bl	800b4b4 <__mcmp>
 800a144:	2800      	cmp	r0, #0
 800a146:	db24      	blt.n	800a192 <quorem+0xf2>
 800a148:	3601      	adds	r6, #1
 800a14a:	4628      	mov	r0, r5
 800a14c:	f04f 0c00 	mov.w	ip, #0
 800a150:	f858 2b04 	ldr.w	r2, [r8], #4
 800a154:	f8d0 e000 	ldr.w	lr, [r0]
 800a158:	b293      	uxth	r3, r2
 800a15a:	ebac 0303 	sub.w	r3, ip, r3
 800a15e:	0c12      	lsrs	r2, r2, #16
 800a160:	fa13 f38e 	uxtah	r3, r3, lr
 800a164:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a172:	45c1      	cmp	r9, r8
 800a174:	f840 3b04 	str.w	r3, [r0], #4
 800a178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a17c:	d2e8      	bcs.n	800a150 <quorem+0xb0>
 800a17e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a186:	b922      	cbnz	r2, 800a192 <quorem+0xf2>
 800a188:	3b04      	subs	r3, #4
 800a18a:	429d      	cmp	r5, r3
 800a18c:	461a      	mov	r2, r3
 800a18e:	d30a      	bcc.n	800a1a6 <quorem+0x106>
 800a190:	613c      	str	r4, [r7, #16]
 800a192:	4630      	mov	r0, r6
 800a194:	b003      	add	sp, #12
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	3b04      	subs	r3, #4
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d1cc      	bne.n	800a13c <quorem+0x9c>
 800a1a2:	3c01      	subs	r4, #1
 800a1a4:	e7c7      	b.n	800a136 <quorem+0x96>
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d1f0      	bne.n	800a190 <quorem+0xf0>
 800a1ae:	3c01      	subs	r4, #1
 800a1b0:	e7eb      	b.n	800a18a <quorem+0xea>
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	e7ee      	b.n	800a194 <quorem+0xf4>
	...

0800a1b8 <_dtoa_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	ed2d 8b02 	vpush	{d8}
 800a1c0:	ec57 6b10 	vmov	r6, r7, d0
 800a1c4:	b095      	sub	sp, #84	; 0x54
 800a1c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1cc:	9105      	str	r1, [sp, #20]
 800a1ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1d8:	b975      	cbnz	r5, 800a1f8 <_dtoa_r+0x40>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f000 fed6 	bl	800af8c <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_dtoa_r+0x38>
 800a1e6:	4bb2      	ldr	r3, [pc, #712]	; (800a4b0 <_dtoa_r+0x2f8>)
 800a1e8:	21ea      	movs	r1, #234	; 0xea
 800a1ea:	48b2      	ldr	r0, [pc, #712]	; (800a4b4 <_dtoa_r+0x2fc>)
 800a1ec:	f001 fd9c 	bl	800bd28 <__assert_func>
 800a1f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1f4:	6005      	str	r5, [r0, #0]
 800a1f6:	60c5      	str	r5, [r0, #12]
 800a1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fa:	6819      	ldr	r1, [r3, #0]
 800a1fc:	b151      	cbz	r1, 800a214 <_dtoa_r+0x5c>
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	604a      	str	r2, [r1, #4]
 800a202:	2301      	movs	r3, #1
 800a204:	4093      	lsls	r3, r2
 800a206:	608b      	str	r3, [r1, #8]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 ff15 	bl	800b038 <_Bfree>
 800a20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	1e3b      	subs	r3, r7, #0
 800a216:	bfb9      	ittee	lt
 800a218:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a21c:	9303      	strlt	r3, [sp, #12]
 800a21e:	2300      	movge	r3, #0
 800a220:	f8c8 3000 	strge.w	r3, [r8]
 800a224:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a228:	4ba3      	ldr	r3, [pc, #652]	; (800a4b8 <_dtoa_r+0x300>)
 800a22a:	bfbc      	itt	lt
 800a22c:	2201      	movlt	r2, #1
 800a22e:	f8c8 2000 	strlt.w	r2, [r8]
 800a232:	ea33 0309 	bics.w	r3, r3, r9
 800a236:	d11b      	bne.n	800a270 <_dtoa_r+0xb8>
 800a238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a23a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a244:	4333      	orrs	r3, r6
 800a246:	f000 857a 	beq.w	800ad3e <_dtoa_r+0xb86>
 800a24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a24c:	b963      	cbnz	r3, 800a268 <_dtoa_r+0xb0>
 800a24e:	4b9b      	ldr	r3, [pc, #620]	; (800a4bc <_dtoa_r+0x304>)
 800a250:	e024      	b.n	800a29c <_dtoa_r+0xe4>
 800a252:	4b9b      	ldr	r3, [pc, #620]	; (800a4c0 <_dtoa_r+0x308>)
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	9800      	ldr	r0, [sp, #0]
 800a25e:	b015      	add	sp, #84	; 0x54
 800a260:	ecbd 8b02 	vpop	{d8}
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	4b94      	ldr	r3, [pc, #592]	; (800a4bc <_dtoa_r+0x304>)
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	3303      	adds	r3, #3
 800a26e:	e7f3      	b.n	800a258 <_dtoa_r+0xa0>
 800a270:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	ec51 0b17 	vmov	r0, r1, d7
 800a27a:	2300      	movs	r3, #0
 800a27c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a280:	f7f6 fc52 	bl	8000b28 <__aeabi_dcmpeq>
 800a284:	4680      	mov	r8, r0
 800a286:	b158      	cbz	r0, 800a2a0 <_dtoa_r+0xe8>
 800a288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a28a:	2301      	movs	r3, #1
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8551 	beq.w	800ad38 <_dtoa_r+0xb80>
 800a296:	488b      	ldr	r0, [pc, #556]	; (800a4c4 <_dtoa_r+0x30c>)
 800a298:	6018      	str	r0, [r3, #0]
 800a29a:	1e43      	subs	r3, r0, #1
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	e7dd      	b.n	800a25c <_dtoa_r+0xa4>
 800a2a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a2a4:	aa12      	add	r2, sp, #72	; 0x48
 800a2a6:	a913      	add	r1, sp, #76	; 0x4c
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 f9a7 	bl	800b5fc <__d2b>
 800a2ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2b2:	4683      	mov	fp, r0
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	d07c      	beq.n	800a3b2 <_dtoa_r+0x1fa>
 800a2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a2be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a2c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2d2:	4b7d      	ldr	r3, [pc, #500]	; (800a4c8 <_dtoa_r+0x310>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4639      	mov	r1, r7
 800a2da:	f7f6 f805 	bl	80002e8 <__aeabi_dsub>
 800a2de:	a36e      	add	r3, pc, #440	; (adr r3, 800a498 <_dtoa_r+0x2e0>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f6 f9b8 	bl	8000658 <__aeabi_dmul>
 800a2e8:	a36d      	add	r3, pc, #436	; (adr r3, 800a4a0 <_dtoa_r+0x2e8>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f5 fffd 	bl	80002ec <__adddf3>
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	f7f6 f944 	bl	8000584 <__aeabi_i2d>
 800a2fc:	a36a      	add	r3, pc, #424	; (adr r3, 800a4a8 <_dtoa_r+0x2f0>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f6 f9a9 	bl	8000658 <__aeabi_dmul>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4630      	mov	r0, r6
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f5 ffed 	bl	80002ec <__adddf3>
 800a312:	4606      	mov	r6, r0
 800a314:	460f      	mov	r7, r1
 800a316:	f7f6 fc4f 	bl	8000bb8 <__aeabi_d2iz>
 800a31a:	2200      	movs	r2, #0
 800a31c:	4682      	mov	sl, r0
 800a31e:	2300      	movs	r3, #0
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 fc0a 	bl	8000b3c <__aeabi_dcmplt>
 800a328:	b148      	cbz	r0, 800a33e <_dtoa_r+0x186>
 800a32a:	4650      	mov	r0, sl
 800a32c:	f7f6 f92a 	bl	8000584 <__aeabi_i2d>
 800a330:	4632      	mov	r2, r6
 800a332:	463b      	mov	r3, r7
 800a334:	f7f6 fbf8 	bl	8000b28 <__aeabi_dcmpeq>
 800a338:	b908      	cbnz	r0, 800a33e <_dtoa_r+0x186>
 800a33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a33e:	f1ba 0f16 	cmp.w	sl, #22
 800a342:	d854      	bhi.n	800a3ee <_dtoa_r+0x236>
 800a344:	4b61      	ldr	r3, [pc, #388]	; (800a4cc <_dtoa_r+0x314>)
 800a346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a352:	f7f6 fbf3 	bl	8000b3c <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d04b      	beq.n	800a3f2 <_dtoa_r+0x23a>
 800a35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a35e:	2300      	movs	r3, #0
 800a360:	930e      	str	r3, [sp, #56]	; 0x38
 800a362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a364:	1b5d      	subs	r5, r3, r5
 800a366:	1e6b      	subs	r3, r5, #1
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	bf43      	ittte	mi
 800a36c:	2300      	movmi	r3, #0
 800a36e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a372:	9304      	strmi	r3, [sp, #16]
 800a374:	f04f 0800 	movpl.w	r8, #0
 800a378:	f1ba 0f00 	cmp.w	sl, #0
 800a37c:	db3b      	blt.n	800a3f6 <_dtoa_r+0x23e>
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a384:	4453      	add	r3, sl
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	2300      	movs	r3, #0
 800a38a:	9306      	str	r3, [sp, #24]
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	2b09      	cmp	r3, #9
 800a390:	d869      	bhi.n	800a466 <_dtoa_r+0x2ae>
 800a392:	2b05      	cmp	r3, #5
 800a394:	bfc4      	itt	gt
 800a396:	3b04      	subgt	r3, #4
 800a398:	9305      	strgt	r3, [sp, #20]
 800a39a:	9b05      	ldr	r3, [sp, #20]
 800a39c:	f1a3 0302 	sub.w	r3, r3, #2
 800a3a0:	bfcc      	ite	gt
 800a3a2:	2500      	movgt	r5, #0
 800a3a4:	2501      	movle	r5, #1
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d869      	bhi.n	800a47e <_dtoa_r+0x2c6>
 800a3aa:	e8df f003 	tbb	[pc, r3]
 800a3ae:	4e2c      	.short	0x4e2c
 800a3b0:	5a4c      	.short	0x5a4c
 800a3b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a3b6:	441d      	add	r5, r3
 800a3b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	bfc1      	itttt	gt
 800a3c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3c8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a3cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3d0:	bfda      	itte	le
 800a3d2:	f1c3 0320 	rsble	r3, r3, #32
 800a3d6:	fa06 f003 	lslle.w	r0, r6, r3
 800a3da:	4318      	orrgt	r0, r3
 800a3dc:	f7f6 f8c2 	bl	8000564 <__aeabi_ui2d>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3e8:	3d01      	subs	r5, #1
 800a3ea:	9310      	str	r3, [sp, #64]	; 0x40
 800a3ec:	e771      	b.n	800a2d2 <_dtoa_r+0x11a>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7b6      	b.n	800a360 <_dtoa_r+0x1a8>
 800a3f2:	900e      	str	r0, [sp, #56]	; 0x38
 800a3f4:	e7b5      	b.n	800a362 <_dtoa_r+0x1aa>
 800a3f6:	f1ca 0300 	rsb	r3, sl, #0
 800a3fa:	9306      	str	r3, [sp, #24]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	eba8 080a 	sub.w	r8, r8, sl
 800a402:	930d      	str	r3, [sp, #52]	; 0x34
 800a404:	e7c2      	b.n	800a38c <_dtoa_r+0x1d4>
 800a406:	2300      	movs	r3, #0
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc39      	bgt.n	800a484 <_dtoa_r+0x2cc>
 800a410:	f04f 0901 	mov.w	r9, #1
 800a414:	f8cd 9004 	str.w	r9, [sp, #4]
 800a418:	464b      	mov	r3, r9
 800a41a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a41e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a420:	2200      	movs	r2, #0
 800a422:	6042      	str	r2, [r0, #4]
 800a424:	2204      	movs	r2, #4
 800a426:	f102 0614 	add.w	r6, r2, #20
 800a42a:	429e      	cmp	r6, r3
 800a42c:	6841      	ldr	r1, [r0, #4]
 800a42e:	d92f      	bls.n	800a490 <_dtoa_r+0x2d8>
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fdc1 	bl	800afb8 <_Balloc>
 800a436:	9000      	str	r0, [sp, #0]
 800a438:	2800      	cmp	r0, #0
 800a43a:	d14b      	bne.n	800a4d4 <_dtoa_r+0x31c>
 800a43c:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <_dtoa_r+0x318>)
 800a43e:	4602      	mov	r2, r0
 800a440:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a444:	e6d1      	b.n	800a1ea <_dtoa_r+0x32>
 800a446:	2301      	movs	r3, #1
 800a448:	e7de      	b.n	800a408 <_dtoa_r+0x250>
 800a44a:	2300      	movs	r3, #0
 800a44c:	9308      	str	r3, [sp, #32]
 800a44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a450:	eb0a 0903 	add.w	r9, sl, r3
 800a454:	f109 0301 	add.w	r3, r9, #1
 800a458:	2b01      	cmp	r3, #1
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	bfb8      	it	lt
 800a45e:	2301      	movlt	r3, #1
 800a460:	e7dd      	b.n	800a41e <_dtoa_r+0x266>
 800a462:	2301      	movs	r3, #1
 800a464:	e7f2      	b.n	800a44c <_dtoa_r+0x294>
 800a466:	2501      	movs	r5, #1
 800a468:	2300      	movs	r3, #0
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	9508      	str	r5, [sp, #32]
 800a46e:	f04f 39ff 	mov.w	r9, #4294967295
 800a472:	2200      	movs	r2, #0
 800a474:	f8cd 9004 	str.w	r9, [sp, #4]
 800a478:	2312      	movs	r3, #18
 800a47a:	9209      	str	r2, [sp, #36]	; 0x24
 800a47c:	e7cf      	b.n	800a41e <_dtoa_r+0x266>
 800a47e:	2301      	movs	r3, #1
 800a480:	9308      	str	r3, [sp, #32]
 800a482:	e7f4      	b.n	800a46e <_dtoa_r+0x2b6>
 800a484:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a488:	f8cd 9004 	str.w	r9, [sp, #4]
 800a48c:	464b      	mov	r3, r9
 800a48e:	e7c6      	b.n	800a41e <_dtoa_r+0x266>
 800a490:	3101      	adds	r1, #1
 800a492:	6041      	str	r1, [r0, #4]
 800a494:	0052      	lsls	r2, r2, #1
 800a496:	e7c6      	b.n	800a426 <_dtoa_r+0x26e>
 800a498:	636f4361 	.word	0x636f4361
 800a49c:	3fd287a7 	.word	0x3fd287a7
 800a4a0:	8b60c8b3 	.word	0x8b60c8b3
 800a4a4:	3fc68a28 	.word	0x3fc68a28
 800a4a8:	509f79fb 	.word	0x509f79fb
 800a4ac:	3fd34413 	.word	0x3fd34413
 800a4b0:	0800c225 	.word	0x0800c225
 800a4b4:	0800c23c 	.word	0x0800c23c
 800a4b8:	7ff00000 	.word	0x7ff00000
 800a4bc:	0800c221 	.word	0x0800c221
 800a4c0:	0800c218 	.word	0x0800c218
 800a4c4:	0800c1f5 	.word	0x0800c1f5
 800a4c8:	3ff80000 	.word	0x3ff80000
 800a4cc:	0800c398 	.word	0x0800c398
 800a4d0:	0800c29b 	.word	0x0800c29b
 800a4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d6:	9a00      	ldr	r2, [sp, #0]
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	2b0e      	cmp	r3, #14
 800a4de:	f200 80ad 	bhi.w	800a63c <_dtoa_r+0x484>
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	f000 80aa 	beq.w	800a63c <_dtoa_r+0x484>
 800a4e8:	f1ba 0f00 	cmp.w	sl, #0
 800a4ec:	dd36      	ble.n	800a55c <_dtoa_r+0x3a4>
 800a4ee:	4ac3      	ldr	r2, [pc, #780]	; (800a7fc <_dtoa_r+0x644>)
 800a4f0:	f00a 030f 	and.w	r3, sl, #15
 800a4f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4f8:	ed93 7b00 	vldr	d7, [r3]
 800a4fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a500:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a504:	eeb0 8a47 	vmov.f32	s16, s14
 800a508:	eef0 8a67 	vmov.f32	s17, s15
 800a50c:	d016      	beq.n	800a53c <_dtoa_r+0x384>
 800a50e:	4bbc      	ldr	r3, [pc, #752]	; (800a800 <_dtoa_r+0x648>)
 800a510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a518:	f7f6 f9c8 	bl	80008ac <__aeabi_ddiv>
 800a51c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a520:	f007 070f 	and.w	r7, r7, #15
 800a524:	2503      	movs	r5, #3
 800a526:	4eb6      	ldr	r6, [pc, #728]	; (800a800 <_dtoa_r+0x648>)
 800a528:	b957      	cbnz	r7, 800a540 <_dtoa_r+0x388>
 800a52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a52e:	ec53 2b18 	vmov	r2, r3, d8
 800a532:	f7f6 f9bb 	bl	80008ac <__aeabi_ddiv>
 800a536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53a:	e029      	b.n	800a590 <_dtoa_r+0x3d8>
 800a53c:	2502      	movs	r5, #2
 800a53e:	e7f2      	b.n	800a526 <_dtoa_r+0x36e>
 800a540:	07f9      	lsls	r1, r7, #31
 800a542:	d508      	bpl.n	800a556 <_dtoa_r+0x39e>
 800a544:	ec51 0b18 	vmov	r0, r1, d8
 800a548:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a54c:	f7f6 f884 	bl	8000658 <__aeabi_dmul>
 800a550:	ec41 0b18 	vmov	d8, r0, r1
 800a554:	3501      	adds	r5, #1
 800a556:	107f      	asrs	r7, r7, #1
 800a558:	3608      	adds	r6, #8
 800a55a:	e7e5      	b.n	800a528 <_dtoa_r+0x370>
 800a55c:	f000 80a6 	beq.w	800a6ac <_dtoa_r+0x4f4>
 800a560:	f1ca 0600 	rsb	r6, sl, #0
 800a564:	4ba5      	ldr	r3, [pc, #660]	; (800a7fc <_dtoa_r+0x644>)
 800a566:	4fa6      	ldr	r7, [pc, #664]	; (800a800 <_dtoa_r+0x648>)
 800a568:	f006 020f 	and.w	r2, r6, #15
 800a56c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a578:	f7f6 f86e 	bl	8000658 <__aeabi_dmul>
 800a57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a580:	1136      	asrs	r6, r6, #4
 800a582:	2300      	movs	r3, #0
 800a584:	2502      	movs	r5, #2
 800a586:	2e00      	cmp	r6, #0
 800a588:	f040 8085 	bne.w	800a696 <_dtoa_r+0x4de>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1d2      	bne.n	800a536 <_dtoa_r+0x37e>
 800a590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 808c 	beq.w	800a6b0 <_dtoa_r+0x4f8>
 800a598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a59c:	4b99      	ldr	r3, [pc, #612]	; (800a804 <_dtoa_r+0x64c>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 faca 	bl	8000b3c <__aeabi_dcmplt>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f000 8081 	beq.w	800a6b0 <_dtoa_r+0x4f8>
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d07d      	beq.n	800a6b0 <_dtoa_r+0x4f8>
 800a5b4:	f1b9 0f00 	cmp.w	r9, #0
 800a5b8:	dd3c      	ble.n	800a634 <_dtoa_r+0x47c>
 800a5ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5be:	9307      	str	r3, [sp, #28]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4b91      	ldr	r3, [pc, #580]	; (800a808 <_dtoa_r+0x650>)
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	f7f6 f846 	bl	8000658 <__aeabi_dmul>
 800a5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a5d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7f5 ffd2 	bl	8000584 <__aeabi_i2d>
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	f7f6 f838 	bl	8000658 <__aeabi_dmul>
 800a5e8:	4b88      	ldr	r3, [pc, #544]	; (800a80c <_dtoa_r+0x654>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f7f5 fe7e 	bl	80002ec <__adddf3>
 800a5f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f8:	9303      	str	r3, [sp, #12]
 800a5fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d15c      	bne.n	800a6ba <_dtoa_r+0x502>
 800a600:	4b83      	ldr	r3, [pc, #524]	; (800a810 <_dtoa_r+0x658>)
 800a602:	2200      	movs	r2, #0
 800a604:	4630      	mov	r0, r6
 800a606:	4639      	mov	r1, r7
 800a608:	f7f5 fe6e 	bl	80002e8 <__aeabi_dsub>
 800a60c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	f7f6 fab0 	bl	8000b78 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f040 8296 	bne.w	800ab4a <_dtoa_r+0x992>
 800a61e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a622:	4630      	mov	r0, r6
 800a624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f6 fa87 	bl	8000b3c <__aeabi_dcmplt>
 800a62e:	2800      	cmp	r0, #0
 800a630:	f040 8288 	bne.w	800ab44 <_dtoa_r+0x98c>
 800a634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a63c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f2c0 8158 	blt.w	800a8f4 <_dtoa_r+0x73c>
 800a644:	f1ba 0f0e 	cmp.w	sl, #14
 800a648:	f300 8154 	bgt.w	800a8f4 <_dtoa_r+0x73c>
 800a64c:	4b6b      	ldr	r3, [pc, #428]	; (800a7fc <_dtoa_r+0x644>)
 800a64e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a652:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f280 80e3 	bge.w	800a824 <_dtoa_r+0x66c>
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	f300 80df 	bgt.w	800a824 <_dtoa_r+0x66c>
 800a666:	f040 826d 	bne.w	800ab44 <_dtoa_r+0x98c>
 800a66a:	4b69      	ldr	r3, [pc, #420]	; (800a810 <_dtoa_r+0x658>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f5 fff1 	bl	8000658 <__aeabi_dmul>
 800a676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a67a:	f7f6 fa73 	bl	8000b64 <__aeabi_dcmpge>
 800a67e:	9e01      	ldr	r6, [sp, #4]
 800a680:	4637      	mov	r7, r6
 800a682:	2800      	cmp	r0, #0
 800a684:	f040 8243 	bne.w	800ab0e <_dtoa_r+0x956>
 800a688:	9d00      	ldr	r5, [sp, #0]
 800a68a:	2331      	movs	r3, #49	; 0x31
 800a68c:	f805 3b01 	strb.w	r3, [r5], #1
 800a690:	f10a 0a01 	add.w	sl, sl, #1
 800a694:	e23f      	b.n	800ab16 <_dtoa_r+0x95e>
 800a696:	07f2      	lsls	r2, r6, #31
 800a698:	d505      	bpl.n	800a6a6 <_dtoa_r+0x4ee>
 800a69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a69e:	f7f5 ffdb 	bl	8000658 <__aeabi_dmul>
 800a6a2:	3501      	adds	r5, #1
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	1076      	asrs	r6, r6, #1
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	e76c      	b.n	800a586 <_dtoa_r+0x3ce>
 800a6ac:	2502      	movs	r5, #2
 800a6ae:	e76f      	b.n	800a590 <_dtoa_r+0x3d8>
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b8:	e78d      	b.n	800a5d6 <_dtoa_r+0x41e>
 800a6ba:	9900      	ldr	r1, [sp, #0]
 800a6bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c0:	4b4e      	ldr	r3, [pc, #312]	; (800a7fc <_dtoa_r+0x644>)
 800a6c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6c6:	4401      	add	r1, r0
 800a6c8:	9102      	str	r1, [sp, #8]
 800a6ca:	9908      	ldr	r1, [sp, #32]
 800a6cc:	eeb0 8a47 	vmov.f32	s16, s14
 800a6d0:	eef0 8a67 	vmov.f32	s17, s15
 800a6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	d045      	beq.n	800a76c <_dtoa_r+0x5b4>
 800a6e0:	494c      	ldr	r1, [pc, #304]	; (800a814 <_dtoa_r+0x65c>)
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f7f6 f8e2 	bl	80008ac <__aeabi_ddiv>
 800a6e8:	ec53 2b18 	vmov	r2, r3, d8
 800a6ec:	f7f5 fdfc 	bl	80002e8 <__aeabi_dsub>
 800a6f0:	9d00      	ldr	r5, [sp, #0]
 800a6f2:	ec41 0b18 	vmov	d8, r0, r1
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7f6 fa5d 	bl	8000bb8 <__aeabi_d2iz>
 800a6fe:	900c      	str	r0, [sp, #48]	; 0x30
 800a700:	f7f5 ff40 	bl	8000584 <__aeabi_i2d>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f5 fdec 	bl	80002e8 <__aeabi_dsub>
 800a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a712:	3330      	adds	r3, #48	; 0x30
 800a714:	f805 3b01 	strb.w	r3, [r5], #1
 800a718:	ec53 2b18 	vmov	r2, r3, d8
 800a71c:	4606      	mov	r6, r0
 800a71e:	460f      	mov	r7, r1
 800a720:	f7f6 fa0c 	bl	8000b3c <__aeabi_dcmplt>
 800a724:	2800      	cmp	r0, #0
 800a726:	d165      	bne.n	800a7f4 <_dtoa_r+0x63c>
 800a728:	4632      	mov	r2, r6
 800a72a:	463b      	mov	r3, r7
 800a72c:	4935      	ldr	r1, [pc, #212]	; (800a804 <_dtoa_r+0x64c>)
 800a72e:	2000      	movs	r0, #0
 800a730:	f7f5 fdda 	bl	80002e8 <__aeabi_dsub>
 800a734:	ec53 2b18 	vmov	r2, r3, d8
 800a738:	f7f6 fa00 	bl	8000b3c <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f040 80b9 	bne.w	800a8b4 <_dtoa_r+0x6fc>
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	429d      	cmp	r5, r3
 800a746:	f43f af75 	beq.w	800a634 <_dtoa_r+0x47c>
 800a74a:	4b2f      	ldr	r3, [pc, #188]	; (800a808 <_dtoa_r+0x650>)
 800a74c:	ec51 0b18 	vmov	r0, r1, d8
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff81 	bl	8000658 <__aeabi_dmul>
 800a756:	4b2c      	ldr	r3, [pc, #176]	; (800a808 <_dtoa_r+0x650>)
 800a758:	ec41 0b18 	vmov	d8, r0, r1
 800a75c:	2200      	movs	r2, #0
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f5 ff79 	bl	8000658 <__aeabi_dmul>
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	e7c4      	b.n	800a6f6 <_dtoa_r+0x53e>
 800a76c:	ec51 0b17 	vmov	r0, r1, d7
 800a770:	f7f5 ff72 	bl	8000658 <__aeabi_dmul>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	9d00      	ldr	r5, [sp, #0]
 800a778:	930c      	str	r3, [sp, #48]	; 0x30
 800a77a:	ec41 0b18 	vmov	d8, r0, r1
 800a77e:	4639      	mov	r1, r7
 800a780:	4630      	mov	r0, r6
 800a782:	f7f6 fa19 	bl	8000bb8 <__aeabi_d2iz>
 800a786:	9011      	str	r0, [sp, #68]	; 0x44
 800a788:	f7f5 fefc 	bl	8000584 <__aeabi_i2d>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f5 fda8 	bl	80002e8 <__aeabi_dsub>
 800a798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a79a:	3330      	adds	r3, #48	; 0x30
 800a79c:	f805 3b01 	strb.w	r3, [r5], #1
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	429d      	cmp	r5, r3
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	f04f 0200 	mov.w	r2, #0
 800a7ac:	d134      	bne.n	800a818 <_dtoa_r+0x660>
 800a7ae:	4b19      	ldr	r3, [pc, #100]	; (800a814 <_dtoa_r+0x65c>)
 800a7b0:	ec51 0b18 	vmov	r0, r1, d8
 800a7b4:	f7f5 fd9a 	bl	80002ec <__adddf3>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4639      	mov	r1, r7
 800a7c0:	f7f6 f9da 	bl	8000b78 <__aeabi_dcmpgt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d175      	bne.n	800a8b4 <_dtoa_r+0x6fc>
 800a7c8:	ec53 2b18 	vmov	r2, r3, d8
 800a7cc:	4911      	ldr	r1, [pc, #68]	; (800a814 <_dtoa_r+0x65c>)
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f7f5 fd8a 	bl	80002e8 <__aeabi_dsub>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f9ae 	bl	8000b3c <__aeabi_dcmplt>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f43f af27 	beq.w	800a634 <_dtoa_r+0x47c>
 800a7e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7e8:	1e6b      	subs	r3, r5, #1
 800a7ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a7ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7f0:	2b30      	cmp	r3, #48	; 0x30
 800a7f2:	d0f8      	beq.n	800a7e6 <_dtoa_r+0x62e>
 800a7f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a7f8:	e04a      	b.n	800a890 <_dtoa_r+0x6d8>
 800a7fa:	bf00      	nop
 800a7fc:	0800c398 	.word	0x0800c398
 800a800:	0800c370 	.word	0x0800c370
 800a804:	3ff00000 	.word	0x3ff00000
 800a808:	40240000 	.word	0x40240000
 800a80c:	401c0000 	.word	0x401c0000
 800a810:	40140000 	.word	0x40140000
 800a814:	3fe00000 	.word	0x3fe00000
 800a818:	4baf      	ldr	r3, [pc, #700]	; (800aad8 <_dtoa_r+0x920>)
 800a81a:	f7f5 ff1d 	bl	8000658 <__aeabi_dmul>
 800a81e:	4606      	mov	r6, r0
 800a820:	460f      	mov	r7, r1
 800a822:	e7ac      	b.n	800a77e <_dtoa_r+0x5c6>
 800a824:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a828:	9d00      	ldr	r5, [sp, #0]
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f6 f83b 	bl	80008ac <__aeabi_ddiv>
 800a836:	f7f6 f9bf 	bl	8000bb8 <__aeabi_d2iz>
 800a83a:	9002      	str	r0, [sp, #8]
 800a83c:	f7f5 fea2 	bl	8000584 <__aeabi_i2d>
 800a840:	4642      	mov	r2, r8
 800a842:	464b      	mov	r3, r9
 800a844:	f7f5 ff08 	bl	8000658 <__aeabi_dmul>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd4a 	bl	80002e8 <__aeabi_dsub>
 800a854:	9e02      	ldr	r6, [sp, #8]
 800a856:	9f01      	ldr	r7, [sp, #4]
 800a858:	3630      	adds	r6, #48	; 0x30
 800a85a:	f805 6b01 	strb.w	r6, [r5], #1
 800a85e:	9e00      	ldr	r6, [sp, #0]
 800a860:	1bae      	subs	r6, r5, r6
 800a862:	42b7      	cmp	r7, r6
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	d137      	bne.n	800a8da <_dtoa_r+0x722>
 800a86a:	f7f5 fd3f 	bl	80002ec <__adddf3>
 800a86e:	4642      	mov	r2, r8
 800a870:	464b      	mov	r3, r9
 800a872:	4606      	mov	r6, r0
 800a874:	460f      	mov	r7, r1
 800a876:	f7f6 f97f 	bl	8000b78 <__aeabi_dcmpgt>
 800a87a:	b9c8      	cbnz	r0, 800a8b0 <_dtoa_r+0x6f8>
 800a87c:	4642      	mov	r2, r8
 800a87e:	464b      	mov	r3, r9
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f6 f950 	bl	8000b28 <__aeabi_dcmpeq>
 800a888:	b110      	cbz	r0, 800a890 <_dtoa_r+0x6d8>
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	07d9      	lsls	r1, r3, #31
 800a88e:	d40f      	bmi.n	800a8b0 <_dtoa_r+0x6f8>
 800a890:	4620      	mov	r0, r4
 800a892:	4659      	mov	r1, fp
 800a894:	f000 fbd0 	bl	800b038 <_Bfree>
 800a898:	2300      	movs	r3, #0
 800a89a:	702b      	strb	r3, [r5, #0]
 800a89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a89e:	f10a 0001 	add.w	r0, sl, #1
 800a8a2:	6018      	str	r0, [r3, #0]
 800a8a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f43f acd8 	beq.w	800a25c <_dtoa_r+0xa4>
 800a8ac:	601d      	str	r5, [r3, #0]
 800a8ae:	e4d5      	b.n	800a25c <_dtoa_r+0xa4>
 800a8b0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8bc:	2a39      	cmp	r2, #57	; 0x39
 800a8be:	d108      	bne.n	800a8d2 <_dtoa_r+0x71a>
 800a8c0:	9a00      	ldr	r2, [sp, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d1f7      	bne.n	800a8b6 <_dtoa_r+0x6fe>
 800a8c6:	9a07      	ldr	r2, [sp, #28]
 800a8c8:	9900      	ldr	r1, [sp, #0]
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	9207      	str	r2, [sp, #28]
 800a8ce:	2230      	movs	r2, #48	; 0x30
 800a8d0:	700a      	strb	r2, [r1, #0]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	3201      	adds	r2, #1
 800a8d6:	701a      	strb	r2, [r3, #0]
 800a8d8:	e78c      	b.n	800a7f4 <_dtoa_r+0x63c>
 800a8da:	4b7f      	ldr	r3, [pc, #508]	; (800aad8 <_dtoa_r+0x920>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f7f5 febb 	bl	8000658 <__aeabi_dmul>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	f7f6 f91d 	bl	8000b28 <__aeabi_dcmpeq>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d09b      	beq.n	800a82a <_dtoa_r+0x672>
 800a8f2:	e7cd      	b.n	800a890 <_dtoa_r+0x6d8>
 800a8f4:	9a08      	ldr	r2, [sp, #32]
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	f000 80c4 	beq.w	800aa84 <_dtoa_r+0x8cc>
 800a8fc:	9a05      	ldr	r2, [sp, #20]
 800a8fe:	2a01      	cmp	r2, #1
 800a900:	f300 80a8 	bgt.w	800aa54 <_dtoa_r+0x89c>
 800a904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a906:	2a00      	cmp	r2, #0
 800a908:	f000 80a0 	beq.w	800aa4c <_dtoa_r+0x894>
 800a90c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a910:	9e06      	ldr	r6, [sp, #24]
 800a912:	4645      	mov	r5, r8
 800a914:	9a04      	ldr	r2, [sp, #16]
 800a916:	2101      	movs	r1, #1
 800a918:	441a      	add	r2, r3
 800a91a:	4620      	mov	r0, r4
 800a91c:	4498      	add	r8, r3
 800a91e:	9204      	str	r2, [sp, #16]
 800a920:	f000 fc46 	bl	800b1b0 <__i2b>
 800a924:	4607      	mov	r7, r0
 800a926:	2d00      	cmp	r5, #0
 800a928:	dd0b      	ble.n	800a942 <_dtoa_r+0x78a>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dd08      	ble.n	800a942 <_dtoa_r+0x78a>
 800a930:	42ab      	cmp	r3, r5
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	bfa8      	it	ge
 800a936:	462b      	movge	r3, r5
 800a938:	eba8 0803 	sub.w	r8, r8, r3
 800a93c:	1aed      	subs	r5, r5, r3
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	9b06      	ldr	r3, [sp, #24]
 800a944:	b1fb      	cbz	r3, 800a986 <_dtoa_r+0x7ce>
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 809f 	beq.w	800aa8c <_dtoa_r+0x8d4>
 800a94e:	2e00      	cmp	r6, #0
 800a950:	dd11      	ble.n	800a976 <_dtoa_r+0x7be>
 800a952:	4639      	mov	r1, r7
 800a954:	4632      	mov	r2, r6
 800a956:	4620      	mov	r0, r4
 800a958:	f000 fce6 	bl	800b328 <__pow5mult>
 800a95c:	465a      	mov	r2, fp
 800a95e:	4601      	mov	r1, r0
 800a960:	4607      	mov	r7, r0
 800a962:	4620      	mov	r0, r4
 800a964:	f000 fc3a 	bl	800b1dc <__multiply>
 800a968:	4659      	mov	r1, fp
 800a96a:	9007      	str	r0, [sp, #28]
 800a96c:	4620      	mov	r0, r4
 800a96e:	f000 fb63 	bl	800b038 <_Bfree>
 800a972:	9b07      	ldr	r3, [sp, #28]
 800a974:	469b      	mov	fp, r3
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	1b9a      	subs	r2, r3, r6
 800a97a:	d004      	beq.n	800a986 <_dtoa_r+0x7ce>
 800a97c:	4659      	mov	r1, fp
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 fcd2 	bl	800b328 <__pow5mult>
 800a984:	4683      	mov	fp, r0
 800a986:	2101      	movs	r1, #1
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fc11 	bl	800b1b0 <__i2b>
 800a98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a990:	2b00      	cmp	r3, #0
 800a992:	4606      	mov	r6, r0
 800a994:	dd7c      	ble.n	800aa90 <_dtoa_r+0x8d8>
 800a996:	461a      	mov	r2, r3
 800a998:	4601      	mov	r1, r0
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fcc4 	bl	800b328 <__pow5mult>
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	dd76      	ble.n	800aa96 <_dtoa_r+0x8de>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9306      	str	r3, [sp, #24]
 800a9ac:	6933      	ldr	r3, [r6, #16]
 800a9ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9b2:	6918      	ldr	r0, [r3, #16]
 800a9b4:	f000 fbac 	bl	800b110 <__hi0bits>
 800a9b8:	f1c0 0020 	rsb	r0, r0, #32
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	4418      	add	r0, r3
 800a9c0:	f010 001f 	ands.w	r0, r0, #31
 800a9c4:	f000 8086 	beq.w	800aad4 <_dtoa_r+0x91c>
 800a9c8:	f1c0 0320 	rsb	r3, r0, #32
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	dd7f      	ble.n	800aad0 <_dtoa_r+0x918>
 800a9d0:	f1c0 001c 	rsb	r0, r0, #28
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	4403      	add	r3, r0
 800a9d8:	4480      	add	r8, r0
 800a9da:	4405      	add	r5, r0
 800a9dc:	9304      	str	r3, [sp, #16]
 800a9de:	f1b8 0f00 	cmp.w	r8, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x838>
 800a9e4:	4659      	mov	r1, fp
 800a9e6:	4642      	mov	r2, r8
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fcf7 	bl	800b3dc <__lshift>
 800a9ee:	4683      	mov	fp, r0
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dd05      	ble.n	800aa02 <_dtoa_r+0x84a>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fcee 	bl	800b3dc <__lshift>
 800aa00:	4606      	mov	r6, r0
 800aa02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d069      	beq.n	800aadc <_dtoa_r+0x924>
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4658      	mov	r0, fp
 800aa0c:	f000 fd52 	bl	800b4b4 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	da63      	bge.n	800aadc <_dtoa_r+0x924>
 800aa14:	2300      	movs	r3, #0
 800aa16:	4659      	mov	r1, fp
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fb2e 	bl	800b07c <__multadd>
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa26:	4683      	mov	fp, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 818f 	beq.w	800ad4c <_dtoa_r+0xb94>
 800aa2e:	4639      	mov	r1, r7
 800aa30:	2300      	movs	r3, #0
 800aa32:	220a      	movs	r2, #10
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fb21 	bl	800b07c <__multadd>
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	4607      	mov	r7, r0
 800aa40:	f300 808e 	bgt.w	800ab60 <_dtoa_r+0x9a8>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	dc50      	bgt.n	800aaec <_dtoa_r+0x934>
 800aa4a:	e089      	b.n	800ab60 <_dtoa_r+0x9a8>
 800aa4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa52:	e75d      	b.n	800a910 <_dtoa_r+0x758>
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	1e5e      	subs	r6, r3, #1
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	42b3      	cmp	r3, r6
 800aa5c:	bfbf      	itttt	lt
 800aa5e:	9b06      	ldrlt	r3, [sp, #24]
 800aa60:	9606      	strlt	r6, [sp, #24]
 800aa62:	1af2      	sublt	r2, r6, r3
 800aa64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aa66:	bfb6      	itet	lt
 800aa68:	189b      	addlt	r3, r3, r2
 800aa6a:	1b9e      	subge	r6, r3, r6
 800aa6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	bfb8      	it	lt
 800aa72:	2600      	movlt	r6, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfb5      	itete	lt
 800aa78:	eba8 0503 	sublt.w	r5, r8, r3
 800aa7c:	9b01      	ldrge	r3, [sp, #4]
 800aa7e:	2300      	movlt	r3, #0
 800aa80:	4645      	movge	r5, r8
 800aa82:	e747      	b.n	800a914 <_dtoa_r+0x75c>
 800aa84:	9e06      	ldr	r6, [sp, #24]
 800aa86:	9f08      	ldr	r7, [sp, #32]
 800aa88:	4645      	mov	r5, r8
 800aa8a:	e74c      	b.n	800a926 <_dtoa_r+0x76e>
 800aa8c:	9a06      	ldr	r2, [sp, #24]
 800aa8e:	e775      	b.n	800a97c <_dtoa_r+0x7c4>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	dc18      	bgt.n	800aac8 <_dtoa_r+0x910>
 800aa96:	9b02      	ldr	r3, [sp, #8]
 800aa98:	b9b3      	cbnz	r3, 800aac8 <_dtoa_r+0x910>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa0:	b9a3      	cbnz	r3, 800aacc <_dtoa_r+0x914>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa8:	0d1b      	lsrs	r3, r3, #20
 800aaaa:	051b      	lsls	r3, r3, #20
 800aaac:	b12b      	cbz	r3, 800aaba <_dtoa_r+0x902>
 800aaae:	9b04      	ldr	r3, [sp, #16]
 800aab0:	3301      	adds	r3, #1
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	f108 0801 	add.w	r8, r8, #1
 800aab8:	2301      	movs	r3, #1
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f47f af74 	bne.w	800a9ac <_dtoa_r+0x7f4>
 800aac4:	2001      	movs	r0, #1
 800aac6:	e779      	b.n	800a9bc <_dtoa_r+0x804>
 800aac8:	2300      	movs	r3, #0
 800aaca:	e7f6      	b.n	800aaba <_dtoa_r+0x902>
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	e7f4      	b.n	800aaba <_dtoa_r+0x902>
 800aad0:	d085      	beq.n	800a9de <_dtoa_r+0x826>
 800aad2:	4618      	mov	r0, r3
 800aad4:	301c      	adds	r0, #28
 800aad6:	e77d      	b.n	800a9d4 <_dtoa_r+0x81c>
 800aad8:	40240000 	.word	0x40240000
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dc38      	bgt.n	800ab54 <_dtoa_r+0x99c>
 800aae2:	9b05      	ldr	r3, [sp, #20]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	dd35      	ble.n	800ab54 <_dtoa_r+0x99c>
 800aae8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aaec:	f1b9 0f00 	cmp.w	r9, #0
 800aaf0:	d10d      	bne.n	800ab0e <_dtoa_r+0x956>
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fabf 	bl	800b07c <__multadd>
 800aafe:	4601      	mov	r1, r0
 800ab00:	4606      	mov	r6, r0
 800ab02:	4658      	mov	r0, fp
 800ab04:	f000 fcd6 	bl	800b4b4 <__mcmp>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f73f adbd 	bgt.w	800a688 <_dtoa_r+0x4d0>
 800ab0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab10:	9d00      	ldr	r5, [sp, #0]
 800ab12:	ea6f 0a03 	mvn.w	sl, r3
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fa8b 	bl	800b038 <_Bfree>
 800ab22:	2f00      	cmp	r7, #0
 800ab24:	f43f aeb4 	beq.w	800a890 <_dtoa_r+0x6d8>
 800ab28:	f1b8 0f00 	cmp.w	r8, #0
 800ab2c:	d005      	beq.n	800ab3a <_dtoa_r+0x982>
 800ab2e:	45b8      	cmp	r8, r7
 800ab30:	d003      	beq.n	800ab3a <_dtoa_r+0x982>
 800ab32:	4641      	mov	r1, r8
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fa7f 	bl	800b038 <_Bfree>
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fa7b 	bl	800b038 <_Bfree>
 800ab42:	e6a5      	b.n	800a890 <_dtoa_r+0x6d8>
 800ab44:	2600      	movs	r6, #0
 800ab46:	4637      	mov	r7, r6
 800ab48:	e7e1      	b.n	800ab0e <_dtoa_r+0x956>
 800ab4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab50:	4637      	mov	r7, r6
 800ab52:	e599      	b.n	800a688 <_dtoa_r+0x4d0>
 800ab54:	9b08      	ldr	r3, [sp, #32]
 800ab56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 80fd 	beq.w	800ad5a <_dtoa_r+0xba2>
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	dd05      	ble.n	800ab70 <_dtoa_r+0x9b8>
 800ab64:	4639      	mov	r1, r7
 800ab66:	462a      	mov	r2, r5
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fc37 	bl	800b3dc <__lshift>
 800ab6e:	4607      	mov	r7, r0
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d05c      	beq.n	800ac30 <_dtoa_r+0xa78>
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fa1d 	bl	800afb8 <_Balloc>
 800ab7e:	4605      	mov	r5, r0
 800ab80:	b928      	cbnz	r0, 800ab8e <_dtoa_r+0x9d6>
 800ab82:	4b80      	ldr	r3, [pc, #512]	; (800ad84 <_dtoa_r+0xbcc>)
 800ab84:	4602      	mov	r2, r0
 800ab86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab8a:	f7ff bb2e 	b.w	800a1ea <_dtoa_r+0x32>
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	3202      	adds	r2, #2
 800ab92:	0092      	lsls	r2, r2, #2
 800ab94:	f107 010c 	add.w	r1, r7, #12
 800ab98:	300c      	adds	r0, #12
 800ab9a:	f000 f9ff 	bl	800af9c <memcpy>
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4629      	mov	r1, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 fc1a 	bl	800b3dc <__lshift>
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	3301      	adds	r3, #1
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	444b      	add	r3, r9
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	9b02      	ldr	r3, [sp, #8]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	46b8      	mov	r8, r7
 800abbc:	9306      	str	r3, [sp, #24]
 800abbe:	4607      	mov	r7, r0
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	4631      	mov	r1, r6
 800abc4:	3b01      	subs	r3, #1
 800abc6:	4658      	mov	r0, fp
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	f7ff fa69 	bl	800a0a0 <quorem>
 800abce:	4603      	mov	r3, r0
 800abd0:	3330      	adds	r3, #48	; 0x30
 800abd2:	9004      	str	r0, [sp, #16]
 800abd4:	4641      	mov	r1, r8
 800abd6:	4658      	mov	r0, fp
 800abd8:	9308      	str	r3, [sp, #32]
 800abda:	f000 fc6b 	bl	800b4b4 <__mcmp>
 800abde:	463a      	mov	r2, r7
 800abe0:	4681      	mov	r9, r0
 800abe2:	4631      	mov	r1, r6
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fc81 	bl	800b4ec <__mdiff>
 800abea:	68c2      	ldr	r2, [r0, #12]
 800abec:	9b08      	ldr	r3, [sp, #32]
 800abee:	4605      	mov	r5, r0
 800abf0:	bb02      	cbnz	r2, 800ac34 <_dtoa_r+0xa7c>
 800abf2:	4601      	mov	r1, r0
 800abf4:	4658      	mov	r0, fp
 800abf6:	f000 fc5d 	bl	800b4b4 <__mcmp>
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	4602      	mov	r2, r0
 800abfe:	4629      	mov	r1, r5
 800ac00:	4620      	mov	r0, r4
 800ac02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac06:	f000 fa17 	bl	800b038 <_Bfree>
 800ac0a:	9b05      	ldr	r3, [sp, #20]
 800ac0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac0e:	9d01      	ldr	r5, [sp, #4]
 800ac10:	ea43 0102 	orr.w	r1, r3, r2
 800ac14:	9b06      	ldr	r3, [sp, #24]
 800ac16:	430b      	orrs	r3, r1
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	d10d      	bne.n	800ac38 <_dtoa_r+0xa80>
 800ac1c:	2b39      	cmp	r3, #57	; 0x39
 800ac1e:	d029      	beq.n	800ac74 <_dtoa_r+0xabc>
 800ac20:	f1b9 0f00 	cmp.w	r9, #0
 800ac24:	dd01      	ble.n	800ac2a <_dtoa_r+0xa72>
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	3331      	adds	r3, #49	; 0x31
 800ac2a:	9a02      	ldr	r2, [sp, #8]
 800ac2c:	7013      	strb	r3, [r2, #0]
 800ac2e:	e774      	b.n	800ab1a <_dtoa_r+0x962>
 800ac30:	4638      	mov	r0, r7
 800ac32:	e7b9      	b.n	800aba8 <_dtoa_r+0x9f0>
 800ac34:	2201      	movs	r2, #1
 800ac36:	e7e2      	b.n	800abfe <_dtoa_r+0xa46>
 800ac38:	f1b9 0f00 	cmp.w	r9, #0
 800ac3c:	db06      	blt.n	800ac4c <_dtoa_r+0xa94>
 800ac3e:	9905      	ldr	r1, [sp, #20]
 800ac40:	ea41 0909 	orr.w	r9, r1, r9
 800ac44:	9906      	ldr	r1, [sp, #24]
 800ac46:	ea59 0101 	orrs.w	r1, r9, r1
 800ac4a:	d120      	bne.n	800ac8e <_dtoa_r+0xad6>
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	ddec      	ble.n	800ac2a <_dtoa_r+0xa72>
 800ac50:	4659      	mov	r1, fp
 800ac52:	2201      	movs	r2, #1
 800ac54:	4620      	mov	r0, r4
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	f000 fbc0 	bl	800b3dc <__lshift>
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4683      	mov	fp, r0
 800ac60:	f000 fc28 	bl	800b4b4 <__mcmp>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	9b01      	ldr	r3, [sp, #4]
 800ac68:	dc02      	bgt.n	800ac70 <_dtoa_r+0xab8>
 800ac6a:	d1de      	bne.n	800ac2a <_dtoa_r+0xa72>
 800ac6c:	07da      	lsls	r2, r3, #31
 800ac6e:	d5dc      	bpl.n	800ac2a <_dtoa_r+0xa72>
 800ac70:	2b39      	cmp	r3, #57	; 0x39
 800ac72:	d1d8      	bne.n	800ac26 <_dtoa_r+0xa6e>
 800ac74:	9a02      	ldr	r2, [sp, #8]
 800ac76:	2339      	movs	r3, #57	; 0x39
 800ac78:	7013      	strb	r3, [r2, #0]
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	461d      	mov	r5, r3
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac84:	2a39      	cmp	r2, #57	; 0x39
 800ac86:	d050      	beq.n	800ad2a <_dtoa_r+0xb72>
 800ac88:	3201      	adds	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e745      	b.n	800ab1a <_dtoa_r+0x962>
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	dd03      	ble.n	800ac9a <_dtoa_r+0xae2>
 800ac92:	2b39      	cmp	r3, #57	; 0x39
 800ac94:	d0ee      	beq.n	800ac74 <_dtoa_r+0xabc>
 800ac96:	3301      	adds	r3, #1
 800ac98:	e7c7      	b.n	800ac2a <_dtoa_r+0xa72>
 800ac9a:	9a01      	ldr	r2, [sp, #4]
 800ac9c:	9907      	ldr	r1, [sp, #28]
 800ac9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aca2:	428a      	cmp	r2, r1
 800aca4:	d02a      	beq.n	800acfc <_dtoa_r+0xb44>
 800aca6:	4659      	mov	r1, fp
 800aca8:	2300      	movs	r3, #0
 800acaa:	220a      	movs	r2, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f000 f9e5 	bl	800b07c <__multadd>
 800acb2:	45b8      	cmp	r8, r7
 800acb4:	4683      	mov	fp, r0
 800acb6:	f04f 0300 	mov.w	r3, #0
 800acba:	f04f 020a 	mov.w	r2, #10
 800acbe:	4641      	mov	r1, r8
 800acc0:	4620      	mov	r0, r4
 800acc2:	d107      	bne.n	800acd4 <_dtoa_r+0xb1c>
 800acc4:	f000 f9da 	bl	800b07c <__multadd>
 800acc8:	4680      	mov	r8, r0
 800acca:	4607      	mov	r7, r0
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	3301      	adds	r3, #1
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	e775      	b.n	800abc0 <_dtoa_r+0xa08>
 800acd4:	f000 f9d2 	bl	800b07c <__multadd>
 800acd8:	4639      	mov	r1, r7
 800acda:	4680      	mov	r8, r0
 800acdc:	2300      	movs	r3, #0
 800acde:	220a      	movs	r2, #10
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f9cb 	bl	800b07c <__multadd>
 800ace6:	4607      	mov	r7, r0
 800ace8:	e7f0      	b.n	800accc <_dtoa_r+0xb14>
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	9a00      	ldr	r2, [sp, #0]
 800acf0:	bfcc      	ite	gt
 800acf2:	464d      	movgt	r5, r9
 800acf4:	2501      	movle	r5, #1
 800acf6:	4415      	add	r5, r2
 800acf8:	f04f 0800 	mov.w	r8, #0
 800acfc:	4659      	mov	r1, fp
 800acfe:	2201      	movs	r2, #1
 800ad00:	4620      	mov	r0, r4
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	f000 fb6a 	bl	800b3dc <__lshift>
 800ad08:	4631      	mov	r1, r6
 800ad0a:	4683      	mov	fp, r0
 800ad0c:	f000 fbd2 	bl	800b4b4 <__mcmp>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dcb2      	bgt.n	800ac7a <_dtoa_r+0xac2>
 800ad14:	d102      	bne.n	800ad1c <_dtoa_r+0xb64>
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	07db      	lsls	r3, r3, #31
 800ad1a:	d4ae      	bmi.n	800ac7a <_dtoa_r+0xac2>
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	461d      	mov	r5, r3
 800ad20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad24:	2a30      	cmp	r2, #48	; 0x30
 800ad26:	d0fa      	beq.n	800ad1e <_dtoa_r+0xb66>
 800ad28:	e6f7      	b.n	800ab1a <_dtoa_r+0x962>
 800ad2a:	9a00      	ldr	r2, [sp, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d1a5      	bne.n	800ac7c <_dtoa_r+0xac4>
 800ad30:	f10a 0a01 	add.w	sl, sl, #1
 800ad34:	2331      	movs	r3, #49	; 0x31
 800ad36:	e779      	b.n	800ac2c <_dtoa_r+0xa74>
 800ad38:	4b13      	ldr	r3, [pc, #76]	; (800ad88 <_dtoa_r+0xbd0>)
 800ad3a:	f7ff baaf 	b.w	800a29c <_dtoa_r+0xe4>
 800ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f47f aa86 	bne.w	800a252 <_dtoa_r+0x9a>
 800ad46:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <_dtoa_r+0xbd4>)
 800ad48:	f7ff baa8 	b.w	800a29c <_dtoa_r+0xe4>
 800ad4c:	f1b9 0f00 	cmp.w	r9, #0
 800ad50:	dc03      	bgt.n	800ad5a <_dtoa_r+0xba2>
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	f73f aec9 	bgt.w	800aaec <_dtoa_r+0x934>
 800ad5a:	9d00      	ldr	r5, [sp, #0]
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f7ff f99e 	bl	800a0a0 <quorem>
 800ad64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad68:	f805 3b01 	strb.w	r3, [r5], #1
 800ad6c:	9a00      	ldr	r2, [sp, #0]
 800ad6e:	1aaa      	subs	r2, r5, r2
 800ad70:	4591      	cmp	r9, r2
 800ad72:	ddba      	ble.n	800acea <_dtoa_r+0xb32>
 800ad74:	4659      	mov	r1, fp
 800ad76:	2300      	movs	r3, #0
 800ad78:	220a      	movs	r2, #10
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 f97e 	bl	800b07c <__multadd>
 800ad80:	4683      	mov	fp, r0
 800ad82:	e7eb      	b.n	800ad5c <_dtoa_r+0xba4>
 800ad84:	0800c29b 	.word	0x0800c29b
 800ad88:	0800c1f4 	.word	0x0800c1f4
 800ad8c:	0800c218 	.word	0x0800c218

0800ad90 <std>:
 800ad90:	2300      	movs	r3, #0
 800ad92:	b510      	push	{r4, lr}
 800ad94:	4604      	mov	r4, r0
 800ad96:	e9c0 3300 	strd	r3, r3, [r0]
 800ad9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad9e:	6083      	str	r3, [r0, #8]
 800ada0:	8181      	strh	r1, [r0, #12]
 800ada2:	6643      	str	r3, [r0, #100]	; 0x64
 800ada4:	81c2      	strh	r2, [r0, #14]
 800ada6:	6183      	str	r3, [r0, #24]
 800ada8:	4619      	mov	r1, r3
 800adaa:	2208      	movs	r2, #8
 800adac:	305c      	adds	r0, #92	; 0x5c
 800adae:	f7fe fced 	bl	800978c <memset>
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <std+0x38>)
 800adb4:	6263      	str	r3, [r4, #36]	; 0x24
 800adb6:	4b05      	ldr	r3, [pc, #20]	; (800adcc <std+0x3c>)
 800adb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <std+0x40>)
 800adbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adbe:	4b05      	ldr	r3, [pc, #20]	; (800add4 <std+0x44>)
 800adc0:	6224      	str	r4, [r4, #32]
 800adc2:	6323      	str	r3, [r4, #48]	; 0x30
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	bf00      	nop
 800adc8:	0800bafd 	.word	0x0800bafd
 800adcc:	0800bb1f 	.word	0x0800bb1f
 800add0:	0800bb57 	.word	0x0800bb57
 800add4:	0800bb7b 	.word	0x0800bb7b

0800add8 <_cleanup_r>:
 800add8:	4901      	ldr	r1, [pc, #4]	; (800ade0 <_cleanup_r+0x8>)
 800adda:	f000 b8af 	b.w	800af3c <_fwalk_reent>
 800adde:	bf00      	nop
 800ade0:	0800be91 	.word	0x0800be91

0800ade4 <__sfmoreglue>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	1e4a      	subs	r2, r1, #1
 800ade8:	2568      	movs	r5, #104	; 0x68
 800adea:	4355      	muls	r5, r2
 800adec:	460e      	mov	r6, r1
 800adee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adf2:	f000 fcbf 	bl	800b774 <_malloc_r>
 800adf6:	4604      	mov	r4, r0
 800adf8:	b140      	cbz	r0, 800ae0c <__sfmoreglue+0x28>
 800adfa:	2100      	movs	r1, #0
 800adfc:	e9c0 1600 	strd	r1, r6, [r0]
 800ae00:	300c      	adds	r0, #12
 800ae02:	60a0      	str	r0, [r4, #8]
 800ae04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae08:	f7fe fcc0 	bl	800978c <memset>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}

0800ae10 <__sfp_lock_acquire>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sfp_lock_acquire+0x8>)
 800ae12:	f000 b8b8 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	20000a64 	.word	0x20000a64

0800ae1c <__sfp_lock_release>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sfp_lock_release+0x8>)
 800ae1e:	f000 b8b3 	b.w	800af88 <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	20000a64 	.word	0x20000a64

0800ae28 <__sinit_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sinit_lock_acquire+0x8>)
 800ae2a:	f000 b8ac 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20000a5f 	.word	0x20000a5f

0800ae34 <__sinit_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sinit_lock_release+0x8>)
 800ae36:	f000 b8a7 	b.w	800af88 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000a5f 	.word	0x20000a5f

0800ae40 <__sinit>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	f7ff fff0 	bl	800ae28 <__sinit_lock_acquire>
 800ae48:	69a3      	ldr	r3, [r4, #24]
 800ae4a:	b11b      	cbz	r3, 800ae54 <__sinit+0x14>
 800ae4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae50:	f7ff bff0 	b.w	800ae34 <__sinit_lock_release>
 800ae54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae58:	6523      	str	r3, [r4, #80]	; 0x50
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <__sinit+0x68>)
 800ae5c:	4a13      	ldr	r2, [pc, #76]	; (800aeac <__sinit+0x6c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	bf04      	itt	eq
 800ae66:	2301      	moveq	r3, #1
 800ae68:	61a3      	streq	r3, [r4, #24]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f820 	bl	800aeb0 <__sfp>
 800ae70:	6060      	str	r0, [r4, #4]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 f81c 	bl	800aeb0 <__sfp>
 800ae78:	60a0      	str	r0, [r4, #8]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 f818 	bl	800aeb0 <__sfp>
 800ae80:	2200      	movs	r2, #0
 800ae82:	60e0      	str	r0, [r4, #12]
 800ae84:	2104      	movs	r1, #4
 800ae86:	6860      	ldr	r0, [r4, #4]
 800ae88:	f7ff ff82 	bl	800ad90 <std>
 800ae8c:	68a0      	ldr	r0, [r4, #8]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	2109      	movs	r1, #9
 800ae92:	f7ff ff7d 	bl	800ad90 <std>
 800ae96:	68e0      	ldr	r0, [r4, #12]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	2112      	movs	r1, #18
 800ae9c:	f7ff ff78 	bl	800ad90 <std>
 800aea0:	2301      	movs	r3, #1
 800aea2:	61a3      	str	r3, [r4, #24]
 800aea4:	e7d2      	b.n	800ae4c <__sinit+0xc>
 800aea6:	bf00      	nop
 800aea8:	0800c1e0 	.word	0x0800c1e0
 800aeac:	0800add9 	.word	0x0800add9

0800aeb0 <__sfp>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	f7ff ffac 	bl	800ae10 <__sfp_lock_acquire>
 800aeb8:	4b1e      	ldr	r3, [pc, #120]	; (800af34 <__sfp+0x84>)
 800aeba:	681e      	ldr	r6, [r3, #0]
 800aebc:	69b3      	ldr	r3, [r6, #24]
 800aebe:	b913      	cbnz	r3, 800aec6 <__sfp+0x16>
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff ffbd 	bl	800ae40 <__sinit>
 800aec6:	3648      	adds	r6, #72	; 0x48
 800aec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aecc:	3b01      	subs	r3, #1
 800aece:	d503      	bpl.n	800aed8 <__sfp+0x28>
 800aed0:	6833      	ldr	r3, [r6, #0]
 800aed2:	b30b      	cbz	r3, 800af18 <__sfp+0x68>
 800aed4:	6836      	ldr	r6, [r6, #0]
 800aed6:	e7f7      	b.n	800aec8 <__sfp+0x18>
 800aed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aedc:	b9d5      	cbnz	r5, 800af14 <__sfp+0x64>
 800aede:	4b16      	ldr	r3, [pc, #88]	; (800af38 <__sfp+0x88>)
 800aee0:	60e3      	str	r3, [r4, #12]
 800aee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aee6:	6665      	str	r5, [r4, #100]	; 0x64
 800aee8:	f000 f84c 	bl	800af84 <__retarget_lock_init_recursive>
 800aeec:	f7ff ff96 	bl	800ae1c <__sfp_lock_release>
 800aef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aef8:	6025      	str	r5, [r4, #0]
 800aefa:	61a5      	str	r5, [r4, #24]
 800aefc:	2208      	movs	r2, #8
 800aefe:	4629      	mov	r1, r5
 800af00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af04:	f7fe fc42 	bl	800978c <memset>
 800af08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af10:	4620      	mov	r0, r4
 800af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af14:	3468      	adds	r4, #104	; 0x68
 800af16:	e7d9      	b.n	800aecc <__sfp+0x1c>
 800af18:	2104      	movs	r1, #4
 800af1a:	4638      	mov	r0, r7
 800af1c:	f7ff ff62 	bl	800ade4 <__sfmoreglue>
 800af20:	4604      	mov	r4, r0
 800af22:	6030      	str	r0, [r6, #0]
 800af24:	2800      	cmp	r0, #0
 800af26:	d1d5      	bne.n	800aed4 <__sfp+0x24>
 800af28:	f7ff ff78 	bl	800ae1c <__sfp_lock_release>
 800af2c:	230c      	movs	r3, #12
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	e7ee      	b.n	800af10 <__sfp+0x60>
 800af32:	bf00      	nop
 800af34:	0800c1e0 	.word	0x0800c1e0
 800af38:	ffff0001 	.word	0xffff0001

0800af3c <_fwalk_reent>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4606      	mov	r6, r0
 800af42:	4688      	mov	r8, r1
 800af44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af48:	2700      	movs	r7, #0
 800af4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af4e:	f1b9 0901 	subs.w	r9, r9, #1
 800af52:	d505      	bpl.n	800af60 <_fwalk_reent+0x24>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d1f7      	bne.n	800af4a <_fwalk_reent+0xe>
 800af5a:	4638      	mov	r0, r7
 800af5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af60:	89ab      	ldrh	r3, [r5, #12]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d907      	bls.n	800af76 <_fwalk_reent+0x3a>
 800af66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6a:	3301      	adds	r3, #1
 800af6c:	d003      	beq.n	800af76 <_fwalk_reent+0x3a>
 800af6e:	4629      	mov	r1, r5
 800af70:	4630      	mov	r0, r6
 800af72:	47c0      	blx	r8
 800af74:	4307      	orrs	r7, r0
 800af76:	3568      	adds	r5, #104	; 0x68
 800af78:	e7e9      	b.n	800af4e <_fwalk_reent+0x12>
	...

0800af7c <_localeconv_r>:
 800af7c:	4800      	ldr	r0, [pc, #0]	; (800af80 <_localeconv_r+0x4>)
 800af7e:	4770      	bx	lr
 800af80:	20000164 	.word	0x20000164

0800af84 <__retarget_lock_init_recursive>:
 800af84:	4770      	bx	lr

0800af86 <__retarget_lock_acquire_recursive>:
 800af86:	4770      	bx	lr

0800af88 <__retarget_lock_release_recursive>:
 800af88:	4770      	bx	lr
	...

0800af8c <malloc>:
 800af8c:	4b02      	ldr	r3, [pc, #8]	; (800af98 <malloc+0xc>)
 800af8e:	4601      	mov	r1, r0
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	f000 bbef 	b.w	800b774 <_malloc_r>
 800af96:	bf00      	nop
 800af98:	20000010 	.word	0x20000010

0800af9c <memcpy>:
 800af9c:	440a      	add	r2, r1
 800af9e:	4291      	cmp	r1, r2
 800afa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afa4:	d100      	bne.n	800afa8 <memcpy+0xc>
 800afa6:	4770      	bx	lr
 800afa8:	b510      	push	{r4, lr}
 800afaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afb2:	4291      	cmp	r1, r2
 800afb4:	d1f9      	bne.n	800afaa <memcpy+0xe>
 800afb6:	bd10      	pop	{r4, pc}

0800afb8 <_Balloc>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afbc:	4604      	mov	r4, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	b976      	cbnz	r6, 800afe0 <_Balloc+0x28>
 800afc2:	2010      	movs	r0, #16
 800afc4:	f7ff ffe2 	bl	800af8c <malloc>
 800afc8:	4602      	mov	r2, r0
 800afca:	6260      	str	r0, [r4, #36]	; 0x24
 800afcc:	b920      	cbnz	r0, 800afd8 <_Balloc+0x20>
 800afce:	4b18      	ldr	r3, [pc, #96]	; (800b030 <_Balloc+0x78>)
 800afd0:	4818      	ldr	r0, [pc, #96]	; (800b034 <_Balloc+0x7c>)
 800afd2:	2166      	movs	r1, #102	; 0x66
 800afd4:	f000 fea8 	bl	800bd28 <__assert_func>
 800afd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afdc:	6006      	str	r6, [r0, #0]
 800afde:	60c6      	str	r6, [r0, #12]
 800afe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afe2:	68f3      	ldr	r3, [r6, #12]
 800afe4:	b183      	cbz	r3, 800b008 <_Balloc+0x50>
 800afe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afee:	b9b8      	cbnz	r0, 800b020 <_Balloc+0x68>
 800aff0:	2101      	movs	r1, #1
 800aff2:	fa01 f605 	lsl.w	r6, r1, r5
 800aff6:	1d72      	adds	r2, r6, #5
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fb5a 	bl	800b6b4 <_calloc_r>
 800b000:	b160      	cbz	r0, 800b01c <_Balloc+0x64>
 800b002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b006:	e00e      	b.n	800b026 <_Balloc+0x6e>
 800b008:	2221      	movs	r2, #33	; 0x21
 800b00a:	2104      	movs	r1, #4
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fb51 	bl	800b6b4 <_calloc_r>
 800b012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b014:	60f0      	str	r0, [r6, #12]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e4      	bne.n	800afe6 <_Balloc+0x2e>
 800b01c:	2000      	movs	r0, #0
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	6802      	ldr	r2, [r0, #0]
 800b022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b026:	2300      	movs	r3, #0
 800b028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b02c:	e7f7      	b.n	800b01e <_Balloc+0x66>
 800b02e:	bf00      	nop
 800b030:	0800c225 	.word	0x0800c225
 800b034:	0800c30c 	.word	0x0800c30c

0800b038 <_Bfree>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	b976      	cbnz	r6, 800b060 <_Bfree+0x28>
 800b042:	2010      	movs	r0, #16
 800b044:	f7ff ffa2 	bl	800af8c <malloc>
 800b048:	4602      	mov	r2, r0
 800b04a:	6268      	str	r0, [r5, #36]	; 0x24
 800b04c:	b920      	cbnz	r0, 800b058 <_Bfree+0x20>
 800b04e:	4b09      	ldr	r3, [pc, #36]	; (800b074 <_Bfree+0x3c>)
 800b050:	4809      	ldr	r0, [pc, #36]	; (800b078 <_Bfree+0x40>)
 800b052:	218a      	movs	r1, #138	; 0x8a
 800b054:	f000 fe68 	bl	800bd28 <__assert_func>
 800b058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b05c:	6006      	str	r6, [r0, #0]
 800b05e:	60c6      	str	r6, [r0, #12]
 800b060:	b13c      	cbz	r4, 800b072 <_Bfree+0x3a>
 800b062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b064:	6862      	ldr	r2, [r4, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b06c:	6021      	str	r1, [r4, #0]
 800b06e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	0800c225 	.word	0x0800c225
 800b078:	0800c30c 	.word	0x0800c30c

0800b07c <__multadd>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	690e      	ldr	r6, [r1, #16]
 800b082:	4607      	mov	r7, r0
 800b084:	4698      	mov	r8, r3
 800b086:	460c      	mov	r4, r1
 800b088:	f101 0014 	add.w	r0, r1, #20
 800b08c:	2300      	movs	r3, #0
 800b08e:	6805      	ldr	r5, [r0, #0]
 800b090:	b2a9      	uxth	r1, r5
 800b092:	fb02 8101 	mla	r1, r2, r1, r8
 800b096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b09a:	0c2d      	lsrs	r5, r5, #16
 800b09c:	fb02 c505 	mla	r5, r2, r5, ip
 800b0a0:	b289      	uxth	r1, r1
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0a8:	429e      	cmp	r6, r3
 800b0aa:	f840 1b04 	str.w	r1, [r0], #4
 800b0ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b0b2:	dcec      	bgt.n	800b08e <__multadd+0x12>
 800b0b4:	f1b8 0f00 	cmp.w	r8, #0
 800b0b8:	d022      	beq.n	800b100 <__multadd+0x84>
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	42b3      	cmp	r3, r6
 800b0be:	dc19      	bgt.n	800b0f4 <__multadd+0x78>
 800b0c0:	6861      	ldr	r1, [r4, #4]
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	f7ff ff77 	bl	800afb8 <_Balloc>
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	b928      	cbnz	r0, 800b0da <__multadd+0x5e>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <__multadd+0x8c>)
 800b0d2:	480e      	ldr	r0, [pc, #56]	; (800b10c <__multadd+0x90>)
 800b0d4:	21b5      	movs	r1, #181	; 0xb5
 800b0d6:	f000 fe27 	bl	800bd28 <__assert_func>
 800b0da:	6922      	ldr	r2, [r4, #16]
 800b0dc:	3202      	adds	r2, #2
 800b0de:	f104 010c 	add.w	r1, r4, #12
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	300c      	adds	r0, #12
 800b0e6:	f7ff ff59 	bl	800af9c <memcpy>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7ff ffa3 	bl	800b038 <_Bfree>
 800b0f2:	462c      	mov	r4, r5
 800b0f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0fe:	6126      	str	r6, [r4, #16]
 800b100:	4620      	mov	r0, r4
 800b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b106:	bf00      	nop
 800b108:	0800c29b 	.word	0x0800c29b
 800b10c:	0800c30c 	.word	0x0800c30c

0800b110 <__hi0bits>:
 800b110:	0c03      	lsrs	r3, r0, #16
 800b112:	041b      	lsls	r3, r3, #16
 800b114:	b9d3      	cbnz	r3, 800b14c <__hi0bits+0x3c>
 800b116:	0400      	lsls	r0, r0, #16
 800b118:	2310      	movs	r3, #16
 800b11a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b11e:	bf04      	itt	eq
 800b120:	0200      	lsleq	r0, r0, #8
 800b122:	3308      	addeq	r3, #8
 800b124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b128:	bf04      	itt	eq
 800b12a:	0100      	lsleq	r0, r0, #4
 800b12c:	3304      	addeq	r3, #4
 800b12e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b132:	bf04      	itt	eq
 800b134:	0080      	lsleq	r0, r0, #2
 800b136:	3302      	addeq	r3, #2
 800b138:	2800      	cmp	r0, #0
 800b13a:	db05      	blt.n	800b148 <__hi0bits+0x38>
 800b13c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b140:	f103 0301 	add.w	r3, r3, #1
 800b144:	bf08      	it	eq
 800b146:	2320      	moveq	r3, #32
 800b148:	4618      	mov	r0, r3
 800b14a:	4770      	bx	lr
 800b14c:	2300      	movs	r3, #0
 800b14e:	e7e4      	b.n	800b11a <__hi0bits+0xa>

0800b150 <__lo0bits>:
 800b150:	6803      	ldr	r3, [r0, #0]
 800b152:	f013 0207 	ands.w	r2, r3, #7
 800b156:	4601      	mov	r1, r0
 800b158:	d00b      	beq.n	800b172 <__lo0bits+0x22>
 800b15a:	07da      	lsls	r2, r3, #31
 800b15c:	d424      	bmi.n	800b1a8 <__lo0bits+0x58>
 800b15e:	0798      	lsls	r0, r3, #30
 800b160:	bf49      	itett	mi
 800b162:	085b      	lsrmi	r3, r3, #1
 800b164:	089b      	lsrpl	r3, r3, #2
 800b166:	2001      	movmi	r0, #1
 800b168:	600b      	strmi	r3, [r1, #0]
 800b16a:	bf5c      	itt	pl
 800b16c:	600b      	strpl	r3, [r1, #0]
 800b16e:	2002      	movpl	r0, #2
 800b170:	4770      	bx	lr
 800b172:	b298      	uxth	r0, r3
 800b174:	b9b0      	cbnz	r0, 800b1a4 <__lo0bits+0x54>
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	2010      	movs	r0, #16
 800b17a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b17e:	bf04      	itt	eq
 800b180:	0a1b      	lsreq	r3, r3, #8
 800b182:	3008      	addeq	r0, #8
 800b184:	071a      	lsls	r2, r3, #28
 800b186:	bf04      	itt	eq
 800b188:	091b      	lsreq	r3, r3, #4
 800b18a:	3004      	addeq	r0, #4
 800b18c:	079a      	lsls	r2, r3, #30
 800b18e:	bf04      	itt	eq
 800b190:	089b      	lsreq	r3, r3, #2
 800b192:	3002      	addeq	r0, #2
 800b194:	07da      	lsls	r2, r3, #31
 800b196:	d403      	bmi.n	800b1a0 <__lo0bits+0x50>
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	f100 0001 	add.w	r0, r0, #1
 800b19e:	d005      	beq.n	800b1ac <__lo0bits+0x5c>
 800b1a0:	600b      	str	r3, [r1, #0]
 800b1a2:	4770      	bx	lr
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	e7e8      	b.n	800b17a <__lo0bits+0x2a>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	4770      	bx	lr
 800b1ac:	2020      	movs	r0, #32
 800b1ae:	4770      	bx	lr

0800b1b0 <__i2b>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f7ff feff 	bl	800afb8 <_Balloc>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	b928      	cbnz	r0, 800b1ca <__i2b+0x1a>
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <__i2b+0x24>)
 800b1c0:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <__i2b+0x28>)
 800b1c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1c6:	f000 fdaf 	bl	800bd28 <__assert_func>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	6144      	str	r4, [r0, #20]
 800b1ce:	6103      	str	r3, [r0, #16]
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800c29b 	.word	0x0800c29b
 800b1d8:	0800c30c 	.word	0x0800c30c

0800b1dc <__multiply>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	4614      	mov	r4, r2
 800b1e2:	690a      	ldr	r2, [r1, #16]
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	bfb8      	it	lt
 800b1ea:	460b      	movlt	r3, r1
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	bfbc      	itt	lt
 800b1f0:	4625      	movlt	r5, r4
 800b1f2:	461c      	movlt	r4, r3
 800b1f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b1f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1fc:	68ab      	ldr	r3, [r5, #8]
 800b1fe:	6869      	ldr	r1, [r5, #4]
 800b200:	eb0a 0709 	add.w	r7, sl, r9
 800b204:	42bb      	cmp	r3, r7
 800b206:	b085      	sub	sp, #20
 800b208:	bfb8      	it	lt
 800b20a:	3101      	addlt	r1, #1
 800b20c:	f7ff fed4 	bl	800afb8 <_Balloc>
 800b210:	b930      	cbnz	r0, 800b220 <__multiply+0x44>
 800b212:	4602      	mov	r2, r0
 800b214:	4b42      	ldr	r3, [pc, #264]	; (800b320 <__multiply+0x144>)
 800b216:	4843      	ldr	r0, [pc, #268]	; (800b324 <__multiply+0x148>)
 800b218:	f240 115d 	movw	r1, #349	; 0x15d
 800b21c:	f000 fd84 	bl	800bd28 <__assert_func>
 800b220:	f100 0614 	add.w	r6, r0, #20
 800b224:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b228:	4633      	mov	r3, r6
 800b22a:	2200      	movs	r2, #0
 800b22c:	4543      	cmp	r3, r8
 800b22e:	d31e      	bcc.n	800b26e <__multiply+0x92>
 800b230:	f105 0c14 	add.w	ip, r5, #20
 800b234:	f104 0314 	add.w	r3, r4, #20
 800b238:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b23c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b240:	9202      	str	r2, [sp, #8]
 800b242:	ebac 0205 	sub.w	r2, ip, r5
 800b246:	3a15      	subs	r2, #21
 800b248:	f022 0203 	bic.w	r2, r2, #3
 800b24c:	3204      	adds	r2, #4
 800b24e:	f105 0115 	add.w	r1, r5, #21
 800b252:	458c      	cmp	ip, r1
 800b254:	bf38      	it	cc
 800b256:	2204      	movcc	r2, #4
 800b258:	9201      	str	r2, [sp, #4]
 800b25a:	9a02      	ldr	r2, [sp, #8]
 800b25c:	9303      	str	r3, [sp, #12]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d808      	bhi.n	800b274 <__multiply+0x98>
 800b262:	2f00      	cmp	r7, #0
 800b264:	dc55      	bgt.n	800b312 <__multiply+0x136>
 800b266:	6107      	str	r7, [r0, #16]
 800b268:	b005      	add	sp, #20
 800b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26e:	f843 2b04 	str.w	r2, [r3], #4
 800b272:	e7db      	b.n	800b22c <__multiply+0x50>
 800b274:	f8b3 a000 	ldrh.w	sl, [r3]
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	d020      	beq.n	800b2c0 <__multiply+0xe4>
 800b27e:	f105 0e14 	add.w	lr, r5, #20
 800b282:	46b1      	mov	r9, r6
 800b284:	2200      	movs	r2, #0
 800b286:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b28a:	f8d9 b000 	ldr.w	fp, [r9]
 800b28e:	b2a1      	uxth	r1, r4
 800b290:	fa1f fb8b 	uxth.w	fp, fp
 800b294:	fb0a b101 	mla	r1, sl, r1, fp
 800b298:	4411      	add	r1, r2
 800b29a:	f8d9 2000 	ldr.w	r2, [r9]
 800b29e:	0c24      	lsrs	r4, r4, #16
 800b2a0:	0c12      	lsrs	r2, r2, #16
 800b2a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800b2a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b2aa:	b289      	uxth	r1, r1
 800b2ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2b0:	45f4      	cmp	ip, lr
 800b2b2:	f849 1b04 	str.w	r1, [r9], #4
 800b2b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b2ba:	d8e4      	bhi.n	800b286 <__multiply+0xaa>
 800b2bc:	9901      	ldr	r1, [sp, #4]
 800b2be:	5072      	str	r2, [r6, r1]
 800b2c0:	9a03      	ldr	r2, [sp, #12]
 800b2c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	d01f      	beq.n	800b30e <__multiply+0x132>
 800b2ce:	6834      	ldr	r4, [r6, #0]
 800b2d0:	f105 0114 	add.w	r1, r5, #20
 800b2d4:	46b6      	mov	lr, r6
 800b2d6:	f04f 0a00 	mov.w	sl, #0
 800b2da:	880a      	ldrh	r2, [r1, #0]
 800b2dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b2e0:	fb09 b202 	mla	r2, r9, r2, fp
 800b2e4:	4492      	add	sl, r2
 800b2e6:	b2a4      	uxth	r4, r4
 800b2e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b2ec:	f84e 4b04 	str.w	r4, [lr], #4
 800b2f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b2f4:	f8be 2000 	ldrh.w	r2, [lr]
 800b2f8:	0c24      	lsrs	r4, r4, #16
 800b2fa:	fb09 2404 	mla	r4, r9, r4, r2
 800b2fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b302:	458c      	cmp	ip, r1
 800b304:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b308:	d8e7      	bhi.n	800b2da <__multiply+0xfe>
 800b30a:	9a01      	ldr	r2, [sp, #4]
 800b30c:	50b4      	str	r4, [r6, r2]
 800b30e:	3604      	adds	r6, #4
 800b310:	e7a3      	b.n	800b25a <__multiply+0x7e>
 800b312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1a5      	bne.n	800b266 <__multiply+0x8a>
 800b31a:	3f01      	subs	r7, #1
 800b31c:	e7a1      	b.n	800b262 <__multiply+0x86>
 800b31e:	bf00      	nop
 800b320:	0800c29b 	.word	0x0800c29b
 800b324:	0800c30c 	.word	0x0800c30c

0800b328 <__pow5mult>:
 800b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	4615      	mov	r5, r2
 800b32e:	f012 0203 	ands.w	r2, r2, #3
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	d007      	beq.n	800b348 <__pow5mult+0x20>
 800b338:	4c25      	ldr	r4, [pc, #148]	; (800b3d0 <__pow5mult+0xa8>)
 800b33a:	3a01      	subs	r2, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b342:	f7ff fe9b 	bl	800b07c <__multadd>
 800b346:	4607      	mov	r7, r0
 800b348:	10ad      	asrs	r5, r5, #2
 800b34a:	d03d      	beq.n	800b3c8 <__pow5mult+0xa0>
 800b34c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b34e:	b97c      	cbnz	r4, 800b370 <__pow5mult+0x48>
 800b350:	2010      	movs	r0, #16
 800b352:	f7ff fe1b 	bl	800af8c <malloc>
 800b356:	4602      	mov	r2, r0
 800b358:	6270      	str	r0, [r6, #36]	; 0x24
 800b35a:	b928      	cbnz	r0, 800b368 <__pow5mult+0x40>
 800b35c:	4b1d      	ldr	r3, [pc, #116]	; (800b3d4 <__pow5mult+0xac>)
 800b35e:	481e      	ldr	r0, [pc, #120]	; (800b3d8 <__pow5mult+0xb0>)
 800b360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b364:	f000 fce0 	bl	800bd28 <__assert_func>
 800b368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b36c:	6004      	str	r4, [r0, #0]
 800b36e:	60c4      	str	r4, [r0, #12]
 800b370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b378:	b94c      	cbnz	r4, 800b38e <__pow5mult+0x66>
 800b37a:	f240 2171 	movw	r1, #625	; 0x271
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff ff16 	bl	800b1b0 <__i2b>
 800b384:	2300      	movs	r3, #0
 800b386:	f8c8 0008 	str.w	r0, [r8, #8]
 800b38a:	4604      	mov	r4, r0
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	f04f 0900 	mov.w	r9, #0
 800b392:	07eb      	lsls	r3, r5, #31
 800b394:	d50a      	bpl.n	800b3ac <__pow5mult+0x84>
 800b396:	4639      	mov	r1, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ff1e 	bl	800b1dc <__multiply>
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff fe47 	bl	800b038 <_Bfree>
 800b3aa:	4647      	mov	r7, r8
 800b3ac:	106d      	asrs	r5, r5, #1
 800b3ae:	d00b      	beq.n	800b3c8 <__pow5mult+0xa0>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	b938      	cbnz	r0, 800b3c4 <__pow5mult+0x9c>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ff0f 	bl	800b1dc <__multiply>
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	f8c0 9000 	str.w	r9, [r0]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	e7e4      	b.n	800b392 <__pow5mult+0x6a>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0800c460 	.word	0x0800c460
 800b3d4:	0800c225 	.word	0x0800c225
 800b3d8:	0800c30c 	.word	0x0800c30c

0800b3dc <__lshift>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	6849      	ldr	r1, [r1, #4]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	4691      	mov	r9, r2
 800b3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3f4:	f108 0601 	add.w	r6, r8, #1
 800b3f8:	42b3      	cmp	r3, r6
 800b3fa:	db0b      	blt.n	800b414 <__lshift+0x38>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff fddb 	bl	800afb8 <_Balloc>
 800b402:	4605      	mov	r5, r0
 800b404:	b948      	cbnz	r0, 800b41a <__lshift+0x3e>
 800b406:	4602      	mov	r2, r0
 800b408:	4b28      	ldr	r3, [pc, #160]	; (800b4ac <__lshift+0xd0>)
 800b40a:	4829      	ldr	r0, [pc, #164]	; (800b4b0 <__lshift+0xd4>)
 800b40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b410:	f000 fc8a 	bl	800bd28 <__assert_func>
 800b414:	3101      	adds	r1, #1
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	e7ee      	b.n	800b3f8 <__lshift+0x1c>
 800b41a:	2300      	movs	r3, #0
 800b41c:	f100 0114 	add.w	r1, r0, #20
 800b420:	f100 0210 	add.w	r2, r0, #16
 800b424:	4618      	mov	r0, r3
 800b426:	4553      	cmp	r3, sl
 800b428:	db33      	blt.n	800b492 <__lshift+0xb6>
 800b42a:	6920      	ldr	r0, [r4, #16]
 800b42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b430:	f104 0314 	add.w	r3, r4, #20
 800b434:	f019 091f 	ands.w	r9, r9, #31
 800b438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b440:	d02b      	beq.n	800b49a <__lshift+0xbe>
 800b442:	f1c9 0e20 	rsb	lr, r9, #32
 800b446:	468a      	mov	sl, r1
 800b448:	2200      	movs	r2, #0
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	fa00 f009 	lsl.w	r0, r0, r9
 800b450:	4302      	orrs	r2, r0
 800b452:	f84a 2b04 	str.w	r2, [sl], #4
 800b456:	f853 2b04 	ldr.w	r2, [r3], #4
 800b45a:	459c      	cmp	ip, r3
 800b45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b460:	d8f3      	bhi.n	800b44a <__lshift+0x6e>
 800b462:	ebac 0304 	sub.w	r3, ip, r4
 800b466:	3b15      	subs	r3, #21
 800b468:	f023 0303 	bic.w	r3, r3, #3
 800b46c:	3304      	adds	r3, #4
 800b46e:	f104 0015 	add.w	r0, r4, #21
 800b472:	4584      	cmp	ip, r0
 800b474:	bf38      	it	cc
 800b476:	2304      	movcc	r3, #4
 800b478:	50ca      	str	r2, [r1, r3]
 800b47a:	b10a      	cbz	r2, 800b480 <__lshift+0xa4>
 800b47c:	f108 0602 	add.w	r6, r8, #2
 800b480:	3e01      	subs	r6, #1
 800b482:	4638      	mov	r0, r7
 800b484:	612e      	str	r6, [r5, #16]
 800b486:	4621      	mov	r1, r4
 800b488:	f7ff fdd6 	bl	800b038 <_Bfree>
 800b48c:	4628      	mov	r0, r5
 800b48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b492:	f842 0f04 	str.w	r0, [r2, #4]!
 800b496:	3301      	adds	r3, #1
 800b498:	e7c5      	b.n	800b426 <__lshift+0x4a>
 800b49a:	3904      	subs	r1, #4
 800b49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4a4:	459c      	cmp	ip, r3
 800b4a6:	d8f9      	bhi.n	800b49c <__lshift+0xc0>
 800b4a8:	e7ea      	b.n	800b480 <__lshift+0xa4>
 800b4aa:	bf00      	nop
 800b4ac:	0800c29b 	.word	0x0800c29b
 800b4b0:	0800c30c 	.word	0x0800c30c

0800b4b4 <__mcmp>:
 800b4b4:	b530      	push	{r4, r5, lr}
 800b4b6:	6902      	ldr	r2, [r0, #16]
 800b4b8:	690c      	ldr	r4, [r1, #16]
 800b4ba:	1b12      	subs	r2, r2, r4
 800b4bc:	d10e      	bne.n	800b4dc <__mcmp+0x28>
 800b4be:	f100 0314 	add.w	r3, r0, #20
 800b4c2:	3114      	adds	r1, #20
 800b4c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4d4:	42a5      	cmp	r5, r4
 800b4d6:	d003      	beq.n	800b4e0 <__mcmp+0x2c>
 800b4d8:	d305      	bcc.n	800b4e6 <__mcmp+0x32>
 800b4da:	2201      	movs	r2, #1
 800b4dc:	4610      	mov	r0, r2
 800b4de:	bd30      	pop	{r4, r5, pc}
 800b4e0:	4283      	cmp	r3, r0
 800b4e2:	d3f3      	bcc.n	800b4cc <__mcmp+0x18>
 800b4e4:	e7fa      	b.n	800b4dc <__mcmp+0x28>
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	e7f7      	b.n	800b4dc <__mcmp+0x28>

0800b4ec <__mdiff>:
 800b4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4617      	mov	r7, r2
 800b4fa:	f7ff ffdb 	bl	800b4b4 <__mcmp>
 800b4fe:	1e05      	subs	r5, r0, #0
 800b500:	d110      	bne.n	800b524 <__mdiff+0x38>
 800b502:	4629      	mov	r1, r5
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fd57 	bl	800afb8 <_Balloc>
 800b50a:	b930      	cbnz	r0, 800b51a <__mdiff+0x2e>
 800b50c:	4b39      	ldr	r3, [pc, #228]	; (800b5f4 <__mdiff+0x108>)
 800b50e:	4602      	mov	r2, r0
 800b510:	f240 2132 	movw	r1, #562	; 0x232
 800b514:	4838      	ldr	r0, [pc, #224]	; (800b5f8 <__mdiff+0x10c>)
 800b516:	f000 fc07 	bl	800bd28 <__assert_func>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	bfa4      	itt	ge
 800b526:	463b      	movge	r3, r7
 800b528:	4627      	movge	r7, r4
 800b52a:	4630      	mov	r0, r6
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	bfa6      	itte	ge
 800b530:	461c      	movge	r4, r3
 800b532:	2500      	movge	r5, #0
 800b534:	2501      	movlt	r5, #1
 800b536:	f7ff fd3f 	bl	800afb8 <_Balloc>
 800b53a:	b920      	cbnz	r0, 800b546 <__mdiff+0x5a>
 800b53c:	4b2d      	ldr	r3, [pc, #180]	; (800b5f4 <__mdiff+0x108>)
 800b53e:	4602      	mov	r2, r0
 800b540:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b544:	e7e6      	b.n	800b514 <__mdiff+0x28>
 800b546:	693e      	ldr	r6, [r7, #16]
 800b548:	60c5      	str	r5, [r0, #12]
 800b54a:	6925      	ldr	r5, [r4, #16]
 800b54c:	f107 0114 	add.w	r1, r7, #20
 800b550:	f104 0914 	add.w	r9, r4, #20
 800b554:	f100 0e14 	add.w	lr, r0, #20
 800b558:	f107 0210 	add.w	r2, r7, #16
 800b55c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b560:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b564:	46f2      	mov	sl, lr
 800b566:	2700      	movs	r7, #0
 800b568:	f859 3b04 	ldr.w	r3, [r9], #4
 800b56c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b570:	fa1f f883 	uxth.w	r8, r3
 800b574:	fa17 f78b 	uxtah	r7, r7, fp
 800b578:	0c1b      	lsrs	r3, r3, #16
 800b57a:	eba7 0808 	sub.w	r8, r7, r8
 800b57e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b586:	fa1f f888 	uxth.w	r8, r8
 800b58a:	141f      	asrs	r7, r3, #16
 800b58c:	454d      	cmp	r5, r9
 800b58e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b592:	f84a 3b04 	str.w	r3, [sl], #4
 800b596:	d8e7      	bhi.n	800b568 <__mdiff+0x7c>
 800b598:	1b2b      	subs	r3, r5, r4
 800b59a:	3b15      	subs	r3, #21
 800b59c:	f023 0303 	bic.w	r3, r3, #3
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	3415      	adds	r4, #21
 800b5a4:	42a5      	cmp	r5, r4
 800b5a6:	bf38      	it	cc
 800b5a8:	2304      	movcc	r3, #4
 800b5aa:	4419      	add	r1, r3
 800b5ac:	4473      	add	r3, lr
 800b5ae:	469e      	mov	lr, r3
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	4565      	cmp	r5, ip
 800b5b4:	d30e      	bcc.n	800b5d4 <__mdiff+0xe8>
 800b5b6:	f10c 0203 	add.w	r2, ip, #3
 800b5ba:	1a52      	subs	r2, r2, r1
 800b5bc:	f022 0203 	bic.w	r2, r2, #3
 800b5c0:	3903      	subs	r1, #3
 800b5c2:	458c      	cmp	ip, r1
 800b5c4:	bf38      	it	cc
 800b5c6:	2200      	movcc	r2, #0
 800b5c8:	441a      	add	r2, r3
 800b5ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5ce:	b17b      	cbz	r3, 800b5f0 <__mdiff+0x104>
 800b5d0:	6106      	str	r6, [r0, #16]
 800b5d2:	e7a5      	b.n	800b520 <__mdiff+0x34>
 800b5d4:	f855 8b04 	ldr.w	r8, [r5], #4
 800b5d8:	fa17 f488 	uxtah	r4, r7, r8
 800b5dc:	1422      	asrs	r2, r4, #16
 800b5de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b5e2:	b2a4      	uxth	r4, r4
 800b5e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b5e8:	f84e 4b04 	str.w	r4, [lr], #4
 800b5ec:	1417      	asrs	r7, r2, #16
 800b5ee:	e7e0      	b.n	800b5b2 <__mdiff+0xc6>
 800b5f0:	3e01      	subs	r6, #1
 800b5f2:	e7ea      	b.n	800b5ca <__mdiff+0xde>
 800b5f4:	0800c29b 	.word	0x0800c29b
 800b5f8:	0800c30c 	.word	0x0800c30c

0800b5fc <__d2b>:
 800b5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b600:	4689      	mov	r9, r1
 800b602:	2101      	movs	r1, #1
 800b604:	ec57 6b10 	vmov	r6, r7, d0
 800b608:	4690      	mov	r8, r2
 800b60a:	f7ff fcd5 	bl	800afb8 <_Balloc>
 800b60e:	4604      	mov	r4, r0
 800b610:	b930      	cbnz	r0, 800b620 <__d2b+0x24>
 800b612:	4602      	mov	r2, r0
 800b614:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <__d2b+0xb0>)
 800b616:	4826      	ldr	r0, [pc, #152]	; (800b6b0 <__d2b+0xb4>)
 800b618:	f240 310a 	movw	r1, #778	; 0x30a
 800b61c:	f000 fb84 	bl	800bd28 <__assert_func>
 800b620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b628:	bb35      	cbnz	r5, 800b678 <__d2b+0x7c>
 800b62a:	2e00      	cmp	r6, #0
 800b62c:	9301      	str	r3, [sp, #4]
 800b62e:	d028      	beq.n	800b682 <__d2b+0x86>
 800b630:	4668      	mov	r0, sp
 800b632:	9600      	str	r6, [sp, #0]
 800b634:	f7ff fd8c 	bl	800b150 <__lo0bits>
 800b638:	9900      	ldr	r1, [sp, #0]
 800b63a:	b300      	cbz	r0, 800b67e <__d2b+0x82>
 800b63c:	9a01      	ldr	r2, [sp, #4]
 800b63e:	f1c0 0320 	rsb	r3, r0, #32
 800b642:	fa02 f303 	lsl.w	r3, r2, r3
 800b646:	430b      	orrs	r3, r1
 800b648:	40c2      	lsrs	r2, r0
 800b64a:	6163      	str	r3, [r4, #20]
 800b64c:	9201      	str	r2, [sp, #4]
 800b64e:	9b01      	ldr	r3, [sp, #4]
 800b650:	61a3      	str	r3, [r4, #24]
 800b652:	2b00      	cmp	r3, #0
 800b654:	bf14      	ite	ne
 800b656:	2202      	movne	r2, #2
 800b658:	2201      	moveq	r2, #1
 800b65a:	6122      	str	r2, [r4, #16]
 800b65c:	b1d5      	cbz	r5, 800b694 <__d2b+0x98>
 800b65e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b662:	4405      	add	r5, r0
 800b664:	f8c9 5000 	str.w	r5, [r9]
 800b668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b66c:	f8c8 0000 	str.w	r0, [r8]
 800b670:	4620      	mov	r0, r4
 800b672:	b003      	add	sp, #12
 800b674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b67c:	e7d5      	b.n	800b62a <__d2b+0x2e>
 800b67e:	6161      	str	r1, [r4, #20]
 800b680:	e7e5      	b.n	800b64e <__d2b+0x52>
 800b682:	a801      	add	r0, sp, #4
 800b684:	f7ff fd64 	bl	800b150 <__lo0bits>
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	6163      	str	r3, [r4, #20]
 800b68c:	2201      	movs	r2, #1
 800b68e:	6122      	str	r2, [r4, #16]
 800b690:	3020      	adds	r0, #32
 800b692:	e7e3      	b.n	800b65c <__d2b+0x60>
 800b694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b69c:	f8c9 0000 	str.w	r0, [r9]
 800b6a0:	6918      	ldr	r0, [r3, #16]
 800b6a2:	f7ff fd35 	bl	800b110 <__hi0bits>
 800b6a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6aa:	e7df      	b.n	800b66c <__d2b+0x70>
 800b6ac:	0800c29b 	.word	0x0800c29b
 800b6b0:	0800c30c 	.word	0x0800c30c

0800b6b4 <_calloc_r>:
 800b6b4:	b513      	push	{r0, r1, r4, lr}
 800b6b6:	434a      	muls	r2, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	9201      	str	r2, [sp, #4]
 800b6bc:	f000 f85a 	bl	800b774 <_malloc_r>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	b118      	cbz	r0, 800b6cc <_calloc_r+0x18>
 800b6c4:	9a01      	ldr	r2, [sp, #4]
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	f7fe f860 	bl	800978c <memset>
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	b002      	add	sp, #8
 800b6d0:	bd10      	pop	{r4, pc}
	...

0800b6d4 <_free_r>:
 800b6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d6:	2900      	cmp	r1, #0
 800b6d8:	d048      	beq.n	800b76c <_free_r+0x98>
 800b6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6de:	9001      	str	r0, [sp, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b6e6:	bfb8      	it	lt
 800b6e8:	18e4      	addlt	r4, r4, r3
 800b6ea:	f000 fca7 	bl	800c03c <__malloc_lock>
 800b6ee:	4a20      	ldr	r2, [pc, #128]	; (800b770 <_free_r+0x9c>)
 800b6f0:	9801      	ldr	r0, [sp, #4]
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	4615      	mov	r5, r2
 800b6f6:	b933      	cbnz	r3, 800b706 <_free_r+0x32>
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	6014      	str	r4, [r2, #0]
 800b6fc:	b003      	add	sp, #12
 800b6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b702:	f000 bca1 	b.w	800c048 <__malloc_unlock>
 800b706:	42a3      	cmp	r3, r4
 800b708:	d90b      	bls.n	800b722 <_free_r+0x4e>
 800b70a:	6821      	ldr	r1, [r4, #0]
 800b70c:	1862      	adds	r2, r4, r1
 800b70e:	4293      	cmp	r3, r2
 800b710:	bf04      	itt	eq
 800b712:	681a      	ldreq	r2, [r3, #0]
 800b714:	685b      	ldreq	r3, [r3, #4]
 800b716:	6063      	str	r3, [r4, #4]
 800b718:	bf04      	itt	eq
 800b71a:	1852      	addeq	r2, r2, r1
 800b71c:	6022      	streq	r2, [r4, #0]
 800b71e:	602c      	str	r4, [r5, #0]
 800b720:	e7ec      	b.n	800b6fc <_free_r+0x28>
 800b722:	461a      	mov	r2, r3
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	b10b      	cbz	r3, 800b72c <_free_r+0x58>
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d9fa      	bls.n	800b722 <_free_r+0x4e>
 800b72c:	6811      	ldr	r1, [r2, #0]
 800b72e:	1855      	adds	r5, r2, r1
 800b730:	42a5      	cmp	r5, r4
 800b732:	d10b      	bne.n	800b74c <_free_r+0x78>
 800b734:	6824      	ldr	r4, [r4, #0]
 800b736:	4421      	add	r1, r4
 800b738:	1854      	adds	r4, r2, r1
 800b73a:	42a3      	cmp	r3, r4
 800b73c:	6011      	str	r1, [r2, #0]
 800b73e:	d1dd      	bne.n	800b6fc <_free_r+0x28>
 800b740:	681c      	ldr	r4, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	6053      	str	r3, [r2, #4]
 800b746:	4421      	add	r1, r4
 800b748:	6011      	str	r1, [r2, #0]
 800b74a:	e7d7      	b.n	800b6fc <_free_r+0x28>
 800b74c:	d902      	bls.n	800b754 <_free_r+0x80>
 800b74e:	230c      	movs	r3, #12
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	e7d3      	b.n	800b6fc <_free_r+0x28>
 800b754:	6825      	ldr	r5, [r4, #0]
 800b756:	1961      	adds	r1, r4, r5
 800b758:	428b      	cmp	r3, r1
 800b75a:	bf04      	itt	eq
 800b75c:	6819      	ldreq	r1, [r3, #0]
 800b75e:	685b      	ldreq	r3, [r3, #4]
 800b760:	6063      	str	r3, [r4, #4]
 800b762:	bf04      	itt	eq
 800b764:	1949      	addeq	r1, r1, r5
 800b766:	6021      	streq	r1, [r4, #0]
 800b768:	6054      	str	r4, [r2, #4]
 800b76a:	e7c7      	b.n	800b6fc <_free_r+0x28>
 800b76c:	b003      	add	sp, #12
 800b76e:	bd30      	pop	{r4, r5, pc}
 800b770:	20000258 	.word	0x20000258

0800b774 <_malloc_r>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	1ccd      	adds	r5, r1, #3
 800b778:	f025 0503 	bic.w	r5, r5, #3
 800b77c:	3508      	adds	r5, #8
 800b77e:	2d0c      	cmp	r5, #12
 800b780:	bf38      	it	cc
 800b782:	250c      	movcc	r5, #12
 800b784:	2d00      	cmp	r5, #0
 800b786:	4606      	mov	r6, r0
 800b788:	db01      	blt.n	800b78e <_malloc_r+0x1a>
 800b78a:	42a9      	cmp	r1, r5
 800b78c:	d903      	bls.n	800b796 <_malloc_r+0x22>
 800b78e:	230c      	movs	r3, #12
 800b790:	6033      	str	r3, [r6, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b796:	f000 fc51 	bl	800c03c <__malloc_lock>
 800b79a:	4921      	ldr	r1, [pc, #132]	; (800b820 <_malloc_r+0xac>)
 800b79c:	680a      	ldr	r2, [r1, #0]
 800b79e:	4614      	mov	r4, r2
 800b7a0:	b99c      	cbnz	r4, 800b7ca <_malloc_r+0x56>
 800b7a2:	4f20      	ldr	r7, [pc, #128]	; (800b824 <_malloc_r+0xb0>)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	b923      	cbnz	r3, 800b7b2 <_malloc_r+0x3e>
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f000 f996 	bl	800badc <_sbrk_r>
 800b7b0:	6038      	str	r0, [r7, #0]
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f000 f991 	bl	800badc <_sbrk_r>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d123      	bne.n	800b806 <_malloc_r+0x92>
 800b7be:	230c      	movs	r3, #12
 800b7c0:	6033      	str	r3, [r6, #0]
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 fc40 	bl	800c048 <__malloc_unlock>
 800b7c8:	e7e3      	b.n	800b792 <_malloc_r+0x1e>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	1b5b      	subs	r3, r3, r5
 800b7ce:	d417      	bmi.n	800b800 <_malloc_r+0x8c>
 800b7d0:	2b0b      	cmp	r3, #11
 800b7d2:	d903      	bls.n	800b7dc <_malloc_r+0x68>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	441c      	add	r4, r3
 800b7d8:	6025      	str	r5, [r4, #0]
 800b7da:	e004      	b.n	800b7e6 <_malloc_r+0x72>
 800b7dc:	6863      	ldr	r3, [r4, #4]
 800b7de:	42a2      	cmp	r2, r4
 800b7e0:	bf0c      	ite	eq
 800b7e2:	600b      	streq	r3, [r1, #0]
 800b7e4:	6053      	strne	r3, [r2, #4]
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f000 fc2e 	bl	800c048 <__malloc_unlock>
 800b7ec:	f104 000b 	add.w	r0, r4, #11
 800b7f0:	1d23      	adds	r3, r4, #4
 800b7f2:	f020 0007 	bic.w	r0, r0, #7
 800b7f6:	1ac2      	subs	r2, r0, r3
 800b7f8:	d0cc      	beq.n	800b794 <_malloc_r+0x20>
 800b7fa:	1a1b      	subs	r3, r3, r0
 800b7fc:	50a3      	str	r3, [r4, r2]
 800b7fe:	e7c9      	b.n	800b794 <_malloc_r+0x20>
 800b800:	4622      	mov	r2, r4
 800b802:	6864      	ldr	r4, [r4, #4]
 800b804:	e7cc      	b.n	800b7a0 <_malloc_r+0x2c>
 800b806:	1cc4      	adds	r4, r0, #3
 800b808:	f024 0403 	bic.w	r4, r4, #3
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d0e3      	beq.n	800b7d8 <_malloc_r+0x64>
 800b810:	1a21      	subs	r1, r4, r0
 800b812:	4630      	mov	r0, r6
 800b814:	f000 f962 	bl	800badc <_sbrk_r>
 800b818:	3001      	adds	r0, #1
 800b81a:	d1dd      	bne.n	800b7d8 <_malloc_r+0x64>
 800b81c:	e7cf      	b.n	800b7be <_malloc_r+0x4a>
 800b81e:	bf00      	nop
 800b820:	20000258 	.word	0x20000258
 800b824:	2000025c 	.word	0x2000025c

0800b828 <__sfputc_r>:
 800b828:	6893      	ldr	r3, [r2, #8]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	b410      	push	{r4}
 800b830:	6093      	str	r3, [r2, #8]
 800b832:	da08      	bge.n	800b846 <__sfputc_r+0x1e>
 800b834:	6994      	ldr	r4, [r2, #24]
 800b836:	42a3      	cmp	r3, r4
 800b838:	db01      	blt.n	800b83e <__sfputc_r+0x16>
 800b83a:	290a      	cmp	r1, #10
 800b83c:	d103      	bne.n	800b846 <__sfputc_r+0x1e>
 800b83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b842:	f000 b99f 	b.w	800bb84 <__swbuf_r>
 800b846:	6813      	ldr	r3, [r2, #0]
 800b848:	1c58      	adds	r0, r3, #1
 800b84a:	6010      	str	r0, [r2, #0]
 800b84c:	7019      	strb	r1, [r3, #0]
 800b84e:	4608      	mov	r0, r1
 800b850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <__sfputs_r>:
 800b856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b858:	4606      	mov	r6, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	4614      	mov	r4, r2
 800b85e:	18d5      	adds	r5, r2, r3
 800b860:	42ac      	cmp	r4, r5
 800b862:	d101      	bne.n	800b868 <__sfputs_r+0x12>
 800b864:	2000      	movs	r0, #0
 800b866:	e007      	b.n	800b878 <__sfputs_r+0x22>
 800b868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86c:	463a      	mov	r2, r7
 800b86e:	4630      	mov	r0, r6
 800b870:	f7ff ffda 	bl	800b828 <__sfputc_r>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d1f3      	bne.n	800b860 <__sfputs_r+0xa>
 800b878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b87c <_vfiprintf_r>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	460d      	mov	r5, r1
 800b882:	b09d      	sub	sp, #116	; 0x74
 800b884:	4614      	mov	r4, r2
 800b886:	4698      	mov	r8, r3
 800b888:	4606      	mov	r6, r0
 800b88a:	b118      	cbz	r0, 800b894 <_vfiprintf_r+0x18>
 800b88c:	6983      	ldr	r3, [r0, #24]
 800b88e:	b90b      	cbnz	r3, 800b894 <_vfiprintf_r+0x18>
 800b890:	f7ff fad6 	bl	800ae40 <__sinit>
 800b894:	4b89      	ldr	r3, [pc, #548]	; (800babc <_vfiprintf_r+0x240>)
 800b896:	429d      	cmp	r5, r3
 800b898:	d11b      	bne.n	800b8d2 <_vfiprintf_r+0x56>
 800b89a:	6875      	ldr	r5, [r6, #4]
 800b89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b89e:	07d9      	lsls	r1, r3, #31
 800b8a0:	d405      	bmi.n	800b8ae <_vfiprintf_r+0x32>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	059a      	lsls	r2, r3, #22
 800b8a6:	d402      	bmi.n	800b8ae <_vfiprintf_r+0x32>
 800b8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8aa:	f7ff fb6c 	bl	800af86 <__retarget_lock_acquire_recursive>
 800b8ae:	89ab      	ldrh	r3, [r5, #12]
 800b8b0:	071b      	lsls	r3, r3, #28
 800b8b2:	d501      	bpl.n	800b8b8 <_vfiprintf_r+0x3c>
 800b8b4:	692b      	ldr	r3, [r5, #16]
 800b8b6:	b9eb      	cbnz	r3, 800b8f4 <_vfiprintf_r+0x78>
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f000 f9c6 	bl	800bc4c <__swsetup_r>
 800b8c0:	b1c0      	cbz	r0, 800b8f4 <_vfiprintf_r+0x78>
 800b8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c4:	07dc      	lsls	r4, r3, #31
 800b8c6:	d50e      	bpl.n	800b8e6 <_vfiprintf_r+0x6a>
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	b01d      	add	sp, #116	; 0x74
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d2:	4b7b      	ldr	r3, [pc, #492]	; (800bac0 <_vfiprintf_r+0x244>)
 800b8d4:	429d      	cmp	r5, r3
 800b8d6:	d101      	bne.n	800b8dc <_vfiprintf_r+0x60>
 800b8d8:	68b5      	ldr	r5, [r6, #8]
 800b8da:	e7df      	b.n	800b89c <_vfiprintf_r+0x20>
 800b8dc:	4b79      	ldr	r3, [pc, #484]	; (800bac4 <_vfiprintf_r+0x248>)
 800b8de:	429d      	cmp	r5, r3
 800b8e0:	bf08      	it	eq
 800b8e2:	68f5      	ldreq	r5, [r6, #12]
 800b8e4:	e7da      	b.n	800b89c <_vfiprintf_r+0x20>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	0598      	lsls	r0, r3, #22
 800b8ea:	d4ed      	bmi.n	800b8c8 <_vfiprintf_r+0x4c>
 800b8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ee:	f7ff fb4b 	bl	800af88 <__retarget_lock_release_recursive>
 800b8f2:	e7e9      	b.n	800b8c8 <_vfiprintf_r+0x4c>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f8:	2320      	movs	r3, #32
 800b8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b902:	2330      	movs	r3, #48	; 0x30
 800b904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bac8 <_vfiprintf_r+0x24c>
 800b908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b90c:	f04f 0901 	mov.w	r9, #1
 800b910:	4623      	mov	r3, r4
 800b912:	469a      	mov	sl, r3
 800b914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b918:	b10a      	cbz	r2, 800b91e <_vfiprintf_r+0xa2>
 800b91a:	2a25      	cmp	r2, #37	; 0x25
 800b91c:	d1f9      	bne.n	800b912 <_vfiprintf_r+0x96>
 800b91e:	ebba 0b04 	subs.w	fp, sl, r4
 800b922:	d00b      	beq.n	800b93c <_vfiprintf_r+0xc0>
 800b924:	465b      	mov	r3, fp
 800b926:	4622      	mov	r2, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ff93 	bl	800b856 <__sfputs_r>
 800b930:	3001      	adds	r0, #1
 800b932:	f000 80aa 	beq.w	800ba8a <_vfiprintf_r+0x20e>
 800b936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b938:	445a      	add	r2, fp
 800b93a:	9209      	str	r2, [sp, #36]	; 0x24
 800b93c:	f89a 3000 	ldrb.w	r3, [sl]
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 80a2 	beq.w	800ba8a <_vfiprintf_r+0x20e>
 800b946:	2300      	movs	r3, #0
 800b948:	f04f 32ff 	mov.w	r2, #4294967295
 800b94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b950:	f10a 0a01 	add.w	sl, sl, #1
 800b954:	9304      	str	r3, [sp, #16]
 800b956:	9307      	str	r3, [sp, #28]
 800b958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b95c:	931a      	str	r3, [sp, #104]	; 0x68
 800b95e:	4654      	mov	r4, sl
 800b960:	2205      	movs	r2, #5
 800b962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b966:	4858      	ldr	r0, [pc, #352]	; (800bac8 <_vfiprintf_r+0x24c>)
 800b968:	f7f4 fc6a 	bl	8000240 <memchr>
 800b96c:	9a04      	ldr	r2, [sp, #16]
 800b96e:	b9d8      	cbnz	r0, 800b9a8 <_vfiprintf_r+0x12c>
 800b970:	06d1      	lsls	r1, r2, #27
 800b972:	bf44      	itt	mi
 800b974:	2320      	movmi	r3, #32
 800b976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b97a:	0713      	lsls	r3, r2, #28
 800b97c:	bf44      	itt	mi
 800b97e:	232b      	movmi	r3, #43	; 0x2b
 800b980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b984:	f89a 3000 	ldrb.w	r3, [sl]
 800b988:	2b2a      	cmp	r3, #42	; 0x2a
 800b98a:	d015      	beq.n	800b9b8 <_vfiprintf_r+0x13c>
 800b98c:	9a07      	ldr	r2, [sp, #28]
 800b98e:	4654      	mov	r4, sl
 800b990:	2000      	movs	r0, #0
 800b992:	f04f 0c0a 	mov.w	ip, #10
 800b996:	4621      	mov	r1, r4
 800b998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b99c:	3b30      	subs	r3, #48	; 0x30
 800b99e:	2b09      	cmp	r3, #9
 800b9a0:	d94e      	bls.n	800ba40 <_vfiprintf_r+0x1c4>
 800b9a2:	b1b0      	cbz	r0, 800b9d2 <_vfiprintf_r+0x156>
 800b9a4:	9207      	str	r2, [sp, #28]
 800b9a6:	e014      	b.n	800b9d2 <_vfiprintf_r+0x156>
 800b9a8:	eba0 0308 	sub.w	r3, r0, r8
 800b9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	46a2      	mov	sl, r4
 800b9b6:	e7d2      	b.n	800b95e <_vfiprintf_r+0xe2>
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	1d19      	adds	r1, r3, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	9103      	str	r1, [sp, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bfbb      	ittet	lt
 800b9c4:	425b      	neglt	r3, r3
 800b9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ca:	9307      	strge	r3, [sp, #28]
 800b9cc:	9307      	strlt	r3, [sp, #28]
 800b9ce:	bfb8      	it	lt
 800b9d0:	9204      	strlt	r2, [sp, #16]
 800b9d2:	7823      	ldrb	r3, [r4, #0]
 800b9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d6:	d10c      	bne.n	800b9f2 <_vfiprintf_r+0x176>
 800b9d8:	7863      	ldrb	r3, [r4, #1]
 800b9da:	2b2a      	cmp	r3, #42	; 0x2a
 800b9dc:	d135      	bne.n	800ba4a <_vfiprintf_r+0x1ce>
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	1d1a      	adds	r2, r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	9203      	str	r2, [sp, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfb8      	it	lt
 800b9ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ee:	3402      	adds	r4, #2
 800b9f0:	9305      	str	r3, [sp, #20]
 800b9f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bad8 <_vfiprintf_r+0x25c>
 800b9f6:	7821      	ldrb	r1, [r4, #0]
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	f7f4 fc20 	bl	8000240 <memchr>
 800ba00:	b140      	cbz	r0, 800ba14 <_vfiprintf_r+0x198>
 800ba02:	2340      	movs	r3, #64	; 0x40
 800ba04:	eba0 000a 	sub.w	r0, r0, sl
 800ba08:	fa03 f000 	lsl.w	r0, r3, r0
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	4303      	orrs	r3, r0
 800ba10:	3401      	adds	r4, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba18:	482c      	ldr	r0, [pc, #176]	; (800bacc <_vfiprintf_r+0x250>)
 800ba1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1e:	2206      	movs	r2, #6
 800ba20:	f7f4 fc0e 	bl	8000240 <memchr>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d03f      	beq.n	800baa8 <_vfiprintf_r+0x22c>
 800ba28:	4b29      	ldr	r3, [pc, #164]	; (800bad0 <_vfiprintf_r+0x254>)
 800ba2a:	bb1b      	cbnz	r3, 800ba74 <_vfiprintf_r+0x1f8>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	3307      	adds	r3, #7
 800ba30:	f023 0307 	bic.w	r3, r3, #7
 800ba34:	3308      	adds	r3, #8
 800ba36:	9303      	str	r3, [sp, #12]
 800ba38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3a:	443b      	add	r3, r7
 800ba3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3e:	e767      	b.n	800b910 <_vfiprintf_r+0x94>
 800ba40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba44:	460c      	mov	r4, r1
 800ba46:	2001      	movs	r0, #1
 800ba48:	e7a5      	b.n	800b996 <_vfiprintf_r+0x11a>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	3401      	adds	r4, #1
 800ba4e:	9305      	str	r3, [sp, #20]
 800ba50:	4619      	mov	r1, r3
 800ba52:	f04f 0c0a 	mov.w	ip, #10
 800ba56:	4620      	mov	r0, r4
 800ba58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba5c:	3a30      	subs	r2, #48	; 0x30
 800ba5e:	2a09      	cmp	r2, #9
 800ba60:	d903      	bls.n	800ba6a <_vfiprintf_r+0x1ee>
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0c5      	beq.n	800b9f2 <_vfiprintf_r+0x176>
 800ba66:	9105      	str	r1, [sp, #20]
 800ba68:	e7c3      	b.n	800b9f2 <_vfiprintf_r+0x176>
 800ba6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba6e:	4604      	mov	r4, r0
 800ba70:	2301      	movs	r3, #1
 800ba72:	e7f0      	b.n	800ba56 <_vfiprintf_r+0x1da>
 800ba74:	ab03      	add	r3, sp, #12
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <_vfiprintf_r+0x258>)
 800ba7c:	a904      	add	r1, sp, #16
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7fd ff2c 	bl	80098dc <_printf_float>
 800ba84:	4607      	mov	r7, r0
 800ba86:	1c78      	adds	r0, r7, #1
 800ba88:	d1d6      	bne.n	800ba38 <_vfiprintf_r+0x1bc>
 800ba8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba8c:	07d9      	lsls	r1, r3, #31
 800ba8e:	d405      	bmi.n	800ba9c <_vfiprintf_r+0x220>
 800ba90:	89ab      	ldrh	r3, [r5, #12]
 800ba92:	059a      	lsls	r2, r3, #22
 800ba94:	d402      	bmi.n	800ba9c <_vfiprintf_r+0x220>
 800ba96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba98:	f7ff fa76 	bl	800af88 <__retarget_lock_release_recursive>
 800ba9c:	89ab      	ldrh	r3, [r5, #12]
 800ba9e:	065b      	lsls	r3, r3, #25
 800baa0:	f53f af12 	bmi.w	800b8c8 <_vfiprintf_r+0x4c>
 800baa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baa6:	e711      	b.n	800b8cc <_vfiprintf_r+0x50>
 800baa8:	ab03      	add	r3, sp, #12
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	462a      	mov	r2, r5
 800baae:	4b09      	ldr	r3, [pc, #36]	; (800bad4 <_vfiprintf_r+0x258>)
 800bab0:	a904      	add	r1, sp, #16
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7fe f9b6 	bl	8009e24 <_printf_i>
 800bab8:	e7e4      	b.n	800ba84 <_vfiprintf_r+0x208>
 800baba:	bf00      	nop
 800babc:	0800c2cc 	.word	0x0800c2cc
 800bac0:	0800c2ec 	.word	0x0800c2ec
 800bac4:	0800c2ac 	.word	0x0800c2ac
 800bac8:	0800c46c 	.word	0x0800c46c
 800bacc:	0800c476 	.word	0x0800c476
 800bad0:	080098dd 	.word	0x080098dd
 800bad4:	0800b857 	.word	0x0800b857
 800bad8:	0800c472 	.word	0x0800c472

0800badc <_sbrk_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d06      	ldr	r5, [pc, #24]	; (800baf8 <_sbrk_r+0x1c>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	602b      	str	r3, [r5, #0]
 800bae8:	f7f6 faf0 	bl	80020cc <_sbrk>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_sbrk_r+0x1a>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_sbrk_r+0x1a>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20000a68 	.word	0x20000a68

0800bafc <__sread>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	460c      	mov	r4, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	f000 faa6 	bl	800c054 <_read_r>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	bfab      	itete	ge
 800bb0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb10:	181b      	addge	r3, r3, r0
 800bb12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb16:	bfac      	ite	ge
 800bb18:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb1a:	81a3      	strhlt	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__swrite>:
 800bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb22:	461f      	mov	r7, r3
 800bb24:	898b      	ldrh	r3, [r1, #12]
 800bb26:	05db      	lsls	r3, r3, #23
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	d505      	bpl.n	800bb3c <__swrite+0x1e>
 800bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb34:	2302      	movs	r3, #2
 800bb36:	2200      	movs	r2, #0
 800bb38:	f000 f9f8 	bl	800bf2c <_lseek_r>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	f000 b869 	b.w	800bc28 <_write_r>

0800bb56 <__sseek>:
 800bb56:	b510      	push	{r4, lr}
 800bb58:	460c      	mov	r4, r1
 800bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5e:	f000 f9e5 	bl	800bf2c <_lseek_r>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	bf15      	itete	ne
 800bb68:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb72:	81a3      	strheq	r3, [r4, #12]
 800bb74:	bf18      	it	ne
 800bb76:	81a3      	strhne	r3, [r4, #12]
 800bb78:	bd10      	pop	{r4, pc}

0800bb7a <__sclose>:
 800bb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7e:	f000 b8f1 	b.w	800bd64 <_close_r>
	...

0800bb84 <__swbuf_r>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	460e      	mov	r6, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b118      	cbz	r0, 800bb96 <__swbuf_r+0x12>
 800bb8e:	6983      	ldr	r3, [r0, #24]
 800bb90:	b90b      	cbnz	r3, 800bb96 <__swbuf_r+0x12>
 800bb92:	f7ff f955 	bl	800ae40 <__sinit>
 800bb96:	4b21      	ldr	r3, [pc, #132]	; (800bc1c <__swbuf_r+0x98>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d12b      	bne.n	800bbf4 <__swbuf_r+0x70>
 800bb9c:	686c      	ldr	r4, [r5, #4]
 800bb9e:	69a3      	ldr	r3, [r4, #24]
 800bba0:	60a3      	str	r3, [r4, #8]
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	071a      	lsls	r2, r3, #28
 800bba6:	d52f      	bpl.n	800bc08 <__swbuf_r+0x84>
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	b36b      	cbz	r3, 800bc08 <__swbuf_r+0x84>
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	6820      	ldr	r0, [r4, #0]
 800bbb0:	1ac0      	subs	r0, r0, r3
 800bbb2:	6963      	ldr	r3, [r4, #20]
 800bbb4:	b2f6      	uxtb	r6, r6
 800bbb6:	4283      	cmp	r3, r0
 800bbb8:	4637      	mov	r7, r6
 800bbba:	dc04      	bgt.n	800bbc6 <__swbuf_r+0x42>
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f000 f966 	bl	800be90 <_fflush_r>
 800bbc4:	bb30      	cbnz	r0, 800bc14 <__swbuf_r+0x90>
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	60a3      	str	r3, [r4, #8]
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	6022      	str	r2, [r4, #0]
 800bbd2:	701e      	strb	r6, [r3, #0]
 800bbd4:	6963      	ldr	r3, [r4, #20]
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	4283      	cmp	r3, r0
 800bbda:	d004      	beq.n	800bbe6 <__swbuf_r+0x62>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	07db      	lsls	r3, r3, #31
 800bbe0:	d506      	bpl.n	800bbf0 <__swbuf_r+0x6c>
 800bbe2:	2e0a      	cmp	r6, #10
 800bbe4:	d104      	bne.n	800bbf0 <__swbuf_r+0x6c>
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 f951 	bl	800be90 <_fflush_r>
 800bbee:	b988      	cbnz	r0, 800bc14 <__swbuf_r+0x90>
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf4:	4b0a      	ldr	r3, [pc, #40]	; (800bc20 <__swbuf_r+0x9c>)
 800bbf6:	429c      	cmp	r4, r3
 800bbf8:	d101      	bne.n	800bbfe <__swbuf_r+0x7a>
 800bbfa:	68ac      	ldr	r4, [r5, #8]
 800bbfc:	e7cf      	b.n	800bb9e <__swbuf_r+0x1a>
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <__swbuf_r+0xa0>)
 800bc00:	429c      	cmp	r4, r3
 800bc02:	bf08      	it	eq
 800bc04:	68ec      	ldreq	r4, [r5, #12]
 800bc06:	e7ca      	b.n	800bb9e <__swbuf_r+0x1a>
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f81e 	bl	800bc4c <__swsetup_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d0cb      	beq.n	800bbac <__swbuf_r+0x28>
 800bc14:	f04f 37ff 	mov.w	r7, #4294967295
 800bc18:	e7ea      	b.n	800bbf0 <__swbuf_r+0x6c>
 800bc1a:	bf00      	nop
 800bc1c:	0800c2cc 	.word	0x0800c2cc
 800bc20:	0800c2ec 	.word	0x0800c2ec
 800bc24:	0800c2ac 	.word	0x0800c2ac

0800bc28 <_write_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4d07      	ldr	r5, [pc, #28]	; (800bc48 <_write_r+0x20>)
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	4608      	mov	r0, r1
 800bc30:	4611      	mov	r1, r2
 800bc32:	2200      	movs	r2, #0
 800bc34:	602a      	str	r2, [r5, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	f7f6 f9f7 	bl	800202a <_write>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_write_r+0x1e>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_write_r+0x1e>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20000a68 	.word	0x20000a68

0800bc4c <__swsetup_r>:
 800bc4c:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <__swsetup_r+0xcc>)
 800bc4e:	b570      	push	{r4, r5, r6, lr}
 800bc50:	681d      	ldr	r5, [r3, #0]
 800bc52:	4606      	mov	r6, r0
 800bc54:	460c      	mov	r4, r1
 800bc56:	b125      	cbz	r5, 800bc62 <__swsetup_r+0x16>
 800bc58:	69ab      	ldr	r3, [r5, #24]
 800bc5a:	b913      	cbnz	r3, 800bc62 <__swsetup_r+0x16>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f7ff f8ef 	bl	800ae40 <__sinit>
 800bc62:	4b2e      	ldr	r3, [pc, #184]	; (800bd1c <__swsetup_r+0xd0>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	d10f      	bne.n	800bc88 <__swsetup_r+0x3c>
 800bc68:	686c      	ldr	r4, [r5, #4]
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc70:	0719      	lsls	r1, r3, #28
 800bc72:	d42c      	bmi.n	800bcce <__swsetup_r+0x82>
 800bc74:	06dd      	lsls	r5, r3, #27
 800bc76:	d411      	bmi.n	800bc9c <__swsetup_r+0x50>
 800bc78:	2309      	movs	r3, #9
 800bc7a:	6033      	str	r3, [r6, #0]
 800bc7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	e03e      	b.n	800bd06 <__swsetup_r+0xba>
 800bc88:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <__swsetup_r+0xd4>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <__swsetup_r+0x46>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7eb      	b.n	800bc6a <__swsetup_r+0x1e>
 800bc92:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <__swsetup_r+0xd8>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7e6      	b.n	800bc6a <__swsetup_r+0x1e>
 800bc9c:	0758      	lsls	r0, r3, #29
 800bc9e:	d512      	bpl.n	800bcc6 <__swsetup_r+0x7a>
 800bca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca2:	b141      	cbz	r1, 800bcb6 <__swsetup_r+0x6a>
 800bca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	d002      	beq.n	800bcb2 <__swsetup_r+0x66>
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7ff fd11 	bl	800b6d4 <_free_r>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcbc:	81a3      	strh	r3, [r4, #12]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6063      	str	r3, [r4, #4]
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f043 0308 	orr.w	r3, r3, #8
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	b94b      	cbnz	r3, 800bce6 <__swsetup_r+0x9a>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcdc:	d003      	beq.n	800bce6 <__swsetup_r+0x9a>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	f000 f959 	bl	800bf98 <__smakebuf_r>
 800bce6:	89a0      	ldrh	r0, [r4, #12]
 800bce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcec:	f010 0301 	ands.w	r3, r0, #1
 800bcf0:	d00a      	beq.n	800bd08 <__swsetup_r+0xbc>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60a3      	str	r3, [r4, #8]
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	425b      	negs	r3, r3
 800bcfa:	61a3      	str	r3, [r4, #24]
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	b943      	cbnz	r3, 800bd12 <__swsetup_r+0xc6>
 800bd00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd04:	d1ba      	bne.n	800bc7c <__swsetup_r+0x30>
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	0781      	lsls	r1, r0, #30
 800bd0a:	bf58      	it	pl
 800bd0c:	6963      	ldrpl	r3, [r4, #20]
 800bd0e:	60a3      	str	r3, [r4, #8]
 800bd10:	e7f4      	b.n	800bcfc <__swsetup_r+0xb0>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e7f7      	b.n	800bd06 <__swsetup_r+0xba>
 800bd16:	bf00      	nop
 800bd18:	20000010 	.word	0x20000010
 800bd1c:	0800c2cc 	.word	0x0800c2cc
 800bd20:	0800c2ec 	.word	0x0800c2ec
 800bd24:	0800c2ac 	.word	0x0800c2ac

0800bd28 <__assert_func>:
 800bd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd2a:	4614      	mov	r4, r2
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4b09      	ldr	r3, [pc, #36]	; (800bd54 <__assert_func+0x2c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4605      	mov	r5, r0
 800bd34:	68d8      	ldr	r0, [r3, #12]
 800bd36:	b14c      	cbz	r4, 800bd4c <__assert_func+0x24>
 800bd38:	4b07      	ldr	r3, [pc, #28]	; (800bd58 <__assert_func+0x30>)
 800bd3a:	9100      	str	r1, [sp, #0]
 800bd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd40:	4906      	ldr	r1, [pc, #24]	; (800bd5c <__assert_func+0x34>)
 800bd42:	462b      	mov	r3, r5
 800bd44:	f000 f8e0 	bl	800bf08 <fiprintf>
 800bd48:	f000 f9a3 	bl	800c092 <abort>
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <__assert_func+0x38>)
 800bd4e:	461c      	mov	r4, r3
 800bd50:	e7f3      	b.n	800bd3a <__assert_func+0x12>
 800bd52:	bf00      	nop
 800bd54:	20000010 	.word	0x20000010
 800bd58:	0800c47d 	.word	0x0800c47d
 800bd5c:	0800c48a 	.word	0x0800c48a
 800bd60:	0800c4b8 	.word	0x0800c4b8

0800bd64 <_close_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	; (800bd80 <_close_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f6 f977 	bl	8002062 <_close>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_close_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_close_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20000a68 	.word	0x20000a68

0800bd84 <__sflush_r>:
 800bd84:	898a      	ldrh	r2, [r1, #12]
 800bd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	0710      	lsls	r0, r2, #28
 800bd8e:	460c      	mov	r4, r1
 800bd90:	d458      	bmi.n	800be44 <__sflush_r+0xc0>
 800bd92:	684b      	ldr	r3, [r1, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dc05      	bgt.n	800bda4 <__sflush_r+0x20>
 800bd98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dc02      	bgt.n	800bda4 <__sflush_r+0x20>
 800bd9e:	2000      	movs	r0, #0
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	d0f9      	beq.n	800bd9e <__sflush_r+0x1a>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdb0:	682f      	ldr	r7, [r5, #0]
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	d032      	beq.n	800be1c <__sflush_r+0x98>
 800bdb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	075a      	lsls	r2, r3, #29
 800bdbc:	d505      	bpl.n	800bdca <__sflush_r+0x46>
 800bdbe:	6863      	ldr	r3, [r4, #4]
 800bdc0:	1ac0      	subs	r0, r0, r3
 800bdc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdc4:	b10b      	cbz	r3, 800bdca <__sflush_r+0x46>
 800bdc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdc8:	1ac0      	subs	r0, r0, r3
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdd0:	6a21      	ldr	r1, [r4, #32]
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b0      	blx	r6
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	d106      	bne.n	800bdea <__sflush_r+0x66>
 800bddc:	6829      	ldr	r1, [r5, #0]
 800bdde:	291d      	cmp	r1, #29
 800bde0:	d82c      	bhi.n	800be3c <__sflush_r+0xb8>
 800bde2:	4a2a      	ldr	r2, [pc, #168]	; (800be8c <__sflush_r+0x108>)
 800bde4:	40ca      	lsrs	r2, r1
 800bde6:	07d6      	lsls	r6, r2, #31
 800bde8:	d528      	bpl.n	800be3c <__sflush_r+0xb8>
 800bdea:	2200      	movs	r2, #0
 800bdec:	6062      	str	r2, [r4, #4]
 800bdee:	04d9      	lsls	r1, r3, #19
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	6022      	str	r2, [r4, #0]
 800bdf4:	d504      	bpl.n	800be00 <__sflush_r+0x7c>
 800bdf6:	1c42      	adds	r2, r0, #1
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0x7a>
 800bdfa:	682b      	ldr	r3, [r5, #0]
 800bdfc:	b903      	cbnz	r3, 800be00 <__sflush_r+0x7c>
 800bdfe:	6560      	str	r0, [r4, #84]	; 0x54
 800be00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be02:	602f      	str	r7, [r5, #0]
 800be04:	2900      	cmp	r1, #0
 800be06:	d0ca      	beq.n	800bd9e <__sflush_r+0x1a>
 800be08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be0c:	4299      	cmp	r1, r3
 800be0e:	d002      	beq.n	800be16 <__sflush_r+0x92>
 800be10:	4628      	mov	r0, r5
 800be12:	f7ff fc5f 	bl	800b6d4 <_free_r>
 800be16:	2000      	movs	r0, #0
 800be18:	6360      	str	r0, [r4, #52]	; 0x34
 800be1a:	e7c1      	b.n	800bda0 <__sflush_r+0x1c>
 800be1c:	6a21      	ldr	r1, [r4, #32]
 800be1e:	2301      	movs	r3, #1
 800be20:	4628      	mov	r0, r5
 800be22:	47b0      	blx	r6
 800be24:	1c41      	adds	r1, r0, #1
 800be26:	d1c7      	bne.n	800bdb8 <__sflush_r+0x34>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0c4      	beq.n	800bdb8 <__sflush_r+0x34>
 800be2e:	2b1d      	cmp	r3, #29
 800be30:	d001      	beq.n	800be36 <__sflush_r+0xb2>
 800be32:	2b16      	cmp	r3, #22
 800be34:	d101      	bne.n	800be3a <__sflush_r+0xb6>
 800be36:	602f      	str	r7, [r5, #0]
 800be38:	e7b1      	b.n	800bd9e <__sflush_r+0x1a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	e7ad      	b.n	800bda0 <__sflush_r+0x1c>
 800be44:	690f      	ldr	r7, [r1, #16]
 800be46:	2f00      	cmp	r7, #0
 800be48:	d0a9      	beq.n	800bd9e <__sflush_r+0x1a>
 800be4a:	0793      	lsls	r3, r2, #30
 800be4c:	680e      	ldr	r6, [r1, #0]
 800be4e:	bf08      	it	eq
 800be50:	694b      	ldreq	r3, [r1, #20]
 800be52:	600f      	str	r7, [r1, #0]
 800be54:	bf18      	it	ne
 800be56:	2300      	movne	r3, #0
 800be58:	eba6 0807 	sub.w	r8, r6, r7
 800be5c:	608b      	str	r3, [r1, #8]
 800be5e:	f1b8 0f00 	cmp.w	r8, #0
 800be62:	dd9c      	ble.n	800bd9e <__sflush_r+0x1a>
 800be64:	6a21      	ldr	r1, [r4, #32]
 800be66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be68:	4643      	mov	r3, r8
 800be6a:	463a      	mov	r2, r7
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b0      	blx	r6
 800be70:	2800      	cmp	r0, #0
 800be72:	dc06      	bgt.n	800be82 <__sflush_r+0xfe>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	e78e      	b.n	800bda0 <__sflush_r+0x1c>
 800be82:	4407      	add	r7, r0
 800be84:	eba8 0800 	sub.w	r8, r8, r0
 800be88:	e7e9      	b.n	800be5e <__sflush_r+0xda>
 800be8a:	bf00      	nop
 800be8c:	20400001 	.word	0x20400001

0800be90 <_fflush_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	690b      	ldr	r3, [r1, #16]
 800be94:	4605      	mov	r5, r0
 800be96:	460c      	mov	r4, r1
 800be98:	b913      	cbnz	r3, 800bea0 <_fflush_r+0x10>
 800be9a:	2500      	movs	r5, #0
 800be9c:	4628      	mov	r0, r5
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	b118      	cbz	r0, 800beaa <_fflush_r+0x1a>
 800bea2:	6983      	ldr	r3, [r0, #24]
 800bea4:	b90b      	cbnz	r3, 800beaa <_fflush_r+0x1a>
 800bea6:	f7fe ffcb 	bl	800ae40 <__sinit>
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <_fflush_r+0x6c>)
 800beac:	429c      	cmp	r4, r3
 800beae:	d11b      	bne.n	800bee8 <_fflush_r+0x58>
 800beb0:	686c      	ldr	r4, [r5, #4]
 800beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0ef      	beq.n	800be9a <_fflush_r+0xa>
 800beba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bebc:	07d0      	lsls	r0, r2, #31
 800bebe:	d404      	bmi.n	800beca <_fflush_r+0x3a>
 800bec0:	0599      	lsls	r1, r3, #22
 800bec2:	d402      	bmi.n	800beca <_fflush_r+0x3a>
 800bec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bec6:	f7ff f85e 	bl	800af86 <__retarget_lock_acquire_recursive>
 800beca:	4628      	mov	r0, r5
 800becc:	4621      	mov	r1, r4
 800bece:	f7ff ff59 	bl	800bd84 <__sflush_r>
 800bed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bed4:	07da      	lsls	r2, r3, #31
 800bed6:	4605      	mov	r5, r0
 800bed8:	d4e0      	bmi.n	800be9c <_fflush_r+0xc>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	059b      	lsls	r3, r3, #22
 800bede:	d4dd      	bmi.n	800be9c <_fflush_r+0xc>
 800bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee2:	f7ff f851 	bl	800af88 <__retarget_lock_release_recursive>
 800bee6:	e7d9      	b.n	800be9c <_fflush_r+0xc>
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <_fflush_r+0x70>)
 800beea:	429c      	cmp	r4, r3
 800beec:	d101      	bne.n	800bef2 <_fflush_r+0x62>
 800beee:	68ac      	ldr	r4, [r5, #8]
 800bef0:	e7df      	b.n	800beb2 <_fflush_r+0x22>
 800bef2:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <_fflush_r+0x74>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	bf08      	it	eq
 800bef8:	68ec      	ldreq	r4, [r5, #12]
 800befa:	e7da      	b.n	800beb2 <_fflush_r+0x22>
 800befc:	0800c2cc 	.word	0x0800c2cc
 800bf00:	0800c2ec 	.word	0x0800c2ec
 800bf04:	0800c2ac 	.word	0x0800c2ac

0800bf08 <fiprintf>:
 800bf08:	b40e      	push	{r1, r2, r3}
 800bf0a:	b503      	push	{r0, r1, lr}
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	ab03      	add	r3, sp, #12
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <fiprintf+0x20>)
 800bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf16:	6800      	ldr	r0, [r0, #0]
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	f7ff fcaf 	bl	800b87c <_vfiprintf_r>
 800bf1e:	b002      	add	sp, #8
 800bf20:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf24:	b003      	add	sp, #12
 800bf26:	4770      	bx	lr
 800bf28:	20000010 	.word	0x20000010

0800bf2c <_lseek_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_lseek_r+0x20>)
 800bf30:	4604      	mov	r4, r0
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f6 f8b8 	bl	80020b0 <_lseek>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_lseek_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_lseek_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20000a68 	.word	0x20000a68

0800bf50 <__swhatbuf_r>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	460e      	mov	r6, r1
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	b096      	sub	sp, #88	; 0x58
 800bf5c:	4614      	mov	r4, r2
 800bf5e:	461d      	mov	r5, r3
 800bf60:	da07      	bge.n	800bf72 <__swhatbuf_r+0x22>
 800bf62:	2300      	movs	r3, #0
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	89b3      	ldrh	r3, [r6, #12]
 800bf68:	061a      	lsls	r2, r3, #24
 800bf6a:	d410      	bmi.n	800bf8e <__swhatbuf_r+0x3e>
 800bf6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf70:	e00e      	b.n	800bf90 <__swhatbuf_r+0x40>
 800bf72:	466a      	mov	r2, sp
 800bf74:	f000 f894 	bl	800c0a0 <_fstat_r>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	dbf2      	blt.n	800bf62 <__swhatbuf_r+0x12>
 800bf7c:	9a01      	ldr	r2, [sp, #4]
 800bf7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf86:	425a      	negs	r2, r3
 800bf88:	415a      	adcs	r2, r3
 800bf8a:	602a      	str	r2, [r5, #0]
 800bf8c:	e7ee      	b.n	800bf6c <__swhatbuf_r+0x1c>
 800bf8e:	2340      	movs	r3, #64	; 0x40
 800bf90:	2000      	movs	r0, #0
 800bf92:	6023      	str	r3, [r4, #0]
 800bf94:	b016      	add	sp, #88	; 0x58
 800bf96:	bd70      	pop	{r4, r5, r6, pc}

0800bf98 <__smakebuf_r>:
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf9c:	079d      	lsls	r5, r3, #30
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	d507      	bpl.n	800bfb4 <__smakebuf_r+0x1c>
 800bfa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	2301      	movs	r3, #1
 800bfae:	6163      	str	r3, [r4, #20]
 800bfb0:	b002      	add	sp, #8
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	ab01      	add	r3, sp, #4
 800bfb6:	466a      	mov	r2, sp
 800bfb8:	f7ff ffca 	bl	800bf50 <__swhatbuf_r>
 800bfbc:	9900      	ldr	r1, [sp, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff fbd7 	bl	800b774 <_malloc_r>
 800bfc6:	b948      	cbnz	r0, 800bfdc <__smakebuf_r+0x44>
 800bfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfcc:	059a      	lsls	r2, r3, #22
 800bfce:	d4ef      	bmi.n	800bfb0 <__smakebuf_r+0x18>
 800bfd0:	f023 0303 	bic.w	r3, r3, #3
 800bfd4:	f043 0302 	orr.w	r3, r3, #2
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	e7e3      	b.n	800bfa4 <__smakebuf_r+0xc>
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <__smakebuf_r+0x7c>)
 800bfde:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	6020      	str	r0, [r4, #0]
 800bfe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	6163      	str	r3, [r4, #20]
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	6120      	str	r0, [r4, #16]
 800bff2:	b15b      	cbz	r3, 800c00c <__smakebuf_r+0x74>
 800bff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff8:	4630      	mov	r0, r6
 800bffa:	f000 f863 	bl	800c0c4 <_isatty_r>
 800bffe:	b128      	cbz	r0, 800c00c <__smakebuf_r+0x74>
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	f023 0303 	bic.w	r3, r3, #3
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	81a3      	strh	r3, [r4, #12]
 800c00c:	89a0      	ldrh	r0, [r4, #12]
 800c00e:	4305      	orrs	r5, r0
 800c010:	81a5      	strh	r5, [r4, #12]
 800c012:	e7cd      	b.n	800bfb0 <__smakebuf_r+0x18>
 800c014:	0800add9 	.word	0x0800add9

0800c018 <__ascii_mbtowc>:
 800c018:	b082      	sub	sp, #8
 800c01a:	b901      	cbnz	r1, 800c01e <__ascii_mbtowc+0x6>
 800c01c:	a901      	add	r1, sp, #4
 800c01e:	b142      	cbz	r2, 800c032 <__ascii_mbtowc+0x1a>
 800c020:	b14b      	cbz	r3, 800c036 <__ascii_mbtowc+0x1e>
 800c022:	7813      	ldrb	r3, [r2, #0]
 800c024:	600b      	str	r3, [r1, #0]
 800c026:	7812      	ldrb	r2, [r2, #0]
 800c028:	1e10      	subs	r0, r2, #0
 800c02a:	bf18      	it	ne
 800c02c:	2001      	movne	r0, #1
 800c02e:	b002      	add	sp, #8
 800c030:	4770      	bx	lr
 800c032:	4610      	mov	r0, r2
 800c034:	e7fb      	b.n	800c02e <__ascii_mbtowc+0x16>
 800c036:	f06f 0001 	mvn.w	r0, #1
 800c03a:	e7f8      	b.n	800c02e <__ascii_mbtowc+0x16>

0800c03c <__malloc_lock>:
 800c03c:	4801      	ldr	r0, [pc, #4]	; (800c044 <__malloc_lock+0x8>)
 800c03e:	f7fe bfa2 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800c042:	bf00      	nop
 800c044:	20000a60 	.word	0x20000a60

0800c048 <__malloc_unlock>:
 800c048:	4801      	ldr	r0, [pc, #4]	; (800c050 <__malloc_unlock+0x8>)
 800c04a:	f7fe bf9d 	b.w	800af88 <__retarget_lock_release_recursive>
 800c04e:	bf00      	nop
 800c050:	20000a60 	.word	0x20000a60

0800c054 <_read_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	; (800c074 <_read_r+0x20>)
 800c058:	4604      	mov	r4, r0
 800c05a:	4608      	mov	r0, r1
 800c05c:	4611      	mov	r1, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	f7f5 ffc4 	bl	8001ff0 <_read>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_read_r+0x1e>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_read_r+0x1e>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	20000a68 	.word	0x20000a68

0800c078 <__ascii_wctomb>:
 800c078:	b149      	cbz	r1, 800c08e <__ascii_wctomb+0x16>
 800c07a:	2aff      	cmp	r2, #255	; 0xff
 800c07c:	bf85      	ittet	hi
 800c07e:	238a      	movhi	r3, #138	; 0x8a
 800c080:	6003      	strhi	r3, [r0, #0]
 800c082:	700a      	strbls	r2, [r1, #0]
 800c084:	f04f 30ff 	movhi.w	r0, #4294967295
 800c088:	bf98      	it	ls
 800c08a:	2001      	movls	r0, #1
 800c08c:	4770      	bx	lr
 800c08e:	4608      	mov	r0, r1
 800c090:	4770      	bx	lr

0800c092 <abort>:
 800c092:	b508      	push	{r3, lr}
 800c094:	2006      	movs	r0, #6
 800c096:	f000 f84d 	bl	800c134 <raise>
 800c09a:	2001      	movs	r0, #1
 800c09c:	f7f5 ff9e 	bl	8001fdc <_exit>

0800c0a0 <_fstat_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	; (800c0c0 <_fstat_r+0x20>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	602b      	str	r3, [r5, #0]
 800c0ae:	f7f5 ffe4 	bl	800207a <_fstat>
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	d102      	bne.n	800c0bc <_fstat_r+0x1c>
 800c0b6:	682b      	ldr	r3, [r5, #0]
 800c0b8:	b103      	cbz	r3, 800c0bc <_fstat_r+0x1c>
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000a68 	.word	0x20000a68

0800c0c4 <_isatty_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	; (800c0e0 <_isatty_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f5 ffe3 	bl	800209a <_isatty>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_isatty_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_isatty_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20000a68 	.word	0x20000a68

0800c0e4 <_raise_r>:
 800c0e4:	291f      	cmp	r1, #31
 800c0e6:	b538      	push	{r3, r4, r5, lr}
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	d904      	bls.n	800c0f8 <_raise_r+0x14>
 800c0ee:	2316      	movs	r3, #22
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0fa:	b112      	cbz	r2, 800c102 <_raise_r+0x1e>
 800c0fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c100:	b94b      	cbnz	r3, 800c116 <_raise_r+0x32>
 800c102:	4620      	mov	r0, r4
 800c104:	f000 f830 	bl	800c168 <_getpid_r>
 800c108:	462a      	mov	r2, r5
 800c10a:	4601      	mov	r1, r0
 800c10c:	4620      	mov	r0, r4
 800c10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c112:	f000 b817 	b.w	800c144 <_kill_r>
 800c116:	2b01      	cmp	r3, #1
 800c118:	d00a      	beq.n	800c130 <_raise_r+0x4c>
 800c11a:	1c59      	adds	r1, r3, #1
 800c11c:	d103      	bne.n	800c126 <_raise_r+0x42>
 800c11e:	2316      	movs	r3, #22
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	2001      	movs	r0, #1
 800c124:	e7e7      	b.n	800c0f6 <_raise_r+0x12>
 800c126:	2400      	movs	r4, #0
 800c128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c12c:	4628      	mov	r0, r5
 800c12e:	4798      	blx	r3
 800c130:	2000      	movs	r0, #0
 800c132:	e7e0      	b.n	800c0f6 <_raise_r+0x12>

0800c134 <raise>:
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <raise+0xc>)
 800c136:	4601      	mov	r1, r0
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	f7ff bfd3 	b.w	800c0e4 <_raise_r>
 800c13e:	bf00      	nop
 800c140:	20000010 	.word	0x20000010

0800c144 <_kill_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d07      	ldr	r5, [pc, #28]	; (800c164 <_kill_r+0x20>)
 800c148:	2300      	movs	r3, #0
 800c14a:	4604      	mov	r4, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	4611      	mov	r1, r2
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	f7f5 ff33 	bl	8001fbc <_kill>
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	d102      	bne.n	800c160 <_kill_r+0x1c>
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	b103      	cbz	r3, 800c160 <_kill_r+0x1c>
 800c15e:	6023      	str	r3, [r4, #0]
 800c160:	bd38      	pop	{r3, r4, r5, pc}
 800c162:	bf00      	nop
 800c164:	20000a68 	.word	0x20000a68

0800c168 <_getpid_r>:
 800c168:	f7f5 bf20 	b.w	8001fac <_getpid>

0800c16c <_init>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	bf00      	nop
 800c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c172:	bc08      	pop	{r3}
 800c174:	469e      	mov	lr, r3
 800c176:	4770      	bx	lr

0800c178 <_fini>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	bf00      	nop
 800c17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17e:	bc08      	pop	{r3}
 800c180:	469e      	mov	lr, r3
 800c182:	4770      	bx	lr
