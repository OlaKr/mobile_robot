
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c804  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006d9dc  0800c9d8  0800c9d8  0001c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a3b4  0807a3b4  000901dc  2**0
                  CONTENTS
  4 .ARM          00000008  0807a3b4  0807a3b4  0008a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a3bc  0807a3bc  000901dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a3bc  0807a3bc  0008a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807a3c0  0807a3c0  0008a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0807a3c4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001dc  0807a5a0  000901dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0807a5a0  00090a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000901dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203ab  00000000  00000000  0009020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004048  00000000  00000000  000b05b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000b4600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  000b5b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002656c  00000000  00000000  000b6e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d152  00000000  00000000  000dd3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc8b1  00000000  00000000  000fa516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006674  00000000  00000000  001d6e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9bc 	.word	0x0800c9bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c9bc 	.word	0x0800c9bc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <BH1750_Init>:
BH1750_mode 		Bh1750_Mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c1;
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <BH1750_Init+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	bh1750_i2c2 = hi2c2;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <BH1750_Init+0x40>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f16:	f000 f815 	bl	8000f44 <BH1750_Reset>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <BH1750_Init+0x34>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG))	// Set default value;
 8000f20:	2046      	movs	r0, #70	; 0x46
 8000f22:	f000 f867 	bl	8000ff4 <BH1750_SetMtreg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BH1750_Init+0x30>
		{
			return BH1750_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e001      	b.n	8000f34 <BH1750_Init+0x34>
		}

		return BH1750_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e7ff      	b.n	8000f34 <BH1750_Init+0x34>
	}

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000264 	.word	0x20000264
 8000f40:	20000260 	.word	0x20000260

08000f44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <BH1750_Reset+0x38>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	230a      	movs	r3, #10
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2146      	movs	r1, #70	; 0x46
 8000f5c:	f003 fa6a 	bl	8004434 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp, 1, 10))
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <BH1750_Reset+0x3c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2146      	movs	r1, #70	; 0x46
 8000f6e:	f003 fa61 	bl	8004434 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	return BH1750_OK;
 8000f72:	2300      	movs	r3, #0
//	return BH1750_ERROR;

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000264 	.word	0x20000264
 8000f80:	20000260 	.word	0x20000260

08000f84 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_mode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <BH1750_SetMode+0x30>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e015      	b.n	8000fe0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BH1750_SetMode+0x64>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <BH1750_SetMode+0x68>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2146      	movs	r1, #70	; 0x46
 8000fc8:	f003 fa34 	bl	8004434 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &Mode, 1, 10))
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BH1750_SetMode+0x6c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2146      	movs	r1, #70	; 0x46
 8000fda:	f003 fa2b 	bl	8004434 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	return BH1750_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000025c 	.word	0x2000025c
 8000fec:	20000264 	.word	0x20000264
 8000ff0:	20000260 	.word	0x20000260

08000ff4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode, retCode2;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1e      	cmp	r3, #30
 8001002:	d902      	bls.n	800100a <BH1750_SetMtreg+0x16>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d101      	bne.n	800100e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e056      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	Bh1750_Mtreg = Mtreg;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <BH1750_SetMtreg+0xd0>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2146      	movs	r1, #70	; 0x46
 8001046:	f003 f9f5 	bl	8004434 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[0], 1, 10);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2146      	movs	r1, #70	; 0x46
 800105e:	f003 f9e9 	bl	8004434 <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK != retCode || HAL_OK != retCode2) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BH1750_SetMtreg+0x7e>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BH1750_SetMtreg+0x82>
		return BH1750_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e022      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	230a      	movs	r3, #10
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	2146      	movs	r1, #70	; 0x46
 8001088:	f003 f9d4 	bl	8004434 <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f003 f9c7 	bl	8004434 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK == retCode && HAL_OK == retCode2) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
		return BH1750_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	return BH1750_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000268 	.word	0x20000268
 80010c8:	20000264 	.word	0x20000264
 80010cc:	20000260 	.word	0x20000260

080010d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <BH1750_ReadLight+0xa0>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	230a      	movs	r3, #10
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	f003 faa2 	bl	8004630 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	7a7a      	ldrb	r2, [r7, #9]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d00f      	beq.n	800112e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001178 <BH1750_ReadLight+0xa8>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b21      	cmp	r3, #33	; 0x21
 8001134:	d003      	beq.n	800113e <BH1750_ReadLight+0x6e>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <BH1750_ReadLight+0xac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d107      	bne.n	800114e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800114e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001180 <BH1750_ReadLight+0xb0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000264 	.word	0x20000264
 8001174:	20000268 	.word	0x20000268
 8001178:	428c0000 	.word	0x428c0000
 800117c:	2000025c 	.word	0x2000025c
 8001180:	3f99999a 	.word	0x3f99999a

08001184 <BH1750_ReadLight2>:

BH1750_STATUS BH1750_ReadLight2(float *Result)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c2, BH1750_ADDRESS, tmp, 2, 10))
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <BH1750_ReadLight2+0xa0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	230a      	movs	r3, #10
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	2146      	movs	r1, #70	; 0x46
 800119c:	f003 fa48 	bl	8004630 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d138      	bne.n	8001218 <BH1750_ReadLight2+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	7a7a      	ldrb	r2, [r7, #9]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d00f      	beq.n	80011e2 <BH1750_ReadLight2+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800122c <BH1750_ReadLight2+0xa8>
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d003      	beq.n	80011f2 <BH1750_ReadLight2+0x6e>
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d107      	bne.n	8001202 <BH1750_ReadLight2+0x7e>
		{
			result /= 2.0;
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001202:	ed97 7a03 	vldr	s14, [r7, #12]
 8001206:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001234 <BH1750_ReadLight2+0xb0>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <BH1750_ReadLight2+0x96>
	}
	return BH1750_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000260 	.word	0x20000260
 8001228:	20000268 	.word	0x20000268
 800122c:	428c0000 	.word	0x428c0000
 8001230:	2000025c 	.word	0x2000025c
 8001234:	3f99999a 	.word	0x3f99999a

08001238 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_DAC_Init+0x4c>)
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_DAC_Init+0x50>)
 800124a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_DAC_Init+0x4c>)
 800124e:	f001 ffd2 	bl	80031f6 <HAL_DAC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001258:	f000 fdb8 	bl	8001dcc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800125c:	2304      	movs	r3, #4
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_DAC_Init+0x4c>)
 800126c:	f002 f906 	bl	800347c <HAL_DAC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001276:	f000 fda9 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002cc 	.word	0x200002cc
 8001288:	40007400 	.word	0x40007400

0800128c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d157      	bne.n	800135e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f002 fda9 	bl	8003e50 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001344:	f002 f974 	bl	8003630 <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800134e:	f000 fd3d 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	2000026c 	.word	0x2000026c
 8001378:	40026088 	.word	0x40026088

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MX_DMA_Init+0x3c>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2010      	movs	r0, #16
 80013a4:	f001 fef1 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013a8:	2010      	movs	r0, #16
 80013aa:	f001 ff0a 	bl	80031c2 <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <MX_GPIO_Init+0x160>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a50      	ldr	r2, [pc, #320]	; (800151c <MX_GPIO_Init+0x160>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <MX_GPIO_Init+0x160>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_GPIO_Init+0x160>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <MX_GPIO_Init+0x160>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_GPIO_Init+0x160>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <MX_GPIO_Init+0x160>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <MX_GPIO_Init+0x160>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <MX_GPIO_Init+0x160>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_GPIO_Init+0x160>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <MX_GPIO_Init+0x160>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_GPIO_Init+0x160>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <MX_GPIO_Init+0x160>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 800145e:	2200      	movs	r2, #0
 8001460:	f640 114c 	movw	r1, #2380	; 0x94c
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <MX_GPIO_Init+0x164>)
 8001466:	f002 fe87 	bl	8004178 <HAL_GPIO_WritePin>
                          |DIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	482d      	ldr	r0, [pc, #180]	; (8001524 <MX_GPIO_Init+0x168>)
 8001470:	f002 fe82 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	482b      	ldr	r0, [pc, #172]	; (8001528 <MX_GPIO_Init+0x16c>)
 800147a:	f002 fe7d 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2118      	movs	r1, #24
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <MX_GPIO_Init+0x170>)
 8001484:	f002 fe78 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x164>)
 800149e:	f002 fcd7 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 80014a2:	f640 134c 	movw	r3, #2380	; 0x94c
 80014a6:	617b      	str	r3, [r7, #20]
                          |DIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0x164>)
 80014bc:	f002 fcc8 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0x168>)
 80014d8:	f002 fcba 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 80014dc:	2304      	movs	r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0x16c>)
 80014f4:	f002 fcac 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80014f8:	2318      	movs	r3, #24
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_GPIO_Init+0x170>)
 8001510:	f002 fc9e 	bl	8003e50 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40020400 	.word	0x40020400

08001530 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 fe1d 	bl	80041ac <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fc28 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002e0 	.word	0x200002e0
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f002 fdef 	bl	80041ac <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 fbfa 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000334 	.word	0x20000334
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_I2C_MspInit+0x148>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13d      	bne.n	8001686 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001626:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	483d      	ldr	r0, [pc, #244]	; (8001738 <HAL_I2C_MspInit+0x150>)
 8001644:	f002 fc04 	bl	8003e50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201f      	movs	r0, #31
 800166a:	f001 fd8e 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166e:	201f      	movs	r0, #31
 8001670:	f001 fda7 	bl	80031c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2020      	movs	r0, #32
 800167a:	f001 fd86 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167e:	2020      	movs	r0, #32
 8001680:	f001 fd9f 	bl	80031c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001684:	e050      	b.n	8001728 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x154>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d14b      	bne.n	8001728 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016da:	2304      	movs	r3, #4
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_I2C_MspInit+0x150>)
 80016e6:	f002 fbb3 	bl	8003e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_I2C_MspInit+0x158>)
 8001708:	f002 fba2 	bl	8003e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	40005800 	.word	0x40005800
 8001740:	40020800 	.word	0x40020800

08001744 <ustawmax>:

#define MIN_SUB -500
#define MAX_SUB 500
#define MAX_V 50

void ustawmax(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	if(BH1750_lux_sub>MAX_SUB) BH1750_lux_sub=MAX_SUB;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <ustawmax+0x44>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800178c <ustawmax+0x48>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd02      	ble.n	8001762 <ustawmax+0x1e>
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <ustawmax+0x44>)
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <ustawmax+0x4c>)
 8001760:	601a      	str	r2, [r3, #0]
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <ustawmax+0x44>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001794 <ustawmax+0x50>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d400      	bmi.n	8001778 <ustawmax+0x34>
}
 8001776:	e002      	b.n	800177e <ustawmax+0x3a>
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <ustawmax+0x44>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <ustawmax+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200003f8 	.word	0x200003f8
 800178c:	43fa0000 	.word	0x43fa0000
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	c3fa0000 	.word	0xc3fa0000
 8001798:	c3fa0000 	.word	0xc3fa0000

0800179c <przeliczenie>:

void przeliczenie(){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	float roznicadla1 = (float)MAX_V/(float)MAX_SUB;					//wartosc w prędkosci dla 1lux
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <przeliczenie+0x2c>)
 80017a4:	607b      	str	r3, [r7, #4]
	zmiana = BH1750_lux_sub*roznicadla1;		//wartosc w predkosci dla SUB
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <przeliczenie+0x30>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <przeliczenie+0x34>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	200003f8 	.word	0x200003f8
 80017d0:	20000388 	.word	0x20000388

080017d4 <__io_putchar>:
//	}
//	else return false;
//}

int __io_putchar(int sign)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d109      	bne.n	80017f6 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 80017e2:	230d      	movs	r3, #13
 80017e4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 80017e6:	f107 010f 	add.w	r1, r7, #15
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2201      	movs	r2, #1
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <__io_putchar+0x3c>)
 80017f2:	f007 fc4c 	bl	800908e <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2201      	movs	r2, #1
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <__io_putchar+0x3c>)
 8001800:	f007 fc45 	bl	800908e <HAL_UART_Transmit>
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200005d4 	.word	0x200005d4

08001814 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b0d      	cmp	r3, #13
 8001822:	d002      	beq.n	800182a <line_append+0x16>
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d10c      	bne.n	8001844 <line_append+0x30>
	{
		if(line_length>0)
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <line_append+0x5c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d018      	beq.n	8001864 <line_append+0x50>
		{
			line_buffer[line_length]='\0';
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <line_append+0x5c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <line_append+0x60>)
 8001838:	2100      	movs	r1, #0
 800183a:	54d1      	strb	r1, [r2, r3]
			line_length=0;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <line_append+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8001842:	e00f      	b.n	8001864 <line_append+0x50>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <line_append+0x5c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b4f      	cmp	r3, #79	; 0x4f
 800184a:	d902      	bls.n	8001852 <line_append+0x3e>
		{
			line_length=0;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <line_append+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <line_append+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <line_append+0x5c>)
 800185a:	600a      	str	r2, [r1, #0]
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <line_append+0x60>)
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	54ca      	strb	r2, [r1, r3]
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	2000024c 	.word	0x2000024c
 8001874:	200001f8 	.word	0x200001f8

08001878 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d104      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffc1 	bl	8001814 <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001898:	f007 fc8b 	bl	80091b2 <HAL_UART_Receive_IT>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200005d4 	.word	0x200005d4
 80018a8:	200003fc 	.word	0x200003fc

080018ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4aab      	ldr	r2, [pc, #684]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	f040 80a3 	bne.w	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
	{
		if (strcmp(line_buffer, "on")==0){
 80018be:	49aa      	ldr	r1, [pc, #680]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80018c0:	48aa      	ldr	r0, [pc, #680]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018c2:	f7fe fca5 	bl	8000210 <strcmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2120      	movs	r1, #32
 80018d0:	48a7      	ldr	r0, [pc, #668]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80018d2:	f002 fc51 	bl	8004178 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018d6:	49a5      	ldr	r1, [pc, #660]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018d8:	48a6      	ldr	r0, [pc, #664]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018da:	f008 ffef 	bl	800a8bc <iprintf>
 80018de:	e091      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "off")==0){
 80018e0:	49a5      	ldr	r1, [pc, #660]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018e2:	48a2      	ldr	r0, [pc, #648]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018e4:	f7fe fc94 	bl	8000210 <strcmp>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_TIM_PeriodElapsedCallback+0x56>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2120      	movs	r1, #32
 80018f2:	489f      	ldr	r0, [pc, #636]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80018f4:	f002 fc40 	bl	8004178 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018f8:	499c      	ldr	r1, [pc, #624]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018fa:	489e      	ldr	r0, [pc, #632]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018fc:	f008 ffde 	bl	800a8bc <iprintf>
 8001900:	e080      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "slow")==0){
 8001902:	499e      	ldr	r1, [pc, #632]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001904:	4899      	ldr	r0, [pc, #612]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001906:	f7fe fc83 	bl	8000210 <strcmp>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x7a>
			TB6612_init(40,40,40,40);
 8001910:	2328      	movs	r3, #40	; 0x28
 8001912:	2228      	movs	r2, #40	; 0x28
 8001914:	2128      	movs	r1, #40	; 0x28
 8001916:	2028      	movs	r0, #40	; 0x28
 8001918:	f000 fcf6 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 800191c:	4993      	ldr	r1, [pc, #588]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800191e:	4895      	ldr	r0, [pc, #596]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001920:	f008 ffcc 	bl	800a8bc <iprintf>
 8001924:	e06e      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "stopit")==0){
 8001926:	4996      	ldr	r1, [pc, #600]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001928:	4890      	ldr	r0, [pc, #576]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800192a:	f7fe fc71 	bl	8000210 <strcmp>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10a      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x9e>
			TB6612_init(0,0,0,0);
 8001934:	2300      	movs	r3, #0
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f000 fce4 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 8001940:	498a      	ldr	r1, [pc, #552]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001942:	488c      	ldr	r0, [pc, #560]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001944:	f008 ffba 	bl	800a8bc <iprintf>
 8001948:	e05c      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "fast")==0){
 800194a:	498e      	ldr	r1, [pc, #568]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800194c:	4887      	ldr	r0, [pc, #540]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800194e:	f7fe fc5f 	bl	8000210 <strcmp>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0xc2>
			TB6612_init(99,99,99,99);
 8001958:	2363      	movs	r3, #99	; 0x63
 800195a:	2263      	movs	r2, #99	; 0x63
 800195c:	2163      	movs	r1, #99	; 0x63
 800195e:	2063      	movs	r0, #99	; 0x63
 8001960:	f000 fcd2 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 8001964:	4981      	ldr	r1, [pc, #516]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001966:	4883      	ldr	r0, [pc, #524]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001968:	f008 ffa8 	bl	800a8bc <iprintf>
 800196c:	e04a      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "forward")==0){
 800196e:	4986      	ldr	r1, [pc, #536]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001970:	487e      	ldr	r0, [pc, #504]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001972:	f7fe fc4d 	bl	8000210 <strcmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_TIM_PeriodElapsedCallback+0xe6>
			TB6612_init(99,99,99,99);
 800197c:	2363      	movs	r3, #99	; 0x63
 800197e:	2263      	movs	r2, #99	; 0x63
 8001980:	2163      	movs	r1, #99	; 0x63
 8001982:	2063      	movs	r0, #99	; 0x63
 8001984:	f000 fcc0 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 8001988:	4978      	ldr	r1, [pc, #480]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800198a:	487a      	ldr	r0, [pc, #488]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800198c:	f008 ff96 	bl	800a8bc <iprintf>
 8001990:	e038      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "backward")==0){
 8001992:	497e      	ldr	r1, [pc, #504]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001994:	4875      	ldr	r0, [pc, #468]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001996:	f7fe fc3b 	bl	8000210 <strcmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10e      	bne.n	80019be <HAL_TIM_PeriodElapsedCallback+0x112>
			TB6612_init(-99,-99,-99,-99);
 80019a0:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80019a4:	f06f 0262 	mvn.w	r2, #98	; 0x62
 80019a8:	f06f 0162 	mvn.w	r1, #98	; 0x62
 80019ac:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80019b0:	f000 fcaa 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 80019b4:	496d      	ldr	r1, [pc, #436]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019b6:	486f      	ldr	r0, [pc, #444]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80019b8:	f008 ff80 	bl	800a8bc <iprintf>
 80019bc:	e022      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "left")==0){
 80019be:	4974      	ldr	r1, [pc, #464]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019c0:	486a      	ldr	r0, [pc, #424]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019c2:	f7fe fc25 	bl	8000210 <strcmp>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0x136>
			TB6612_init(0,80,80,0);
 80019cc:	2300      	movs	r3, #0
 80019ce:	2250      	movs	r2, #80	; 0x50
 80019d0:	2150      	movs	r1, #80	; 0x50
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 fc98 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 80019d8:	4964      	ldr	r1, [pc, #400]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019da:	4866      	ldr	r0, [pc, #408]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80019dc:	f008 ff6e 	bl	800a8bc <iprintf>
 80019e0:	e010      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
		}
		else if(strcmp(line_buffer, "right")==0){
 80019e2:	496c      	ldr	r1, [pc, #432]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019e4:	4861      	ldr	r0, [pc, #388]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019e6:	f7fe fc13 	bl	8000210 <strcmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x158>
			TB6612_init(80,0,0,80);
 80019f0:	2350      	movs	r3, #80	; 0x50
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2050      	movs	r0, #80	; 0x50
 80019f8:	f000 fc86 	bl	8002308 <TB6612_init>
			printf("Command: %s\n", line_buffer);
 80019fc:	495b      	ldr	r1, [pc, #364]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019fe:	485d      	ldr	r0, [pc, #372]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a00:	f008 ff5c 	bl	800a8bc <iprintf>
		}
		//else printf("Unrecognized command: %s\n", line_buffer);
	}

	if(htim==&htim5)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a64      	ldr	r2, [pc, #400]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d129      	bne.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	{
		if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
 8001a0c:	4863      	ldr	r0, [pc, #396]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a0e:	f7ff fb5f 	bl	80010d0 <BH1750_ReadLight>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10e      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x18a>
		{
			//sprintf(buffer,"BH1750 Lux: %.2f\r\n", BH1750_lux);
			len=strlen(buffer);
 8001a18:	4861      	ldr	r0, [pc, #388]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a1a:	f7fe fc03 	bl	8000224 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a24:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	495c      	ldr	r1, [pc, #368]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a30:	485d      	ldr	r0, [pc, #372]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a32:	f007 fb2c 	bl	800908e <HAL_UART_Transmit>
		}
		if(BH1750_OK == BH1750_ReadLight2(&BH1750_lux2))
 8001a36:	485d      	ldr	r0, [pc, #372]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a38:	f7ff fba4 	bl	8001184 <BH1750_ReadLight2>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		{
			//sprintf(buffer,"BH1750 Lux2: %.2f\r\n", BH1750_lux2);
			len=strlen(buffer);
 8001a42:	4857      	ldr	r0, [pc, #348]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a44:	f7fe fbee 	bl	8000224 <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a4e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	4951      	ldr	r1, [pc, #324]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a5a:	4853      	ldr	r0, [pc, #332]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a5c:	f007 fb17 	bl	800908e <HAL_UART_Transmit>
		}
	}

	if(htim==&htim9)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d179      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x2b0>
	{
		BH1750_lux_sub=BH1750_lux2-BH1750_lux;
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
		ustawmax();
 8001a7e:	f7ff fe61 	bl	8001744 <ustawmax>
		//sprintf(buffer,"SUB: %.2f\r\n", BH1750_lux_sub);
		przeliczenie();
 8001a82:	f7ff fe8b 	bl	800179c <przeliczenie>
		//sprintf(buffer,"zmiana: %.2f\r\n", zmiana);
		len=strlen(buffer);
 8001a86:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a88:	f7fe fbcc 	bl	8000224 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a92:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,buffer,len,100);
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	4940      	ldr	r1, [pc, #256]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a9e:	4842      	ldr	r0, [pc, #264]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001aa0:	f007 faf5 	bl	800908e <HAL_UART_Transmit>
		if(strcmp(line_buffer, "light")==0)
 8001aa4:	4944      	ldr	r1, [pc, #272]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001aa6:	4831      	ldr	r0, [pc, #196]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001aa8:	f7fe fbb2 	bl	8000210 <strcmp>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d154      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x2b0>
		{
			if(BH1750_lux>30 && BH1750_lux2>30)
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd40      	ble.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	dd36      	ble.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x29c>
			{
				TB6612_init(49-zmiana,49+zmiana,49+zmiana,49-zmiana);
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x314>
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aec:	edc7 7a00 	vstr	s15, [r7]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b258      	sxtb	r0, r3
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x314>
 8001afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b06:	edc7 7a00 	vstr	s15, [r7]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b259      	sxtb	r1, r3
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x314>
 8001b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	edc7 7a00 	vstr	s15, [r7]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x314>
 8001b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	edc7 7a00 	vstr	s15, [r7]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	f000 fbe1 	bl	8002308 <TB6612_init>
 8001b46:	e005      	b.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x2a8>
			}
			else
			{
				TB6612_init(0,0,0,0);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 fbda 	bl	8002308 <TB6612_init>
			}
			printf("Command: %s\n", line_buffer);
 8001b54:	4905      	ldr	r1, [pc, #20]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001b58:	f008 feb0 	bl	800a8bc <iprintf>
		}
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000058c 	.word	0x2000058c
 8001b68:	0800c9d8 	.word	0x0800c9d8
 8001b6c:	200001f8 	.word	0x200001f8
 8001b70:	40020000 	.word	0x40020000
 8001b74:	0800c9dc 	.word	0x0800c9dc
 8001b78:	0800c9ec 	.word	0x0800c9ec
 8001b7c:	0800c9f0 	.word	0x0800c9f0
 8001b80:	0800c9f8 	.word	0x0800c9f8
 8001b84:	0800ca00 	.word	0x0800ca00
 8001b88:	0800ca08 	.word	0x0800ca08
 8001b8c:	0800ca10 	.word	0x0800ca10
 8001b90:	0800ca1c 	.word	0x0800ca1c
 8001b94:	0800ca24 	.word	0x0800ca24
 8001b98:	20000424 	.word	0x20000424
 8001b9c:	2000038c 	.word	0x2000038c
 8001ba0:	20000394 	.word	0x20000394
 8001ba4:	20000400 	.word	0x20000400
 8001ba8:	200005d4 	.word	0x200005d4
 8001bac:	20000390 	.word	0x20000390
 8001bb0:	20000544 	.word	0x20000544
 8001bb4:	200003f8 	.word	0x200003f8
 8001bb8:	0800ca2c 	.word	0x0800ca2c
 8001bbc:	20000388 	.word	0x20000388
 8001bc0:	42440000 	.word	0x42440000

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc8:	f001 f96e 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bcc:	f000 f852 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd0:	f7ff fbf4 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001bd4:	f7ff fbd2 	bl	800137c <MX_DMA_Init>
  MX_TIM2_Init();
 8001bd8:	f000 fc7e 	bl	80024d8 <MX_TIM2_Init>
  MX_RTC_Init();
 8001bdc:	f000 f8fc 	bl	8001dd8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001be0:	f000 ff1a 	bl	8002a18 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001be4:	f000 fbcc 	bl	8002380 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001be8:	f7ff fca2 	bl	8001530 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001bec:	f7ff fcce 	bl	800158c <MX_I2C2_Init>
  MX_TIM5_Init();
 8001bf0:	f000 fd40 	bl	8002674 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001bf4:	f000 fcbe 	bl	8002574 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001bf8:	f000 fdc0 	bl	800277c <MX_TIM9_Init>
  MX_DAC_Init();
 8001bfc:	f7ff fb1c 	bl	8001238 <MX_DAC_Init>
  MX_TIM6_Init();
 8001c00:	f000 fd86 	bl	8002710 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  const char message[]="HEJA\n\r";
//  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	4911      	ldr	r1, [pc, #68]	; (8001c4c <main+0x88>)
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <main+0x8c>)
 8001c0a:	f007 fad2 	bl	80091b2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <main+0x90>)
 8001c10:	f006 f9b2 	bl	8007f78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001c14:	4810      	ldr	r0, [pc, #64]	; (8001c58 <main+0x94>)
 8001c16:	f006 f9af 	bl	8007f78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001c1a:	4810      	ldr	r0, [pc, #64]	; (8001c5c <main+0x98>)
 8001c1c:	f006 f9ac 	bl	8007f78 <HAL_TIM_Base_Start_IT>

  BH1750_Init(&hi2c1, &hi2c2);
 8001c20:	490f      	ldr	r1, [pc, #60]	; (8001c60 <main+0x9c>)
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <main+0xa0>)
 8001c24:	f7ff f96c 	bl	8000f00 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001c28:	2011      	movs	r0, #17
 8001c2a:	f7ff f9ab 	bl	8000f84 <BH1750_SetMode>


  wave_player_init(&htim6, &hdac);
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <main+0xa4>)
 8001c30:	480e      	ldr	r0, [pc, #56]	; (8001c6c <main+0xa8>)
 8001c32:	f000 ff8b 	bl	8002b4c <wave_player_init>
  wave_player_start(audio_file);
 8001c36:	480e      	ldr	r0, [pc, #56]	; (8001c70 <main+0xac>)
 8001c38:	f000 ff9c 	bl	8002b74 <wave_player_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  wave_player_start(audio_file);
 8001c3c:	480c      	ldr	r0, [pc, #48]	; (8001c70 <main+0xac>)
 8001c3e:	f000 ff99 	bl	8002b74 <wave_player_start>
	  HAL_Delay(2000);
 8001c42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c46:	f001 f9a1 	bl	8002f8c <HAL_Delay>
	  wave_player_start(audio_file);
 8001c4a:	e7f7      	b.n	8001c3c <main+0x78>
 8001c4c:	200003fc 	.word	0x200003fc
 8001c50:	200005d4 	.word	0x200005d4
 8001c54:	2000058c 	.word	0x2000058c
 8001c58:	20000424 	.word	0x20000424
 8001c5c:	20000544 	.word	0x20000544
 8001c60:	20000334 	.word	0x20000334
 8001c64:	200002e0 	.word	0x200002e0
 8001c68:	200002cc 	.word	0x200002cc
 8001c6c:	200004b4 	.word	0x200004b4
 8001c70:	0800ca4c 	.word	0x0800ca4c

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0ac      	sub	sp, #176	; 0xb0
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c7e:	2234      	movs	r2, #52	; 0x34
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f008 f9a8 	bl	8009fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	225c      	movs	r2, #92	; 0x5c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f008 f999 	bl	8009fd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <SystemClock_Config+0x124>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <SystemClock_Config+0x124>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <SystemClock_Config+0x124>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <SystemClock_Config+0x128>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <SystemClock_Config+0x128>)
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <SystemClock_Config+0x128>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001cde:	2309      	movs	r3, #9
 8001ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d04:	2304      	movs	r3, #4
 8001d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d0a:	23b4      	movs	r3, #180	; 0xb4
 8001d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fcec 	bl	8007704 <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d32:	f000 f84b 	bl	8001dcc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d36:	f004 fe9f 	bl	8006a78 <HAL_PWREx_EnableOverDrive>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d40:	f000 f844 	bl	8001dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d44:	230f      	movs	r3, #15
 8001d46:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d54:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d60:	2105      	movs	r1, #5
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fed8 	bl	8006b18 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001d6e:	f000 f82d 	bl	8001dcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d72:	2320      	movs	r3, #32
 8001d74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 ffe3 	bl	8006d4c <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001d8c:	f000 f81e 	bl	8001dcc <Error_Handler>
  }
}
 8001d90:	bf00      	nop
 8001d92:	37b0      	adds	r7, #176	; 0xb0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(SECOND_HALF_OF_BUFFER);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f000 ffb7 	bl	8002d1c <wave_player_prepare_half_buffer>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(FIRST_HALF_OF_BUFFER);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 ffac 	bl	8002d1c <wave_player_prepare_half_buffer>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_RTC_Init+0x44>)
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <MX_RTC_Init+0x48>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_RTC_Init+0x44>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_RTC_Init+0x44>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_RTC_Init+0x44>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_RTC_Init+0x44>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_RTC_Init+0x44>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_RTC_Init+0x44>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_RTC_Init+0x44>)
 8001e08:	f005 ff1a 	bl	8007c40 <HAL_RTC_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e12:	f7ff ffdb 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000404 	.word	0x20000404
 8001e20:	40002800 	.word	0x40002800

08001e24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_RTC_MspInit+0x24>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d102      	bne.n	8001e3c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RTC_MspInit+0x28>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40002800 	.word	0x40002800
 8001e4c:	42470e3c 	.word	0x42470e3c

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <HardFault_Handler+0x4>

08001eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eec:	f001 f82e 	bl	8002f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA1_Stream5_IRQHandler+0x10>)
 8001efa:	f001 fd31 	bl	8003960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000026c 	.word	0x2000026c

08001f08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001f0e:	f006 f9c5 	bl	800829c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001f14:	f006 f9c2 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200004fc 	.word	0x200004fc
 8001f20:	20000544 	.word	0x20000544

08001f24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM2_IRQHandler+0x10>)
 8001f2a:	f006 f9b7 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000058c 	.word	0x2000058c

08001f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM3_IRQHandler+0x10>)
 8001f3e:	f006 f9ad 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000046c 	.word	0x2000046c

08001f4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <I2C1_EV_IRQHandler+0x10>)
 8001f52:	f002 fd93 	bl	8004a7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002e0 	.word	0x200002e0

08001f60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <I2C1_ER_IRQHandler+0x10>)
 8001f66:	f002 fefa 	bl	8004d5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200002e0 	.word	0x200002e0

08001f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <USART1_IRQHandler+0x10>)
 8001f7a:	f007 f94b 	bl	8009214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200005d4 	.word	0x200005d4

08001f88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIM5_IRQHandler+0x10>)
 8001f8e:	f006 f985 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000424 	.word	0x20000424

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_kill>:

int _kill(int pid, int sig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fb6:	f007 ffe5 	bl	8009f84 <__errno>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2216      	movs	r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_exit>:

void _exit (int status)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe7 	bl	8001fac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
	}

return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fbcd 	bl	80017d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
	}
	return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f007 ff4a 	bl	8009f84 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000250 	.word	0x20000250
 8002124:	20000a68 	.word	0x20000a68

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <set_motorA>:
#include "tb6612fng.h"
#include "main.h"


void set_motorA(int8_t speed)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0a      	blt.n	8002174 <set_motorA+0x28>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 800215e:	2201      	movs	r2, #1
 8002160:	2108      	movs	r1, #8
 8002162:	4813      	ldr	r0, [pc, #76]	; (80021b0 <set_motorA+0x64>)
 8002164:	f002 f808 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	2110      	movs	r1, #16
 800216c:	4810      	ldr	r0, [pc, #64]	; (80021b0 <set_motorA+0x64>)
 800216e:	f002 f803 	bl	8004178 <HAL_GPIO_WritePin>
 8002172:	e009      	b.n	8002188 <set_motorA+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	2108      	movs	r1, #8
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <set_motorA+0x64>)
 800217a:	f001 fffd 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 800217e:	2201      	movs	r2, #1
 8002180:	2110      	movs	r1, #16
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <set_motorA+0x64>)
 8002184:	f001 fff8 	bl	8004178 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 8002188:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <set_motorA+0x68>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	429a      	cmp	r2, r3
 8002194:	d303      	bcc.n	800219e <set_motorA+0x52>
		speed=htim1.Instance->ARR;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <set_motorA+0x68>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <set_motorA+0x68>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40020400 	.word	0x40020400
 80021b4:	200004fc 	.word	0x200004fc

080021b8 <set_motorB>:

void set_motorB(int8_t speed)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <set_motorB+0x2a>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4814      	ldr	r0, [pc, #80]	; (8002220 <set_motorB+0x68>)
 80021d0:	f001 ffd2 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <set_motorB+0x68>)
 80021dc:	f001 ffcc 	bl	8004178 <HAL_GPIO_WritePin>
 80021e0:	e00a      	b.n	80021f8 <set_motorB+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	480e      	ldr	r0, [pc, #56]	; (8002220 <set_motorB+0x68>)
 80021e8:	f001 ffc6 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <set_motorB+0x68>)
 80021f4:	f001 ffc0 	bl	8004178 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 80021f8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <set_motorB+0x6c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	429a      	cmp	r2, r3
 8002204:	d303      	bcc.n	800220e <set_motorB+0x56>
		speed=htim1.Instance->ARR;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <set_motorB+0x6c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <set_motorB+0x6c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020800 	.word	0x40020800
 8002224:	200004fc 	.word	0x200004fc

08002228 <set_motorC>:

void set_motorC(int8_t speed)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0a      	blt.n	8002250 <set_motorC+0x28>
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, SET);
 800223a:	2201      	movs	r2, #1
 800223c:	2104      	movs	r1, #4
 800223e:	4813      	ldr	r0, [pc, #76]	; (800228c <set_motorC+0x64>)
 8002240:	f001 ff9a 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	2108      	movs	r1, #8
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <set_motorC+0x64>)
 800224a:	f001 ff95 	bl	8004178 <HAL_GPIO_WritePin>
 800224e:	e009      	b.n	8002264 <set_motorC+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2104      	movs	r1, #4
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <set_motorC+0x64>)
 8002256:	f001 ff8f 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, SET);
 800225a:	2201      	movs	r2, #1
 800225c:	2108      	movs	r1, #8
 800225e:	480b      	ldr	r0, [pc, #44]	; (800228c <set_motorC+0x64>)
 8002260:	f001 ff8a 	bl	8004178 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 8002264:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <set_motorC+0x68>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	429a      	cmp	r2, r3
 8002270:	d303      	bcc.n	800227a <set_motorC+0x52>
		speed=htim3.Instance->ARR;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <set_motorC+0x68>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <set_motorC+0x68>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40020800 	.word	0x40020800
 8002290:	2000046c 	.word	0x2000046c

08002294 <set_motorD>:

void set_motorD(int8_t speed)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <set_motorD+0x2a>
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <set_motorD+0x68>)
 80022ae:	f001 ff63 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2104      	movs	r1, #4
 80022b6:	4812      	ldr	r0, [pc, #72]	; (8002300 <set_motorD+0x6c>)
 80022b8:	f001 ff5e 	bl	8004178 <HAL_GPIO_WritePin>
 80022bc:	e00a      	b.n	80022d4 <set_motorD+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <set_motorD+0x68>)
 80022c6:	f001 ff57 	bl	8004178 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2104      	movs	r1, #4
 80022ce:	480c      	ldr	r0, [pc, #48]	; (8002300 <set_motorD+0x6c>)
 80022d0:	f001 ff52 	bl	8004178 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 80022d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <set_motorD+0x70>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	429a      	cmp	r2, r3
 80022e0:	d303      	bcc.n	80022ea <set_motorD+0x56>
		speed=htim3.Instance->ARR;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <set_motorD+0x70>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <set_motorD+0x70>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	2000046c 	.word	0x2000046c

08002308 <TB6612_init>:

void TB6612_init(int8_t speedA, int8_t speedB, int8_t speedC, int8_t speedD)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	4603      	mov	r3, r0
 800231c:	71bb      	strb	r3, [r7, #6]
 800231e:	460b      	mov	r3, r1
 8002320:	717b      	strb	r3, [r7, #5]
 8002322:	4613      	mov	r3, r2
 8002324:	713b      	strb	r3, [r7, #4]
	set_motorA(speedA);
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff0e 	bl	800214c <set_motorA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002330:	2100      	movs	r1, #0
 8002332:	4811      	ldr	r0, [pc, #68]	; (8002378 <TB6612_init+0x70>)
 8002334:	f005 feea 	bl	800810c <HAL_TIM_PWM_Start>
	set_motorB(speedB);
 8002338:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff3b 	bl	80021b8 <set_motorB>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002342:	2104      	movs	r1, #4
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <TB6612_init+0x70>)
 8002346:	f005 fee1 	bl	800810c <HAL_TIM_PWM_Start>
	set_motorC(speedC);
 800234a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff6a 	bl	8002228 <set_motorC>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002354:	2100      	movs	r1, #0
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <TB6612_init+0x74>)
 8002358:	f005 fed8 	bl	800810c <HAL_TIM_PWM_Start>
	set_motorD(speedD);
 800235c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff97 	bl	8002294 <set_motorD>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002366:	2104      	movs	r1, #4
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <TB6612_init+0x74>)
 800236a:	f005 fecf 	bl	800810c <HAL_TIM_PWM_Start>
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}
 8002376:	bf00      	nop
 8002378:	200004fc 	.word	0x200004fc
 800237c:	2000046c 	.word	0x2000046c

08002380 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	; 0x58
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2220      	movs	r2, #32
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f007 fe0d 	bl	8009fd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023c0:	4a44      	ldr	r2, [pc, #272]	; (80024d4 <MX_TIM1_Init+0x154>)
 80023c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023c6:	222c      	movs	r2, #44	; 0x2c
 80023c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023d2:	2263      	movs	r2, #99	; 0x63
 80023d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023de:	2200      	movs	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023e8:	4839      	ldr	r0, [pc, #228]	; (80024d0 <MX_TIM1_Init+0x150>)
 80023ea:	f005 fd0e 	bl	8007e0a <HAL_TIM_Base_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80023f4:	f7ff fcea 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002402:	4619      	mov	r1, r3
 8002404:	4832      	ldr	r0, [pc, #200]	; (80024d0 <MX_TIM1_Init+0x150>)
 8002406:	f006 f913 	bl	8008630 <HAL_TIM_ConfigClockSource>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002410:	f7ff fcdc 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002414:	482e      	ldr	r0, [pc, #184]	; (80024d0 <MX_TIM1_Init+0x150>)
 8002416:	f005 fe1f 	bl	8008058 <HAL_TIM_PWM_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002420:	f7ff fcd4 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800242c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002430:	4619      	mov	r1, r3
 8002432:	4827      	ldr	r0, [pc, #156]	; (80024d0 <MX_TIM1_Init+0x150>)
 8002434:	f006 fcfc 	bl	8008e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800243e:	f7ff fcc5 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002442:	2360      	movs	r3, #96	; 0x60
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800244e:	2300      	movs	r3, #0
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	2200      	movs	r2, #0
 8002464:	4619      	mov	r1, r3
 8002466:	481a      	ldr	r0, [pc, #104]	; (80024d0 <MX_TIM1_Init+0x150>)
 8002468:	f006 f820 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002472:	f7ff fcab 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	2204      	movs	r2, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4814      	ldr	r0, [pc, #80]	; (80024d0 <MX_TIM1_Init+0x150>)
 8002480:	f006 f814 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800248a:	f7ff fc9f 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <MX_TIM1_Init+0x150>)
 80024b2:	f006 fd39 	bl	8008f28 <HAL_TIMEx_ConfigBreakDeadTime>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024bc:	f7ff fc86 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <MX_TIM1_Init+0x150>)
 80024c2:	f000 fa49 	bl	8002958 <HAL_TIM_MspPostInit>

}
 80024c6:	bf00      	nop
 80024c8:	3758      	adds	r7, #88	; 0x58
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200004fc 	.word	0x200004fc
 80024d4:	40010000 	.word	0x40010000

080024d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <MX_TIM2_Init+0x98>)
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <MX_TIM2_Init+0x98>)
 80024fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_TIM2_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <MX_TIM2_Init+0x98>)
 800250c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <MX_TIM2_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_TIM2_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800251e:	4814      	ldr	r0, [pc, #80]	; (8002570 <MX_TIM2_Init+0x98>)
 8002520:	f005 fc73 	bl	8007e0a <HAL_TIM_Base_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800252a:	f7ff fc4f 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	4619      	mov	r1, r3
 800253a:	480d      	ldr	r0, [pc, #52]	; (8002570 <MX_TIM2_Init+0x98>)
 800253c:	f006 f878 	bl	8008630 <HAL_TIM_ConfigClockSource>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002546:	f7ff fc41 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800254a:	2320      	movs	r3, #32
 800254c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002552:	463b      	mov	r3, r7
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_TIM2_Init+0x98>)
 8002558:	f006 fc6a 	bl	8008e30 <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002562:	f7ff fc33 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000058c 	.word	0x2000058c

08002574 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08e      	sub	sp, #56	; 0x38
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002588:	f107 0320 	add.w	r3, r7, #32
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	615a      	str	r2, [r3, #20]
 80025a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <MX_TIM3_Init+0xf8>)
 80025a6:	4a32      	ldr	r2, [pc, #200]	; (8002670 <MX_TIM3_Init+0xfc>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <MX_TIM3_Init+0xf8>)
 80025ac:	222c      	movs	r2, #44	; 0x2c
 80025ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <MX_TIM3_Init+0xf8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <MX_TIM3_Init+0xf8>)
 80025b8:	2263      	movs	r2, #99	; 0x63
 80025ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <MX_TIM3_Init+0xf8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <MX_TIM3_Init+0xf8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c8:	4828      	ldr	r0, [pc, #160]	; (800266c <MX_TIM3_Init+0xf8>)
 80025ca:	f005 fc1e 	bl	8007e0a <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80025d4:	f7ff fbfa 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4821      	ldr	r0, [pc, #132]	; (800266c <MX_TIM3_Init+0xf8>)
 80025e6:	f006 f823 	bl	8008630 <HAL_TIM_ConfigClockSource>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80025f0:	f7ff fbec 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025f4:	481d      	ldr	r0, [pc, #116]	; (800266c <MX_TIM3_Init+0xf8>)
 80025f6:	f005 fd2f 	bl	8008058 <HAL_TIM_PWM_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002600:	f7ff fbe4 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	4619      	mov	r1, r3
 8002612:	4816      	ldr	r0, [pc, #88]	; (800266c <MX_TIM3_Init+0xf8>)
 8002614:	f006 fc0c 	bl	8008e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800261e:	f7ff fbd5 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	; 0x60
 8002624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_TIM3_Init+0xf8>)
 800263a:	f005 ff37 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002644:	f7ff fbc2 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2204      	movs	r2, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <MX_TIM3_Init+0xf8>)
 8002650:	f005 ff2c 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800265a:	f7ff fbb7 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <MX_TIM3_Init+0xf8>)
 8002660:	f000 f97a 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8002664:	bf00      	nop
 8002666:	3738      	adds	r7, #56	; 0x38
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000046c 	.word	0x2000046c
 8002670:	40000400 	.word	0x40000400

08002674 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM5_Init+0x94>)
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <MX_TIM5_Init+0x98>)
 8002694:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_TIM5_Init+0x94>)
 8002698:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800269c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM5_Init+0x94>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM5_Init+0x94>)
 80026a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <MX_TIM5_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM5_Init+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026b8:	4813      	ldr	r0, [pc, #76]	; (8002708 <MX_TIM5_Init+0x94>)
 80026ba:	f005 fba6 	bl	8007e0a <HAL_TIM_Base_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026c4:	f7ff fb82 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4619      	mov	r1, r3
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM5_Init+0x94>)
 80026d6:	f005 ffab 	bl	8008630 <HAL_TIM_ConfigClockSource>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026e0:	f7ff fb74 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026e4:	2320      	movs	r3, #32
 80026e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM5_Init+0x94>)
 80026f2:	f006 fb9d 	bl	8008e30 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026fc:	f7ff fb66 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000424 	.word	0x20000424
 800270c:	40000c00 	.word	0x40000c00

08002710 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002716:	463b      	mov	r3, r7
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_TIM6_Init+0x64>)
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <MX_TIM6_Init+0x68>)
 8002722:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_TIM6_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_TIM6_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_TIM6_Init+0x64>)
 8002732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_TIM6_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <MX_TIM6_Init+0x64>)
 8002740:	f005 fb63 	bl	8007e0a <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800274a:	f7ff fb3f 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800274e:	2320      	movs	r3, #32
 8002750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <MX_TIM6_Init+0x64>)
 800275c:	f006 fb68 	bl	8008e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002766:	f7ff fb31 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200004b4 	.word	0x200004b4
 8002778:	40001000 	.word	0x40001000

0800277c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002782:	463b      	mov	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_TIM9_Init+0x6c>)
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <MX_TIM9_Init+0x70>)
 8002792:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8000-1;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_TIM9_Init+0x6c>)
 8002796:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800279a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_TIM9_Init+0x6c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_TIM9_Init+0x6c>)
 80027a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027a8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_TIM9_Init+0x6c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <MX_TIM9_Init+0x6c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80027b6:	480c      	ldr	r0, [pc, #48]	; (80027e8 <MX_TIM9_Init+0x6c>)
 80027b8:	f005 fb27 	bl	8007e0a <HAL_TIM_Base_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80027c2:	f7ff fb03 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ca:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_TIM9_Init+0x6c>)
 80027d2:	f005 ff2d 	bl	8008630 <HAL_TIM_ConfigClockSource>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80027dc:	f7ff faf6 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000544 	.word	0x20000544
 80027ec:	40014000 	.word	0x40014000

080027f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a50      	ldr	r2, [pc, #320]	; (8002940 <HAL_TIM_Base_MspInit+0x150>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d116      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2018      	movs	r0, #24
 8002824:	f000 fcb1 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002828:	2018      	movs	r0, #24
 800282a:	f000 fcca 	bl	80031c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800282e:	e082      	b.n	8002936 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d116      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a40      	ldr	r2, [pc, #256]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	201c      	movs	r0, #28
 800285c:	f000 fc95 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002860:	201c      	movs	r0, #28
 8002862:	f000 fcae 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8002866:	e066      	b.n	8002936 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a36      	ldr	r2, [pc, #216]	; (8002948 <HAL_TIM_Base_MspInit+0x158>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d116      	bne.n	80028a0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b30      	ldr	r3, [pc, #192]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	201d      	movs	r0, #29
 8002894:	f000 fc79 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002898:	201d      	movs	r0, #29
 800289a:	f000 fc92 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 800289e:	e04a      	b.n	8002936 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_TIM_Base_MspInit+0x15c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d116      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2032      	movs	r0, #50	; 0x32
 80028cc:	f000 fc5d 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028d0:	2032      	movs	r0, #50	; 0x32
 80028d2:	f000 fc76 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 80028d6:	e02e      	b.n	8002936 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_TIM_Base_MspInit+0x160>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	e01a      	b.n	8002936 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <HAL_TIM_Base_MspInit+0x164>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d115      	bne.n	8002936 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_TIM_Base_MspInit+0x154>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2018      	movs	r0, #24
 800292c:	f000 fc2d 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002930:	2018      	movs	r0, #24
 8002932:	f000 fc46 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40010000 	.word	0x40010000
 8002944:	40023800 	.word	0x40023800
 8002948:	40000400 	.word	0x40000400
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40001000 	.word	0x40001000
 8002954:	40014000 	.word	0x40014000

08002958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11f      	bne.n	80029ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin|PWM2_Pin;
 8002996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4817      	ldr	r0, [pc, #92]	; (8002a10 <HAL_TIM_MspPostInit+0xb8>)
 80029b4:	f001 fa4c 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029b8:	e022      	b.n	8002a00 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_TIM_MspPostInit+0xbc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d11d      	bne.n	8002a00 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 80029e0:	23c0      	movs	r3, #192	; 0xc0
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f0:	2302      	movs	r3, #2
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_TIM_MspPostInit+0xb8>)
 80029fc:	f001 fa28 	bl	8003e50 <HAL_GPIO_Init>
}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40000400 	.word	0x40000400

08002a18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <MX_USART1_UART_Init+0x50>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_USART1_UART_Init+0x4c>)
 8002a50:	f006 fad0 	bl	8008ff4 <HAL_UART_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a5a:	f7ff f9b7 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200005d4 	.word	0x200005d4
 8002a68:	40011000 	.word	0x40011000

08002a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <HAL_UART_MspInit+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d152      	bne.n	8002b34 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_UART_MspInit+0xd4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af4:	2307      	movs	r3, #7
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <HAL_UART_MspInit+0xd8>)
 8002b00:	f001 f9a6 	bl	8003e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b14:	2307      	movs	r3, #7
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480a      	ldr	r0, [pc, #40]	; (8002b48 <HAL_UART_MspInit+0xdc>)
 8002b20:	f001 f996 	bl	8003e50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2025      	movs	r0, #37	; 0x25
 8002b2a:	f000 fb2e 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b2e:	2025      	movs	r0, #37	; 0x25
 8002b30:	f000 fb47 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b34:	bf00      	nop
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400

08002b4c <wave_player_init>:
#include "main.h"

struct wave_player_s wave_player;

void wave_player_init(TIM_HandleTypeDef *_htim, DAC_HandleTypeDef *_hdac)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	wave_player.htim = _htim;
 8002b56:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <wave_player_init+0x24>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6013      	str	r3, [r2, #0]
	wave_player.hdac = _hdac;
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <wave_player_init+0x24>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6053      	str	r3, [r2, #4]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000618 	.word	0x20000618

08002b74 <wave_player_start>:

void wave_player_start(uint8_t *file)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	6078      	str	r0, [r7, #4]
	int8_t status;

	status = wave_player_read_header(file);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f827 	bl	8002bd0 <wave_player_read_header>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]

	if(ERROR == status)
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d017      	beq.n	8002bbe <wave_player_start+0x4a>
	{
		return;
	}

	wave_player_set_timer_arr(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <wave_player_start+0x54>)
 8002b90:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f869 	bl	8002c6c <wave_player_set_timer_arr>

	wave_player_prepare_first_buffer();
 8002b9a:	f000 f883 	bl	8002ca4 <wave_player_prepare_first_buffer>

	HAL_TIM_Base_Start(wave_player.htim);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <wave_player_start+0x54>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f005 f980 	bl	8007ea8 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <wave_player_start+0x54>)
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	2304      	movs	r3, #4
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <wave_player_start+0x58>)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f000 fb40 	bl	800323c <HAL_DAC_Start_DMA>
 8002bbc:	e000      	b.n	8002bc0 <wave_player_start+0x4c>
		return;
 8002bbe:	bf00      	nop
}
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000618 	.word	0x20000618
 8002bcc:	20000624 	.word	0x20000624

08002bd0 <wave_player_read_header>:

int8_t wave_player_read_header(uint8_t *file)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	wave_player.data_pointer = file;
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <wave_player_read_header+0x8c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6093      	str	r3, [r2, #8]

	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e00e      	b.n	8002c02 <wave_player_read_header+0x32>
	{
		wave_player.file_hdr.bytes[i] = *(wave_player.data_pointer+i);
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <wave_player_read_header+0x8c>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	7819      	ldrb	r1, [r3, #0]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <wave_player_read_header+0x8c>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b2b      	cmp	r3, #43	; 0x2b
 8002c06:	d9ed      	bls.n	8002be4 <wave_player_read_header+0x14>
	}

	if(RIFF_HDR_CONST != wave_player.file_hdr.wave_file_hdr.riff_hdr)
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <wave_player_read_header+0x8c>)
 8002c0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <wave_player_read_header+0x90>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d001      	beq.n	8002c18 <wave_player_read_header+0x48>
	{
		return ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01b      	b.n	8002c50 <wave_player_read_header+0x80>
	}

	if(WAVE_ID_CONST != wave_player.file_hdr.wave_file_hdr.wave_id)
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <wave_player_read_header+0x8c>)
 8002c1a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8002c1e:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <wave_player_read_header+0x94>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d001      	beq.n	8002c28 <wave_player_read_header+0x58>
	{
		return ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e013      	b.n	8002c50 <wave_player_read_header+0x80>
	}

	if(FMT_CONST != wave_player.file_hdr.wave_file_hdr.chunk_marker)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <wave_player_read_header+0x8c>)
 8002c2a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <wave_player_read_header+0x98>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d001      	beq.n	8002c38 <wave_player_read_header+0x68>
	{
		return ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e00b      	b.n	8002c50 <wave_player_read_header+0x80>
	}

	if(CHANNEL_MONO != wave_player.file_hdr.wave_file_hdr.channels)
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <wave_player_read_header+0x8c>)
 8002c3a:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <wave_player_read_header+0x76>
	{
		return ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e004      	b.n	8002c50 <wave_player_read_header+0x80>
	}

	wave_player.byte_counter = WAVE_FILE_HEADER_SIZE;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <wave_player_read_header+0x8c>)
 8002c48:	222c      	movs	r2, #44	; 0x2c
 8002c4a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	return SUCCESS;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000618 	.word	0x20000618
 8002c60:	46464952 	.word	0x46464952
 8002c64:	45564157 	.word	0x45564157
 8002c68:	20746d66 	.word	0x20746d66

08002c6c <wave_player_set_timer_arr>:

void wave_player_set_timer_arr(uint32_t sample_rate)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	uint32_t arr;

	arr = HAL_RCC_GetPCLK1Freq() / sample_rate;
 8002c74:	f004 f842 	bl	8006cfc <HAL_RCC_GetPCLK1Freq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(wave_player.htim, arr - 1);
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <wave_player_set_timer_arr+0x34>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <wave_player_set_timer_arr+0x34>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	3a01      	subs	r2, #1
 8002c96:	60da      	str	r2, [r3, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000618 	.word	0x20000618

08002ca4 <wave_player_prepare_first_buffer>:

void wave_player_prepare_first_buffer(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
	int32_t i;
	int16_t audio_sample;

	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	e028      	b.n	8002d02 <wave_player_prepare_first_buffer+0x5e>
	{
		audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cce:	440b      	add	r3, r1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	807b      	strh	r3, [r7, #2]

		wave_player.buffer[i] = (audio_sample + 32768);
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cde:	b299      	uxth	r1, r3
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	460a      	mov	r2, r1
 8002cec:	809a      	strh	r2, [r3, #4]

		wave_player.byte_counter += 2;
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cf0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <wave_player_prepare_first_buffer+0x74>)
 8002cf8:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	dbd2      	blt.n	8002cb0 <wave_player_prepare_first_buffer+0xc>
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000618 	.word	0x20000618

08002d1c <wave_player_prepare_half_buffer>:

void wave_player_prepare_half_buffer(uint8_t half_number)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	int32_t i;
	int16_t audio_sample;

	if(FIRST_HALF_OF_BUFFER == half_number)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d13e      	bne.n	8002daa <wave_player_prepare_half_buffer+0x8e>
	{
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e037      	b.n	8002da2 <wave_player_prepare_half_buffer+0x86>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d50:	440b      	add	r3, r1
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d60:	b299      	uxth	r1, r3
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3304      	adds	r3, #4
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d72:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d76:	3302      	adds	r3, #2
 8002d78:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d7a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size)
 8002d7e:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d80:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d86:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d306      	bcc.n	8002d9c <wave_player_prepare_half_buffer+0x80>
			{
				HAL_DAC_Stop_DMA(wave_player.hdac, DAC_CHANNEL_1);
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fb1f 	bl	80033d8 <HAL_DAC_Stop_DMA>
				return;
 8002d9a:	e053      	b.n	8002e44 <wave_player_prepare_half_buffer+0x128>
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2bff      	cmp	r3, #255	; 0xff
 8002da6:	ddc4      	ble.n	8002d32 <wave_player_prepare_half_buffer+0x16>
 8002da8:	e04c      	b.n	8002e44 <wave_player_prepare_half_buffer+0x128>
			}
		}
	}
	else if(SECOND_HALF_OF_BUFFER == half_number)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d149      	bne.n	8002e44 <wave_player_prepare_half_buffer+0x128>
	{
		HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002db2:	6858      	ldr	r0, [r3, #4]
 8002db4:	2304      	movs	r3, #4
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <wave_player_prepare_half_buffer+0x134>)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	f000 fa3c 	bl	800323c <HAL_DAC_Start_DMA>

		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8002dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e037      	b.n	8002e3c <wave_player_prepare_half_buffer+0x120>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002dd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002de6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dea:	440b      	add	r3, r1
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3304      	adds	r3, #4
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	460a      	mov	r2, r1
 8002e08:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002e0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e10:	3302      	adds	r3, #2
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002e14:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size)
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002e1a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002e20:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d306      	bcc.n	8002e36 <wave_player_prepare_half_buffer+0x11a>
			{
				HAL_DAC_Stop_DMA(wave_player.hdac, DAC_CHANNEL_1);
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <wave_player_prepare_half_buffer+0x130>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fad2 	bl	80033d8 <HAL_DAC_Stop_DMA>
				return;
 8002e34:	e006      	b.n	8002e44 <wave_player_prepare_half_buffer+0x128>
		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e42:	dbc3      	blt.n	8002dcc <wave_player_prepare_half_buffer+0xb0>
			}
		}
	}
}
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000618 	.word	0x20000618
 8002e50:	20000624 	.word	0x20000624

08002e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e58:	480d      	ldr	r0, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e5c:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e70:	4c0b      	ldr	r4, [pc, #44]	; (8002ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e7e:	f7ff f953 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f007 f885 	bl	8009f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e86:	f7fe fe9d 	bl	8001bc4 <main>
  bx  lr    
 8002e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e98:	0807a3c4 	.word	0x0807a3c4
  ldr r2, =_sbss
 8002e9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ea0:	20000a68 	.word	0x20000a68

08002ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <HAL_Init+0x40>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_Init+0x40>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_Init+0x40>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 f94f 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f000 f808 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7fe ffb8 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x54>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_InitTick+0x58>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f967 	bl	80031de <HAL_SYSTICK_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00e      	b.n	8002f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d80a      	bhi.n	8002f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f20:	2200      	movs	r2, #0
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f000 f92f 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <HAL_InitTick+0x5c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000008 	.word	0x20000008
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_IncTick+0x20>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_IncTick+0x24>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <HAL_IncTick+0x24>)
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20000a54 	.word	0x20000a54

08002f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return uwTick;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_GetTick+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000a54 	.word	0x20000a54

08002f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f7ff ffee 	bl	8002f74 <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d005      	beq.n	8002fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_Delay+0x44>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb2:	bf00      	nop
 8002fb4:	f7ff ffde 	bl	8002f74 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d8f7      	bhi.n	8002fb4 <HAL_Delay+0x28>
  {
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000008 	.word	0x20000008

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff29 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff3e 	bl	800301c <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff31 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffa2 	bl	8003130 <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e014      	b.n	8003232 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fe f837 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	795b      	ldrb	r3, [r3, #5]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_DAC_Start_DMA+0x22>
 800325a:	2302      	movs	r3, #2
 800325c:	e0ab      	b.n	80033b6 <HAL_DAC_Start_DMA+0x17a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2202      	movs	r2, #2
 8003268:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d12f      	bne.n	80032d0 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_DAC_Start_DMA+0x184>)
 8003276:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_DAC_Start_DMA+0x188>)
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_DAC_Start_DMA+0x18c>)
 8003286:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003296:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d013      	beq.n	80032c6 <HAL_DAC_Start_DMA+0x8a>
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d845      	bhi.n	8003330 <HAL_DAC_Start_DMA+0xf4>
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_DAC_Start_DMA+0x76>
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d005      	beq.n	80032bc <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80032b0:	e03e      	b.n	8003330 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3308      	adds	r3, #8
 80032b8:	613b      	str	r3, [r7, #16]
        break;
 80032ba:	e03c      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	613b      	str	r3, [r7, #16]
        break;
 80032c4:	e037      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3310      	adds	r3, #16
 80032cc:	613b      	str	r3, [r7, #16]
        break;
 80032ce:	e032      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <HAL_DAC_Start_DMA+0x190>)
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_DAC_Start_DMA+0x194>)
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a3b      	ldr	r2, [pc, #236]	; (80033d4 <HAL_DAC_Start_DMA+0x198>)
 80032e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d013      	beq.n	8003326 <HAL_DAC_Start_DMA+0xea>
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d817      	bhi.n	8003334 <HAL_DAC_Start_DMA+0xf8>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_DAC_Start_DMA+0xd6>
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d005      	beq.n	800331c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003310:	e010      	b.n	8003334 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	613b      	str	r3, [r7, #16]
        break;
 800331a:	e00c      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3318      	adds	r3, #24
 8003322:	613b      	str	r3, [r7, #16]
        break;
 8003324:	e007      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	331c      	adds	r3, #28
 800332c:	613b      	str	r3, [r7, #16]
        break;
 800332e:	e002      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003334:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800334a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6898      	ldr	r0, [r3, #8]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	f000 fa19 	bl	800378c <HAL_DMA_Start_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]
 800335e:	e010      	b.n	8003382 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800336e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68d8      	ldr	r0, [r3, #12]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	f000 fa07 	bl	800378c <HAL_DMA_Start_IT>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e005      	b.n	80033b4 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	0800351b 	.word	0x0800351b
 80033c4:	0800353d 	.word	0x0800353d
 80033c8:	08003559 	.word	0x08003559
 80033cc:	080035c3 	.word	0x080035c3
 80033d0:	080035e5 	.word	0x080035e5
 80033d4:	08003601 	.word	0x08003601

080033d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	400a      	ands	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2201      	movs	r2, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	400a      	ands	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fa08 	bl	800383c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e00c      	b.n	8003458 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f9fa 	bl	800383c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003456:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	795b      	ldrb	r3, [r3, #5]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_DAC_ConfigChannel+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e03c      	b.n	800350e <HAL_DAC_ConfigChannel+0x92>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2202      	movs	r2, #2
 800349e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4013      	ands	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	22c0      	movs	r2, #192	; 0xc0
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7fe fc39 	bl	8001da0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	711a      	strb	r2, [r3, #4]
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7fe fc33 	bl	8001db6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff78 	bl	8003468 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	711a      	strb	r2, [r3, #4]
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff ffd8 	bl	8003586 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	711a      	strb	r2, [r3, #4]
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff ffd1 	bl	800359a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ffc7 	bl	80035ae <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	711a      	strb	r2, [r3, #4]
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff fc9a 	bl	8002f74 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e099      	b.n	8003780 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366c:	e00f      	b.n	800368e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800366e:	f7ff fc81 	bl	8002f74 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b05      	cmp	r3, #5
 800367a:	d908      	bls.n	800368e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2203      	movs	r2, #3
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e078      	b.n	8003780 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e8      	bne.n	800366e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_DMA_Init+0x158>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4313      	orrs	r3, r2
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b04      	cmp	r3, #4
 8003720:	d117      	bne.n	8003752 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fb0f 	bl	8003d58 <DMA_CheckFifoParam>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800374e:	2301      	movs	r3, #1
 8003750:	e016      	b.n	8003780 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fac6 	bl	8003cec <DMA_CalcBaseAndBitshift>
 8003760:	4603      	mov	r3, r0
 8003762:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	223f      	movs	r2, #63	; 0x3f
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	f010803f 	.word	0xf010803f

0800378c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_Start_IT+0x26>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e040      	b.n	8003834 <HAL_DMA_Start_IT+0xa8>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d12f      	bne.n	8003826 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa58 	bl	8003c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	223f      	movs	r2, #63	; 0x3f
 80037e6:	409a      	lsls	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0216 	orr.w	r2, r2, #22
 80037fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0208 	orr.w	r2, r2, #8
 8003812:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e005      	b.n	8003832 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800384a:	f7ff fb93 	bl	8002f74 <HAL_GetTick>
 800384e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d008      	beq.n	800386e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e052      	b.n	8003914 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0216 	bic.w	r2, r2, #22
 800387c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_DMA_Abort+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038be:	e013      	b.n	80038e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c0:	f7ff fb58 	bl	8002f74 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d90c      	bls.n	80038e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e015      	b.n	8003914 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e4      	bne.n	80038c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	223f      	movs	r2, #63	; 0x3f
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e00c      	b.n	8003954 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2205      	movs	r2, #5
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800396c:	4b92      	ldr	r3, [pc, #584]	; (8003bb8 <HAL_DMA_IRQHandler+0x258>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a92      	ldr	r2, [pc, #584]	; (8003bbc <HAL_DMA_IRQHandler+0x25c>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	2208      	movs	r2, #8
 800398c:	409a      	lsls	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01a      	beq.n	80039cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0204 	bic.w	r2, r2, #4
 80039b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2208      	movs	r2, #8
 80039ba:	409a      	lsls	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	2204      	movs	r2, #4
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2204      	movs	r2, #4
 8003a26:	409a      	lsls	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d03c      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d018      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d024      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
 8003a8e:	e01f      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
 8003aa0:	e016      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0208 	bic.w	r2, r2, #8
 8003abe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 808e 	beq.w	8003bfe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8086 	beq.w	8003bfe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	2220      	movs	r2, #32
 8003af8:	409a      	lsls	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d136      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0216 	bic.w	r2, r2, #22
 8003b18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_DMA_IRQHandler+0x1da>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0208 	bic.w	r2, r2, #8
 8003b48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	223f      	movs	r2, #63	; 0x3f
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d07d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
        }
        return;
 8003b76:	e078      	b.n	8003c6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d108      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d030      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
 8003ba4:	e02b      	b.n	8003bfe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d027      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e022      	b.n	8003bfe <HAL_DMA_IRQHandler+0x29e>
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d032      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2205      	movs	r2, #5
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d307      	bcc.n	8003c46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f2      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x2ca>
 8003c44:	e000      	b.n	8003c48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e000      	b.n	8003c6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c6a:	bf00      	nop
    }
  }
}
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c82:	b2db      	uxtb	r3, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d108      	bne.n	8003cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cce:	e007      	b.n	8003ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3b10      	subs	r3, #16
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <DMA_CalcBaseAndBitshift+0x64>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <DMA_CalcBaseAndBitshift+0x68>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d909      	bls.n	8003d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d2c:	e007      	b.n	8003d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	aaaaaaab 	.word	0xaaaaaaab
 8003d54:	08079fcc 	.word	0x08079fcc

08003d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11f      	bne.n	8003db2 <DMA_CheckFifoParam+0x5a>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d856      	bhi.n	8003e26 <DMA_CheckFifoParam+0xce>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <DMA_CheckFifoParam+0x28>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003da3 	.word	0x08003da3
 8003d88:	08003d91 	.word	0x08003d91
 8003d8c:	08003e27 	.word	0x08003e27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d046      	beq.n	8003e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e043      	b.n	8003e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003daa:	d140      	bne.n	8003e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db0:	e03d      	b.n	8003e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d121      	bne.n	8003e00 <DMA_CheckFifoParam+0xa8>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d837      	bhi.n	8003e32 <DMA_CheckFifoParam+0xda>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x70>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003ddf 	.word	0x08003ddf
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003df1 	.word	0x08003df1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      break;
 8003ddc:	e030      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d025      	beq.n	8003e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dee:	e022      	b.n	8003e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df8:	d11f      	bne.n	8003e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dfe:	e01c      	b.n	8003e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d903      	bls.n	8003e0e <DMA_CheckFifoParam+0xb6>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d003      	beq.n	8003e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e0c:	e018      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      break;
 8003e12:	e015      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e00b      	b.n	8003e3e <DMA_CheckFifoParam+0xe6>
      break;
 8003e26:	bf00      	nop
 8003e28:	e00a      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e008      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e006      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e165      	b.n	8004138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	f040 8154 	bne.w	8004132 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d005      	beq.n	8003ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d130      	bne.n	8003f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 0201 	and.w	r2, r3, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d017      	beq.n	8003f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d123      	bne.n	8003f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	08da      	lsrs	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	220f      	movs	r2, #15
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	08da      	lsrs	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3208      	adds	r2, #8
 8003f8e:	69b9      	ldr	r1, [r7, #24]
 8003f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0203 	and.w	r2, r3, #3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80ae 	beq.w	8004132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <HAL_GPIO_Init+0x300>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	4a5c      	ldr	r2, [pc, #368]	; (8004150 <HAL_GPIO_Init+0x300>)
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe6:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_GPIO_Init+0x300>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff2:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_GPIO_Init+0x304>)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4f      	ldr	r2, [pc, #316]	; (8004158 <HAL_GPIO_Init+0x308>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d025      	beq.n	800406a <HAL_GPIO_Init+0x21a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4e      	ldr	r2, [pc, #312]	; (800415c <HAL_GPIO_Init+0x30c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <HAL_GPIO_Init+0x216>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4d      	ldr	r2, [pc, #308]	; (8004160 <HAL_GPIO_Init+0x310>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d019      	beq.n	8004062 <HAL_GPIO_Init+0x212>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a4c      	ldr	r2, [pc, #304]	; (8004164 <HAL_GPIO_Init+0x314>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_GPIO_Init+0x20e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4b      	ldr	r2, [pc, #300]	; (8004168 <HAL_GPIO_Init+0x318>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00d      	beq.n	800405a <HAL_GPIO_Init+0x20a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4a      	ldr	r2, [pc, #296]	; (800416c <HAL_GPIO_Init+0x31c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x206>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a49      	ldr	r2, [pc, #292]	; (8004170 <HAL_GPIO_Init+0x320>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_GPIO_Init+0x202>
 800404e:	2306      	movs	r3, #6
 8004050:	e00c      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004052:	2307      	movs	r3, #7
 8004054:	e00a      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004056:	2305      	movs	r3, #5
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800405a:	2304      	movs	r3, #4
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	; (8004154 <HAL_GPIO_Init+0x304>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800408a:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_GPIO_Init+0x324>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ae:	4a31      	ldr	r2, [pc, #196]	; (8004174 <HAL_GPIO_Init+0x324>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_GPIO_Init+0x324>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d8:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_GPIO_Init+0x324>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040de:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_GPIO_Init+0x324>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_GPIO_Init+0x324>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_GPIO_Init+0x324>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <HAL_GPIO_Init+0x324>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f ae96 	bls.w	8003e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800
 8004174:	40013c00 	.word	0x40013c00

08004178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004188:	787b      	ldrb	r3, [r7, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004194:	e003      	b.n	800419e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	041a      	lsls	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e12b      	b.n	8004416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fa08 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800420e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004210:	f002 fd74 	bl	8006cfc <HAL_RCC_GetPCLK1Freq>
 8004214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4a81      	ldr	r2, [pc, #516]	; (8004420 <HAL_I2C_Init+0x274>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d807      	bhi.n	8004230 <HAL_I2C_Init+0x84>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a80      	ldr	r2, [pc, #512]	; (8004424 <HAL_I2C_Init+0x278>)
 8004224:	4293      	cmp	r3, r2
 8004226:	bf94      	ite	ls
 8004228:	2301      	movls	r3, #1
 800422a:	2300      	movhi	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e006      	b.n	800423e <HAL_I2C_Init+0x92>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a7d      	ldr	r2, [pc, #500]	; (8004428 <HAL_I2C_Init+0x27c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	bf94      	ite	ls
 8004238:	2301      	movls	r3, #1
 800423a:	2300      	movhi	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0e7      	b.n	8004416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a78      	ldr	r2, [pc, #480]	; (800442c <HAL_I2C_Init+0x280>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0c9b      	lsrs	r3, r3, #18
 8004250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a6a      	ldr	r2, [pc, #424]	; (8004420 <HAL_I2C_Init+0x274>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d802      	bhi.n	8004280 <HAL_I2C_Init+0xd4>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3301      	adds	r3, #1
 800427e:	e009      	b.n	8004294 <HAL_I2C_Init+0xe8>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	4a69      	ldr	r2, [pc, #420]	; (8004430 <HAL_I2C_Init+0x284>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	3301      	adds	r3, #1
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	430b      	orrs	r3, r1
 800429a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	495c      	ldr	r1, [pc, #368]	; (8004420 <HAL_I2C_Init+0x274>)
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d819      	bhi.n	80042e8 <HAL_I2C_Init+0x13c>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e59      	subs	r1, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c2:	1c59      	adds	r1, r3, #1
 80042c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042c8:	400b      	ands	r3, r1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_I2C_Init+0x138>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1e59      	subs	r1, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e2:	e051      	b.n	8004388 <HAL_I2C_Init+0x1dc>
 80042e4:	2304      	movs	r3, #4
 80042e6:	e04f      	b.n	8004388 <HAL_I2C_Init+0x1dc>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d111      	bne.n	8004314 <HAL_I2C_Init+0x168>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e58      	subs	r0, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	440b      	add	r3, r1
 80042fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e012      	b.n	800433a <HAL_I2C_Init+0x18e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e58      	subs	r0, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	0099      	lsls	r1, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	fbb0 f3f3 	udiv	r3, r0, r3
 800432a:	3301      	adds	r3, #1
 800432c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Init+0x196>
 800433e:	2301      	movs	r3, #1
 8004340:	e022      	b.n	8004388 <HAL_I2C_Init+0x1dc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <HAL_I2C_Init+0x1bc>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1e58      	subs	r0, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	440b      	add	r3, r1
 8004358:	fbb0 f3f3 	udiv	r3, r0, r3
 800435c:	3301      	adds	r3, #1
 800435e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004366:	e00f      	b.n	8004388 <HAL_I2C_Init+0x1dc>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e58      	subs	r0, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	0099      	lsls	r1, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	6809      	ldr	r1, [r1, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6911      	ldr	r1, [r2, #16]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	000186a0 	.word	0x000186a0
 8004424:	001e847f 	.word	0x001e847f
 8004428:	003d08ff 	.word	0x003d08ff
 800442c:	431bde83 	.word	0x431bde83
 8004430:	10624dd3 	.word	0x10624dd3

08004434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	460b      	mov	r3, r1
 8004442:	817b      	strh	r3, [r7, #10]
 8004444:	4613      	mov	r3, r2
 8004446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7fe fd94 	bl	8002f74 <HAL_GetTick>
 800444c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	f040 80e0 	bne.w	800461c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2319      	movs	r3, #25
 8004462:	2201      	movs	r2, #1
 8004464:	4970      	ldr	r1, [pc, #448]	; (8004628 <HAL_I2C_Master_Transmit+0x1f4>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f002 f8dc 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	e0d3      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2C_Master_Transmit+0x50>
 8004480:	2302      	movs	r3, #2
 8004482:	e0cc      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d007      	beq.n	80044aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2221      	movs	r2, #33	; 0x21
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2210      	movs	r2, #16
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a50      	ldr	r2, [pc, #320]	; (800462c <HAL_I2C_Master_Transmit+0x1f8>)
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 fe9e 	bl	8006234 <I2C_MasterRequestWrite>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e08d      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004518:	e066      	b.n	80045e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f002 f956 	bl	80067d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e06b      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d11b      	bne.n	80045bc <HAL_I2C_Master_Transmit+0x188>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	6a39      	ldr	r1, [r7, #32]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f002 f946 	bl	8006852 <I2C_WaitOnBTFFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d107      	bne.n	80045e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e01a      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d194      	bne.n	800451a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	00100002 	.word	0x00100002
 800462c:	ffff0000 	.word	0xffff0000

08004630 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	461a      	mov	r2, r3
 800463c:	460b      	mov	r3, r1
 800463e:	817b      	strh	r3, [r7, #10]
 8004640:	4613      	mov	r3, r2
 8004642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004644:	f7fe fc96 	bl	8002f74 <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	f040 820b 	bne.w	8004a6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	497c      	ldr	r1, [pc, #496]	; (8004854 <HAL_I2C_Master_Receive+0x224>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f001 ffde 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
 8004670:	e1fe      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_I2C_Master_Receive+0x50>
 800467c:	2302      	movs	r3, #2
 800467e:	e1f7      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d007      	beq.n	80046a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2222      	movs	r2, #34	; 0x22
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2210      	movs	r2, #16
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	893a      	ldrh	r2, [r7, #8]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a5c      	ldr	r2, [pc, #368]	; (8004858 <HAL_I2C_Master_Receive+0x228>)
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046e8:	8979      	ldrh	r1, [r7, #10]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f001 fe22 	bl	8006338 <I2C_MasterRequestRead>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1b8      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d113      	bne.n	800472e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e18c      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	2b01      	cmp	r3, #1
 8004734:	d11b      	bne.n	800476e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e16c      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	2b02      	cmp	r3, #2
 8004774:	d11b      	bne.n	80047ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004784:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	e14c      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047d4:	e138      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b03      	cmp	r3, #3
 80047dc:	f200 80f1 	bhi.w	80049c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d123      	bne.n	8004830 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f002 f8a3 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e139      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800482e:	e10b      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b02      	cmp	r3, #2
 8004836:	d14e      	bne.n	80048d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2200      	movs	r2, #0
 8004840:	4906      	ldr	r1, [pc, #24]	; (800485c <HAL_I2C_Master_Receive+0x22c>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f001 feee 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e10e      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
 8004852:	bf00      	nop
 8004854:	00100002 	.word	0x00100002
 8004858:	ffff0000 	.word	0xffff0000
 800485c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d4:	e0b8      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	4966      	ldr	r1, [pc, #408]	; (8004a78 <HAL_I2C_Master_Receive+0x448>)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f001 fe9f 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0bf      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	494f      	ldr	r1, [pc, #316]	; (8004a78 <HAL_I2C_Master_Receive+0x448>)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 fe71 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e091      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c0:	e042      	b.n	8004a48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f001 ffb6 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e04c      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d118      	bne.n	8004a48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f aec2 	bne.w	80047d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	00010004 	.word	0x00010004

08004a7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d003      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x38>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	f040 80c1 	bne.w	8004c36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_I2C_EV_IRQHandler+0x6e>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ad4:	d003      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x62>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_EV_IRQHandler+0x66>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_I2C_EV_IRQHandler+0x68>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f000 8132 	beq.w	8004d4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_I2C_EV_IRQHandler+0x92>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f001 ff9e 	bl	8006a42 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fd79 	bl	80055fe <I2C_Master_SB>
 8004b0c:	e092      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0xb2>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fdef 	bl	800570a <I2C_Master_ADD10>
 8004b2c:	e082      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0xd2>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	0a5b      	lsrs	r3, r3, #9
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe09 	bl	800575e <I2C_Master_ADDR>
 8004b4c:	e072      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03b      	beq.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b68:	f000 80f3 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	09db      	lsrs	r3, r3, #7
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9f3 	bl	8004f7c <I2C_MasterTransmit_TXE>
 8004b96:	e04d      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80d6 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80cf 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	2b21      	cmp	r3, #33	; 0x21
 8004bb8:	d103      	bne.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa7a 	bl	80050b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bc0:	e0c7      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	f040 80c4 	bne.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fae8 	bl	80051a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd0:	e0bf      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	f000 80b7 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00f      	beq.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	0a9b      	lsrs	r3, r3, #10
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb5d 	bl	80052c8 <I2C_MasterReceive_RXNE>
 8004c0e:	e011      	b.n	8004c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 809a 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a5b      	lsrs	r3, r3, #9
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8093 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fbfc 	bl	800542a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c32:	e08e      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c34:	e08d      	b.n	8004d52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e007      	b.n	8004c58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_I2C_EV_IRQHandler+0x20e>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ffba 	bl	8005bfc <I2C_Slave_ADDR>
 8004c88:	e066      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_I2C_EV_IRQHandler+0x22e>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fff4 	bl	8005c90 <I2C_Slave_STOPF>
 8004ca8:	e056      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	2b21      	cmp	r3, #33	; 0x21
 8004cae:	d002      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	2b29      	cmp	r3, #41	; 0x29
 8004cb4:	d125      	bne.n	8004d02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	09db      	lsrs	r3, r3, #7
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00f      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	0a9b      	lsrs	r3, r3, #10
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fed0 	bl	8005a80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce0:	e039      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d033      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02d      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fefd 	bl	8005afa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d00:	e029      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00f      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	0a9b      	lsrs	r3, r3, #10
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff08 	bl	8005b3c <I2C_SlaveReceive_RXNE>
 8004d2c:	e014      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 ff36 	bl	8005bb8 <I2C_SlaveReceive_BTF>
 8004d4c:	e004      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <HAL_I2C_ER_IRQHandler+0x4e>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004daa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	0a5b      	lsrs	r3, r3, #9
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x78>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004dd4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	0a9b      	lsrs	r3, r3, #10
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03f      	beq.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d039      	beq.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004dee:	7efb      	ldrb	r3, [r7, #27]
 8004df0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e08:	7ebb      	ldrb	r3, [r7, #26]
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d112      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b21      	cmp	r3, #33	; 0x21
 8004e18:	d008      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	2b29      	cmp	r3, #41	; 0x29
 8004e1e:	d005      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0xce>
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	2b28      	cmp	r3, #40	; 0x28
 8004e24:	d106      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b21      	cmp	r3, #33	; 0x21
 8004e2a:	d103      	bne.n	8004e34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f85f 	bl	8005ef0 <I2C_Slave_AF>
 8004e32:	e016      	b.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e46:	7efb      	ldrb	r3, [r7, #27]
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d002      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0xf4>
 8004e4c:	7efb      	ldrb	r3, [r7, #27]
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d107      	bne.n	8004e62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	0adb      	lsrs	r3, r3, #11
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x12e>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 f896 	bl	8005fd0 <I2C_ITError>
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d150      	bne.n	8005044 <I2C_MasterTransmit_TXE+0xc8>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b21      	cmp	r3, #33	; 0x21
 8004fa6:	d14d      	bne.n	8005044 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d01d      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d01a      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fba:	d016      	beq.n	8004fea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2211      	movs	r2, #17
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff62 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fe8:	e060      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d107      	bne.n	8005034 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff7d 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005032:	e03b      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff35 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005042:	e033      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b21      	cmp	r3, #33	; 0x21
 8005048:	d005      	beq.n	8005056 <I2C_MasterTransmit_TXE+0xda>
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d12d      	bne.n	80050ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b22      	cmp	r3, #34	; 0x22
 8005054:	d12a      	bne.n	80050ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005070:	e01c      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d103      	bne.n	8005086 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f88e 	bl	80051a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005084:	e012      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050aa:	e7ff      	b.n	80050ac <I2C_MasterTransmit_TXE+0x130>
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b21      	cmp	r3, #33	; 0x21
 80050cc:	d164      	bne.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050fc:	e04c      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d01d      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b20      	cmp	r3, #32
 8005108:	d01a      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005110:	d016      	beq.n	8005140 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005120:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2211      	movs	r2, #17
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff feb7 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
}
 800513e:	e02b      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d107      	bne.n	800518a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fed2 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
}
 8005188:	e006      	b.n	8005198 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe8a 	bl	8004eac <HAL_I2C_MasterTxCpltCallback>
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11d      	bne.n	80051f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10b      	bne.n	80051d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051d6:	e073      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	b29b      	uxth	r3, r3
 80051de:	121b      	asrs	r3, r3, #8
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f2:	e065      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10b      	bne.n	8005214 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005212:	e055      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	2b02      	cmp	r3, #2
 800521a:	d151      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	d10d      	bne.n	800523e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800523c:	e040      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b21      	cmp	r3, #33	; 0x21
 800524c:	d112      	bne.n	8005274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005272:	e025      	b.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d120      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b21      	cmp	r3, #33	; 0x21
 8005282:	d11d      	bne.n	80052c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005292:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe36 	bl	8004f2c <HAL_I2C_MemTxCpltCallback>
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b22      	cmp	r3, #34	; 0x22
 80052da:	f040 80a2 	bne.w	8005422 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d921      	bls.n	8005330 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b03      	cmp	r3, #3
 800531a:	f040 8082 	bne.w	8005422 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800532e:	e078      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2b02      	cmp	r3, #2
 8005336:	d074      	beq.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d002      	beq.n	8005344 <I2C_MasterReceive_RXNE+0x7c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d16e      	bne.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 fac5 	bl	80068d4 <I2C_WaitOnSTOPRequestThroughIT>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d142      	bne.n	80053d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800536e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10a      	bne.n	80053c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fdc1 	bl	8004f40 <HAL_I2C_MemRxCpltCallback>
}
 80053be:	e030      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2212      	movs	r2, #18
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fd76 	bl	8004ec0 <HAL_I2C_MasterRxCpltCallback>
}
 80053d4:	e025      	b.n	8005422 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fd99 	bl	8004f54 <HAL_I2C_ErrorCallback>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b04      	cmp	r3, #4
 8005440:	d11b      	bne.n	800547a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005478:	e0bd      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d129      	bne.n	80054d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005492:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00a      	beq.n	80054b0 <I2C_MasterReceive_BTF+0x86>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d007      	beq.n	80054b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054d6:	e08e      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d176      	bne.n	80055d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d002      	beq.n	80054ee <I2C_MasterReceive_BTF+0xc4>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d108      	bne.n	8005500 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e019      	b.n	8005534 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d002      	beq.n	800550c <I2C_MasterReceive_BTF+0xe2>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d108      	bne.n	800551e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e00a      	b.n	8005534 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b10      	cmp	r3, #16
 8005522:	d007      	beq.n	8005534 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005532:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800558e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d10a      	bne.n	80055ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fcc4 	bl	8004f40 <HAL_I2C_MemRxCpltCallback>
}
 80055b8:	e01d      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2212      	movs	r2, #18
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fc79 	bl	8004ec0 <HAL_I2C_MasterRxCpltCallback>
}
 80055ce:	e012      	b.n	80055f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d117      	bne.n	8005642 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800562a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800562c:	e067      	b.n	80056fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
}
 8005640:	e05d      	b.n	80056fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d133      	bne.n	80056b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b21      	cmp	r3, #33	; 0x21
 8005656:	d109      	bne.n	800566c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	e008      	b.n	800567e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <I2C_Master_SB+0x92>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d032      	beq.n	80056fe <I2C_Master_SB+0x100>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02d      	beq.n	80056fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	605a      	str	r2, [r3, #4]
}
 80056b2:	e024      	b.n	80056fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10e      	bne.n	80056da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	11db      	asrs	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0306 	and.w	r3, r3, #6
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f063 030f 	orn	r3, r3, #15
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	611a      	str	r2, [r3, #16]
}
 80056d8:	e011      	b.n	80056fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10d      	bne.n	80056fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	11db      	asrs	r3, r3, #7
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0306 	and.w	r3, r3, #6
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f063 030e 	orn	r3, r3, #14
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <I2C_Master_ADD10+0x26>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d108      	bne.n	8005742 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <I2C_Master_ADD10+0x48>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005750:	605a      	str	r2, [r3, #4]
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b091      	sub	sp, #68	; 0x44
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b22      	cmp	r3, #34	; 0x22
 8005786:	f040 8169 	bne.w	8005a5c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <I2C_Master_ADDR+0x54>
 8005792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d10b      	bne.n	80057b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579a:	2300      	movs	r3, #0
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	e160      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11d      	bne.n	80057f6 <I2C_Master_ADDR+0x98>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057c2:	d118      	bne.n	80057f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50
 80057f4:	e13e      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005800:	2300      	movs	r3, #0
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e115      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	f040 808a 	bne.w	8005948 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800583a:	d137      	bne.n	80058ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585a:	d113      	bne.n	8005884 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586c:	2300      	movs	r3, #0
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	e0e7      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e0d3      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d02e      	beq.n	8005910 <I2C_Master_ADDR+0x1b2>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d02b      	beq.n	8005910 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	2b12      	cmp	r3, #18
 80058bc:	d102      	bne.n	80058c4 <I2C_Master_ADDR+0x166>
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d125      	bne.n	8005910 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d00e      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d00b      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d008      	beq.n	80058e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e007      	b.n	80058f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	e0a1      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e085      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d14d      	bne.n	80059ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2b04      	cmp	r3, #4
 8005956:	d016      	beq.n	8005986 <I2C_Master_ADDR+0x228>
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	2b02      	cmp	r3, #2
 800595c:	d013      	beq.n	8005986 <I2C_Master_ADDR+0x228>
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b10      	cmp	r3, #16
 8005962:	d010      	beq.n	8005986 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005972:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e007      	b.n	8005996 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005994:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a4:	d117      	bne.n	80059d6 <I2C_Master_ADDR+0x278>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ac:	d00b      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d008      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d005      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d002      	beq.n	80059c6 <I2C_Master_ADDR+0x268>
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d107      	bne.n	80059d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	e032      	b.n	8005a54 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0c:	d117      	bne.n	8005a3e <I2C_Master_ADDR+0x2e0>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a14:	d00b      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d008      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d005      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d002      	beq.n	8005a2e <I2C_Master_ADDR+0x2d0>
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d107      	bne.n	8005a3e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a5a:	e00b      	b.n	8005a74 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	e7ff      	b.n	8005a74 <I2C_Master_ADDR+0x316>
 8005a74:	bf00      	nop
 8005a76:	3744      	adds	r7, #68	; 0x44
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02b      	beq.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	781a      	ldrb	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d114      	bne.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b29      	cmp	r3, #41	; 0x29
 8005acc:	d111      	bne.n	8005af2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005adc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2228      	movs	r2, #40	; 0x28
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff f9f1 	bl	8004ed4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02c      	beq.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d114      	bne.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	d111      	bne.n	8005bb0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2228      	movs	r2, #40	; 0x28
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff f99c 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d012      	beq.n	8005bf0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c16:	2b28      	cmp	r3, #40	; 0x28
 8005c18:	d127      	bne.n	8005c6a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	81bb      	strh	r3, [r7, #12]
 8005c4c:	e002      	b.n	8005c54 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c5c:	89ba      	ldrh	r2, [r7, #12]
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff f94a 	bl	8004efc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c68:	e00e      	b.n	8005c88 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cec:	d172      	bne.n	8005dd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b22      	cmp	r3, #34	; 0x22
 8005cf2:	d002      	beq.n	8005cfa <I2C_Slave_STOPF+0x6a>
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf8:	d135      	bne.n	8005d66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd ff9e 	bl	8003c74 <HAL_DMA_GetState>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d049      	beq.n	8005dd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4a69      	ldr	r2, [pc, #420]	; (8005ee8 <I2C_Slave_STOPF+0x258>)
 8005d44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd fde6 	bl	800391c <HAL_DMA_Abort_IT>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d03d      	beq.n	8005dd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d64:	e035      	b.n	8005dd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd ff68 	bl	8003c74 <HAL_DMA_GetState>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d014      	beq.n	8005dd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <I2C_Slave_STOPF+0x258>)
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fd fdb0 	bl	800391c <HAL_DMA_Abort_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	e000      	b.n	8005dd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d03e      	beq.n	8005e5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d112      	bne.n	8005e12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d112      	bne.n	8005e46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f8b3 	bl	8005fd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e6a:	e039      	b.n	8005ee0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e70:	d109      	bne.n	8005e86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2228      	movs	r2, #40	; 0x28
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f831 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b28      	cmp	r3, #40	; 0x28
 8005e90:	d111      	bne.n	8005eb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a15      	ldr	r2, [pc, #84]	; (8005eec <I2C_Slave_STOPF+0x25c>)
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f832 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
}
 8005eb4:	e014      	b.n	8005ee0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	2b22      	cmp	r3, #34	; 0x22
 8005ebc:	d002      	beq.n	8005ec4 <I2C_Slave_STOPF+0x234>
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b22      	cmp	r3, #34	; 0x22
 8005ec2:	d10d      	bne.n	8005ee0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff f804 	bl	8004ee8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	080064d5 	.word	0x080064d5
 8005eec:	ffff0000 	.word	0xffff0000

08005ef0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d002      	beq.n	8005f12 <I2C_Slave_AF+0x22>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d129      	bne.n	8005f66 <I2C_Slave_AF+0x76>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b28      	cmp	r3, #40	; 0x28
 8005f16:	d126      	bne.n	8005f66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <I2C_Slave_AF+0xdc>)
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe ffda 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f64:	e02e      	b.n	8005fc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b21      	cmp	r3, #33	; 0x21
 8005f6a:	d126      	bne.n	8005fba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <I2C_Slave_AF+0xdc>)
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fe ff8e 	bl	8004ed4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fb8:	e004      	b.n	8005fc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fc2:	615a      	str	r2, [r3, #20]
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	ffff0000 	.word	0xffff0000

08005fd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d002      	beq.n	8005ff4 <I2C_ITError+0x24>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d10a      	bne.n	800600a <I2C_ITError+0x3a>
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b22      	cmp	r3, #34	; 0x22
 8005ff8:	d107      	bne.n	800600a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006008:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006010:	2b28      	cmp	r3, #40	; 0x28
 8006012:	d107      	bne.n	8006024 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2228      	movs	r2, #40	; 0x28
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006022:	e015      	b.n	8006050 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d00a      	beq.n	800604a <I2C_ITError+0x7a>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b60      	cmp	r3, #96	; 0x60
 8006038:	d007      	beq.n	800604a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605e:	d162      	bne.n	8006126 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	d020      	beq.n	80060c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	4a6a      	ldr	r2, [pc, #424]	; (800622c <I2C_ITError+0x25c>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd fc46 	bl	800391c <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8089 	beq.w	80061aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ba:	4610      	mov	r0, r2
 80060bc:	4798      	blx	r3
 80060be:	e074      	b.n	80061aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	4a59      	ldr	r2, [pc, #356]	; (800622c <I2C_ITError+0x25c>)
 80060c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fc25 	bl	800391c <HAL_DMA_Abort_IT>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d068      	beq.n	80061aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d10b      	bne.n	80060fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	e041      	b.n	80061aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b60      	cmp	r3, #96	; 0x60
 8006130:	d125      	bne.n	800617e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d10b      	bne.n	8006166 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fe fef6 	bl	8004f68 <HAL_I2C_AbortCpltCallback>
 800617c:	e015      	b.n	80061aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d10b      	bne.n	80061a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fe fed5 	bl	8004f54 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10e      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d113      	bne.n	8006224 <I2C_ITError+0x254>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b28      	cmp	r3, #40	; 0x28
 8006200:	d110      	bne.n	8006224 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <I2C_ITError+0x260>)
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe fe7a 	bl	8004f18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	080064d5 	.word	0x080064d5
 8006230:	ffff0000 	.word	0xffff0000

08006234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	460b      	mov	r3, r1
 8006242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d006      	beq.n	800625e <I2C_MasterRequestWrite+0x2a>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d003      	beq.n	800625e <I2C_MasterRequestWrite+0x2a>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800625c:	d108      	bne.n	8006270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e00b      	b.n	8006288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	2b12      	cmp	r3, #18
 8006276:	d107      	bne.n	8006288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f9c5 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ae:	d103      	bne.n	80062b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e035      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c4:	d108      	bne.n	80062d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062d4:	611a      	str	r2, [r3, #16]
 80062d6:	e01b      	b.n	8006310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062d8:	897b      	ldrh	r3, [r7, #10]
 80062da:	11db      	asrs	r3, r3, #7
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0306 	and.w	r3, r3, #6
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f063 030f 	orn	r3, r3, #15
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	490e      	ldr	r1, [pc, #56]	; (8006330 <I2C_MasterRequestWrite+0xfc>)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f9eb 	bl	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e010      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4907      	ldr	r1, [pc, #28]	; (8006334 <I2C_MasterRequestWrite+0x100>)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f9db 	bl	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	00010008 	.word	0x00010008
 8006334:	00010002 	.word	0x00010002

08006338 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	460b      	mov	r3, r1
 8006346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800635c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d006      	beq.n	8006372 <I2C_MasterRequestRead+0x3a>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d003      	beq.n	8006372 <I2C_MasterRequestRead+0x3a>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006370:	d108      	bne.n	8006384 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e00b      	b.n	800639c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2b11      	cmp	r3, #17
 800638a:	d107      	bne.n	800639c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800639a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f93b 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d103      	bne.n	80063cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e079      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d8:	d108      	bne.n	80063ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]
 80063ea:	e05f      	b.n	80064ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063ec:	897b      	ldrh	r3, [r7, #10]
 80063ee:	11db      	asrs	r3, r3, #7
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0306 	and.w	r3, r3, #6
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f063 030f 	orn	r3, r3, #15
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4930      	ldr	r1, [pc, #192]	; (80064cc <I2C_MasterRequestRead+0x194>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f961 	bl	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e054      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4929      	ldr	r1, [pc, #164]	; (80064d0 <I2C_MasterRequestRead+0x198>)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f951 	bl	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e044      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f8d9 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006486:	d103      	bne.n	8006490 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e017      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006494:	897b      	ldrh	r3, [r7, #10]
 8006496:	11db      	asrs	r3, r3, #7
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 0306 	and.w	r3, r3, #6
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f063 030e 	orn	r3, r3, #14
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4907      	ldr	r1, [pc, #28]	; (80064d0 <I2C_MasterRequestRead+0x198>)
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f90d 	bl	80066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	00010008 	.word	0x00010008
 80064d0:	00010002 	.word	0x00010002

080064d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064ee:	4b4b      	ldr	r3, [pc, #300]	; (800661c <I2C_DMAAbort+0x148>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	08db      	lsrs	r3, r3, #3
 80064f4:	4a4a      	ldr	r2, [pc, #296]	; (8006620 <I2C_DMAAbort+0x14c>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	0a1a      	lsrs	r2, r3, #8
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00da      	lsls	r2, r3, #3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800651a:	e00a      	b.n	8006532 <I2C_DMAAbort+0x5e>
    }
    count--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3b01      	subs	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d0ea      	beq.n	8006508 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	2200      	movs	r2, #0
 8006540:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	2200      	movs	r2, #0
 8006550:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	2200      	movs	r2, #0
 8006576:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	2200      	movs	r2, #0
 8006586:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b60      	cmp	r3, #96	; 0x60
 80065a2:	d10e      	bne.n	80065c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2200      	movs	r2, #0
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f7fe fcd4 	bl	8004f68 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065c0:	e027      	b.n	8006612 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065c2:	7cfb      	ldrb	r3, [r7, #19]
 80065c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065c8:	2b28      	cmp	r3, #40	; 0x28
 80065ca:	d117      	bne.n	80065fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2228      	movs	r2, #40	; 0x28
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065fa:	e007      	b.n	800660c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800660c:	6978      	ldr	r0, [r7, #20]
 800660e:	f7fe fca1 	bl	8004f54 <HAL_I2C_ErrorCallback>
}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000000 	.word	0x20000000
 8006620:	14f8b589 	.word	0x14f8b589

08006624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006634:	e025      	b.n	8006682 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d021      	beq.n	8006682 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fc fc99 	bl	8002f74 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d116      	bne.n	8006682 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e023      	b.n	80066ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10d      	bne.n	80066a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4013      	ands	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	e00c      	b.n	80066c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	43da      	mvns	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d0b6      	beq.n	8006636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066e0:	e051      	b.n	8006786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d123      	bne.n	800673a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006700:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800670a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f043 0204 	orr.w	r2, r3, #4
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e046      	b.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d021      	beq.n	8006786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006742:	f7fc fc17 	bl	8002f74 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d302      	bcc.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d116      	bne.n	8006786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e020      	b.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10c      	bne.n	80067aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	43da      	mvns	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bf14      	ite	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	2300      	moveq	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	e00b      	b.n	80067c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	43da      	mvns	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf14      	ite	ne
 80067bc:	2301      	movne	r3, #1
 80067be:	2300      	moveq	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d18d      	bne.n	80066e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067dc:	e02d      	b.n	800683a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f900 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e02d      	b.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d021      	beq.n	800683a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fc fbbd 	bl	8002f74 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d116      	bne.n	800683a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e007      	b.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006844:	2b80      	cmp	r3, #128	; 0x80
 8006846:	d1ca      	bne.n	80067de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800685e:	e02d      	b.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f8bf 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e02d      	b.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d021      	beq.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006878:	f7fc fb7c 	bl	8002f74 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d302      	bcc.n	800688e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d116      	bne.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e007      	b.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d1ca      	bne.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80068e0:	4b13      	ldr	r3, [pc, #76]	; (8006930 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	08db      	lsrs	r3, r3, #3
 80068e6:	4a13      	ldr	r2, [pc, #76]	; (8006934 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	0a1a      	lsrs	r2, r3, #8
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e008      	b.n	8006924 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800691c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006920:	d0e9      	beq.n	80068f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	20000000 	.word	0x20000000
 8006934:	14f8b589 	.word	0x14f8b589

08006938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006944:	e042      	b.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b10      	cmp	r3, #16
 8006952:	d119      	bne.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0210 	mvn.w	r2, #16
 800695c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e029      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006988:	f7fc faf4 	bl	8002f74 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d116      	bne.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e007      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d1b5      	bne.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fa:	d11b      	bne.n	8006a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f043 0204 	orr.w	r2, r3, #4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a52:	d103      	bne.n	8006a5c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a5a:	e007      	b.n	8006a6c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a64:	d102      	bne.n	8006a6c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a82:	2300      	movs	r3, #0
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a90:	6413      	str	r3, [r2, #64]	; 0x40
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <HAL_PWREx_EnableOverDrive+0x94>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006aa4:	f7fc fa66 	bl	8002f74 <HAL_GetTick>
 8006aa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006aaa:	e009      	b.n	8006ac0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006aac:	f7fc fa62 	bl	8002f74 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aba:	d901      	bls.n	8006ac0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e01f      	b.n	8006b00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ac0:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d1ee      	bne.n	8006aac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ad4:	f7fc fa4e 	bl	8002f74 <HAL_GetTick>
 8006ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ada:	e009      	b.n	8006af0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006adc:	f7fc fa4a 	bl	8002f74 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aea:	d901      	bls.n	8006af0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e007      	b.n	8006b00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <HAL_PWREx_EnableOverDrive+0x98>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afc:	d1ee      	bne.n	8006adc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	420e0040 	.word	0x420e0040
 8006b10:	40007000 	.word	0x40007000
 8006b14:	420e0044 	.word	0x420e0044

08006b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0cc      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b2c:	4b68      	ldr	r3, [pc, #416]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d90c      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b3a:	4b65      	ldr	r3, [pc, #404]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b42:	4b63      	ldr	r3, [pc, #396]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0b8      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b6c:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	4a58      	ldr	r2, [pc, #352]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b84:	4b53      	ldr	r3, [pc, #332]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4a52      	ldr	r2, [pc, #328]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b90:	4b50      	ldr	r3, [pc, #320]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	494d      	ldr	r1, [pc, #308]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d044      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d107      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	4b47      	ldr	r3, [pc, #284]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d119      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e07f      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d003      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd6:	4b3f      	ldr	r3, [pc, #252]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d109      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e06f      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be6:	4b3b      	ldr	r3, [pc, #236]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e067      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f023 0203 	bic.w	r2, r3, #3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4934      	ldr	r1, [pc, #208]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c08:	f7fc f9b4 	bl	8002f74 <HAL_GetTick>
 8006c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0e:	e00a      	b.n	8006c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c10:	f7fc f9b0 	bl	8002f74 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e04f      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c26:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 020c 	and.w	r2, r3, #12
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d1eb      	bne.n	8006c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d20c      	bcs.n	8006c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c46:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e032      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c6c:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4916      	ldr	r1, [pc, #88]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	490e      	ldr	r1, [pc, #56]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c9e:	f000 fb7f 	bl	80073a0 <HAL_RCC_GetSysClockFreq>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	091b      	lsrs	r3, r3, #4
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	490a      	ldr	r1, [pc, #40]	; (8006cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb0:	5ccb      	ldrb	r3, [r1, r3]
 8006cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb6:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <HAL_RCC_ClockConfig+0x1c4>)
 8006cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fc f914 	bl	8002eec <HAL_InitTick>

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40023c00 	.word	0x40023c00
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	0800ca34 	.word	0x0800ca34
 8006cdc:	20000000 	.word	0x20000000
 8006ce0:	20000004 	.word	0x20000004

08006ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce8:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cea:	681b      	ldr	r3, [r3, #0]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000000 	.word	0x20000000

08006cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d00:	f7ff fff0 	bl	8006ce4 <HAL_RCC_GetHCLKFreq>
 8006d04:	4602      	mov	r2, r0
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	0a9b      	lsrs	r3, r3, #10
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	4903      	ldr	r1, [pc, #12]	; (8006d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d12:	5ccb      	ldrb	r3, [r1, r3]
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	0800ca44 	.word	0x0800ca44

08006d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d28:	f7ff ffdc 	bl	8006ce4 <HAL_RCC_GetHCLKFreq>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	0b5b      	lsrs	r3, r3, #13
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	4903      	ldr	r1, [pc, #12]	; (8006d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d3a:	5ccb      	ldrb	r3, [r1, r3]
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40023800 	.word	0x40023800
 8006d48:	0800ca44 	.word	0x0800ca44

08006d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	; 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006d84:	4b6f      	ldr	r3, [pc, #444]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	496c      	ldr	r1, [pc, #432]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006da2:	2301      	movs	r3, #1
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d010      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006db2:	4b64      	ldr	r3, [pc, #400]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc0:	4960      	ldr	r1, [pc, #384]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006de0:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	4955      	ldr	r1, [pc, #340]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006e00:	2301      	movs	r3, #1
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d017      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e1c:	4b49      	ldr	r3, [pc, #292]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	4946      	ldr	r1, [pc, #280]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 808a 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e68:	6413      	str	r3, [r2, #64]	; 0x40
 8006e6a:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e76:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a33      	ldr	r2, [pc, #204]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e82:	f7fc f877 	bl	8002f74 <HAL_GetTick>
 8006e86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e88:	e008      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e8a:	f7fc f873 	bl	8002f74 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e278      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ea8:	4b26      	ldr	r3, [pc, #152]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02f      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d028      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ed0:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ee2:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d114      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006eee:	f7fc f841 	bl	8002f74 <HAL_GetTick>
 8006ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef6:	f7fc f83d 	bl	8002f74 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e240      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0ee      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f24:	d114      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3a:	4902      	ldr	r1, [pc, #8]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	608b      	str	r3, [r1, #8]
 8006f40:	e00c      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006f42:	bf00      	nop
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	42470e40 	.word	0x42470e40
 8006f50:	4b4a      	ldr	r3, [pc, #296]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4a49      	ldr	r2, [pc, #292]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f5a:	6093      	str	r3, [r2, #8]
 8006f5c:	4b47      	ldr	r3, [pc, #284]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f68:	4944      	ldr	r1, [pc, #272]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006f80:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006f82:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006f90:	4b3a      	ldr	r3, [pc, #232]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	4937      	ldr	r1, [pc, #220]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fb2:	4b32      	ldr	r3, [pc, #200]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc0:	492e      	ldr	r1, [pc, #184]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006fd4:	4b29      	ldr	r3, [pc, #164]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	4926      	ldr	r1, [pc, #152]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007004:	4b1d      	ldr	r3, [pc, #116]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800700a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	491a      	ldr	r1, [pc, #104]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007026:	4b15      	ldr	r3, [pc, #84]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007034:	4911      	ldr	r1, [pc, #68]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007044:	d101      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007046:	2301      	movs	r3, #1
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d005      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007058:	f040 80ff 	bne.w	800725a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007062:	f7fb ff87 	bl	8002f74 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007068:	e00e      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800706a:	f7fb ff83 	bl	8002f74 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d907      	bls.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e188      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800707c:	40023800 	.word	0x40023800
 8007080:	424711e0 	.word	0x424711e0
 8007084:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007088:	4b7e      	ldr	r3, [pc, #504]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1ea      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d028      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d124      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80070bc:	4b71      	ldr	r3, [pc, #452]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	3301      	adds	r3, #1
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070ce:	4b6d      	ldr	r3, [pc, #436]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	0e1b      	lsrs	r3, r3, #24
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	019b      	lsls	r3, r3, #6
 80070e6:	431a      	orrs	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	3b01      	subs	r3, #1
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	431a      	orrs	r2, r3
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	071b      	lsls	r3, r3, #28
 80070fe:	4961      	ldr	r1, [pc, #388]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711a:	d00a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007124:	2b00      	cmp	r3, #0
 8007126:	d035      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007130:	d130      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007132:	4b54      	ldr	r3, [pc, #336]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	3301      	adds	r3, #1
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007144:	4b4f      	ldr	r3, [pc, #316]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714a:	0f1b      	lsrs	r3, r3, #28
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	019b      	lsls	r3, r3, #6
 800715c:	431a      	orrs	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	3b01      	subs	r3, #1
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	061b      	lsls	r3, r3, #24
 800716e:	431a      	orrs	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	071b      	lsls	r3, r3, #28
 8007174:	4943      	ldr	r1, [pc, #268]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800717c:	4b41      	ldr	r3, [pc, #260]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800717e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007182:	f023 021f 	bic.w	r2, r3, #31
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	493d      	ldr	r1, [pc, #244]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719c:	2b00      	cmp	r3, #0
 800719e:	d029      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a8:	d124      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b0:	0c1b      	lsrs	r3, r3, #16
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	3301      	adds	r3, #1
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071bc:	4b31      	ldr	r3, [pc, #196]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c2:	0f1b      	lsrs	r3, r3, #28
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	019b      	lsls	r3, r3, #6
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	085b      	lsrs	r3, r3, #1
 80071dc:	3b01      	subs	r3, #1
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	431a      	orrs	r2, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	431a      	orrs	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	4925      	ldr	r1, [pc, #148]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d016      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	019b      	lsls	r3, r3, #6
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	3b01      	subs	r3, #1
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	071b      	lsls	r3, r3, #28
 8007226:	4917      	ldr	r1, [pc, #92]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007228:	4313      	orrs	r3, r2
 800722a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007234:	f7fb fe9e 	bl	8002f74 <HAL_GetTick>
 8007238:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800723a:	e008      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800723c:	f7fb fe9a 	bl	8002f74 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e09f      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800724e:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f0      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	2b01      	cmp	r3, #1
 800725e:	f040 8095 	bne.w	800738c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007262:	4b0a      	ldr	r3, [pc, #40]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007268:	f7fb fe84 	bl	8002f74 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800726e:	e00f      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007270:	f7fb fe80 	bl	8002f74 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d908      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e085      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007282:	bf00      	nop
 8007284:	40023800 	.word	0x40023800
 8007288:	42470068 	.word	0x42470068
 800728c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007290:	4b41      	ldr	r3, [pc, #260]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800729c:	d0e8      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d02b      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d127      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80072c6:	4b34      	ldr	r3, [pc, #208]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	3301      	adds	r3, #1
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699a      	ldr	r2, [r3, #24]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	019b      	lsls	r3, r3, #6
 80072e2:	431a      	orrs	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	3b01      	subs	r3, #1
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	061b      	lsls	r3, r3, #24
 80072f4:	4928      	ldr	r1, [pc, #160]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80072fc:	4b26      	ldr	r3, [pc, #152]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007302:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	3b01      	subs	r3, #1
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	4922      	ldr	r1, [pc, #136]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01d      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800732a:	d118      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800732c:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007332:	0e1b      	lsrs	r3, r3, #24
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	019b      	lsls	r3, r3, #6
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	3b01      	subs	r3, #1
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	4910      	ldr	r1, [pc, #64]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007364:	f7fb fe06 	bl	8002f74 <HAL_GetTick>
 8007368:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800736a:	e008      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800736c:	f7fb fe02 	bl	8002f74 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e007      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800738a:	d1ef      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3730      	adds	r7, #48	; 0x30
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40023800 	.word	0x40023800
 800739c:	42470070 	.word	0x42470070

080073a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a4:	b088      	sub	sp, #32
 80073a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073bc:	4bce      	ldr	r3, [pc, #824]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 030c 	and.w	r3, r3, #12
 80073c4:	2b0c      	cmp	r3, #12
 80073c6:	f200 818d 	bhi.w	80076e4 <HAL_RCC_GetSysClockFreq+0x344>
 80073ca:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	08007405 	.word	0x08007405
 80073d4:	080076e5 	.word	0x080076e5
 80073d8:	080076e5 	.word	0x080076e5
 80073dc:	080076e5 	.word	0x080076e5
 80073e0:	0800740b 	.word	0x0800740b
 80073e4:	080076e5 	.word	0x080076e5
 80073e8:	080076e5 	.word	0x080076e5
 80073ec:	080076e5 	.word	0x080076e5
 80073f0:	08007411 	.word	0x08007411
 80073f4:	080076e5 	.word	0x080076e5
 80073f8:	080076e5 	.word	0x080076e5
 80073fc:	080076e5 	.word	0x080076e5
 8007400:	08007585 	.word	0x08007585
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007404:	4bbd      	ldr	r3, [pc, #756]	; (80076fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8007406:	61bb      	str	r3, [r7, #24]
       break;
 8007408:	e16f      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800740a:	4bbd      	ldr	r3, [pc, #756]	; (8007700 <HAL_RCC_GetSysClockFreq+0x360>)
 800740c:	61bb      	str	r3, [r7, #24]
      break;
 800740e:	e16c      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007410:	4bb9      	ldr	r3, [pc, #740]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007418:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800741a:	4bb7      	ldr	r3, [pc, #732]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d053      	beq.n	80074ce <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007426:	4bb4      	ldr	r3, [pc, #720]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	099b      	lsrs	r3, r3, #6
 800742c:	461a      	mov	r2, r3
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	ea02 0400 	and.w	r4, r2, r0
 800743e:	603c      	str	r4, [r7, #0]
 8007440:	400b      	ands	r3, r1
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	014b      	lsls	r3, r1, #5
 8007456:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800745a:	0142      	lsls	r2, r0, #5
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	4623      	mov	r3, r4
 8007462:	1ac0      	subs	r0, r0, r3
 8007464:	462b      	mov	r3, r5
 8007466:	eb61 0103 	sbc.w	r1, r1, r3
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	018b      	lsls	r3, r1, #6
 8007474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007478:	0182      	lsls	r2, r0, #6
 800747a:	1a12      	subs	r2, r2, r0
 800747c:	eb63 0301 	sbc.w	r3, r3, r1
 8007480:	f04f 0000 	mov.w	r0, #0
 8007484:	f04f 0100 	mov.w	r1, #0
 8007488:	00d9      	lsls	r1, r3, #3
 800748a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800748e:	00d0      	lsls	r0, r2, #3
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4621      	mov	r1, r4
 8007496:	1852      	adds	r2, r2, r1
 8007498:	4629      	mov	r1, r5
 800749a:	eb43 0101 	adc.w	r1, r3, r1
 800749e:	460b      	mov	r3, r1
 80074a0:	f04f 0000 	mov.w	r0, #0
 80074a4:	f04f 0100 	mov.w	r1, #0
 80074a8:	0259      	lsls	r1, r3, #9
 80074aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80074ae:	0250      	lsls	r0, r2, #9
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	f7f9 fba2 	bl	8000c08 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4613      	mov	r3, r2
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e04c      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ce:	4b8a      	ldr	r3, [pc, #552]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	099b      	lsrs	r3, r3, #6
 80074d4:	461a      	mov	r2, r3
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074de:	f04f 0100 	mov.w	r1, #0
 80074e2:	ea02 0a00 	and.w	sl, r2, r0
 80074e6:	ea03 0b01 	and.w	fp, r3, r1
 80074ea:	4650      	mov	r0, sl
 80074ec:	4659      	mov	r1, fp
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	014b      	lsls	r3, r1, #5
 80074f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074fc:	0142      	lsls	r2, r0, #5
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	ebb0 000a 	subs.w	r0, r0, sl
 8007506:	eb61 010b 	sbc.w	r1, r1, fp
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	018b      	lsls	r3, r1, #6
 8007514:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007518:	0182      	lsls	r2, r0, #6
 800751a:	1a12      	subs	r2, r2, r0
 800751c:	eb63 0301 	sbc.w	r3, r3, r1
 8007520:	f04f 0000 	mov.w	r0, #0
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	00d9      	lsls	r1, r3, #3
 800752a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800752e:	00d0      	lsls	r0, r2, #3
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	eb12 020a 	adds.w	r2, r2, sl
 8007538:	eb43 030b 	adc.w	r3, r3, fp
 800753c:	f04f 0000 	mov.w	r0, #0
 8007540:	f04f 0100 	mov.w	r1, #0
 8007544:	0299      	lsls	r1, r3, #10
 8007546:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800754a:	0290      	lsls	r0, r2, #10
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	461a      	mov	r2, r3
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	f7f9 fb54 	bl	8000c08 <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4613      	mov	r3, r2
 8007566:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007568:	4b63      	ldr	r3, [pc, #396]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	3301      	adds	r3, #1
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	61bb      	str	r3, [r7, #24]
      break;
 8007582:	e0b2      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007584:	4b5c      	ldr	r3, [pc, #368]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800758c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800758e:	4b5a      	ldr	r3, [pc, #360]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d04d      	beq.n	8007636 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800759a:	4b57      	ldr	r3, [pc, #348]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	099b      	lsrs	r3, r3, #6
 80075a0:	461a      	mov	r2, r3
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075aa:	f04f 0100 	mov.w	r1, #0
 80075ae:	ea02 0800 	and.w	r8, r2, r0
 80075b2:	ea03 0901 	and.w	r9, r3, r1
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	014b      	lsls	r3, r1, #5
 80075c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075c8:	0142      	lsls	r2, r0, #5
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	ebb0 0008 	subs.w	r0, r0, r8
 80075d2:	eb61 0109 	sbc.w	r1, r1, r9
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	018b      	lsls	r3, r1, #6
 80075e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075e4:	0182      	lsls	r2, r0, #6
 80075e6:	1a12      	subs	r2, r2, r0
 80075e8:	eb63 0301 	sbc.w	r3, r3, r1
 80075ec:	f04f 0000 	mov.w	r0, #0
 80075f0:	f04f 0100 	mov.w	r1, #0
 80075f4:	00d9      	lsls	r1, r3, #3
 80075f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075fa:	00d0      	lsls	r0, r2, #3
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	eb12 0208 	adds.w	r2, r2, r8
 8007604:	eb43 0309 	adc.w	r3, r3, r9
 8007608:	f04f 0000 	mov.w	r0, #0
 800760c:	f04f 0100 	mov.w	r1, #0
 8007610:	0259      	lsls	r1, r3, #9
 8007612:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007616:	0250      	lsls	r0, r2, #9
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4610      	mov	r0, r2
 800761e:	4619      	mov	r1, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	461a      	mov	r2, r3
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	f7f9 faee 	bl	8000c08 <__aeabi_uldivmod>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4613      	mov	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e04a      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007636:	4b30      	ldr	r3, [pc, #192]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	099b      	lsrs	r3, r3, #6
 800763c:	461a      	mov	r2, r3
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007646:	f04f 0100 	mov.w	r1, #0
 800764a:	ea02 0400 	and.w	r4, r2, r0
 800764e:	ea03 0501 	and.w	r5, r3, r1
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	014b      	lsls	r3, r1, #5
 8007660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007664:	0142      	lsls	r2, r0, #5
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	1b00      	subs	r0, r0, r4
 800766c:	eb61 0105 	sbc.w	r1, r1, r5
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	018b      	lsls	r3, r1, #6
 800767a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800767e:	0182      	lsls	r2, r0, #6
 8007680:	1a12      	subs	r2, r2, r0
 8007682:	eb63 0301 	sbc.w	r3, r3, r1
 8007686:	f04f 0000 	mov.w	r0, #0
 800768a:	f04f 0100 	mov.w	r1, #0
 800768e:	00d9      	lsls	r1, r3, #3
 8007690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007694:	00d0      	lsls	r0, r2, #3
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	1912      	adds	r2, r2, r4
 800769c:	eb45 0303 	adc.w	r3, r5, r3
 80076a0:	f04f 0000 	mov.w	r0, #0
 80076a4:	f04f 0100 	mov.w	r1, #0
 80076a8:	0299      	lsls	r1, r3, #10
 80076aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80076ae:	0290      	lsls	r0, r2, #10
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	f7f9 faa2 	bl	8000c08 <__aeabi_uldivmod>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4613      	mov	r3, r2
 80076ca:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	0f1b      	lsrs	r3, r3, #28
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	61bb      	str	r3, [r7, #24]
      break;
 80076e2:	e002      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetSysClockFreq+0x35c>)
 80076e6:	61bb      	str	r3, [r7, #24]
      break;
 80076e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ea:	69bb      	ldr	r3, [r7, #24]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800
 80076fc:	00f42400 	.word	0x00f42400
 8007700:	007a1200 	.word	0x007a1200

08007704 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e28d      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8083 	beq.w	800782a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007724:	4b94      	ldr	r3, [pc, #592]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 030c 	and.w	r3, r3, #12
 800772c:	2b04      	cmp	r3, #4
 800772e:	d019      	beq.n	8007764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007730:	4b91      	ldr	r3, [pc, #580]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007738:	2b08      	cmp	r3, #8
 800773a:	d106      	bne.n	800774a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800773c:	4b8e      	ldr	r3, [pc, #568]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007748:	d00c      	beq.n	8007764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800774a:	4b8b      	ldr	r3, [pc, #556]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007752:	2b0c      	cmp	r3, #12
 8007754:	d112      	bne.n	800777c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007756:	4b88      	ldr	r3, [pc, #544]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800775e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007762:	d10b      	bne.n	800777c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007764:	4b84      	ldr	r3, [pc, #528]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d05b      	beq.n	8007828 <HAL_RCC_OscConfig+0x124>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d157      	bne.n	8007828 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e25a      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007784:	d106      	bne.n	8007794 <HAL_RCC_OscConfig+0x90>
 8007786:	4b7c      	ldr	r3, [pc, #496]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a7b      	ldr	r2, [pc, #492]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800778c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e01d      	b.n	80077d0 <HAL_RCC_OscConfig+0xcc>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779c:	d10c      	bne.n	80077b8 <HAL_RCC_OscConfig+0xb4>
 800779e:	4b76      	ldr	r3, [pc, #472]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a75      	ldr	r2, [pc, #468]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b73      	ldr	r3, [pc, #460]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a72      	ldr	r2, [pc, #456]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e00b      	b.n	80077d0 <HAL_RCC_OscConfig+0xcc>
 80077b8:	4b6f      	ldr	r3, [pc, #444]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a6e      	ldr	r2, [pc, #440]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4b6c      	ldr	r3, [pc, #432]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6b      	ldr	r2, [pc, #428]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d013      	beq.n	8007800 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fb fbcc 	bl	8002f74 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e0:	f7fb fbc8 	bl	8002f74 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e21f      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f2:	4b61      	ldr	r3, [pc, #388]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f0      	beq.n	80077e0 <HAL_RCC_OscConfig+0xdc>
 80077fe:	e014      	b.n	800782a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fb fbb8 	bl	8002f74 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007808:	f7fb fbb4 	bl	8002f74 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e20b      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800781a:	4b57      	ldr	r3, [pc, #348]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x104>
 8007826:	e000      	b.n	800782a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d06f      	beq.n	8007916 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007836:	4b50      	ldr	r3, [pc, #320]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b00      	cmp	r3, #0
 8007840:	d017      	beq.n	8007872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007842:	4b4d      	ldr	r3, [pc, #308]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800784a:	2b08      	cmp	r3, #8
 800784c:	d105      	bne.n	800785a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800784e:	4b4a      	ldr	r3, [pc, #296]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00b      	beq.n	8007872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785a:	4b47      	ldr	r3, [pc, #284]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007862:	2b0c      	cmp	r3, #12
 8007864:	d11c      	bne.n	80078a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007866:	4b44      	ldr	r3, [pc, #272]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d116      	bne.n	80078a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007872:	4b41      	ldr	r3, [pc, #260]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_RCC_OscConfig+0x186>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d001      	beq.n	800788a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e1d3      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788a:	4b3b      	ldr	r3, [pc, #236]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4937      	ldr	r1, [pc, #220]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	e03a      	b.n	8007916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d020      	beq.n	80078ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078a8:	4b34      	ldr	r3, [pc, #208]	; (800797c <HAL_RCC_OscConfig+0x278>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fb fb61 	bl	8002f74 <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b6:	f7fb fb5d 	bl	8002f74 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e1b4      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c8:	4b2b      	ldr	r3, [pc, #172]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f0      	beq.n	80078b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d4:	4b28      	ldr	r3, [pc, #160]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	4925      	ldr	r1, [pc, #148]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	600b      	str	r3, [r1, #0]
 80078e8:	e015      	b.n	8007916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <HAL_RCC_OscConfig+0x278>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7fb fb40 	bl	8002f74 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f8:	f7fb fb3c 	bl	8002f74 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e193      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f0      	bne.n	80078f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d036      	beq.n	8007990 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800792a:	4b15      	ldr	r3, [pc, #84]	; (8007980 <HAL_RCC_OscConfig+0x27c>)
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007930:	f7fb fb20 	bl	8002f74 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007938:	f7fb fb1c 	bl	8002f74 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e173      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800794a:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_RCC_OscConfig+0x274>)
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x234>
 8007956:	e01b      	b.n	8007990 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_RCC_OscConfig+0x27c>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795e:	f7fb fb09 	bl	8002f74 <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007964:	e00e      	b.n	8007984 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007966:	f7fb fb05 	bl	8002f74 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d907      	bls.n	8007984 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e15c      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
 8007978:	40023800 	.word	0x40023800
 800797c:	42470000 	.word	0x42470000
 8007980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007984:	4b8a      	ldr	r3, [pc, #552]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1ea      	bne.n	8007966 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8097 	beq.w	8007acc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079a2:	4b83      	ldr	r3, [pc, #524]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10f      	bne.n	80079ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	4b7f      	ldr	r3, [pc, #508]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	4a7e      	ldr	r2, [pc, #504]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079bc:	6413      	str	r3, [r2, #64]	; 0x40
 80079be:	4b7c      	ldr	r3, [pc, #496]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ce:	4b79      	ldr	r3, [pc, #484]	; (8007bb4 <HAL_RCC_OscConfig+0x4b0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d118      	bne.n	8007a0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079da:	4b76      	ldr	r3, [pc, #472]	; (8007bb4 <HAL_RCC_OscConfig+0x4b0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a75      	ldr	r2, [pc, #468]	; (8007bb4 <HAL_RCC_OscConfig+0x4b0>)
 80079e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079e6:	f7fb fac5 	bl	8002f74 <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ec:	e008      	b.n	8007a00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ee:	f7fb fac1 	bl	8002f74 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e118      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a00:	4b6c      	ldr	r3, [pc, #432]	; (8007bb4 <HAL_RCC_OscConfig+0x4b0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d106      	bne.n	8007a22 <HAL_RCC_OscConfig+0x31e>
 8007a14:	4b66      	ldr	r3, [pc, #408]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	4a65      	ldr	r2, [pc, #404]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a20:	e01c      	b.n	8007a5c <HAL_RCC_OscConfig+0x358>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCC_OscConfig+0x340>
 8007a2a:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	4a60      	ldr	r2, [pc, #384]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a30:	f043 0304 	orr.w	r3, r3, #4
 8007a34:	6713      	str	r3, [r2, #112]	; 0x70
 8007a36:	4b5e      	ldr	r3, [pc, #376]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	4a5d      	ldr	r2, [pc, #372]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6713      	str	r3, [r2, #112]	; 0x70
 8007a42:	e00b      	b.n	8007a5c <HAL_RCC_OscConfig+0x358>
 8007a44:	4b5a      	ldr	r3, [pc, #360]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a48:	4a59      	ldr	r2, [pc, #356]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a50:	4b57      	ldr	r3, [pc, #348]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	4a56      	ldr	r2, [pc, #344]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a56:	f023 0304 	bic.w	r3, r3, #4
 8007a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d015      	beq.n	8007a90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a64:	f7fb fa86 	bl	8002f74 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a6a:	e00a      	b.n	8007a82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a6c:	f7fb fa82 	bl	8002f74 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e0d7      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a82:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0ee      	beq.n	8007a6c <HAL_RCC_OscConfig+0x368>
 8007a8e:	e014      	b.n	8007aba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fb fa70 	bl	8002f74 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a96:	e00a      	b.n	8007aae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a98:	f7fb fa6c 	bl	8002f74 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0c1      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aae:	4b40      	ldr	r3, [pc, #256]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ee      	bne.n	8007a98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d105      	bne.n	8007acc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac0:	4b3b      	ldr	r3, [pc, #236]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	4a3a      	ldr	r2, [pc, #232]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80ad 	beq.w	8007c30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ad6:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 030c 	and.w	r3, r3, #12
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d060      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d145      	bne.n	8007b76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aea:	4b33      	ldr	r3, [pc, #204]	; (8007bb8 <HAL_RCC_OscConfig+0x4b4>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af0:	f7fb fa40 	bl	8002f74 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af8:	f7fb fa3c 	bl	8002f74 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e093      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69da      	ldr	r2, [r3, #28]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	019b      	lsls	r3, r3, #6
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	071b      	lsls	r3, r3, #28
 8007b42:	491b      	ldr	r1, [pc, #108]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x4b4>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4e:	f7fb fa11 	bl	8002f74 <HAL_GetTick>
 8007b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b56:	f7fb fa0d 	bl	8002f74 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e064      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <HAL_RCC_OscConfig+0x452>
 8007b74:	e05c      	b.n	8007c30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <HAL_RCC_OscConfig+0x4b4>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7c:	f7fb f9fa 	bl	8002f74 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b84:	f7fb f9f6 	bl	8002f74 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e04d      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <HAL_RCC_OscConfig+0x4ac>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x480>
 8007ba2:	e045      	b.n	8007c30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e040      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	40007000 	.word	0x40007000
 8007bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <HAL_RCC_OscConfig+0x538>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d030      	beq.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d129      	bne.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d122      	bne.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d119      	bne.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	3b01      	subs	r3, #1
 8007c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d10f      	bne.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40023800 	.word	0x40023800

08007c40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e083      	b.n	8007d5a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7f5b      	ldrb	r3, [r3, #29]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d105      	bne.n	8007c68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fa f8de 	bl	8001e24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	22ca      	movs	r2, #202	; 0xca
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2253      	movs	r2, #83	; 0x53
 8007c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f897 	bl	8007db2 <RTC_EnterInitMode>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	22ff      	movs	r2, #255	; 0xff
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2204      	movs	r2, #4
 8007c96:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e05e      	b.n	8007d5a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6899      	ldr	r1, [r3, #8]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68d2      	ldr	r2, [r2, #12]
 8007cd6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6919      	ldr	r1, [r3, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	041a      	lsls	r2, r3, #16
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cfa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10e      	bne.n	8007d28 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f829 	bl	8007d62 <HAL_RTC_WaitForSynchro>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	22ff      	movs	r2, #255	; 0xff
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2204      	movs	r2, #4
 8007d22:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e018      	b.n	8007d5a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	22ff      	movs	r2, #255	; 0xff
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007d58:	2300      	movs	r3, #0
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d7e:	f7fb f8f9 	bl	8002f74 <HAL_GetTick>
 8007d82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d84:	e009      	b.n	8007d9a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d86:	f7fb f8f5 	bl	8002f74 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d94:	d901      	bls.n	8007d9a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e007      	b.n	8007daa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0ee      	beq.n	8007d86 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d119      	bne.n	8007e00 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dd6:	f7fb f8cd 	bl	8002f74 <HAL_GetTick>
 8007dda:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ddc:	e009      	b.n	8007df2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dde:	f7fb f8c9 	bl	8002f74 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dec:	d901      	bls.n	8007df2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e007      	b.n	8007e02 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ee      	beq.n	8007dde <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e041      	b.n	8007ea0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fa fcdd 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f000 fce1 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d001      	beq.n	8007ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e046      	b.n	8007f4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a23      	ldr	r2, [pc, #140]	; (8007f5c <HAL_TIM_Base_Start+0xb4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d022      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d01d      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a1f      	ldr	r2, [pc, #124]	; (8007f60 <HAL_TIM_Base_Start+0xb8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d018      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <HAL_TIM_Base_Start+0xbc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d013      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1c      	ldr	r2, [pc, #112]	; (8007f68 <HAL_TIM_Base_Start+0xc0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00e      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1b      	ldr	r2, [pc, #108]	; (8007f6c <HAL_TIM_Base_Start+0xc4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d009      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a19      	ldr	r2, [pc, #100]	; (8007f70 <HAL_TIM_Base_Start+0xc8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <HAL_TIM_Base_Start+0x70>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <HAL_TIM_Base_Start+0xcc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d111      	bne.n	8007f3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b06      	cmp	r3, #6
 8007f28:	d010      	beq.n	8007f4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f3a:	e007      	b.n	8007f4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40001800 	.word	0x40001800

08007f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d001      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e04e      	b.n	800802e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a23      	ldr	r2, [pc, #140]	; (800803c <HAL_TIM_Base_Start_IT+0xc4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d022      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fba:	d01d      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d018      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <HAL_TIM_Base_Start_IT+0xcc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1b      	ldr	r2, [pc, #108]	; (800804c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a19      	ldr	r2, [pc, #100]	; (8008050 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a18      	ldr	r2, [pc, #96]	; (8008054 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d111      	bne.n	800801c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b06      	cmp	r3, #6
 8008008:	d010      	beq.n	800802c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801a:	e007      	b.n	800802c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40010000 	.word	0x40010000
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40010400 	.word	0x40010400
 8008050:	40014000 	.word	0x40014000
 8008054:	40001800 	.word	0x40001800

08008058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e041      	b.n	80080ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d106      	bne.n	8008084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f839 	bl	80080f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f000 fbba 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_TIM_PWM_Start+0x24>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e022      	b.n	8008176 <HAL_TIM_PWM_Start+0x6a>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d109      	bne.n	800814a <HAL_TIM_PWM_Start+0x3e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b01      	cmp	r3, #1
 8008140:	bf14      	ite	ne
 8008142:	2301      	movne	r3, #1
 8008144:	2300      	moveq	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	e015      	b.n	8008176 <HAL_TIM_PWM_Start+0x6a>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d109      	bne.n	8008164 <HAL_TIM_PWM_Start+0x58>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e008      	b.n	8008176 <HAL_TIM_PWM_Start+0x6a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	bf14      	ite	ne
 8008170:	2301      	movne	r3, #1
 8008172:	2300      	moveq	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e07c      	b.n	8008278 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <HAL_TIM_PWM_Start+0x82>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800818c:	e013      	b.n	80081b6 <HAL_TIM_PWM_Start+0xaa>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d104      	bne.n	800819e <HAL_TIM_PWM_Start+0x92>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800819c:	e00b      	b.n	80081b6 <HAL_TIM_PWM_Start+0xaa>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d104      	bne.n	80081ae <HAL_TIM_PWM_Start+0xa2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ac:	e003      	b.n	80081b6 <HAL_TIM_PWM_Start+0xaa>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2202      	movs	r2, #2
 80081b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2201      	movs	r2, #1
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fe10 	bl	8008de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a2d      	ldr	r2, [pc, #180]	; (8008280 <HAL_TIM_PWM_Start+0x174>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIM_PWM_Start+0xcc>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2c      	ldr	r2, [pc, #176]	; (8008284 <HAL_TIM_PWM_Start+0x178>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d101      	bne.n	80081dc <HAL_TIM_PWM_Start+0xd0>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <HAL_TIM_PWM_Start+0xd2>
 80081dc:	2300      	movs	r3, #0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a22      	ldr	r2, [pc, #136]	; (8008280 <HAL_TIM_PWM_Start+0x174>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d022      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008204:	d01d      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <HAL_TIM_PWM_Start+0x17c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d018      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1d      	ldr	r2, [pc, #116]	; (800828c <HAL_TIM_PWM_Start+0x180>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <HAL_TIM_PWM_Start+0x184>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00e      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a16      	ldr	r2, [pc, #88]	; (8008284 <HAL_TIM_PWM_Start+0x178>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a18      	ldr	r2, [pc, #96]	; (8008294 <HAL_TIM_PWM_Start+0x188>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIM_PWM_Start+0x136>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a16      	ldr	r2, [pc, #88]	; (8008298 <HAL_TIM_PWM_Start+0x18c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d111      	bne.n	8008266 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d010      	beq.n	8008276 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008264:	e007      	b.n	8008276 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f042 0201 	orr.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40010000 	.word	0x40010000
 8008284:	40010400 	.word	0x40010400
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40014000 	.word	0x40014000
 8008298:	40001800 	.word	0x40001800

0800829c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d122      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d11b      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0202 	mvn.w	r2, #2
 80082c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa77 	bl	80087d2 <HAL_TIM_IC_CaptureCallback>
 80082e4:	e005      	b.n	80082f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa69 	bl	80087be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa7a 	bl	80087e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b04      	cmp	r3, #4
 8008304:	d122      	bne.n	800834c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b04      	cmp	r3, #4
 8008312:	d11b      	bne.n	800834c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0204 	mvn.w	r2, #4
 800831c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2202      	movs	r2, #2
 8008322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa4d 	bl	80087d2 <HAL_TIM_IC_CaptureCallback>
 8008338:	e005      	b.n	8008346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa3f 	bl	80087be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa50 	bl	80087e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b08      	cmp	r3, #8
 8008358:	d122      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b08      	cmp	r3, #8
 8008366:	d11b      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0208 	mvn.w	r2, #8
 8008370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2204      	movs	r2, #4
 8008376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa23 	bl	80087d2 <HAL_TIM_IC_CaptureCallback>
 800838c:	e005      	b.n	800839a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa15 	bl	80087be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa26 	bl	80087e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d122      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d11b      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0210 	mvn.w	r2, #16
 80083c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2208      	movs	r2, #8
 80083ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9f9 	bl	80087d2 <HAL_TIM_IC_CaptureCallback>
 80083e0:	e005      	b.n	80083ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9eb 	bl	80087be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9fc 	bl	80087e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d10e      	bne.n	8008420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d107      	bne.n	8008420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0201 	mvn.w	r2, #1
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7f9 fa46 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842a:	2b80      	cmp	r3, #128	; 0x80
 800842c:	d10e      	bne.n	800844c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	d107      	bne.n	800844c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fdca 	bl	8008fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d10e      	bne.n	8008478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d107      	bne.n	8008478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f9c1 	bl	80087fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b20      	cmp	r3, #32
 8008484:	d10e      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b20      	cmp	r3, #32
 8008492:	d107      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0220 	mvn.w	r2, #32
 800849c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fd94 	bl	8008fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0ae      	b.n	8008628 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b0c      	cmp	r3, #12
 80084d6:	f200 809f 	bhi.w	8008618 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008515 	.word	0x08008515
 80084e4:	08008619 	.word	0x08008619
 80084e8:	08008619 	.word	0x08008619
 80084ec:	08008619 	.word	0x08008619
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008619 	.word	0x08008619
 80084f8:	08008619 	.word	0x08008619
 80084fc:	08008619 	.word	0x08008619
 8008500:	08008597 	.word	0x08008597
 8008504:	08008619 	.word	0x08008619
 8008508:	08008619 	.word	0x08008619
 800850c:	08008619 	.word	0x08008619
 8008510:	080085d7 	.word	0x080085d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fa18 	bl	8008950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0208 	orr.w	r2, r2, #8
 800852e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0204 	bic.w	r2, r2, #4
 800853e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	691a      	ldr	r2, [r3, #16]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	619a      	str	r2, [r3, #24]
      break;
 8008552:	e064      	b.n	800861e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fa68 	bl	8008a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800856e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800857e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6999      	ldr	r1, [r3, #24]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	021a      	lsls	r2, r3, #8
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	619a      	str	r2, [r3, #24]
      break;
 8008594:	e043      	b.n	800861e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fabd 	bl	8008b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0208 	orr.w	r2, r2, #8
 80085b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0204 	bic.w	r2, r2, #4
 80085c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69d9      	ldr	r1, [r3, #28]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	61da      	str	r2, [r3, #28]
      break;
 80085d4:	e023      	b.n	800861e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fb11 	bl	8008c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69d9      	ldr	r1, [r3, #28]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	021a      	lsls	r2, r3, #8
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	61da      	str	r2, [r3, #28]
      break;
 8008616:	e002      	b.n	800861e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
      break;
 800861c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIM_ConfigClockSource+0x1c>
 8008648:	2302      	movs	r3, #2
 800864a:	e0b4      	b.n	80087b6 <HAL_TIM_ConfigClockSource+0x186>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800866a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008684:	d03e      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0xd4>
 8008686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868a:	f200 8087 	bhi.w	800879c <HAL_TIM_ConfigClockSource+0x16c>
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	f000 8086 	beq.w	80087a2 <HAL_TIM_ConfigClockSource+0x172>
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869a:	d87f      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b70      	cmp	r3, #112	; 0x70
 800869e:	d01a      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0xa6>
 80086a0:	2b70      	cmp	r3, #112	; 0x70
 80086a2:	d87b      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b60      	cmp	r3, #96	; 0x60
 80086a6:	d050      	beq.n	800874a <HAL_TIM_ConfigClockSource+0x11a>
 80086a8:	2b60      	cmp	r3, #96	; 0x60
 80086aa:	d877      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b50      	cmp	r3, #80	; 0x50
 80086ae:	d03c      	beq.n	800872a <HAL_TIM_ConfigClockSource+0xfa>
 80086b0:	2b50      	cmp	r3, #80	; 0x50
 80086b2:	d873      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d058      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x13a>
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d86f      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b30      	cmp	r3, #48	; 0x30
 80086be:	d064      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086c0:	2b30      	cmp	r3, #48	; 0x30
 80086c2:	d86b      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d060      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d867      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d05c      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d05a      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086d4:	e062      	b.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6899      	ldr	r1, [r3, #8]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f000 fb5d 	bl	8008da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	609a      	str	r2, [r3, #8]
      break;
 8008702:	e04f      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6899      	ldr	r1, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f000 fb46 	bl	8008da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008726:	609a      	str	r2, [r3, #8]
      break;
 8008728:	e03c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6859      	ldr	r1, [r3, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	461a      	mov	r2, r3
 8008738:	f000 faba 	bl	8008cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2150      	movs	r1, #80	; 0x50
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fb13 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008748:	e02c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	f000 fad9 	bl	8008d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2160      	movs	r1, #96	; 0x60
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fb03 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008768:	e01c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	461a      	mov	r2, r3
 8008778:	f000 fa9a 	bl	8008cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	4618      	mov	r0, r3
 8008784:	f000 faf3 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008788:	e00c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f000 faea 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 800879a:	e003      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e000      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a40      	ldr	r2, [pc, #256]	; (8008924 <TIM_Base_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3d      	ldr	r2, [pc, #244]	; (8008928 <TIM_Base_SetConfig+0x118>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3c      	ldr	r2, [pc, #240]	; (800892c <TIM_Base_SetConfig+0x11c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a3b      	ldr	r2, [pc, #236]	; (8008930 <TIM_Base_SetConfig+0x120>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a3a      	ldr	r2, [pc, #232]	; (8008934 <TIM_Base_SetConfig+0x124>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2f      	ldr	r2, [pc, #188]	; (8008924 <TIM_Base_SetConfig+0x114>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d02b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d027      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2c      	ldr	r2, [pc, #176]	; (8008928 <TIM_Base_SetConfig+0x118>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d023      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2b      	ldr	r2, [pc, #172]	; (800892c <TIM_Base_SetConfig+0x11c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d01f      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2a      	ldr	r2, [pc, #168]	; (8008930 <TIM_Base_SetConfig+0x120>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a29      	ldr	r2, [pc, #164]	; (8008934 <TIM_Base_SetConfig+0x124>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d017      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a28      	ldr	r2, [pc, #160]	; (8008938 <TIM_Base_SetConfig+0x128>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a27      	ldr	r2, [pc, #156]	; (800893c <TIM_Base_SetConfig+0x12c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00f      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a26      	ldr	r2, [pc, #152]	; (8008940 <TIM_Base_SetConfig+0x130>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <TIM_Base_SetConfig+0x134>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d007      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a24      	ldr	r2, [pc, #144]	; (8008948 <TIM_Base_SetConfig+0x138>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d003      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a23      	ldr	r2, [pc, #140]	; (800894c <TIM_Base_SetConfig+0x13c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d108      	bne.n	80088d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <TIM_Base_SetConfig+0x114>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_Base_SetConfig+0xf8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a0c      	ldr	r2, [pc, #48]	; (8008934 <TIM_Base_SetConfig+0x124>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d103      	bne.n	8008910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	615a      	str	r2, [r3, #20]
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40010000 	.word	0x40010000
 8008928:	40000400 	.word	0x40000400
 800892c:	40000800 	.word	0x40000800
 8008930:	40000c00 	.word	0x40000c00
 8008934:	40010400 	.word	0x40010400
 8008938:	40014000 	.word	0x40014000
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800
 8008944:	40001800 	.word	0x40001800
 8008948:	40001c00 	.word	0x40001c00
 800894c:	40002000 	.word	0x40002000

08008950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 0302 	bic.w	r3, r3, #2
 8008998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC1_SetConfig+0x64>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d10c      	bne.n	80089ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0308 	bic.w	r3, r3, #8
 80089ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f023 0304 	bic.w	r3, r3, #4
 80089cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_OC1_SetConfig+0x8e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a14      	ldr	r2, [pc, #80]	; (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d111      	bne.n	8008a02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	621a      	str	r2, [r3, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40010400 	.word	0x40010400

08008a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f023 0210 	bic.w	r2, r3, #16
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0320 	bic.w	r3, r3, #32
 8008a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC2_SetConfig+0x68>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <TIM_OC2_SetConfig+0xe8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10d      	bne.n	8008ab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC2_SetConfig+0x94>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <TIM_OC2_SetConfig+0xe8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d113      	bne.n	8008aec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40010400 	.word	0x40010400

08008b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <TIM_OC3_SetConfig+0xe0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_OC3_SetConfig+0x66>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <TIM_OC3_SetConfig+0xe4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10d      	bne.n	8008b9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <TIM_OC3_SetConfig+0xe0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_OC3_SetConfig+0x92>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a15      	ldr	r2, [pc, #84]	; (8008c00 <TIM_OC3_SetConfig+0xe4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d113      	bne.n	8008bd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	621a      	str	r2, [r3, #32]
}
 8008bf0:	bf00      	nop
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400

08008c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	031b      	lsls	r3, r3, #12
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a12      	ldr	r2, [pc, #72]	; (8008ca8 <TIM_OC4_SetConfig+0xa4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC4_SetConfig+0x68>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a11      	ldr	r2, [pc, #68]	; (8008cac <TIM_OC4_SetConfig+0xa8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d109      	bne.n	8008c80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	019b      	lsls	r3, r3, #6
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40010400 	.word	0x40010400

08008cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0201 	bic.w	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f023 030a 	bic.w	r3, r3, #10
 8008cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b087      	sub	sp, #28
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0210 	bic.w	r2, r3, #16
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	031b      	lsls	r3, r3, #12
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b085      	sub	sp, #20
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f043 0307 	orr.w	r3, r3, #7
 8008d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	609a      	str	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	021a      	lsls	r2, r3, #8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	609a      	str	r2, [r3, #8]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	2201      	movs	r2, #1
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1a      	ldr	r2, [r3, #32]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	43db      	mvns	r3, r3
 8008e06:	401a      	ands	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1a      	ldr	r2, [r3, #32]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e05a      	b.n	8008efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e94:	d01d      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d018      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1b      	ldr	r2, [pc, #108]	; (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1a      	ldr	r2, [pc, #104]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a18      	ldr	r2, [pc, #96]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a17      	ldr	r2, [pc, #92]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d10c      	bne.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40014000 	.word	0x40014000
 8008f24:	40001800 	.word	0x40001800

08008f28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e03d      	b.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e03f      	b.n	8009086 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7f9 fd26 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2224      	movs	r2, #36	; 0x24
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fddb 	bl	8009bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800904c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695a      	ldr	r2, [r3, #20]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800905c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800906c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b08a      	sub	sp, #40	; 0x28
 8009092:	af02      	add	r7, sp, #8
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b20      	cmp	r3, #32
 80090ac:	d17c      	bne.n	80091a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <HAL_UART_Transmit+0x2c>
 80090b4:	88fb      	ldrh	r3, [r7, #6]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e075      	b.n	80091aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_UART_Transmit+0x3e>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e06e      	b.n	80091aa <HAL_UART_Transmit+0x11c>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2221      	movs	r2, #33	; 0x21
 80090de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090e2:	f7f9 ff47 	bl	8002f74 <HAL_GetTick>
 80090e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	88fa      	ldrh	r2, [r7, #6]
 80090f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fc:	d108      	bne.n	8009110 <HAL_UART_Transmit+0x82>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d104      	bne.n	8009110 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e003      	b.n	8009118 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009120:	e02a      	b.n	8009178 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	2180      	movs	r1, #128	; 0x80
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fb1f 	bl	8009770 <UART_WaitOnFlagUntilTimeout>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e036      	b.n	80091aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10b      	bne.n	800915a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3302      	adds	r3, #2
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	e007      	b.n	800916a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	3301      	adds	r3, #1
 8009168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800917c:	b29b      	uxth	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1cf      	bne.n	8009122 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2200      	movs	r2, #0
 800918a:	2140      	movs	r1, #64	; 0x40
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 faef 	bl	8009770 <UART_WaitOnFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e006      	b.n	80091aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e000      	b.n	80091aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80091a8:	2302      	movs	r3, #2
  }
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4613      	mov	r3, r2
 80091be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d11d      	bne.n	8009208 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_UART_Receive_IT+0x26>
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e016      	b.n	800920a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d101      	bne.n	80091ea <HAL_UART_Receive_IT+0x38>
 80091e6:	2302      	movs	r3, #2
 80091e8:	e00f      	b.n	800920a <HAL_UART_Receive_IT+0x58>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	461a      	mov	r2, r3
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fb24 	bl	800984c <UART_Start_Receive_IT>
 8009204:	4603      	mov	r3, r0
 8009206:	e000      	b.n	800920a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009208:	2302      	movs	r3, #2
  }
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b0ba      	sub	sp, #232	; 0xe8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800923a:	2300      	movs	r3, #0
 800923c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009240:	2300      	movs	r3, #0
 8009242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10f      	bne.n	800927a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <HAL_UART_IRQHandler+0x66>
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fc03 	bl	8009a7e <UART_Receive_IT>
      return;
 8009278:	e256      	b.n	8009728 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800927a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 80de 	beq.w	8009440 <HAL_UART_IRQHandler+0x22c>
 8009284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009294:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80d1 	beq.w	8009440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800929e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <HAL_UART_IRQHandler+0xae>
 80092aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f043 0201 	orr.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <HAL_UART_IRQHandler+0xd2>
 80092ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f043 0202 	orr.w	r2, r3, #2
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <HAL_UART_IRQHandler+0xf6>
 80092f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f043 0204 	orr.w	r2, r3, #4
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800930a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d011      	beq.n	800933a <HAL_UART_IRQHandler+0x126>
 8009316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f043 0208 	orr.w	r2, r3, #8
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 81ed 	beq.w	800971e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d008      	beq.n	8009362 <HAL_UART_IRQHandler+0x14e>
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fb8e 	bl	8009a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b40      	cmp	r3, #64	; 0x40
 800936e:	bf0c      	ite	eq
 8009370:	2301      	moveq	r3, #1
 8009372:	2300      	movne	r3, #0
 8009374:	b2db      	uxtb	r3, r3
 8009376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d103      	bne.n	800938e <HAL_UART_IRQHandler+0x17a>
 8009386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d04f      	beq.n	800942e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa96 	bl	80098c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939e:	2b40      	cmp	r3, #64	; 0x40
 80093a0:	d141      	bne.n	8009426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3314      	adds	r3, #20
 80093a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3314      	adds	r3, #20
 80093ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1d9      	bne.n	80093a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d013      	beq.n	800941e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	4a7d      	ldr	r2, [pc, #500]	; (80095f0 <HAL_UART_IRQHandler+0x3dc>)
 80093fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	4618      	mov	r0, r3
 8009404:	f7fa fa8a 	bl	800391c <HAL_DMA_Abort_IT>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d016      	beq.n	800943c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941c:	e00e      	b.n	800943c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f990 	bl	8009744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009424:	e00a      	b.n	800943c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f98c 	bl	8009744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942c:	e006      	b.n	800943c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f988 	bl	8009744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800943a:	e170      	b.n	800971e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	bf00      	nop
    return;
 800943e:	e16e      	b.n	800971e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	2b01      	cmp	r3, #1
 8009446:	f040 814a 	bne.w	80096de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8143 	beq.w	80096de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 813c 	beq.w	80096de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009466:	2300      	movs	r3, #0
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	60bb      	str	r3, [r7, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	60bb      	str	r3, [r7, #8]
 800947a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	f040 80b4 	bne.w	80095f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 8140 	beq.w	8009722 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094aa:	429a      	cmp	r2, r3
 80094ac:	f080 8139 	bcs.w	8009722 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c2:	f000 8088 	beq.w	80095d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80094f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800950a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1d9      	bne.n	80094c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009524:	f023 0301 	bic.w	r3, r3, #1
 8009528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3314      	adds	r3, #20
 8009532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800953a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800953e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e1      	bne.n	8009512 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3314      	adds	r3, #20
 8009554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800955e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3314      	adds	r3, #20
 800956e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e3      	bne.n	800954e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a6:	f023 0310 	bic.w	r3, r3, #16
 80095aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	330c      	adds	r3, #12
 80095b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80095b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80095ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e3      	bne.n	8009594 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fa f933 	bl	800383c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095de:	b29b      	uxth	r3, r3
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8b6 	bl	8009758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095ec:	e099      	b.n	8009722 <HAL_UART_IRQHandler+0x50e>
 80095ee:	bf00      	nop
 80095f0:	08009987 	.word	0x08009987
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 808b 	beq.w	8009726 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8086 	beq.w	8009726 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	330c      	adds	r3, #12
 8009620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	330c      	adds	r3, #12
 800963a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800963e:	647a      	str	r2, [r7, #68]	; 0x44
 8009640:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e3      	bne.n	800961a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	623b      	str	r3, [r7, #32]
   return(result);
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3314      	adds	r3, #20
 8009672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009676:	633a      	str	r2, [r7, #48]	; 0x30
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800967c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1e3      	bne.n	8009652 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0310 	bic.w	r3, r3, #16
 80096ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	330c      	adds	r3, #12
 80096b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80096bc:	61fa      	str	r2, [r7, #28]
 80096be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	69b9      	ldr	r1, [r7, #24]
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	617b      	str	r3, [r7, #20]
   return(result);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e3      	bne.n	8009698 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f83e 	bl	8009758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096dc:	e023      	b.n	8009726 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <HAL_UART_IRQHandler+0x4ea>
 80096ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f959 	bl	80099ae <UART_Transmit_IT>
    return;
 80096fc:	e014      	b.n	8009728 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00e      	beq.n	8009728 <HAL_UART_IRQHandler+0x514>
 800970a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800970e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d008      	beq.n	8009728 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f999 	bl	8009a4e <UART_EndTransmit_IT>
    return;
 800971c:	e004      	b.n	8009728 <HAL_UART_IRQHandler+0x514>
    return;
 800971e:	bf00      	nop
 8009720:	e002      	b.n	8009728 <HAL_UART_IRQHandler+0x514>
      return;
 8009722:	bf00      	nop
 8009724:	e000      	b.n	8009728 <HAL_UART_IRQHandler+0x514>
      return;
 8009726:	bf00      	nop
  }
}
 8009728:	37e8      	adds	r7, #232	; 0xe8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop

08009730 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b090      	sub	sp, #64	; 0x40
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	4613      	mov	r3, r2
 800977e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009780:	e050      	b.n	8009824 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d04c      	beq.n	8009824 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800978a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009790:	f7f9 fbf0 	bl	8002f74 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800979c:	429a      	cmp	r2, r3
 800979e:	d241      	bcs.n	8009824 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	330c      	adds	r3, #12
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	330c      	adds	r3, #12
 80097be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097c0:	637a      	str	r2, [r7, #52]	; 0x34
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e5      	bne.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3314      	adds	r3, #20
 80097da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	613b      	str	r3, [r7, #16]
   return(result);
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f023 0301 	bic.w	r3, r3, #1
 80097ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3314      	adds	r3, #20
 80097f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f4:	623a      	str	r2, [r7, #32]
 80097f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	69f9      	ldr	r1, [r7, #28]
 80097fa:	6a3a      	ldr	r2, [r7, #32]
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	61bb      	str	r3, [r7, #24]
   return(result);
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e5      	bne.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2220      	movs	r2, #32
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e00f      	b.n	8009844 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4013      	ands	r3, r2
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	bf0c      	ite	eq
 8009834:	2301      	moveq	r3, #1
 8009836:	2300      	movne	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	461a      	mov	r2, r3
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	429a      	cmp	r2, r3
 8009840:	d09f      	beq.n	8009782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3740      	adds	r7, #64	; 0x40
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	88fa      	ldrh	r2, [r7, #6]
 8009864:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2222      	movs	r2, #34	; 0x22
 8009876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009890:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695a      	ldr	r2, [r3, #20]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f042 0201 	orr.w	r2, r2, #1
 80098a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0220 	orr.w	r2, r2, #32
 80098b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b095      	sub	sp, #84	; 0x54
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	330c      	adds	r3, #12
 80098ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098e8:	643a      	str	r2, [r7, #64]	; 0x40
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e5      	bne.n	80098c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3314      	adds	r3, #20
 8009902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	61fb      	str	r3, [r7, #28]
   return(result);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	64bb      	str	r3, [r7, #72]	; 0x48
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800991c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e5      	bne.n	80098fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	2b01      	cmp	r3, #1
 8009936:	d119      	bne.n	800996c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	330c      	adds	r3, #12
 800993e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	60bb      	str	r3, [r7, #8]
   return(result);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f023 0310 	bic.w	r3, r3, #16
 800994e:	647b      	str	r3, [r7, #68]	; 0x44
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009958:	61ba      	str	r2, [r7, #24]
 800995a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	613b      	str	r3, [r7, #16]
   return(result);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e5      	bne.n	8009938 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	631a      	str	r2, [r3, #48]	; 0x30
}
 800997a:	bf00      	nop
 800997c:	3754      	adds	r7, #84	; 0x54
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff fecf 	bl	8009744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b21      	cmp	r3, #33	; 0x21
 80099c0:	d13e      	bne.n	8009a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ca:	d114      	bne.n	80099f6 <UART_Transmit_IT+0x48>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d110      	bne.n	80099f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	1c9a      	adds	r2, r3, #2
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	621a      	str	r2, [r3, #32]
 80099f4:	e008      	b.n	8009a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	1c59      	adds	r1, r3, #1
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6211      	str	r1, [r2, #32]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	4619      	mov	r1, r3
 8009a16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10f      	bne.n	8009a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	e000      	b.n	8009a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a40:	2302      	movs	r3, #2
  }
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fe5e 	bl	8009730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b08c      	sub	sp, #48	; 0x30
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b22      	cmp	r3, #34	; 0x22
 8009a90:	f040 80ab 	bne.w	8009bea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9c:	d117      	bne.n	8009ace <UART_Receive_IT+0x50>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d113      	bne.n	8009ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	1c9a      	adds	r2, r3, #2
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	629a      	str	r2, [r3, #40]	; 0x28
 8009acc:	e026      	b.n	8009b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae0:	d007      	beq.n	8009af2 <UART_Receive_IT+0x74>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <UART_Receive_IT+0x82>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e008      	b.n	8009b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d15a      	bne.n	8009be6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0220 	bic.w	r2, r2, #32
 8009b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695a      	ldr	r2, [r3, #20]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0201 	bic.w	r2, r2, #1
 8009b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d135      	bne.n	8009bdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	613b      	str	r3, [r7, #16]
   return(result);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f023 0310 	bic.w	r3, r3, #16
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	330c      	adds	r3, #12
 8009b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b96:	623a      	str	r2, [r7, #32]
 8009b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	69f9      	ldr	r1, [r7, #28]
 8009b9c:	6a3a      	ldr	r2, [r7, #32]
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	d10a      	bne.n	8009bce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fdbf 	bl	8009758 <HAL_UARTEx_RxEventCallback>
 8009bda:	e002      	b.n	8009be2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7f7 fe4b 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e002      	b.n	8009bec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	e000      	b.n	8009bec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bea:	2302      	movs	r3, #2
  }
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3730      	adds	r7, #48	; 0x30
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	b09f      	sub	sp, #124	; 0x7c
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0a:	68d9      	ldr	r1, [r3, #12]
 8009c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	ea40 0301 	orr.w	r3, r0, r1
 8009c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c38:	f021 010c 	bic.w	r1, r1, #12
 8009c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c42:	430b      	orrs	r3, r1
 8009c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c52:	6999      	ldr	r1, [r3, #24]
 8009c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	ea40 0301 	orr.w	r3, r0, r1
 8009c5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4bc5      	ldr	r3, [pc, #788]	; (8009f78 <UART_SetConfig+0x384>)
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d004      	beq.n	8009c72 <UART_SetConfig+0x7e>
 8009c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4bc3      	ldr	r3, [pc, #780]	; (8009f7c <UART_SetConfig+0x388>)
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d103      	bne.n	8009c7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c72:	f7fd f857 	bl	8006d24 <HAL_RCC_GetPCLK2Freq>
 8009c76:	6778      	str	r0, [r7, #116]	; 0x74
 8009c78:	e002      	b.n	8009c80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c7a:	f7fd f83f 	bl	8006cfc <HAL_RCC_GetPCLK1Freq>
 8009c7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c88:	f040 80b6 	bne.w	8009df8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c8e:	461c      	mov	r4, r3
 8009c90:	f04f 0500 	mov.w	r5, #0
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	1891      	adds	r1, r2, r2
 8009c9a:	6439      	str	r1, [r7, #64]	; 0x40
 8009c9c:	415b      	adcs	r3, r3
 8009c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009ca0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ca4:	1912      	adds	r2, r2, r4
 8009ca6:	eb45 0303 	adc.w	r3, r5, r3
 8009caa:	f04f 0000 	mov.w	r0, #0
 8009cae:	f04f 0100 	mov.w	r1, #0
 8009cb2:	00d9      	lsls	r1, r3, #3
 8009cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cb8:	00d0      	lsls	r0, r2, #3
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	1911      	adds	r1, r2, r4
 8009cc0:	6639      	str	r1, [r7, #96]	; 0x60
 8009cc2:	416b      	adcs	r3, r5
 8009cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8009cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	1891      	adds	r1, r2, r2
 8009cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009cd4:	415b      	adcs	r3, r3
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009ce0:	f7f6 ff92 	bl	8000c08 <__aeabi_uldivmod>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4ba5      	ldr	r3, [pc, #660]	; (8009f80 <UART_SetConfig+0x38c>)
 8009cea:	fba3 2302 	umull	r2, r3, r3, r2
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	011e      	lsls	r6, r3, #4
 8009cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cf4:	461c      	mov	r4, r3
 8009cf6:	f04f 0500 	mov.w	r5, #0
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	1891      	adds	r1, r2, r2
 8009d00:	6339      	str	r1, [r7, #48]	; 0x30
 8009d02:	415b      	adcs	r3, r3
 8009d04:	637b      	str	r3, [r7, #52]	; 0x34
 8009d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d0a:	1912      	adds	r2, r2, r4
 8009d0c:	eb45 0303 	adc.w	r3, r5, r3
 8009d10:	f04f 0000 	mov.w	r0, #0
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	00d9      	lsls	r1, r3, #3
 8009d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d1e:	00d0      	lsls	r0, r2, #3
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	1911      	adds	r1, r2, r4
 8009d26:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d28:	416b      	adcs	r3, r5
 8009d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	461a      	mov	r2, r3
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	1891      	adds	r1, r2, r2
 8009d38:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d3a:	415b      	adcs	r3, r3
 8009d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d46:	f7f6 ff5f 	bl	8000c08 <__aeabi_uldivmod>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4b8c      	ldr	r3, [pc, #560]	; (8009f80 <UART_SetConfig+0x38c>)
 8009d50:	fba3 1302 	umull	r1, r3, r3, r2
 8009d54:	095b      	lsrs	r3, r3, #5
 8009d56:	2164      	movs	r1, #100	; 0x64
 8009d58:	fb01 f303 	mul.w	r3, r1, r3
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	3332      	adds	r3, #50	; 0x32
 8009d62:	4a87      	ldr	r2, [pc, #540]	; (8009f80 <UART_SetConfig+0x38c>)
 8009d64:	fba2 2303 	umull	r2, r3, r2, r3
 8009d68:	095b      	lsrs	r3, r3, #5
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d70:	441e      	add	r6, r3
 8009d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d74:	4618      	mov	r0, r3
 8009d76:	f04f 0100 	mov.w	r1, #0
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	1894      	adds	r4, r2, r2
 8009d80:	623c      	str	r4, [r7, #32]
 8009d82:	415b      	adcs	r3, r3
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
 8009d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d8a:	1812      	adds	r2, r2, r0
 8009d8c:	eb41 0303 	adc.w	r3, r1, r3
 8009d90:	f04f 0400 	mov.w	r4, #0
 8009d94:	f04f 0500 	mov.w	r5, #0
 8009d98:	00dd      	lsls	r5, r3, #3
 8009d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d9e:	00d4      	lsls	r4, r2, #3
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	1814      	adds	r4, r2, r0
 8009da6:	653c      	str	r4, [r7, #80]	; 0x50
 8009da8:	414b      	adcs	r3, r1
 8009daa:	657b      	str	r3, [r7, #84]	; 0x54
 8009dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	461a      	mov	r2, r3
 8009db2:	f04f 0300 	mov.w	r3, #0
 8009db6:	1891      	adds	r1, r2, r2
 8009db8:	61b9      	str	r1, [r7, #24]
 8009dba:	415b      	adcs	r3, r3
 8009dbc:	61fb      	str	r3, [r7, #28]
 8009dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009dc6:	f7f6 ff1f 	bl	8000c08 <__aeabi_uldivmod>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4b6c      	ldr	r3, [pc, #432]	; (8009f80 <UART_SetConfig+0x38c>)
 8009dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	2164      	movs	r1, #100	; 0x64
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	3332      	adds	r3, #50	; 0x32
 8009de2:	4a67      	ldr	r2, [pc, #412]	; (8009f80 <UART_SetConfig+0x38c>)
 8009de4:	fba2 2303 	umull	r2, r3, r2, r3
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	f003 0207 	and.w	r2, r3, #7
 8009dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4432      	add	r2, r6
 8009df4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009df6:	e0b9      	b.n	8009f6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dfa:	461c      	mov	r4, r3
 8009dfc:	f04f 0500 	mov.w	r5, #0
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	1891      	adds	r1, r2, r2
 8009e06:	6139      	str	r1, [r7, #16]
 8009e08:	415b      	adcs	r3, r3
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e10:	1912      	adds	r2, r2, r4
 8009e12:	eb45 0303 	adc.w	r3, r5, r3
 8009e16:	f04f 0000 	mov.w	r0, #0
 8009e1a:	f04f 0100 	mov.w	r1, #0
 8009e1e:	00d9      	lsls	r1, r3, #3
 8009e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e24:	00d0      	lsls	r0, r2, #3
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	eb12 0804 	adds.w	r8, r2, r4
 8009e2e:	eb43 0905 	adc.w	r9, r3, r5
 8009e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f04f 0100 	mov.w	r1, #0
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	008b      	lsls	r3, r1, #2
 8009e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e4a:	0082      	lsls	r2, r0, #2
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 feda 	bl	8000c08 <__aeabi_uldivmod>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4b49      	ldr	r3, [pc, #292]	; (8009f80 <UART_SetConfig+0x38c>)
 8009e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	011e      	lsls	r6, r3, #4
 8009e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e64:	4618      	mov	r0, r3
 8009e66:	f04f 0100 	mov.w	r1, #0
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	1894      	adds	r4, r2, r2
 8009e70:	60bc      	str	r4, [r7, #8]
 8009e72:	415b      	adcs	r3, r3
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e7a:	1812      	adds	r2, r2, r0
 8009e7c:	eb41 0303 	adc.w	r3, r1, r3
 8009e80:	f04f 0400 	mov.w	r4, #0
 8009e84:	f04f 0500 	mov.w	r5, #0
 8009e88:	00dd      	lsls	r5, r3, #3
 8009e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e8e:	00d4      	lsls	r4, r2, #3
 8009e90:	4622      	mov	r2, r4
 8009e92:	462b      	mov	r3, r5
 8009e94:	1814      	adds	r4, r2, r0
 8009e96:	64bc      	str	r4, [r7, #72]	; 0x48
 8009e98:	414b      	adcs	r3, r1
 8009e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f04f 0100 	mov.w	r1, #0
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	008b      	lsls	r3, r1, #2
 8009eb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009eb4:	0082      	lsls	r2, r0, #2
 8009eb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009eba:	f7f6 fea5 	bl	8000c08 <__aeabi_uldivmod>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4b2f      	ldr	r3, [pc, #188]	; (8009f80 <UART_SetConfig+0x38c>)
 8009ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	2164      	movs	r1, #100	; 0x64
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	3332      	adds	r3, #50	; 0x32
 8009ed6:	4a2a      	ldr	r2, [pc, #168]	; (8009f80 <UART_SetConfig+0x38c>)
 8009ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee2:	441e      	add	r6, r3
 8009ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f04f 0100 	mov.w	r1, #0
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	1894      	adds	r4, r2, r2
 8009ef2:	603c      	str	r4, [r7, #0]
 8009ef4:	415b      	adcs	r3, r3
 8009ef6:	607b      	str	r3, [r7, #4]
 8009ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efc:	1812      	adds	r2, r2, r0
 8009efe:	eb41 0303 	adc.w	r3, r1, r3
 8009f02:	f04f 0400 	mov.w	r4, #0
 8009f06:	f04f 0500 	mov.w	r5, #0
 8009f0a:	00dd      	lsls	r5, r3, #3
 8009f0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f10:	00d4      	lsls	r4, r2, #3
 8009f12:	4622      	mov	r2, r4
 8009f14:	462b      	mov	r3, r5
 8009f16:	eb12 0a00 	adds.w	sl, r2, r0
 8009f1a:	eb43 0b01 	adc.w	fp, r3, r1
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f04f 0100 	mov.w	r1, #0
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	008b      	lsls	r3, r1, #2
 8009f32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f36:	0082      	lsls	r2, r0, #2
 8009f38:	4650      	mov	r0, sl
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	f7f6 fe64 	bl	8000c08 <__aeabi_uldivmod>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <UART_SetConfig+0x38c>)
 8009f46:	fba3 1302 	umull	r1, r3, r3, r2
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	2164      	movs	r1, #100	; 0x64
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	3332      	adds	r3, #50	; 0x32
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <UART_SetConfig+0x38c>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f003 020f 	and.w	r2, r3, #15
 8009f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4432      	add	r2, r6
 8009f6a:	609a      	str	r2, [r3, #8]
}
 8009f6c:	bf00      	nop
 8009f6e:	377c      	adds	r7, #124	; 0x7c
 8009f70:	46bd      	mov	sp, r7
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	bf00      	nop
 8009f78:	40011000 	.word	0x40011000
 8009f7c:	40011400 	.word	0x40011400
 8009f80:	51eb851f 	.word	0x51eb851f

08009f84 <__errno>:
 8009f84:	4b01      	ldr	r3, [pc, #4]	; (8009f8c <__errno+0x8>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	2000000c 	.word	0x2000000c

08009f90 <__libc_init_array>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	4d0d      	ldr	r5, [pc, #52]	; (8009fc8 <__libc_init_array+0x38>)
 8009f94:	4c0d      	ldr	r4, [pc, #52]	; (8009fcc <__libc_init_array+0x3c>)
 8009f96:	1b64      	subs	r4, r4, r5
 8009f98:	10a4      	asrs	r4, r4, #2
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	42a6      	cmp	r6, r4
 8009f9e:	d109      	bne.n	8009fb4 <__libc_init_array+0x24>
 8009fa0:	4d0b      	ldr	r5, [pc, #44]	; (8009fd0 <__libc_init_array+0x40>)
 8009fa2:	4c0c      	ldr	r4, [pc, #48]	; (8009fd4 <__libc_init_array+0x44>)
 8009fa4:	f002 fd0a 	bl	800c9bc <_init>
 8009fa8:	1b64      	subs	r4, r4, r5
 8009faa:	10a4      	asrs	r4, r4, #2
 8009fac:	2600      	movs	r6, #0
 8009fae:	42a6      	cmp	r6, r4
 8009fb0:	d105      	bne.n	8009fbe <__libc_init_array+0x2e>
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb8:	4798      	blx	r3
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7ee      	b.n	8009f9c <__libc_init_array+0xc>
 8009fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc2:	4798      	blx	r3
 8009fc4:	3601      	adds	r6, #1
 8009fc6:	e7f2      	b.n	8009fae <__libc_init_array+0x1e>
 8009fc8:	0807a3bc 	.word	0x0807a3bc
 8009fcc:	0807a3bc 	.word	0x0807a3bc
 8009fd0:	0807a3bc 	.word	0x0807a3bc
 8009fd4:	0807a3c0 	.word	0x0807a3c0

08009fd8 <memset>:
 8009fd8:	4402      	add	r2, r0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d100      	bne.n	8009fe2 <memset+0xa>
 8009fe0:	4770      	bx	lr
 8009fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fe6:	e7f9      	b.n	8009fdc <memset+0x4>

08009fe8 <__cvt>:
 8009fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fec:	ec55 4b10 	vmov	r4, r5, d0
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	460e      	mov	r6, r1
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	462b      	mov	r3, r5
 8009ff8:	bfbb      	ittet	lt
 8009ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ffe:	461d      	movlt	r5, r3
 800a000:	2300      	movge	r3, #0
 800a002:	232d      	movlt	r3, #45	; 0x2d
 800a004:	700b      	strb	r3, [r1, #0]
 800a006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a00c:	4691      	mov	r9, r2
 800a00e:	f023 0820 	bic.w	r8, r3, #32
 800a012:	bfbc      	itt	lt
 800a014:	4622      	movlt	r2, r4
 800a016:	4614      	movlt	r4, r2
 800a018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a01c:	d005      	beq.n	800a02a <__cvt+0x42>
 800a01e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a022:	d100      	bne.n	800a026 <__cvt+0x3e>
 800a024:	3601      	adds	r6, #1
 800a026:	2102      	movs	r1, #2
 800a028:	e000      	b.n	800a02c <__cvt+0x44>
 800a02a:	2103      	movs	r1, #3
 800a02c:	ab03      	add	r3, sp, #12
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	ab02      	add	r3, sp, #8
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	ec45 4b10 	vmov	d0, r4, r5
 800a038:	4653      	mov	r3, sl
 800a03a:	4632      	mov	r2, r6
 800a03c:	f000 fce4 	bl	800aa08 <_dtoa_r>
 800a040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a044:	4607      	mov	r7, r0
 800a046:	d102      	bne.n	800a04e <__cvt+0x66>
 800a048:	f019 0f01 	tst.w	r9, #1
 800a04c:	d022      	beq.n	800a094 <__cvt+0xac>
 800a04e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a052:	eb07 0906 	add.w	r9, r7, r6
 800a056:	d110      	bne.n	800a07a <__cvt+0x92>
 800a058:	783b      	ldrb	r3, [r7, #0]
 800a05a:	2b30      	cmp	r3, #48	; 0x30
 800a05c:	d10a      	bne.n	800a074 <__cvt+0x8c>
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fd5f 	bl	8000b28 <__aeabi_dcmpeq>
 800a06a:	b918      	cbnz	r0, 800a074 <__cvt+0x8c>
 800a06c:	f1c6 0601 	rsb	r6, r6, #1
 800a070:	f8ca 6000 	str.w	r6, [sl]
 800a074:	f8da 3000 	ldr.w	r3, [sl]
 800a078:	4499      	add	r9, r3
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 fd51 	bl	8000b28 <__aeabi_dcmpeq>
 800a086:	b108      	cbz	r0, 800a08c <__cvt+0xa4>
 800a088:	f8cd 900c 	str.w	r9, [sp, #12]
 800a08c:	2230      	movs	r2, #48	; 0x30
 800a08e:	9b03      	ldr	r3, [sp, #12]
 800a090:	454b      	cmp	r3, r9
 800a092:	d307      	bcc.n	800a0a4 <__cvt+0xbc>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a098:	1bdb      	subs	r3, r3, r7
 800a09a:	4638      	mov	r0, r7
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	b004      	add	sp, #16
 800a0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a4:	1c59      	adds	r1, r3, #1
 800a0a6:	9103      	str	r1, [sp, #12]
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	e7f0      	b.n	800a08e <__cvt+0xa6>

0800a0ac <__exponent>:
 800a0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	bfb8      	it	lt
 800a0b4:	4249      	neglt	r1, r1
 800a0b6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0ba:	bfb4      	ite	lt
 800a0bc:	222d      	movlt	r2, #45	; 0x2d
 800a0be:	222b      	movge	r2, #43	; 0x2b
 800a0c0:	2909      	cmp	r1, #9
 800a0c2:	7042      	strb	r2, [r0, #1]
 800a0c4:	dd2a      	ble.n	800a11c <__exponent+0x70>
 800a0c6:	f10d 0407 	add.w	r4, sp, #7
 800a0ca:	46a4      	mov	ip, r4
 800a0cc:	270a      	movs	r7, #10
 800a0ce:	46a6      	mov	lr, r4
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0d6:	fb07 1516 	mls	r5, r7, r6, r1
 800a0da:	3530      	adds	r5, #48	; 0x30
 800a0dc:	2a63      	cmp	r2, #99	; 0x63
 800a0de:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	dcf1      	bgt.n	800a0ce <__exponent+0x22>
 800a0ea:	3130      	adds	r1, #48	; 0x30
 800a0ec:	f1ae 0502 	sub.w	r5, lr, #2
 800a0f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0f4:	1c44      	adds	r4, r0, #1
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4561      	cmp	r1, ip
 800a0fa:	d30a      	bcc.n	800a112 <__exponent+0x66>
 800a0fc:	f10d 0209 	add.w	r2, sp, #9
 800a100:	eba2 020e 	sub.w	r2, r2, lr
 800a104:	4565      	cmp	r5, ip
 800a106:	bf88      	it	hi
 800a108:	2200      	movhi	r2, #0
 800a10a:	4413      	add	r3, r2
 800a10c:	1a18      	subs	r0, r3, r0
 800a10e:	b003      	add	sp, #12
 800a110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a11a:	e7ed      	b.n	800a0f8 <__exponent+0x4c>
 800a11c:	2330      	movs	r3, #48	; 0x30
 800a11e:	3130      	adds	r1, #48	; 0x30
 800a120:	7083      	strb	r3, [r0, #2]
 800a122:	70c1      	strb	r1, [r0, #3]
 800a124:	1d03      	adds	r3, r0, #4
 800a126:	e7f1      	b.n	800a10c <__exponent+0x60>

0800a128 <_printf_float>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ed2d 8b02 	vpush	{d8}
 800a130:	b08d      	sub	sp, #52	; 0x34
 800a132:	460c      	mov	r4, r1
 800a134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a138:	4616      	mov	r6, r2
 800a13a:	461f      	mov	r7, r3
 800a13c:	4605      	mov	r5, r0
 800a13e:	f001 fb45 	bl	800b7cc <_localeconv_r>
 800a142:	f8d0 a000 	ldr.w	sl, [r0]
 800a146:	4650      	mov	r0, sl
 800a148:	f7f6 f86c 	bl	8000224 <strlen>
 800a14c:	2300      	movs	r3, #0
 800a14e:	930a      	str	r3, [sp, #40]	; 0x28
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	9305      	str	r3, [sp, #20]
 800a154:	f8d8 3000 	ldr.w	r3, [r8]
 800a158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	f103 0208 	add.w	r2, r3, #8
 800a166:	f8c8 2000 	str.w	r2, [r8]
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a172:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a180:	ee08 0a10 	vmov	s16, r0
 800a184:	4b9f      	ldr	r3, [pc, #636]	; (800a404 <_printf_float+0x2dc>)
 800a186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295
 800a18e:	f7f6 fcfd 	bl	8000b8c <__aeabi_dcmpun>
 800a192:	bb88      	cbnz	r0, 800a1f8 <_printf_float+0xd0>
 800a194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a198:	4b9a      	ldr	r3, [pc, #616]	; (800a404 <_printf_float+0x2dc>)
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	f7f6 fcd7 	bl	8000b50 <__aeabi_dcmple>
 800a1a2:	bb48      	cbnz	r0, 800a1f8 <_printf_float+0xd0>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	f7f6 fcc6 	bl	8000b3c <__aeabi_dcmplt>
 800a1b0:	b110      	cbz	r0, 800a1b8 <_printf_float+0x90>
 800a1b2:	232d      	movs	r3, #45	; 0x2d
 800a1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b8:	4b93      	ldr	r3, [pc, #588]	; (800a408 <_printf_float+0x2e0>)
 800a1ba:	4894      	ldr	r0, [pc, #592]	; (800a40c <_printf_float+0x2e4>)
 800a1bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1c0:	bf94      	ite	ls
 800a1c2:	4698      	movls	r8, r3
 800a1c4:	4680      	movhi	r8, r0
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	f023 0204 	bic.w	r2, r3, #4
 800a1d0:	6022      	str	r2, [r4, #0]
 800a1d2:	f04f 0900 	mov.w	r9, #0
 800a1d6:	9700      	str	r7, [sp, #0]
 800a1d8:	4633      	mov	r3, r6
 800a1da:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f9d8 	bl	800a594 <_printf_common>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f040 8090 	bne.w	800a30a <_printf_float+0x1e2>
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ee:	b00d      	add	sp, #52	; 0x34
 800a1f0:	ecbd 8b02 	vpop	{d8}
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4649      	mov	r1, r9
 800a200:	f7f6 fcc4 	bl	8000b8c <__aeabi_dcmpun>
 800a204:	b140      	cbz	r0, 800a218 <_printf_float+0xf0>
 800a206:	464b      	mov	r3, r9
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bfbc      	itt	lt
 800a20c:	232d      	movlt	r3, #45	; 0x2d
 800a20e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a212:	487f      	ldr	r0, [pc, #508]	; (800a410 <_printf_float+0x2e8>)
 800a214:	4b7f      	ldr	r3, [pc, #508]	; (800a414 <_printf_float+0x2ec>)
 800a216:	e7d1      	b.n	800a1bc <_printf_float+0x94>
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a21e:	9206      	str	r2, [sp, #24]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	d13f      	bne.n	800a2a4 <_printf_float+0x17c>
 800a224:	2306      	movs	r3, #6
 800a226:	6063      	str	r3, [r4, #4]
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	6861      	ldr	r1, [r4, #4]
 800a22c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a230:	2300      	movs	r3, #0
 800a232:	9303      	str	r3, [sp, #12]
 800a234:	ab0a      	add	r3, sp, #40	; 0x28
 800a236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a23a:	ab09      	add	r3, sp, #36	; 0x24
 800a23c:	ec49 8b10 	vmov	d0, r8, r9
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	6022      	str	r2, [r4, #0]
 800a244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a248:	4628      	mov	r0, r5
 800a24a:	f7ff fecd 	bl	8009fe8 <__cvt>
 800a24e:	9b06      	ldr	r3, [sp, #24]
 800a250:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a252:	2b47      	cmp	r3, #71	; 0x47
 800a254:	4680      	mov	r8, r0
 800a256:	d108      	bne.n	800a26a <_printf_float+0x142>
 800a258:	1cc8      	adds	r0, r1, #3
 800a25a:	db02      	blt.n	800a262 <_printf_float+0x13a>
 800a25c:	6863      	ldr	r3, [r4, #4]
 800a25e:	4299      	cmp	r1, r3
 800a260:	dd41      	ble.n	800a2e6 <_printf_float+0x1be>
 800a262:	f1ab 0b02 	sub.w	fp, fp, #2
 800a266:	fa5f fb8b 	uxtb.w	fp, fp
 800a26a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a26e:	d820      	bhi.n	800a2b2 <_printf_float+0x18a>
 800a270:	3901      	subs	r1, #1
 800a272:	465a      	mov	r2, fp
 800a274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a278:	9109      	str	r1, [sp, #36]	; 0x24
 800a27a:	f7ff ff17 	bl	800a0ac <__exponent>
 800a27e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a280:	1813      	adds	r3, r2, r0
 800a282:	2a01      	cmp	r2, #1
 800a284:	4681      	mov	r9, r0
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	dc02      	bgt.n	800a290 <_printf_float+0x168>
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	07d2      	lsls	r2, r2, #31
 800a28e:	d501      	bpl.n	800a294 <_printf_float+0x16c>
 800a290:	3301      	adds	r3, #1
 800a292:	6123      	str	r3, [r4, #16]
 800a294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d09c      	beq.n	800a1d6 <_printf_float+0xae>
 800a29c:	232d      	movs	r3, #45	; 0x2d
 800a29e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a2:	e798      	b.n	800a1d6 <_printf_float+0xae>
 800a2a4:	9a06      	ldr	r2, [sp, #24]
 800a2a6:	2a47      	cmp	r2, #71	; 0x47
 800a2a8:	d1be      	bne.n	800a228 <_printf_float+0x100>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1bc      	bne.n	800a228 <_printf_float+0x100>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e7b9      	b.n	800a226 <_printf_float+0xfe>
 800a2b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2b6:	d118      	bne.n	800a2ea <_printf_float+0x1c2>
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	6863      	ldr	r3, [r4, #4]
 800a2bc:	dd0b      	ble.n	800a2d6 <_printf_float+0x1ae>
 800a2be:	6121      	str	r1, [r4, #16]
 800a2c0:	b913      	cbnz	r3, 800a2c8 <_printf_float+0x1a0>
 800a2c2:	6822      	ldr	r2, [r4, #0]
 800a2c4:	07d0      	lsls	r0, r2, #31
 800a2c6:	d502      	bpl.n	800a2ce <_printf_float+0x1a6>
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	440b      	add	r3, r1
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2d0:	f04f 0900 	mov.w	r9, #0
 800a2d4:	e7de      	b.n	800a294 <_printf_float+0x16c>
 800a2d6:	b913      	cbnz	r3, 800a2de <_printf_float+0x1b6>
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	07d2      	lsls	r2, r2, #31
 800a2dc:	d501      	bpl.n	800a2e2 <_printf_float+0x1ba>
 800a2de:	3302      	adds	r3, #2
 800a2e0:	e7f4      	b.n	800a2cc <_printf_float+0x1a4>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7f2      	b.n	800a2cc <_printf_float+0x1a4>
 800a2e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ec:	4299      	cmp	r1, r3
 800a2ee:	db05      	blt.n	800a2fc <_printf_float+0x1d4>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	6121      	str	r1, [r4, #16]
 800a2f4:	07d8      	lsls	r0, r3, #31
 800a2f6:	d5ea      	bpl.n	800a2ce <_printf_float+0x1a6>
 800a2f8:	1c4b      	adds	r3, r1, #1
 800a2fa:	e7e7      	b.n	800a2cc <_printf_float+0x1a4>
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	bfd4      	ite	le
 800a300:	f1c1 0202 	rsble	r2, r1, #2
 800a304:	2201      	movgt	r2, #1
 800a306:	4413      	add	r3, r2
 800a308:	e7e0      	b.n	800a2cc <_printf_float+0x1a4>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	055a      	lsls	r2, r3, #21
 800a30e:	d407      	bmi.n	800a320 <_printf_float+0x1f8>
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	4642      	mov	r2, r8
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	d12c      	bne.n	800a378 <_printf_float+0x250>
 800a31e:	e764      	b.n	800a1ea <_printf_float+0xc2>
 800a320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a324:	f240 80e0 	bls.w	800a4e8 <_printf_float+0x3c0>
 800a328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a32c:	2200      	movs	r2, #0
 800a32e:	2300      	movs	r3, #0
 800a330:	f7f6 fbfa 	bl	8000b28 <__aeabi_dcmpeq>
 800a334:	2800      	cmp	r0, #0
 800a336:	d034      	beq.n	800a3a2 <_printf_float+0x27a>
 800a338:	4a37      	ldr	r2, [pc, #220]	; (800a418 <_printf_float+0x2f0>)
 800a33a:	2301      	movs	r3, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	f43f af51 	beq.w	800a1ea <_printf_float+0xc2>
 800a348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a34c:	429a      	cmp	r2, r3
 800a34e:	db02      	blt.n	800a356 <_printf_float+0x22e>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07d8      	lsls	r0, r3, #31
 800a354:	d510      	bpl.n	800a378 <_printf_float+0x250>
 800a356:	ee18 3a10 	vmov	r3, s16
 800a35a:	4652      	mov	r2, sl
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	f43f af41 	beq.w	800a1ea <_printf_float+0xc2>
 800a368:	f04f 0800 	mov.w	r8, #0
 800a36c:	f104 091a 	add.w	r9, r4, #26
 800a370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a372:	3b01      	subs	r3, #1
 800a374:	4543      	cmp	r3, r8
 800a376:	dc09      	bgt.n	800a38c <_printf_float+0x264>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	079b      	lsls	r3, r3, #30
 800a37c:	f100 8105 	bmi.w	800a58a <_printf_float+0x462>
 800a380:	68e0      	ldr	r0, [r4, #12]
 800a382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a384:	4298      	cmp	r0, r3
 800a386:	bfb8      	it	lt
 800a388:	4618      	movlt	r0, r3
 800a38a:	e730      	b.n	800a1ee <_printf_float+0xc6>
 800a38c:	2301      	movs	r3, #1
 800a38e:	464a      	mov	r2, r9
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	f43f af27 	beq.w	800a1ea <_printf_float+0xc2>
 800a39c:	f108 0801 	add.w	r8, r8, #1
 800a3a0:	e7e6      	b.n	800a370 <_printf_float+0x248>
 800a3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dc39      	bgt.n	800a41c <_printf_float+0x2f4>
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <_printf_float+0x2f0>)
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f af19 	beq.w	800a1ea <_printf_float+0xc2>
 800a3b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	d102      	bne.n	800a3c6 <_printf_float+0x29e>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	d5d8      	bpl.n	800a378 <_printf_float+0x250>
 800a3c6:	ee18 3a10 	vmov	r3, s16
 800a3ca:	4652      	mov	r2, sl
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	47b8      	blx	r7
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	f43f af09 	beq.w	800a1ea <_printf_float+0xc2>
 800a3d8:	f04f 0900 	mov.w	r9, #0
 800a3dc:	f104 0a1a 	add.w	sl, r4, #26
 800a3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e2:	425b      	negs	r3, r3
 800a3e4:	454b      	cmp	r3, r9
 800a3e6:	dc01      	bgt.n	800a3ec <_printf_float+0x2c4>
 800a3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ea:	e792      	b.n	800a312 <_printf_float+0x1ea>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4652      	mov	r2, sl
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f aef7 	beq.w	800a1ea <_printf_float+0xc2>
 800a3fc:	f109 0901 	add.w	r9, r9, #1
 800a400:	e7ee      	b.n	800a3e0 <_printf_float+0x2b8>
 800a402:	bf00      	nop
 800a404:	7fefffff 	.word	0x7fefffff
 800a408:	08079fd8 	.word	0x08079fd8
 800a40c:	08079fdc 	.word	0x08079fdc
 800a410:	08079fe4 	.word	0x08079fe4
 800a414:	08079fe0 	.word	0x08079fe0
 800a418:	08079fe8 	.word	0x08079fe8
 800a41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a41e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a420:	429a      	cmp	r2, r3
 800a422:	bfa8      	it	ge
 800a424:	461a      	movge	r2, r3
 800a426:	2a00      	cmp	r2, #0
 800a428:	4691      	mov	r9, r2
 800a42a:	dc37      	bgt.n	800a49c <_printf_float+0x374>
 800a42c:	f04f 0b00 	mov.w	fp, #0
 800a430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a434:	f104 021a 	add.w	r2, r4, #26
 800a438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a43a:	9305      	str	r3, [sp, #20]
 800a43c:	eba3 0309 	sub.w	r3, r3, r9
 800a440:	455b      	cmp	r3, fp
 800a442:	dc33      	bgt.n	800a4ac <_printf_float+0x384>
 800a444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a448:	429a      	cmp	r2, r3
 800a44a:	db3b      	blt.n	800a4c4 <_printf_float+0x39c>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07da      	lsls	r2, r3, #31
 800a450:	d438      	bmi.n	800a4c4 <_printf_float+0x39c>
 800a452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a454:	9b05      	ldr	r3, [sp, #20]
 800a456:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	eba2 0901 	sub.w	r9, r2, r1
 800a45e:	4599      	cmp	r9, r3
 800a460:	bfa8      	it	ge
 800a462:	4699      	movge	r9, r3
 800a464:	f1b9 0f00 	cmp.w	r9, #0
 800a468:	dc35      	bgt.n	800a4d6 <_printf_float+0x3ae>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a472:	f104 0a1a 	add.w	sl, r4, #26
 800a476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	eba3 0309 	sub.w	r3, r3, r9
 800a480:	4543      	cmp	r3, r8
 800a482:	f77f af79 	ble.w	800a378 <_printf_float+0x250>
 800a486:	2301      	movs	r3, #1
 800a488:	4652      	mov	r2, sl
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	f43f aeaa 	beq.w	800a1ea <_printf_float+0xc2>
 800a496:	f108 0801 	add.w	r8, r8, #1
 800a49a:	e7ec      	b.n	800a476 <_printf_float+0x34e>
 800a49c:	4613      	mov	r3, r2
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d1c0      	bne.n	800a42c <_printf_float+0x304>
 800a4aa:	e69e      	b.n	800a1ea <_printf_float+0xc2>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	9205      	str	r2, [sp, #20]
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f ae97 	beq.w	800a1ea <_printf_float+0xc2>
 800a4bc:	9a05      	ldr	r2, [sp, #20]
 800a4be:	f10b 0b01 	add.w	fp, fp, #1
 800a4c2:	e7b9      	b.n	800a438 <_printf_float+0x310>
 800a4c4:	ee18 3a10 	vmov	r3, s16
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d1be      	bne.n	800a452 <_printf_float+0x32a>
 800a4d4:	e689      	b.n	800a1ea <_printf_float+0xc2>
 800a4d6:	9a05      	ldr	r2, [sp, #20]
 800a4d8:	464b      	mov	r3, r9
 800a4da:	4442      	add	r2, r8
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d1c1      	bne.n	800a46a <_printf_float+0x342>
 800a4e6:	e680      	b.n	800a1ea <_printf_float+0xc2>
 800a4e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ea:	2a01      	cmp	r2, #1
 800a4ec:	dc01      	bgt.n	800a4f2 <_printf_float+0x3ca>
 800a4ee:	07db      	lsls	r3, r3, #31
 800a4f0:	d538      	bpl.n	800a564 <_printf_float+0x43c>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f ae74 	beq.w	800a1ea <_printf_float+0xc2>
 800a502:	ee18 3a10 	vmov	r3, s16
 800a506:	4652      	mov	r2, sl
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	f43f ae6b 	beq.w	800a1ea <_printf_float+0xc2>
 800a514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a518:	2200      	movs	r2, #0
 800a51a:	2300      	movs	r3, #0
 800a51c:	f7f6 fb04 	bl	8000b28 <__aeabi_dcmpeq>
 800a520:	b9d8      	cbnz	r0, 800a55a <_printf_float+0x432>
 800a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a524:	f108 0201 	add.w	r2, r8, #1
 800a528:	3b01      	subs	r3, #1
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	d10e      	bne.n	800a552 <_printf_float+0x42a>
 800a534:	e659      	b.n	800a1ea <_printf_float+0xc2>
 800a536:	2301      	movs	r3, #1
 800a538:	4652      	mov	r2, sl
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	f43f ae52 	beq.w	800a1ea <_printf_float+0xc2>
 800a546:	f108 0801 	add.w	r8, r8, #1
 800a54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a54c:	3b01      	subs	r3, #1
 800a54e:	4543      	cmp	r3, r8
 800a550:	dcf1      	bgt.n	800a536 <_printf_float+0x40e>
 800a552:	464b      	mov	r3, r9
 800a554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a558:	e6dc      	b.n	800a314 <_printf_float+0x1ec>
 800a55a:	f04f 0800 	mov.w	r8, #0
 800a55e:	f104 0a1a 	add.w	sl, r4, #26
 800a562:	e7f2      	b.n	800a54a <_printf_float+0x422>
 800a564:	2301      	movs	r3, #1
 800a566:	4642      	mov	r2, r8
 800a568:	e7df      	b.n	800a52a <_printf_float+0x402>
 800a56a:	2301      	movs	r3, #1
 800a56c:	464a      	mov	r2, r9
 800a56e:	4631      	mov	r1, r6
 800a570:	4628      	mov	r0, r5
 800a572:	47b8      	blx	r7
 800a574:	3001      	adds	r0, #1
 800a576:	f43f ae38 	beq.w	800a1ea <_printf_float+0xc2>
 800a57a:	f108 0801 	add.w	r8, r8, #1
 800a57e:	68e3      	ldr	r3, [r4, #12]
 800a580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a582:	1a5b      	subs	r3, r3, r1
 800a584:	4543      	cmp	r3, r8
 800a586:	dcf0      	bgt.n	800a56a <_printf_float+0x442>
 800a588:	e6fa      	b.n	800a380 <_printf_float+0x258>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	f104 0919 	add.w	r9, r4, #25
 800a592:	e7f4      	b.n	800a57e <_printf_float+0x456>

0800a594 <_printf_common>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	4616      	mov	r6, r2
 800a59a:	4699      	mov	r9, r3
 800a59c:	688a      	ldr	r2, [r1, #8]
 800a59e:	690b      	ldr	r3, [r1, #16]
 800a5a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	bfb8      	it	lt
 800a5a8:	4613      	movlt	r3, r2
 800a5aa:	6033      	str	r3, [r6, #0]
 800a5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b10a      	cbz	r2, 800a5ba <_printf_common+0x26>
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	6033      	str	r3, [r6, #0]
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	0699      	lsls	r1, r3, #26
 800a5be:	bf42      	ittt	mi
 800a5c0:	6833      	ldrmi	r3, [r6, #0]
 800a5c2:	3302      	addmi	r3, #2
 800a5c4:	6033      	strmi	r3, [r6, #0]
 800a5c6:	6825      	ldr	r5, [r4, #0]
 800a5c8:	f015 0506 	ands.w	r5, r5, #6
 800a5cc:	d106      	bne.n	800a5dc <_printf_common+0x48>
 800a5ce:	f104 0a19 	add.w	sl, r4, #25
 800a5d2:	68e3      	ldr	r3, [r4, #12]
 800a5d4:	6832      	ldr	r2, [r6, #0]
 800a5d6:	1a9b      	subs	r3, r3, r2
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	dc26      	bgt.n	800a62a <_printf_common+0x96>
 800a5dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5e0:	1e13      	subs	r3, r2, #0
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	bf18      	it	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	0692      	lsls	r2, r2, #26
 800a5ea:	d42b      	bmi.n	800a644 <_printf_common+0xb0>
 800a5ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	47c0      	blx	r8
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d01e      	beq.n	800a638 <_printf_common+0xa4>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	68e5      	ldr	r5, [r4, #12]
 800a5fe:	6832      	ldr	r2, [r6, #0]
 800a600:	f003 0306 	and.w	r3, r3, #6
 800a604:	2b04      	cmp	r3, #4
 800a606:	bf08      	it	eq
 800a608:	1aad      	subeq	r5, r5, r2
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	bf0c      	ite	eq
 800a610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a614:	2500      	movne	r5, #0
 800a616:	4293      	cmp	r3, r2
 800a618:	bfc4      	itt	gt
 800a61a:	1a9b      	subgt	r3, r3, r2
 800a61c:	18ed      	addgt	r5, r5, r3
 800a61e:	2600      	movs	r6, #0
 800a620:	341a      	adds	r4, #26
 800a622:	42b5      	cmp	r5, r6
 800a624:	d11a      	bne.n	800a65c <_printf_common+0xc8>
 800a626:	2000      	movs	r0, #0
 800a628:	e008      	b.n	800a63c <_printf_common+0xa8>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4652      	mov	r2, sl
 800a62e:	4649      	mov	r1, r9
 800a630:	4638      	mov	r0, r7
 800a632:	47c0      	blx	r8
 800a634:	3001      	adds	r0, #1
 800a636:	d103      	bne.n	800a640 <_printf_common+0xac>
 800a638:	f04f 30ff 	mov.w	r0, #4294967295
 800a63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a640:	3501      	adds	r5, #1
 800a642:	e7c6      	b.n	800a5d2 <_printf_common+0x3e>
 800a644:	18e1      	adds	r1, r4, r3
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	2030      	movs	r0, #48	; 0x30
 800a64a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a64e:	4422      	add	r2, r4
 800a650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a658:	3302      	adds	r3, #2
 800a65a:	e7c7      	b.n	800a5ec <_printf_common+0x58>
 800a65c:	2301      	movs	r3, #1
 800a65e:	4622      	mov	r2, r4
 800a660:	4649      	mov	r1, r9
 800a662:	4638      	mov	r0, r7
 800a664:	47c0      	blx	r8
 800a666:	3001      	adds	r0, #1
 800a668:	d0e6      	beq.n	800a638 <_printf_common+0xa4>
 800a66a:	3601      	adds	r6, #1
 800a66c:	e7d9      	b.n	800a622 <_printf_common+0x8e>
	...

0800a670 <_printf_i>:
 800a670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	460c      	mov	r4, r1
 800a676:	4691      	mov	r9, r2
 800a678:	7e27      	ldrb	r7, [r4, #24]
 800a67a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a67c:	2f78      	cmp	r7, #120	; 0x78
 800a67e:	4680      	mov	r8, r0
 800a680:	469a      	mov	sl, r3
 800a682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a686:	d807      	bhi.n	800a698 <_printf_i+0x28>
 800a688:	2f62      	cmp	r7, #98	; 0x62
 800a68a:	d80a      	bhi.n	800a6a2 <_printf_i+0x32>
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	f000 80d8 	beq.w	800a842 <_printf_i+0x1d2>
 800a692:	2f58      	cmp	r7, #88	; 0x58
 800a694:	f000 80a3 	beq.w	800a7de <_printf_i+0x16e>
 800a698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a69c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6a0:	e03a      	b.n	800a718 <_printf_i+0xa8>
 800a6a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6a6:	2b15      	cmp	r3, #21
 800a6a8:	d8f6      	bhi.n	800a698 <_printf_i+0x28>
 800a6aa:	a001      	add	r0, pc, #4	; (adr r0, 800a6b0 <_printf_i+0x40>)
 800a6ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a6b0:	0800a709 	.word	0x0800a709
 800a6b4:	0800a71d 	.word	0x0800a71d
 800a6b8:	0800a699 	.word	0x0800a699
 800a6bc:	0800a699 	.word	0x0800a699
 800a6c0:	0800a699 	.word	0x0800a699
 800a6c4:	0800a699 	.word	0x0800a699
 800a6c8:	0800a71d 	.word	0x0800a71d
 800a6cc:	0800a699 	.word	0x0800a699
 800a6d0:	0800a699 	.word	0x0800a699
 800a6d4:	0800a699 	.word	0x0800a699
 800a6d8:	0800a699 	.word	0x0800a699
 800a6dc:	0800a829 	.word	0x0800a829
 800a6e0:	0800a74d 	.word	0x0800a74d
 800a6e4:	0800a80b 	.word	0x0800a80b
 800a6e8:	0800a699 	.word	0x0800a699
 800a6ec:	0800a699 	.word	0x0800a699
 800a6f0:	0800a84b 	.word	0x0800a84b
 800a6f4:	0800a699 	.word	0x0800a699
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a699 	.word	0x0800a699
 800a700:	0800a699 	.word	0x0800a699
 800a704:	0800a813 	.word	0x0800a813
 800a708:	680b      	ldr	r3, [r1, #0]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	600a      	str	r2, [r1, #0]
 800a710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a718:	2301      	movs	r3, #1
 800a71a:	e0a3      	b.n	800a864 <_printf_i+0x1f4>
 800a71c:	6825      	ldr	r5, [r4, #0]
 800a71e:	6808      	ldr	r0, [r1, #0]
 800a720:	062e      	lsls	r6, r5, #24
 800a722:	f100 0304 	add.w	r3, r0, #4
 800a726:	d50a      	bpl.n	800a73e <_printf_i+0xce>
 800a728:	6805      	ldr	r5, [r0, #0]
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	2d00      	cmp	r5, #0
 800a72e:	da03      	bge.n	800a738 <_printf_i+0xc8>
 800a730:	232d      	movs	r3, #45	; 0x2d
 800a732:	426d      	negs	r5, r5
 800a734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a738:	485e      	ldr	r0, [pc, #376]	; (800a8b4 <_printf_i+0x244>)
 800a73a:	230a      	movs	r3, #10
 800a73c:	e019      	b.n	800a772 <_printf_i+0x102>
 800a73e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a742:	6805      	ldr	r5, [r0, #0]
 800a744:	600b      	str	r3, [r1, #0]
 800a746:	bf18      	it	ne
 800a748:	b22d      	sxthne	r5, r5
 800a74a:	e7ef      	b.n	800a72c <_printf_i+0xbc>
 800a74c:	680b      	ldr	r3, [r1, #0]
 800a74e:	6825      	ldr	r5, [r4, #0]
 800a750:	1d18      	adds	r0, r3, #4
 800a752:	6008      	str	r0, [r1, #0]
 800a754:	0628      	lsls	r0, r5, #24
 800a756:	d501      	bpl.n	800a75c <_printf_i+0xec>
 800a758:	681d      	ldr	r5, [r3, #0]
 800a75a:	e002      	b.n	800a762 <_printf_i+0xf2>
 800a75c:	0669      	lsls	r1, r5, #25
 800a75e:	d5fb      	bpl.n	800a758 <_printf_i+0xe8>
 800a760:	881d      	ldrh	r5, [r3, #0]
 800a762:	4854      	ldr	r0, [pc, #336]	; (800a8b4 <_printf_i+0x244>)
 800a764:	2f6f      	cmp	r7, #111	; 0x6f
 800a766:	bf0c      	ite	eq
 800a768:	2308      	moveq	r3, #8
 800a76a:	230a      	movne	r3, #10
 800a76c:	2100      	movs	r1, #0
 800a76e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a772:	6866      	ldr	r6, [r4, #4]
 800a774:	60a6      	str	r6, [r4, #8]
 800a776:	2e00      	cmp	r6, #0
 800a778:	bfa2      	ittt	ge
 800a77a:	6821      	ldrge	r1, [r4, #0]
 800a77c:	f021 0104 	bicge.w	r1, r1, #4
 800a780:	6021      	strge	r1, [r4, #0]
 800a782:	b90d      	cbnz	r5, 800a788 <_printf_i+0x118>
 800a784:	2e00      	cmp	r6, #0
 800a786:	d04d      	beq.n	800a824 <_printf_i+0x1b4>
 800a788:	4616      	mov	r6, r2
 800a78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a78e:	fb03 5711 	mls	r7, r3, r1, r5
 800a792:	5dc7      	ldrb	r7, [r0, r7]
 800a794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a798:	462f      	mov	r7, r5
 800a79a:	42bb      	cmp	r3, r7
 800a79c:	460d      	mov	r5, r1
 800a79e:	d9f4      	bls.n	800a78a <_printf_i+0x11a>
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d10b      	bne.n	800a7bc <_printf_i+0x14c>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07df      	lsls	r7, r3, #31
 800a7a8:	d508      	bpl.n	800a7bc <_printf_i+0x14c>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	6861      	ldr	r1, [r4, #4]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	bfde      	ittt	le
 800a7b2:	2330      	movle	r3, #48	; 0x30
 800a7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7bc:	1b92      	subs	r2, r2, r6
 800a7be:	6122      	str	r2, [r4, #16]
 800a7c0:	f8cd a000 	str.w	sl, [sp]
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	aa03      	add	r2, sp, #12
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	f7ff fee2 	bl	800a594 <_printf_common>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d14c      	bne.n	800a86e <_printf_i+0x1fe>
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	b004      	add	sp, #16
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	4835      	ldr	r0, [pc, #212]	; (800a8b4 <_printf_i+0x244>)
 800a7e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	680e      	ldr	r6, [r1, #0]
 800a7e8:	061f      	lsls	r7, r3, #24
 800a7ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800a7ee:	600e      	str	r6, [r1, #0]
 800a7f0:	d514      	bpl.n	800a81c <_printf_i+0x1ac>
 800a7f2:	07d9      	lsls	r1, r3, #31
 800a7f4:	bf44      	itt	mi
 800a7f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7fa:	6023      	strmi	r3, [r4, #0]
 800a7fc:	b91d      	cbnz	r5, 800a806 <_printf_i+0x196>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	f023 0320 	bic.w	r3, r3, #32
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	2310      	movs	r3, #16
 800a808:	e7b0      	b.n	800a76c <_printf_i+0xfc>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	f043 0320 	orr.w	r3, r3, #32
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	2378      	movs	r3, #120	; 0x78
 800a814:	4828      	ldr	r0, [pc, #160]	; (800a8b8 <_printf_i+0x248>)
 800a816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a81a:	e7e3      	b.n	800a7e4 <_printf_i+0x174>
 800a81c:	065e      	lsls	r6, r3, #25
 800a81e:	bf48      	it	mi
 800a820:	b2ad      	uxthmi	r5, r5
 800a822:	e7e6      	b.n	800a7f2 <_printf_i+0x182>
 800a824:	4616      	mov	r6, r2
 800a826:	e7bb      	b.n	800a7a0 <_printf_i+0x130>
 800a828:	680b      	ldr	r3, [r1, #0]
 800a82a:	6826      	ldr	r6, [r4, #0]
 800a82c:	6960      	ldr	r0, [r4, #20]
 800a82e:	1d1d      	adds	r5, r3, #4
 800a830:	600d      	str	r5, [r1, #0]
 800a832:	0635      	lsls	r5, r6, #24
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	d501      	bpl.n	800a83c <_printf_i+0x1cc>
 800a838:	6018      	str	r0, [r3, #0]
 800a83a:	e002      	b.n	800a842 <_printf_i+0x1d2>
 800a83c:	0671      	lsls	r1, r6, #25
 800a83e:	d5fb      	bpl.n	800a838 <_printf_i+0x1c8>
 800a840:	8018      	strh	r0, [r3, #0]
 800a842:	2300      	movs	r3, #0
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	4616      	mov	r6, r2
 800a848:	e7ba      	b.n	800a7c0 <_printf_i+0x150>
 800a84a:	680b      	ldr	r3, [r1, #0]
 800a84c:	1d1a      	adds	r2, r3, #4
 800a84e:	600a      	str	r2, [r1, #0]
 800a850:	681e      	ldr	r6, [r3, #0]
 800a852:	6862      	ldr	r2, [r4, #4]
 800a854:	2100      	movs	r1, #0
 800a856:	4630      	mov	r0, r6
 800a858:	f7f5 fcf2 	bl	8000240 <memchr>
 800a85c:	b108      	cbz	r0, 800a862 <_printf_i+0x1f2>
 800a85e:	1b80      	subs	r0, r0, r6
 800a860:	6060      	str	r0, [r4, #4]
 800a862:	6863      	ldr	r3, [r4, #4]
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	2300      	movs	r3, #0
 800a868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a86c:	e7a8      	b.n	800a7c0 <_printf_i+0x150>
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	4632      	mov	r2, r6
 800a872:	4649      	mov	r1, r9
 800a874:	4640      	mov	r0, r8
 800a876:	47d0      	blx	sl
 800a878:	3001      	adds	r0, #1
 800a87a:	d0ab      	beq.n	800a7d4 <_printf_i+0x164>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	079b      	lsls	r3, r3, #30
 800a880:	d413      	bmi.n	800a8aa <_printf_i+0x23a>
 800a882:	68e0      	ldr	r0, [r4, #12]
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	4298      	cmp	r0, r3
 800a888:	bfb8      	it	lt
 800a88a:	4618      	movlt	r0, r3
 800a88c:	e7a4      	b.n	800a7d8 <_printf_i+0x168>
 800a88e:	2301      	movs	r3, #1
 800a890:	4632      	mov	r2, r6
 800a892:	4649      	mov	r1, r9
 800a894:	4640      	mov	r0, r8
 800a896:	47d0      	blx	sl
 800a898:	3001      	adds	r0, #1
 800a89a:	d09b      	beq.n	800a7d4 <_printf_i+0x164>
 800a89c:	3501      	adds	r5, #1
 800a89e:	68e3      	ldr	r3, [r4, #12]
 800a8a0:	9903      	ldr	r1, [sp, #12]
 800a8a2:	1a5b      	subs	r3, r3, r1
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	dcf2      	bgt.n	800a88e <_printf_i+0x21e>
 800a8a8:	e7eb      	b.n	800a882 <_printf_i+0x212>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	f104 0619 	add.w	r6, r4, #25
 800a8b0:	e7f5      	b.n	800a89e <_printf_i+0x22e>
 800a8b2:	bf00      	nop
 800a8b4:	08079fea 	.word	0x08079fea
 800a8b8:	08079ffb 	.word	0x08079ffb

0800a8bc <iprintf>:
 800a8bc:	b40f      	push	{r0, r1, r2, r3}
 800a8be:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <iprintf+0x2c>)
 800a8c0:	b513      	push	{r0, r1, r4, lr}
 800a8c2:	681c      	ldr	r4, [r3, #0]
 800a8c4:	b124      	cbz	r4, 800a8d0 <iprintf+0x14>
 800a8c6:	69a3      	ldr	r3, [r4, #24]
 800a8c8:	b913      	cbnz	r3, 800a8d0 <iprintf+0x14>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fee0 	bl	800b690 <__sinit>
 800a8d0:	ab05      	add	r3, sp, #20
 800a8d2:	9a04      	ldr	r2, [sp, #16]
 800a8d4:	68a1      	ldr	r1, [r4, #8]
 800a8d6:	9301      	str	r3, [sp, #4]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f001 fbf7 	bl	800c0cc <_vfiprintf_r>
 800a8de:	b002      	add	sp, #8
 800a8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e4:	b004      	add	sp, #16
 800a8e6:	4770      	bx	lr
 800a8e8:	2000000c 	.word	0x2000000c

0800a8ec <quorem>:
 800a8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	6903      	ldr	r3, [r0, #16]
 800a8f2:	690c      	ldr	r4, [r1, #16]
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	f2c0 8081 	blt.w	800a9fe <quorem+0x112>
 800a8fc:	3c01      	subs	r4, #1
 800a8fe:	f101 0814 	add.w	r8, r1, #20
 800a902:	f100 0514 	add.w	r5, r0, #20
 800a906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a914:	3301      	adds	r3, #1
 800a916:	429a      	cmp	r2, r3
 800a918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a91c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a920:	fbb2 f6f3 	udiv	r6, r2, r3
 800a924:	d331      	bcc.n	800a98a <quorem+0x9e>
 800a926:	f04f 0e00 	mov.w	lr, #0
 800a92a:	4640      	mov	r0, r8
 800a92c:	46ac      	mov	ip, r5
 800a92e:	46f2      	mov	sl, lr
 800a930:	f850 2b04 	ldr.w	r2, [r0], #4
 800a934:	b293      	uxth	r3, r2
 800a936:	fb06 e303 	mla	r3, r6, r3, lr
 800a93a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a93e:	b29b      	uxth	r3, r3
 800a940:	ebaa 0303 	sub.w	r3, sl, r3
 800a944:	0c12      	lsrs	r2, r2, #16
 800a946:	f8dc a000 	ldr.w	sl, [ip]
 800a94a:	fb06 e202 	mla	r2, r6, r2, lr
 800a94e:	fa13 f38a 	uxtah	r3, r3, sl
 800a952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a956:	fa1f fa82 	uxth.w	sl, r2
 800a95a:	f8dc 2000 	ldr.w	r2, [ip]
 800a95e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a966:	b29b      	uxth	r3, r3
 800a968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a96c:	4581      	cmp	r9, r0
 800a96e:	f84c 3b04 	str.w	r3, [ip], #4
 800a972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a976:	d2db      	bcs.n	800a930 <quorem+0x44>
 800a978:	f855 300b 	ldr.w	r3, [r5, fp]
 800a97c:	b92b      	cbnz	r3, 800a98a <quorem+0x9e>
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	3b04      	subs	r3, #4
 800a982:	429d      	cmp	r5, r3
 800a984:	461a      	mov	r2, r3
 800a986:	d32e      	bcc.n	800a9e6 <quorem+0xfa>
 800a988:	613c      	str	r4, [r7, #16]
 800a98a:	4638      	mov	r0, r7
 800a98c:	f001 f9ba 	bl	800bd04 <__mcmp>
 800a990:	2800      	cmp	r0, #0
 800a992:	db24      	blt.n	800a9de <quorem+0xf2>
 800a994:	3601      	adds	r6, #1
 800a996:	4628      	mov	r0, r5
 800a998:	f04f 0c00 	mov.w	ip, #0
 800a99c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a0:	f8d0 e000 	ldr.w	lr, [r0]
 800a9a4:	b293      	uxth	r3, r2
 800a9a6:	ebac 0303 	sub.w	r3, ip, r3
 800a9aa:	0c12      	lsrs	r2, r2, #16
 800a9ac:	fa13 f38e 	uxtah	r3, r3, lr
 800a9b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9be:	45c1      	cmp	r9, r8
 800a9c0:	f840 3b04 	str.w	r3, [r0], #4
 800a9c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9c8:	d2e8      	bcs.n	800a99c <quorem+0xb0>
 800a9ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9d2:	b922      	cbnz	r2, 800a9de <quorem+0xf2>
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	d30a      	bcc.n	800a9f2 <quorem+0x106>
 800a9dc:	613c      	str	r4, [r7, #16]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	b003      	add	sp, #12
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d1cc      	bne.n	800a988 <quorem+0x9c>
 800a9ee:	3c01      	subs	r4, #1
 800a9f0:	e7c7      	b.n	800a982 <quorem+0x96>
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1f0      	bne.n	800a9dc <quorem+0xf0>
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e7eb      	b.n	800a9d6 <quorem+0xea>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e7ee      	b.n	800a9e0 <quorem+0xf4>
 800aa02:	0000      	movs	r0, r0
 800aa04:	0000      	movs	r0, r0
	...

0800aa08 <_dtoa_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	ed2d 8b02 	vpush	{d8}
 800aa10:	ec57 6b10 	vmov	r6, r7, d0
 800aa14:	b095      	sub	sp, #84	; 0x54
 800aa16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa1c:	9105      	str	r1, [sp, #20]
 800aa1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aa22:	4604      	mov	r4, r0
 800aa24:	9209      	str	r2, [sp, #36]	; 0x24
 800aa26:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa28:	b975      	cbnz	r5, 800aa48 <_dtoa_r+0x40>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f000 fed6 	bl	800b7dc <malloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6260      	str	r0, [r4, #36]	; 0x24
 800aa34:	b920      	cbnz	r0, 800aa40 <_dtoa_r+0x38>
 800aa36:	4bb2      	ldr	r3, [pc, #712]	; (800ad00 <_dtoa_r+0x2f8>)
 800aa38:	21ea      	movs	r1, #234	; 0xea
 800aa3a:	48b2      	ldr	r0, [pc, #712]	; (800ad04 <_dtoa_r+0x2fc>)
 800aa3c:	f001 fd9c 	bl	800c578 <__assert_func>
 800aa40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa44:	6005      	str	r5, [r0, #0]
 800aa46:	60c5      	str	r5, [r0, #12]
 800aa48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa4a:	6819      	ldr	r1, [r3, #0]
 800aa4c:	b151      	cbz	r1, 800aa64 <_dtoa_r+0x5c>
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	604a      	str	r2, [r1, #4]
 800aa52:	2301      	movs	r3, #1
 800aa54:	4093      	lsls	r3, r2
 800aa56:	608b      	str	r3, [r1, #8]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 ff15 	bl	800b888 <_Bfree>
 800aa5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	1e3b      	subs	r3, r7, #0
 800aa66:	bfb9      	ittee	lt
 800aa68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa6c:	9303      	strlt	r3, [sp, #12]
 800aa6e:	2300      	movge	r3, #0
 800aa70:	f8c8 3000 	strge.w	r3, [r8]
 800aa74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa78:	4ba3      	ldr	r3, [pc, #652]	; (800ad08 <_dtoa_r+0x300>)
 800aa7a:	bfbc      	itt	lt
 800aa7c:	2201      	movlt	r2, #1
 800aa7e:	f8c8 2000 	strlt.w	r2, [r8]
 800aa82:	ea33 0309 	bics.w	r3, r3, r9
 800aa86:	d11b      	bne.n	800aac0 <_dtoa_r+0xb8>
 800aa88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa94:	4333      	orrs	r3, r6
 800aa96:	f000 857a 	beq.w	800b58e <_dtoa_r+0xb86>
 800aa9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa9c:	b963      	cbnz	r3, 800aab8 <_dtoa_r+0xb0>
 800aa9e:	4b9b      	ldr	r3, [pc, #620]	; (800ad0c <_dtoa_r+0x304>)
 800aaa0:	e024      	b.n	800aaec <_dtoa_r+0xe4>
 800aaa2:	4b9b      	ldr	r3, [pc, #620]	; (800ad10 <_dtoa_r+0x308>)
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	9800      	ldr	r0, [sp, #0]
 800aaae:	b015      	add	sp, #84	; 0x54
 800aab0:	ecbd 8b02 	vpop	{d8}
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	4b94      	ldr	r3, [pc, #592]	; (800ad0c <_dtoa_r+0x304>)
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	3303      	adds	r3, #3
 800aabe:	e7f3      	b.n	800aaa8 <_dtoa_r+0xa0>
 800aac0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aac4:	2200      	movs	r2, #0
 800aac6:	ec51 0b17 	vmov	r0, r1, d7
 800aaca:	2300      	movs	r3, #0
 800aacc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aad0:	f7f6 f82a 	bl	8000b28 <__aeabi_dcmpeq>
 800aad4:	4680      	mov	r8, r0
 800aad6:	b158      	cbz	r0, 800aaf0 <_dtoa_r+0xe8>
 800aad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aada:	2301      	movs	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 8551 	beq.w	800b588 <_dtoa_r+0xb80>
 800aae6:	488b      	ldr	r0, [pc, #556]	; (800ad14 <_dtoa_r+0x30c>)
 800aae8:	6018      	str	r0, [r3, #0]
 800aaea:	1e43      	subs	r3, r0, #1
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	e7dd      	b.n	800aaac <_dtoa_r+0xa4>
 800aaf0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aaf4:	aa12      	add	r2, sp, #72	; 0x48
 800aaf6:	a913      	add	r1, sp, #76	; 0x4c
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f001 f9a7 	bl	800be4c <__d2b>
 800aafe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab02:	4683      	mov	fp, r0
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	d07c      	beq.n	800ac02 <_dtoa_r+0x1fa>
 800ab08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ab0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ab16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab22:	4b7d      	ldr	r3, [pc, #500]	; (800ad18 <_dtoa_r+0x310>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	f7f5 fbdd 	bl	80002e8 <__aeabi_dsub>
 800ab2e:	a36e      	add	r3, pc, #440	; (adr r3, 800ace8 <_dtoa_r+0x2e0>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 fd90 	bl	8000658 <__aeabi_dmul>
 800ab38:	a36d      	add	r3, pc, #436	; (adr r3, 800acf0 <_dtoa_r+0x2e8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fbd5 	bl	80002ec <__adddf3>
 800ab42:	4606      	mov	r6, r0
 800ab44:	4628      	mov	r0, r5
 800ab46:	460f      	mov	r7, r1
 800ab48:	f7f5 fd1c 	bl	8000584 <__aeabi_i2d>
 800ab4c:	a36a      	add	r3, pc, #424	; (adr r3, 800acf8 <_dtoa_r+0x2f0>)
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	f7f5 fd81 	bl	8000658 <__aeabi_dmul>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 fbc5 	bl	80002ec <__adddf3>
 800ab62:	4606      	mov	r6, r0
 800ab64:	460f      	mov	r7, r1
 800ab66:	f7f6 f827 	bl	8000bb8 <__aeabi_d2iz>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	2300      	movs	r3, #0
 800ab70:	4630      	mov	r0, r6
 800ab72:	4639      	mov	r1, r7
 800ab74:	f7f5 ffe2 	bl	8000b3c <__aeabi_dcmplt>
 800ab78:	b148      	cbz	r0, 800ab8e <_dtoa_r+0x186>
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	f7f5 fd02 	bl	8000584 <__aeabi_i2d>
 800ab80:	4632      	mov	r2, r6
 800ab82:	463b      	mov	r3, r7
 800ab84:	f7f5 ffd0 	bl	8000b28 <__aeabi_dcmpeq>
 800ab88:	b908      	cbnz	r0, 800ab8e <_dtoa_r+0x186>
 800ab8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab8e:	f1ba 0f16 	cmp.w	sl, #22
 800ab92:	d854      	bhi.n	800ac3e <_dtoa_r+0x236>
 800ab94:	4b61      	ldr	r3, [pc, #388]	; (800ad1c <_dtoa_r+0x314>)
 800ab96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aba2:	f7f5 ffcb 	bl	8000b3c <__aeabi_dcmplt>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d04b      	beq.n	800ac42 <_dtoa_r+0x23a>
 800abaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abae:	2300      	movs	r3, #0
 800abb0:	930e      	str	r3, [sp, #56]	; 0x38
 800abb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abb4:	1b5d      	subs	r5, r3, r5
 800abb6:	1e6b      	subs	r3, r5, #1
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	bf43      	ittte	mi
 800abbc:	2300      	movmi	r3, #0
 800abbe:	f1c5 0801 	rsbmi	r8, r5, #1
 800abc2:	9304      	strmi	r3, [sp, #16]
 800abc4:	f04f 0800 	movpl.w	r8, #0
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	db3b      	blt.n	800ac46 <_dtoa_r+0x23e>
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800abd4:	4453      	add	r3, sl
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	2300      	movs	r3, #0
 800abda:	9306      	str	r3, [sp, #24]
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	2b09      	cmp	r3, #9
 800abe0:	d869      	bhi.n	800acb6 <_dtoa_r+0x2ae>
 800abe2:	2b05      	cmp	r3, #5
 800abe4:	bfc4      	itt	gt
 800abe6:	3b04      	subgt	r3, #4
 800abe8:	9305      	strgt	r3, [sp, #20]
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	f1a3 0302 	sub.w	r3, r3, #2
 800abf0:	bfcc      	ite	gt
 800abf2:	2500      	movgt	r5, #0
 800abf4:	2501      	movle	r5, #1
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d869      	bhi.n	800acce <_dtoa_r+0x2c6>
 800abfa:	e8df f003 	tbb	[pc, r3]
 800abfe:	4e2c      	.short	0x4e2c
 800ac00:	5a4c      	.short	0x5a4c
 800ac02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ac06:	441d      	add	r5, r3
 800ac08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	bfc1      	itttt	gt
 800ac10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac18:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac20:	bfda      	itte	le
 800ac22:	f1c3 0320 	rsble	r3, r3, #32
 800ac26:	fa06 f003 	lslle.w	r0, r6, r3
 800ac2a:	4318      	orrgt	r0, r3
 800ac2c:	f7f5 fc9a 	bl	8000564 <__aeabi_ui2d>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4606      	mov	r6, r0
 800ac34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac38:	3d01      	subs	r5, #1
 800ac3a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac3c:	e771      	b.n	800ab22 <_dtoa_r+0x11a>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7b6      	b.n	800abb0 <_dtoa_r+0x1a8>
 800ac42:	900e      	str	r0, [sp, #56]	; 0x38
 800ac44:	e7b5      	b.n	800abb2 <_dtoa_r+0x1aa>
 800ac46:	f1ca 0300 	rsb	r3, sl, #0
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	eba8 080a 	sub.w	r8, r8, sl
 800ac52:	930d      	str	r3, [sp, #52]	; 0x34
 800ac54:	e7c2      	b.n	800abdc <_dtoa_r+0x1d4>
 800ac56:	2300      	movs	r3, #0
 800ac58:	9308      	str	r3, [sp, #32]
 800ac5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dc39      	bgt.n	800acd4 <_dtoa_r+0x2cc>
 800ac60:	f04f 0901 	mov.w	r9, #1
 800ac64:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac68:	464b      	mov	r3, r9
 800ac6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac70:	2200      	movs	r2, #0
 800ac72:	6042      	str	r2, [r0, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f102 0614 	add.w	r6, r2, #20
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	6841      	ldr	r1, [r0, #4]
 800ac7e:	d92f      	bls.n	800ace0 <_dtoa_r+0x2d8>
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fdc1 	bl	800b808 <_Balloc>
 800ac86:	9000      	str	r0, [sp, #0]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d14b      	bne.n	800ad24 <_dtoa_r+0x31c>
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <_dtoa_r+0x318>)
 800ac8e:	4602      	mov	r2, r0
 800ac90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac94:	e6d1      	b.n	800aa3a <_dtoa_r+0x32>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e7de      	b.n	800ac58 <_dtoa_r+0x250>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	9308      	str	r3, [sp, #32]
 800ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca0:	eb0a 0903 	add.w	r9, sl, r3
 800aca4:	f109 0301 	add.w	r3, r9, #1
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	bfb8      	it	lt
 800acae:	2301      	movlt	r3, #1
 800acb0:	e7dd      	b.n	800ac6e <_dtoa_r+0x266>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e7f2      	b.n	800ac9c <_dtoa_r+0x294>
 800acb6:	2501      	movs	r5, #1
 800acb8:	2300      	movs	r3, #0
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	9508      	str	r5, [sp, #32]
 800acbe:	f04f 39ff 	mov.w	r9, #4294967295
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800acc8:	2312      	movs	r3, #18
 800acca:	9209      	str	r2, [sp, #36]	; 0x24
 800accc:	e7cf      	b.n	800ac6e <_dtoa_r+0x266>
 800acce:	2301      	movs	r3, #1
 800acd0:	9308      	str	r3, [sp, #32]
 800acd2:	e7f4      	b.n	800acbe <_dtoa_r+0x2b6>
 800acd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800acd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800acdc:	464b      	mov	r3, r9
 800acde:	e7c6      	b.n	800ac6e <_dtoa_r+0x266>
 800ace0:	3101      	adds	r1, #1
 800ace2:	6041      	str	r1, [r0, #4]
 800ace4:	0052      	lsls	r2, r2, #1
 800ace6:	e7c6      	b.n	800ac76 <_dtoa_r+0x26e>
 800ace8:	636f4361 	.word	0x636f4361
 800acec:	3fd287a7 	.word	0x3fd287a7
 800acf0:	8b60c8b3 	.word	0x8b60c8b3
 800acf4:	3fc68a28 	.word	0x3fc68a28
 800acf8:	509f79fb 	.word	0x509f79fb
 800acfc:	3fd34413 	.word	0x3fd34413
 800ad00:	0807a019 	.word	0x0807a019
 800ad04:	0807a030 	.word	0x0807a030
 800ad08:	7ff00000 	.word	0x7ff00000
 800ad0c:	0807a015 	.word	0x0807a015
 800ad10:	0807a00c 	.word	0x0807a00c
 800ad14:	08079fe9 	.word	0x08079fe9
 800ad18:	3ff80000 	.word	0x3ff80000
 800ad1c:	0807a188 	.word	0x0807a188
 800ad20:	0807a08f 	.word	0x0807a08f
 800ad24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad26:	9a00      	ldr	r2, [sp, #0]
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	2b0e      	cmp	r3, #14
 800ad2e:	f200 80ad 	bhi.w	800ae8c <_dtoa_r+0x484>
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	f000 80aa 	beq.w	800ae8c <_dtoa_r+0x484>
 800ad38:	f1ba 0f00 	cmp.w	sl, #0
 800ad3c:	dd36      	ble.n	800adac <_dtoa_r+0x3a4>
 800ad3e:	4ac3      	ldr	r2, [pc, #780]	; (800b04c <_dtoa_r+0x644>)
 800ad40:	f00a 030f 	and.w	r3, sl, #15
 800ad44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad48:	ed93 7b00 	vldr	d7, [r3]
 800ad4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad50:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ad54:	eeb0 8a47 	vmov.f32	s16, s14
 800ad58:	eef0 8a67 	vmov.f32	s17, s15
 800ad5c:	d016      	beq.n	800ad8c <_dtoa_r+0x384>
 800ad5e:	4bbc      	ldr	r3, [pc, #752]	; (800b050 <_dtoa_r+0x648>)
 800ad60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad68:	f7f5 fda0 	bl	80008ac <__aeabi_ddiv>
 800ad6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad70:	f007 070f 	and.w	r7, r7, #15
 800ad74:	2503      	movs	r5, #3
 800ad76:	4eb6      	ldr	r6, [pc, #728]	; (800b050 <_dtoa_r+0x648>)
 800ad78:	b957      	cbnz	r7, 800ad90 <_dtoa_r+0x388>
 800ad7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad7e:	ec53 2b18 	vmov	r2, r3, d8
 800ad82:	f7f5 fd93 	bl	80008ac <__aeabi_ddiv>
 800ad86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad8a:	e029      	b.n	800ade0 <_dtoa_r+0x3d8>
 800ad8c:	2502      	movs	r5, #2
 800ad8e:	e7f2      	b.n	800ad76 <_dtoa_r+0x36e>
 800ad90:	07f9      	lsls	r1, r7, #31
 800ad92:	d508      	bpl.n	800ada6 <_dtoa_r+0x39e>
 800ad94:	ec51 0b18 	vmov	r0, r1, d8
 800ad98:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad9c:	f7f5 fc5c 	bl	8000658 <__aeabi_dmul>
 800ada0:	ec41 0b18 	vmov	d8, r0, r1
 800ada4:	3501      	adds	r5, #1
 800ada6:	107f      	asrs	r7, r7, #1
 800ada8:	3608      	adds	r6, #8
 800adaa:	e7e5      	b.n	800ad78 <_dtoa_r+0x370>
 800adac:	f000 80a6 	beq.w	800aefc <_dtoa_r+0x4f4>
 800adb0:	f1ca 0600 	rsb	r6, sl, #0
 800adb4:	4ba5      	ldr	r3, [pc, #660]	; (800b04c <_dtoa_r+0x644>)
 800adb6:	4fa6      	ldr	r7, [pc, #664]	; (800b050 <_dtoa_r+0x648>)
 800adb8:	f006 020f 	and.w	r2, r6, #15
 800adbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adc8:	f7f5 fc46 	bl	8000658 <__aeabi_dmul>
 800adcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add0:	1136      	asrs	r6, r6, #4
 800add2:	2300      	movs	r3, #0
 800add4:	2502      	movs	r5, #2
 800add6:	2e00      	cmp	r6, #0
 800add8:	f040 8085 	bne.w	800aee6 <_dtoa_r+0x4de>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1d2      	bne.n	800ad86 <_dtoa_r+0x37e>
 800ade0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 808c 	beq.w	800af00 <_dtoa_r+0x4f8>
 800ade8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adec:	4b99      	ldr	r3, [pc, #612]	; (800b054 <_dtoa_r+0x64c>)
 800adee:	2200      	movs	r2, #0
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fea2 	bl	8000b3c <__aeabi_dcmplt>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f000 8081 	beq.w	800af00 <_dtoa_r+0x4f8>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d07d      	beq.n	800af00 <_dtoa_r+0x4f8>
 800ae04:	f1b9 0f00 	cmp.w	r9, #0
 800ae08:	dd3c      	ble.n	800ae84 <_dtoa_r+0x47c>
 800ae0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae0e:	9307      	str	r3, [sp, #28]
 800ae10:	2200      	movs	r2, #0
 800ae12:	4b91      	ldr	r3, [pc, #580]	; (800b058 <_dtoa_r+0x650>)
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fc1e 	bl	8000658 <__aeabi_dmul>
 800ae1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae20:	3501      	adds	r5, #1
 800ae22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ae26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7f5 fbaa 	bl	8000584 <__aeabi_i2d>
 800ae30:	4632      	mov	r2, r6
 800ae32:	463b      	mov	r3, r7
 800ae34:	f7f5 fc10 	bl	8000658 <__aeabi_dmul>
 800ae38:	4b88      	ldr	r3, [pc, #544]	; (800b05c <_dtoa_r+0x654>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f7f5 fa56 	bl	80002ec <__adddf3>
 800ae40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d15c      	bne.n	800af0a <_dtoa_r+0x502>
 800ae50:	4b83      	ldr	r3, [pc, #524]	; (800b060 <_dtoa_r+0x658>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fa46 	bl	80002e8 <__aeabi_dsub>
 800ae5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae60:	4606      	mov	r6, r0
 800ae62:	460f      	mov	r7, r1
 800ae64:	f7f5 fe88 	bl	8000b78 <__aeabi_dcmpgt>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f040 8296 	bne.w	800b39a <_dtoa_r+0x992>
 800ae6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae72:	4630      	mov	r0, r6
 800ae74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 fe5f 	bl	8000b3c <__aeabi_dcmplt>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f040 8288 	bne.w	800b394 <_dtoa_r+0x98c>
 800ae84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f2c0 8158 	blt.w	800b144 <_dtoa_r+0x73c>
 800ae94:	f1ba 0f0e 	cmp.w	sl, #14
 800ae98:	f300 8154 	bgt.w	800b144 <_dtoa_r+0x73c>
 800ae9c:	4b6b      	ldr	r3, [pc, #428]	; (800b04c <_dtoa_r+0x644>)
 800ae9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f280 80e3 	bge.w	800b074 <_dtoa_r+0x66c>
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f300 80df 	bgt.w	800b074 <_dtoa_r+0x66c>
 800aeb6:	f040 826d 	bne.w	800b394 <_dtoa_r+0x98c>
 800aeba:	4b69      	ldr	r3, [pc, #420]	; (800b060 <_dtoa_r+0x658>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7f5 fbc9 	bl	8000658 <__aeabi_dmul>
 800aec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeca:	f7f5 fe4b 	bl	8000b64 <__aeabi_dcmpge>
 800aece:	9e01      	ldr	r6, [sp, #4]
 800aed0:	4637      	mov	r7, r6
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f040 8243 	bne.w	800b35e <_dtoa_r+0x956>
 800aed8:	9d00      	ldr	r5, [sp, #0]
 800aeda:	2331      	movs	r3, #49	; 0x31
 800aedc:	f805 3b01 	strb.w	r3, [r5], #1
 800aee0:	f10a 0a01 	add.w	sl, sl, #1
 800aee4:	e23f      	b.n	800b366 <_dtoa_r+0x95e>
 800aee6:	07f2      	lsls	r2, r6, #31
 800aee8:	d505      	bpl.n	800aef6 <_dtoa_r+0x4ee>
 800aeea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeee:	f7f5 fbb3 	bl	8000658 <__aeabi_dmul>
 800aef2:	3501      	adds	r5, #1
 800aef4:	2301      	movs	r3, #1
 800aef6:	1076      	asrs	r6, r6, #1
 800aef8:	3708      	adds	r7, #8
 800aefa:	e76c      	b.n	800add6 <_dtoa_r+0x3ce>
 800aefc:	2502      	movs	r5, #2
 800aefe:	e76f      	b.n	800ade0 <_dtoa_r+0x3d8>
 800af00:	9b01      	ldr	r3, [sp, #4]
 800af02:	f8cd a01c 	str.w	sl, [sp, #28]
 800af06:	930c      	str	r3, [sp, #48]	; 0x30
 800af08:	e78d      	b.n	800ae26 <_dtoa_r+0x41e>
 800af0a:	9900      	ldr	r1, [sp, #0]
 800af0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af10:	4b4e      	ldr	r3, [pc, #312]	; (800b04c <_dtoa_r+0x644>)
 800af12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af16:	4401      	add	r1, r0
 800af18:	9102      	str	r1, [sp, #8]
 800af1a:	9908      	ldr	r1, [sp, #32]
 800af1c:	eeb0 8a47 	vmov.f32	s16, s14
 800af20:	eef0 8a67 	vmov.f32	s17, s15
 800af24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af2c:	2900      	cmp	r1, #0
 800af2e:	d045      	beq.n	800afbc <_dtoa_r+0x5b4>
 800af30:	494c      	ldr	r1, [pc, #304]	; (800b064 <_dtoa_r+0x65c>)
 800af32:	2000      	movs	r0, #0
 800af34:	f7f5 fcba 	bl	80008ac <__aeabi_ddiv>
 800af38:	ec53 2b18 	vmov	r2, r3, d8
 800af3c:	f7f5 f9d4 	bl	80002e8 <__aeabi_dsub>
 800af40:	9d00      	ldr	r5, [sp, #0]
 800af42:	ec41 0b18 	vmov	d8, r0, r1
 800af46:	4639      	mov	r1, r7
 800af48:	4630      	mov	r0, r6
 800af4a:	f7f5 fe35 	bl	8000bb8 <__aeabi_d2iz>
 800af4e:	900c      	str	r0, [sp, #48]	; 0x30
 800af50:	f7f5 fb18 	bl	8000584 <__aeabi_i2d>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 f9c4 	bl	80002e8 <__aeabi_dsub>
 800af60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af62:	3330      	adds	r3, #48	; 0x30
 800af64:	f805 3b01 	strb.w	r3, [r5], #1
 800af68:	ec53 2b18 	vmov	r2, r3, d8
 800af6c:	4606      	mov	r6, r0
 800af6e:	460f      	mov	r7, r1
 800af70:	f7f5 fde4 	bl	8000b3c <__aeabi_dcmplt>
 800af74:	2800      	cmp	r0, #0
 800af76:	d165      	bne.n	800b044 <_dtoa_r+0x63c>
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	4935      	ldr	r1, [pc, #212]	; (800b054 <_dtoa_r+0x64c>)
 800af7e:	2000      	movs	r0, #0
 800af80:	f7f5 f9b2 	bl	80002e8 <__aeabi_dsub>
 800af84:	ec53 2b18 	vmov	r2, r3, d8
 800af88:	f7f5 fdd8 	bl	8000b3c <__aeabi_dcmplt>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f040 80b9 	bne.w	800b104 <_dtoa_r+0x6fc>
 800af92:	9b02      	ldr	r3, [sp, #8]
 800af94:	429d      	cmp	r5, r3
 800af96:	f43f af75 	beq.w	800ae84 <_dtoa_r+0x47c>
 800af9a:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <_dtoa_r+0x650>)
 800af9c:	ec51 0b18 	vmov	r0, r1, d8
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb59 	bl	8000658 <__aeabi_dmul>
 800afa6:	4b2c      	ldr	r3, [pc, #176]	; (800b058 <_dtoa_r+0x650>)
 800afa8:	ec41 0b18 	vmov	d8, r0, r1
 800afac:	2200      	movs	r2, #0
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 fb51 	bl	8000658 <__aeabi_dmul>
 800afb6:	4606      	mov	r6, r0
 800afb8:	460f      	mov	r7, r1
 800afba:	e7c4      	b.n	800af46 <_dtoa_r+0x53e>
 800afbc:	ec51 0b17 	vmov	r0, r1, d7
 800afc0:	f7f5 fb4a 	bl	8000658 <__aeabi_dmul>
 800afc4:	9b02      	ldr	r3, [sp, #8]
 800afc6:	9d00      	ldr	r5, [sp, #0]
 800afc8:	930c      	str	r3, [sp, #48]	; 0x30
 800afca:	ec41 0b18 	vmov	d8, r0, r1
 800afce:	4639      	mov	r1, r7
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7f5 fdf1 	bl	8000bb8 <__aeabi_d2iz>
 800afd6:	9011      	str	r0, [sp, #68]	; 0x44
 800afd8:	f7f5 fad4 	bl	8000584 <__aeabi_i2d>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 f980 	bl	80002e8 <__aeabi_dsub>
 800afe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afea:	3330      	adds	r3, #48	; 0x30
 800afec:	f805 3b01 	strb.w	r3, [r5], #1
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	429d      	cmp	r5, r3
 800aff4:	4606      	mov	r6, r0
 800aff6:	460f      	mov	r7, r1
 800aff8:	f04f 0200 	mov.w	r2, #0
 800affc:	d134      	bne.n	800b068 <_dtoa_r+0x660>
 800affe:	4b19      	ldr	r3, [pc, #100]	; (800b064 <_dtoa_r+0x65c>)
 800b000:	ec51 0b18 	vmov	r0, r1, d8
 800b004:	f7f5 f972 	bl	80002ec <__adddf3>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 fdb2 	bl	8000b78 <__aeabi_dcmpgt>
 800b014:	2800      	cmp	r0, #0
 800b016:	d175      	bne.n	800b104 <_dtoa_r+0x6fc>
 800b018:	ec53 2b18 	vmov	r2, r3, d8
 800b01c:	4911      	ldr	r1, [pc, #68]	; (800b064 <_dtoa_r+0x65c>)
 800b01e:	2000      	movs	r0, #0
 800b020:	f7f5 f962 	bl	80002e8 <__aeabi_dsub>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fd86 	bl	8000b3c <__aeabi_dcmplt>
 800b030:	2800      	cmp	r0, #0
 800b032:	f43f af27 	beq.w	800ae84 <_dtoa_r+0x47c>
 800b036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b038:	1e6b      	subs	r3, r5, #1
 800b03a:	930c      	str	r3, [sp, #48]	; 0x30
 800b03c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b040:	2b30      	cmp	r3, #48	; 0x30
 800b042:	d0f8      	beq.n	800b036 <_dtoa_r+0x62e>
 800b044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b048:	e04a      	b.n	800b0e0 <_dtoa_r+0x6d8>
 800b04a:	bf00      	nop
 800b04c:	0807a188 	.word	0x0807a188
 800b050:	0807a160 	.word	0x0807a160
 800b054:	3ff00000 	.word	0x3ff00000
 800b058:	40240000 	.word	0x40240000
 800b05c:	401c0000 	.word	0x401c0000
 800b060:	40140000 	.word	0x40140000
 800b064:	3fe00000 	.word	0x3fe00000
 800b068:	4baf      	ldr	r3, [pc, #700]	; (800b328 <_dtoa_r+0x920>)
 800b06a:	f7f5 faf5 	bl	8000658 <__aeabi_dmul>
 800b06e:	4606      	mov	r6, r0
 800b070:	460f      	mov	r7, r1
 800b072:	e7ac      	b.n	800afce <_dtoa_r+0x5c6>
 800b074:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b078:	9d00      	ldr	r5, [sp, #0]
 800b07a:	4642      	mov	r2, r8
 800b07c:	464b      	mov	r3, r9
 800b07e:	4630      	mov	r0, r6
 800b080:	4639      	mov	r1, r7
 800b082:	f7f5 fc13 	bl	80008ac <__aeabi_ddiv>
 800b086:	f7f5 fd97 	bl	8000bb8 <__aeabi_d2iz>
 800b08a:	9002      	str	r0, [sp, #8]
 800b08c:	f7f5 fa7a 	bl	8000584 <__aeabi_i2d>
 800b090:	4642      	mov	r2, r8
 800b092:	464b      	mov	r3, r9
 800b094:	f7f5 fae0 	bl	8000658 <__aeabi_dmul>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	f7f5 f922 	bl	80002e8 <__aeabi_dsub>
 800b0a4:	9e02      	ldr	r6, [sp, #8]
 800b0a6:	9f01      	ldr	r7, [sp, #4]
 800b0a8:	3630      	adds	r6, #48	; 0x30
 800b0aa:	f805 6b01 	strb.w	r6, [r5], #1
 800b0ae:	9e00      	ldr	r6, [sp, #0]
 800b0b0:	1bae      	subs	r6, r5, r6
 800b0b2:	42b7      	cmp	r7, r6
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	d137      	bne.n	800b12a <_dtoa_r+0x722>
 800b0ba:	f7f5 f917 	bl	80002ec <__adddf3>
 800b0be:	4642      	mov	r2, r8
 800b0c0:	464b      	mov	r3, r9
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	f7f5 fd57 	bl	8000b78 <__aeabi_dcmpgt>
 800b0ca:	b9c8      	cbnz	r0, 800b100 <_dtoa_r+0x6f8>
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	f7f5 fd28 	bl	8000b28 <__aeabi_dcmpeq>
 800b0d8:	b110      	cbz	r0, 800b0e0 <_dtoa_r+0x6d8>
 800b0da:	9b02      	ldr	r3, [sp, #8]
 800b0dc:	07d9      	lsls	r1, r3, #31
 800b0de:	d40f      	bmi.n	800b100 <_dtoa_r+0x6f8>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f000 fbd0 	bl	800b888 <_Bfree>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	702b      	strb	r3, [r5, #0]
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ee:	f10a 0001 	add.w	r0, sl, #1
 800b0f2:	6018      	str	r0, [r3, #0]
 800b0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f43f acd8 	beq.w	800aaac <_dtoa_r+0xa4>
 800b0fc:	601d      	str	r5, [r3, #0]
 800b0fe:	e4d5      	b.n	800aaac <_dtoa_r+0xa4>
 800b100:	f8cd a01c 	str.w	sl, [sp, #28]
 800b104:	462b      	mov	r3, r5
 800b106:	461d      	mov	r5, r3
 800b108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b10c:	2a39      	cmp	r2, #57	; 0x39
 800b10e:	d108      	bne.n	800b122 <_dtoa_r+0x71a>
 800b110:	9a00      	ldr	r2, [sp, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d1f7      	bne.n	800b106 <_dtoa_r+0x6fe>
 800b116:	9a07      	ldr	r2, [sp, #28]
 800b118:	9900      	ldr	r1, [sp, #0]
 800b11a:	3201      	adds	r2, #1
 800b11c:	9207      	str	r2, [sp, #28]
 800b11e:	2230      	movs	r2, #48	; 0x30
 800b120:	700a      	strb	r2, [r1, #0]
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	3201      	adds	r2, #1
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e78c      	b.n	800b044 <_dtoa_r+0x63c>
 800b12a:	4b7f      	ldr	r3, [pc, #508]	; (800b328 <_dtoa_r+0x920>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	f7f5 fa93 	bl	8000658 <__aeabi_dmul>
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	f7f5 fcf5 	bl	8000b28 <__aeabi_dcmpeq>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d09b      	beq.n	800b07a <_dtoa_r+0x672>
 800b142:	e7cd      	b.n	800b0e0 <_dtoa_r+0x6d8>
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	2a00      	cmp	r2, #0
 800b148:	f000 80c4 	beq.w	800b2d4 <_dtoa_r+0x8cc>
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	2a01      	cmp	r2, #1
 800b150:	f300 80a8 	bgt.w	800b2a4 <_dtoa_r+0x89c>
 800b154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b156:	2a00      	cmp	r2, #0
 800b158:	f000 80a0 	beq.w	800b29c <_dtoa_r+0x894>
 800b15c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b160:	9e06      	ldr	r6, [sp, #24]
 800b162:	4645      	mov	r5, r8
 800b164:	9a04      	ldr	r2, [sp, #16]
 800b166:	2101      	movs	r1, #1
 800b168:	441a      	add	r2, r3
 800b16a:	4620      	mov	r0, r4
 800b16c:	4498      	add	r8, r3
 800b16e:	9204      	str	r2, [sp, #16]
 800b170:	f000 fc46 	bl	800ba00 <__i2b>
 800b174:	4607      	mov	r7, r0
 800b176:	2d00      	cmp	r5, #0
 800b178:	dd0b      	ble.n	800b192 <_dtoa_r+0x78a>
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dd08      	ble.n	800b192 <_dtoa_r+0x78a>
 800b180:	42ab      	cmp	r3, r5
 800b182:	9a04      	ldr	r2, [sp, #16]
 800b184:	bfa8      	it	ge
 800b186:	462b      	movge	r3, r5
 800b188:	eba8 0803 	sub.w	r8, r8, r3
 800b18c:	1aed      	subs	r5, r5, r3
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	9b06      	ldr	r3, [sp, #24]
 800b194:	b1fb      	cbz	r3, 800b1d6 <_dtoa_r+0x7ce>
 800b196:	9b08      	ldr	r3, [sp, #32]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 809f 	beq.w	800b2dc <_dtoa_r+0x8d4>
 800b19e:	2e00      	cmp	r6, #0
 800b1a0:	dd11      	ble.n	800b1c6 <_dtoa_r+0x7be>
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fce6 	bl	800bb78 <__pow5mult>
 800b1ac:	465a      	mov	r2, fp
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	4607      	mov	r7, r0
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fc3a 	bl	800ba2c <__multiply>
 800b1b8:	4659      	mov	r1, fp
 800b1ba:	9007      	str	r0, [sp, #28]
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fb63 	bl	800b888 <_Bfree>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	469b      	mov	fp, r3
 800b1c6:	9b06      	ldr	r3, [sp, #24]
 800b1c8:	1b9a      	subs	r2, r3, r6
 800b1ca:	d004      	beq.n	800b1d6 <_dtoa_r+0x7ce>
 800b1cc:	4659      	mov	r1, fp
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 fcd2 	bl	800bb78 <__pow5mult>
 800b1d4:	4683      	mov	fp, r0
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 fc11 	bl	800ba00 <__i2b>
 800b1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	dd7c      	ble.n	800b2e0 <_dtoa_r+0x8d8>
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4601      	mov	r1, r0
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 fcc4 	bl	800bb78 <__pow5mult>
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	dd76      	ble.n	800b2e6 <_dtoa_r+0x8de>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9306      	str	r3, [sp, #24]
 800b1fc:	6933      	ldr	r3, [r6, #16]
 800b1fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b202:	6918      	ldr	r0, [r3, #16]
 800b204:	f000 fbac 	bl	800b960 <__hi0bits>
 800b208:	f1c0 0020 	rsb	r0, r0, #32
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	4418      	add	r0, r3
 800b210:	f010 001f 	ands.w	r0, r0, #31
 800b214:	f000 8086 	beq.w	800b324 <_dtoa_r+0x91c>
 800b218:	f1c0 0320 	rsb	r3, r0, #32
 800b21c:	2b04      	cmp	r3, #4
 800b21e:	dd7f      	ble.n	800b320 <_dtoa_r+0x918>
 800b220:	f1c0 001c 	rsb	r0, r0, #28
 800b224:	9b04      	ldr	r3, [sp, #16]
 800b226:	4403      	add	r3, r0
 800b228:	4480      	add	r8, r0
 800b22a:	4405      	add	r5, r0
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	f1b8 0f00 	cmp.w	r8, #0
 800b232:	dd05      	ble.n	800b240 <_dtoa_r+0x838>
 800b234:	4659      	mov	r1, fp
 800b236:	4642      	mov	r2, r8
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fcf7 	bl	800bc2c <__lshift>
 800b23e:	4683      	mov	fp, r0
 800b240:	9b04      	ldr	r3, [sp, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd05      	ble.n	800b252 <_dtoa_r+0x84a>
 800b246:	4631      	mov	r1, r6
 800b248:	461a      	mov	r2, r3
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fcee 	bl	800bc2c <__lshift>
 800b250:	4606      	mov	r6, r0
 800b252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d069      	beq.n	800b32c <_dtoa_r+0x924>
 800b258:	4631      	mov	r1, r6
 800b25a:	4658      	mov	r0, fp
 800b25c:	f000 fd52 	bl	800bd04 <__mcmp>
 800b260:	2800      	cmp	r0, #0
 800b262:	da63      	bge.n	800b32c <_dtoa_r+0x924>
 800b264:	2300      	movs	r3, #0
 800b266:	4659      	mov	r1, fp
 800b268:	220a      	movs	r2, #10
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fb2e 	bl	800b8cc <__multadd>
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b276:	4683      	mov	fp, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 818f 	beq.w	800b59c <_dtoa_r+0xb94>
 800b27e:	4639      	mov	r1, r7
 800b280:	2300      	movs	r3, #0
 800b282:	220a      	movs	r2, #10
 800b284:	4620      	mov	r0, r4
 800b286:	f000 fb21 	bl	800b8cc <__multadd>
 800b28a:	f1b9 0f00 	cmp.w	r9, #0
 800b28e:	4607      	mov	r7, r0
 800b290:	f300 808e 	bgt.w	800b3b0 <_dtoa_r+0x9a8>
 800b294:	9b05      	ldr	r3, [sp, #20]
 800b296:	2b02      	cmp	r3, #2
 800b298:	dc50      	bgt.n	800b33c <_dtoa_r+0x934>
 800b29a:	e089      	b.n	800b3b0 <_dtoa_r+0x9a8>
 800b29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b29e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2a2:	e75d      	b.n	800b160 <_dtoa_r+0x758>
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	1e5e      	subs	r6, r3, #1
 800b2a8:	9b06      	ldr	r3, [sp, #24]
 800b2aa:	42b3      	cmp	r3, r6
 800b2ac:	bfbf      	itttt	lt
 800b2ae:	9b06      	ldrlt	r3, [sp, #24]
 800b2b0:	9606      	strlt	r6, [sp, #24]
 800b2b2:	1af2      	sublt	r2, r6, r3
 800b2b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b2b6:	bfb6      	itet	lt
 800b2b8:	189b      	addlt	r3, r3, r2
 800b2ba:	1b9e      	subge	r6, r3, r6
 800b2bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	bfb8      	it	lt
 800b2c2:	2600      	movlt	r6, #0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfb5      	itete	lt
 800b2c8:	eba8 0503 	sublt.w	r5, r8, r3
 800b2cc:	9b01      	ldrge	r3, [sp, #4]
 800b2ce:	2300      	movlt	r3, #0
 800b2d0:	4645      	movge	r5, r8
 800b2d2:	e747      	b.n	800b164 <_dtoa_r+0x75c>
 800b2d4:	9e06      	ldr	r6, [sp, #24]
 800b2d6:	9f08      	ldr	r7, [sp, #32]
 800b2d8:	4645      	mov	r5, r8
 800b2da:	e74c      	b.n	800b176 <_dtoa_r+0x76e>
 800b2dc:	9a06      	ldr	r2, [sp, #24]
 800b2de:	e775      	b.n	800b1cc <_dtoa_r+0x7c4>
 800b2e0:	9b05      	ldr	r3, [sp, #20]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	dc18      	bgt.n	800b318 <_dtoa_r+0x910>
 800b2e6:	9b02      	ldr	r3, [sp, #8]
 800b2e8:	b9b3      	cbnz	r3, 800b318 <_dtoa_r+0x910>
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f0:	b9a3      	cbnz	r3, 800b31c <_dtoa_r+0x914>
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	0d1b      	lsrs	r3, r3, #20
 800b2fa:	051b      	lsls	r3, r3, #20
 800b2fc:	b12b      	cbz	r3, 800b30a <_dtoa_r+0x902>
 800b2fe:	9b04      	ldr	r3, [sp, #16]
 800b300:	3301      	adds	r3, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	f108 0801 	add.w	r8, r8, #1
 800b308:	2301      	movs	r3, #1
 800b30a:	9306      	str	r3, [sp, #24]
 800b30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af74 	bne.w	800b1fc <_dtoa_r+0x7f4>
 800b314:	2001      	movs	r0, #1
 800b316:	e779      	b.n	800b20c <_dtoa_r+0x804>
 800b318:	2300      	movs	r3, #0
 800b31a:	e7f6      	b.n	800b30a <_dtoa_r+0x902>
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	e7f4      	b.n	800b30a <_dtoa_r+0x902>
 800b320:	d085      	beq.n	800b22e <_dtoa_r+0x826>
 800b322:	4618      	mov	r0, r3
 800b324:	301c      	adds	r0, #28
 800b326:	e77d      	b.n	800b224 <_dtoa_r+0x81c>
 800b328:	40240000 	.word	0x40240000
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	dc38      	bgt.n	800b3a4 <_dtoa_r+0x99c>
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	2b02      	cmp	r3, #2
 800b336:	dd35      	ble.n	800b3a4 <_dtoa_r+0x99c>
 800b338:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b33c:	f1b9 0f00 	cmp.w	r9, #0
 800b340:	d10d      	bne.n	800b35e <_dtoa_r+0x956>
 800b342:	4631      	mov	r1, r6
 800b344:	464b      	mov	r3, r9
 800b346:	2205      	movs	r2, #5
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fabf 	bl	800b8cc <__multadd>
 800b34e:	4601      	mov	r1, r0
 800b350:	4606      	mov	r6, r0
 800b352:	4658      	mov	r0, fp
 800b354:	f000 fcd6 	bl	800bd04 <__mcmp>
 800b358:	2800      	cmp	r0, #0
 800b35a:	f73f adbd 	bgt.w	800aed8 <_dtoa_r+0x4d0>
 800b35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b360:	9d00      	ldr	r5, [sp, #0]
 800b362:	ea6f 0a03 	mvn.w	sl, r3
 800b366:	f04f 0800 	mov.w	r8, #0
 800b36a:	4631      	mov	r1, r6
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fa8b 	bl	800b888 <_Bfree>
 800b372:	2f00      	cmp	r7, #0
 800b374:	f43f aeb4 	beq.w	800b0e0 <_dtoa_r+0x6d8>
 800b378:	f1b8 0f00 	cmp.w	r8, #0
 800b37c:	d005      	beq.n	800b38a <_dtoa_r+0x982>
 800b37e:	45b8      	cmp	r8, r7
 800b380:	d003      	beq.n	800b38a <_dtoa_r+0x982>
 800b382:	4641      	mov	r1, r8
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fa7f 	bl	800b888 <_Bfree>
 800b38a:	4639      	mov	r1, r7
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 fa7b 	bl	800b888 <_Bfree>
 800b392:	e6a5      	b.n	800b0e0 <_dtoa_r+0x6d8>
 800b394:	2600      	movs	r6, #0
 800b396:	4637      	mov	r7, r6
 800b398:	e7e1      	b.n	800b35e <_dtoa_r+0x956>
 800b39a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b39c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b3a0:	4637      	mov	r7, r6
 800b3a2:	e599      	b.n	800aed8 <_dtoa_r+0x4d0>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 80fd 	beq.w	800b5aa <_dtoa_r+0xba2>
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	dd05      	ble.n	800b3c0 <_dtoa_r+0x9b8>
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	462a      	mov	r2, r5
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fc37 	bl	800bc2c <__lshift>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	9b06      	ldr	r3, [sp, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d05c      	beq.n	800b480 <_dtoa_r+0xa78>
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 fa1d 	bl	800b808 <_Balloc>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <_dtoa_r+0x9d6>
 800b3d2:	4b80      	ldr	r3, [pc, #512]	; (800b5d4 <_dtoa_r+0xbcc>)
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3da:	f7ff bb2e 	b.w	800aa3a <_dtoa_r+0x32>
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	3202      	adds	r2, #2
 800b3e2:	0092      	lsls	r2, r2, #2
 800b3e4:	f107 010c 	add.w	r1, r7, #12
 800b3e8:	300c      	adds	r0, #12
 800b3ea:	f000 f9ff 	bl	800b7ec <memcpy>
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 fc1a 	bl	800bc2c <__lshift>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	444b      	add	r3, r9
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	46b8      	mov	r8, r7
 800b40c:	9306      	str	r3, [sp, #24]
 800b40e:	4607      	mov	r7, r0
 800b410:	9b01      	ldr	r3, [sp, #4]
 800b412:	4631      	mov	r1, r6
 800b414:	3b01      	subs	r3, #1
 800b416:	4658      	mov	r0, fp
 800b418:	9302      	str	r3, [sp, #8]
 800b41a:	f7ff fa67 	bl	800a8ec <quorem>
 800b41e:	4603      	mov	r3, r0
 800b420:	3330      	adds	r3, #48	; 0x30
 800b422:	9004      	str	r0, [sp, #16]
 800b424:	4641      	mov	r1, r8
 800b426:	4658      	mov	r0, fp
 800b428:	9308      	str	r3, [sp, #32]
 800b42a:	f000 fc6b 	bl	800bd04 <__mcmp>
 800b42e:	463a      	mov	r2, r7
 800b430:	4681      	mov	r9, r0
 800b432:	4631      	mov	r1, r6
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fc81 	bl	800bd3c <__mdiff>
 800b43a:	68c2      	ldr	r2, [r0, #12]
 800b43c:	9b08      	ldr	r3, [sp, #32]
 800b43e:	4605      	mov	r5, r0
 800b440:	bb02      	cbnz	r2, 800b484 <_dtoa_r+0xa7c>
 800b442:	4601      	mov	r1, r0
 800b444:	4658      	mov	r0, fp
 800b446:	f000 fc5d 	bl	800bd04 <__mcmp>
 800b44a:	9b08      	ldr	r3, [sp, #32]
 800b44c:	4602      	mov	r2, r0
 800b44e:	4629      	mov	r1, r5
 800b450:	4620      	mov	r0, r4
 800b452:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b456:	f000 fa17 	bl	800b888 <_Bfree>
 800b45a:	9b05      	ldr	r3, [sp, #20]
 800b45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b45e:	9d01      	ldr	r5, [sp, #4]
 800b460:	ea43 0102 	orr.w	r1, r3, r2
 800b464:	9b06      	ldr	r3, [sp, #24]
 800b466:	430b      	orrs	r3, r1
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	d10d      	bne.n	800b488 <_dtoa_r+0xa80>
 800b46c:	2b39      	cmp	r3, #57	; 0x39
 800b46e:	d029      	beq.n	800b4c4 <_dtoa_r+0xabc>
 800b470:	f1b9 0f00 	cmp.w	r9, #0
 800b474:	dd01      	ble.n	800b47a <_dtoa_r+0xa72>
 800b476:	9b04      	ldr	r3, [sp, #16]
 800b478:	3331      	adds	r3, #49	; 0x31
 800b47a:	9a02      	ldr	r2, [sp, #8]
 800b47c:	7013      	strb	r3, [r2, #0]
 800b47e:	e774      	b.n	800b36a <_dtoa_r+0x962>
 800b480:	4638      	mov	r0, r7
 800b482:	e7b9      	b.n	800b3f8 <_dtoa_r+0x9f0>
 800b484:	2201      	movs	r2, #1
 800b486:	e7e2      	b.n	800b44e <_dtoa_r+0xa46>
 800b488:	f1b9 0f00 	cmp.w	r9, #0
 800b48c:	db06      	blt.n	800b49c <_dtoa_r+0xa94>
 800b48e:	9905      	ldr	r1, [sp, #20]
 800b490:	ea41 0909 	orr.w	r9, r1, r9
 800b494:	9906      	ldr	r1, [sp, #24]
 800b496:	ea59 0101 	orrs.w	r1, r9, r1
 800b49a:	d120      	bne.n	800b4de <_dtoa_r+0xad6>
 800b49c:	2a00      	cmp	r2, #0
 800b49e:	ddec      	ble.n	800b47a <_dtoa_r+0xa72>
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	f000 fbc0 	bl	800bc2c <__lshift>
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4683      	mov	fp, r0
 800b4b0:	f000 fc28 	bl	800bd04 <__mcmp>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	dc02      	bgt.n	800b4c0 <_dtoa_r+0xab8>
 800b4ba:	d1de      	bne.n	800b47a <_dtoa_r+0xa72>
 800b4bc:	07da      	lsls	r2, r3, #31
 800b4be:	d5dc      	bpl.n	800b47a <_dtoa_r+0xa72>
 800b4c0:	2b39      	cmp	r3, #57	; 0x39
 800b4c2:	d1d8      	bne.n	800b476 <_dtoa_r+0xa6e>
 800b4c4:	9a02      	ldr	r2, [sp, #8]
 800b4c6:	2339      	movs	r3, #57	; 0x39
 800b4c8:	7013      	strb	r3, [r2, #0]
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	461d      	mov	r5, r3
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4d4:	2a39      	cmp	r2, #57	; 0x39
 800b4d6:	d050      	beq.n	800b57a <_dtoa_r+0xb72>
 800b4d8:	3201      	adds	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	e745      	b.n	800b36a <_dtoa_r+0x962>
 800b4de:	2a00      	cmp	r2, #0
 800b4e0:	dd03      	ble.n	800b4ea <_dtoa_r+0xae2>
 800b4e2:	2b39      	cmp	r3, #57	; 0x39
 800b4e4:	d0ee      	beq.n	800b4c4 <_dtoa_r+0xabc>
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	e7c7      	b.n	800b47a <_dtoa_r+0xa72>
 800b4ea:	9a01      	ldr	r2, [sp, #4]
 800b4ec:	9907      	ldr	r1, [sp, #28]
 800b4ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4f2:	428a      	cmp	r2, r1
 800b4f4:	d02a      	beq.n	800b54c <_dtoa_r+0xb44>
 800b4f6:	4659      	mov	r1, fp
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	220a      	movs	r2, #10
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 f9e5 	bl	800b8cc <__multadd>
 800b502:	45b8      	cmp	r8, r7
 800b504:	4683      	mov	fp, r0
 800b506:	f04f 0300 	mov.w	r3, #0
 800b50a:	f04f 020a 	mov.w	r2, #10
 800b50e:	4641      	mov	r1, r8
 800b510:	4620      	mov	r0, r4
 800b512:	d107      	bne.n	800b524 <_dtoa_r+0xb1c>
 800b514:	f000 f9da 	bl	800b8cc <__multadd>
 800b518:	4680      	mov	r8, r0
 800b51a:	4607      	mov	r7, r0
 800b51c:	9b01      	ldr	r3, [sp, #4]
 800b51e:	3301      	adds	r3, #1
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	e775      	b.n	800b410 <_dtoa_r+0xa08>
 800b524:	f000 f9d2 	bl	800b8cc <__multadd>
 800b528:	4639      	mov	r1, r7
 800b52a:	4680      	mov	r8, r0
 800b52c:	2300      	movs	r3, #0
 800b52e:	220a      	movs	r2, #10
 800b530:	4620      	mov	r0, r4
 800b532:	f000 f9cb 	bl	800b8cc <__multadd>
 800b536:	4607      	mov	r7, r0
 800b538:	e7f0      	b.n	800b51c <_dtoa_r+0xb14>
 800b53a:	f1b9 0f00 	cmp.w	r9, #0
 800b53e:	9a00      	ldr	r2, [sp, #0]
 800b540:	bfcc      	ite	gt
 800b542:	464d      	movgt	r5, r9
 800b544:	2501      	movle	r5, #1
 800b546:	4415      	add	r5, r2
 800b548:	f04f 0800 	mov.w	r8, #0
 800b54c:	4659      	mov	r1, fp
 800b54e:	2201      	movs	r2, #1
 800b550:	4620      	mov	r0, r4
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	f000 fb6a 	bl	800bc2c <__lshift>
 800b558:	4631      	mov	r1, r6
 800b55a:	4683      	mov	fp, r0
 800b55c:	f000 fbd2 	bl	800bd04 <__mcmp>
 800b560:	2800      	cmp	r0, #0
 800b562:	dcb2      	bgt.n	800b4ca <_dtoa_r+0xac2>
 800b564:	d102      	bne.n	800b56c <_dtoa_r+0xb64>
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	07db      	lsls	r3, r3, #31
 800b56a:	d4ae      	bmi.n	800b4ca <_dtoa_r+0xac2>
 800b56c:	462b      	mov	r3, r5
 800b56e:	461d      	mov	r5, r3
 800b570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b574:	2a30      	cmp	r2, #48	; 0x30
 800b576:	d0fa      	beq.n	800b56e <_dtoa_r+0xb66>
 800b578:	e6f7      	b.n	800b36a <_dtoa_r+0x962>
 800b57a:	9a00      	ldr	r2, [sp, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d1a5      	bne.n	800b4cc <_dtoa_r+0xac4>
 800b580:	f10a 0a01 	add.w	sl, sl, #1
 800b584:	2331      	movs	r3, #49	; 0x31
 800b586:	e779      	b.n	800b47c <_dtoa_r+0xa74>
 800b588:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <_dtoa_r+0xbd0>)
 800b58a:	f7ff baaf 	b.w	800aaec <_dtoa_r+0xe4>
 800b58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b590:	2b00      	cmp	r3, #0
 800b592:	f47f aa86 	bne.w	800aaa2 <_dtoa_r+0x9a>
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <_dtoa_r+0xbd4>)
 800b598:	f7ff baa8 	b.w	800aaec <_dtoa_r+0xe4>
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	dc03      	bgt.n	800b5aa <_dtoa_r+0xba2>
 800b5a2:	9b05      	ldr	r3, [sp, #20]
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	f73f aec9 	bgt.w	800b33c <_dtoa_r+0x934>
 800b5aa:	9d00      	ldr	r5, [sp, #0]
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	f7ff f99c 	bl	800a8ec <quorem>
 800b5b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b5b8:	f805 3b01 	strb.w	r3, [r5], #1
 800b5bc:	9a00      	ldr	r2, [sp, #0]
 800b5be:	1aaa      	subs	r2, r5, r2
 800b5c0:	4591      	cmp	r9, r2
 800b5c2:	ddba      	ble.n	800b53a <_dtoa_r+0xb32>
 800b5c4:	4659      	mov	r1, fp
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	220a      	movs	r2, #10
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 f97e 	bl	800b8cc <__multadd>
 800b5d0:	4683      	mov	fp, r0
 800b5d2:	e7eb      	b.n	800b5ac <_dtoa_r+0xba4>
 800b5d4:	0807a08f 	.word	0x0807a08f
 800b5d8:	08079fe8 	.word	0x08079fe8
 800b5dc:	0807a00c 	.word	0x0807a00c

0800b5e0 <std>:
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ee:	6083      	str	r3, [r0, #8]
 800b5f0:	8181      	strh	r1, [r0, #12]
 800b5f2:	6643      	str	r3, [r0, #100]	; 0x64
 800b5f4:	81c2      	strh	r2, [r0, #14]
 800b5f6:	6183      	str	r3, [r0, #24]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	2208      	movs	r2, #8
 800b5fc:	305c      	adds	r0, #92	; 0x5c
 800b5fe:	f7fe fceb 	bl	8009fd8 <memset>
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <std+0x38>)
 800b604:	6263      	str	r3, [r4, #36]	; 0x24
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <std+0x3c>)
 800b608:	62a3      	str	r3, [r4, #40]	; 0x28
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x40>)
 800b60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b60e:	4b05      	ldr	r3, [pc, #20]	; (800b624 <std+0x44>)
 800b610:	6224      	str	r4, [r4, #32]
 800b612:	6323      	str	r3, [r4, #48]	; 0x30
 800b614:	bd10      	pop	{r4, pc}
 800b616:	bf00      	nop
 800b618:	0800c34d 	.word	0x0800c34d
 800b61c:	0800c36f 	.word	0x0800c36f
 800b620:	0800c3a7 	.word	0x0800c3a7
 800b624:	0800c3cb 	.word	0x0800c3cb

0800b628 <_cleanup_r>:
 800b628:	4901      	ldr	r1, [pc, #4]	; (800b630 <_cleanup_r+0x8>)
 800b62a:	f000 b8af 	b.w	800b78c <_fwalk_reent>
 800b62e:	bf00      	nop
 800b630:	0800c6e1 	.word	0x0800c6e1

0800b634 <__sfmoreglue>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	1e4a      	subs	r2, r1, #1
 800b638:	2568      	movs	r5, #104	; 0x68
 800b63a:	4355      	muls	r5, r2
 800b63c:	460e      	mov	r6, r1
 800b63e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b642:	f000 fcbf 	bl	800bfc4 <_malloc_r>
 800b646:	4604      	mov	r4, r0
 800b648:	b140      	cbz	r0, 800b65c <__sfmoreglue+0x28>
 800b64a:	2100      	movs	r1, #0
 800b64c:	e9c0 1600 	strd	r1, r6, [r0]
 800b650:	300c      	adds	r0, #12
 800b652:	60a0      	str	r0, [r4, #8]
 800b654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b658:	f7fe fcbe 	bl	8009fd8 <memset>
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd70      	pop	{r4, r5, r6, pc}

0800b660 <__sfp_lock_acquire>:
 800b660:	4801      	ldr	r0, [pc, #4]	; (800b668 <__sfp_lock_acquire+0x8>)
 800b662:	f000 b8b8 	b.w	800b7d6 <__retarget_lock_acquire_recursive>
 800b666:	bf00      	nop
 800b668:	20000a60 	.word	0x20000a60

0800b66c <__sfp_lock_release>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__sfp_lock_release+0x8>)
 800b66e:	f000 b8b3 	b.w	800b7d8 <__retarget_lock_release_recursive>
 800b672:	bf00      	nop
 800b674:	20000a60 	.word	0x20000a60

0800b678 <__sinit_lock_acquire>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__sinit_lock_acquire+0x8>)
 800b67a:	f000 b8ac 	b.w	800b7d6 <__retarget_lock_acquire_recursive>
 800b67e:	bf00      	nop
 800b680:	20000a5b 	.word	0x20000a5b

0800b684 <__sinit_lock_release>:
 800b684:	4801      	ldr	r0, [pc, #4]	; (800b68c <__sinit_lock_release+0x8>)
 800b686:	f000 b8a7 	b.w	800b7d8 <__retarget_lock_release_recursive>
 800b68a:	bf00      	nop
 800b68c:	20000a5b 	.word	0x20000a5b

0800b690 <__sinit>:
 800b690:	b510      	push	{r4, lr}
 800b692:	4604      	mov	r4, r0
 800b694:	f7ff fff0 	bl	800b678 <__sinit_lock_acquire>
 800b698:	69a3      	ldr	r3, [r4, #24]
 800b69a:	b11b      	cbz	r3, 800b6a4 <__sinit+0x14>
 800b69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a0:	f7ff bff0 	b.w	800b684 <__sinit_lock_release>
 800b6a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6a8:	6523      	str	r3, [r4, #80]	; 0x50
 800b6aa:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <__sinit+0x68>)
 800b6ac:	4a13      	ldr	r2, [pc, #76]	; (800b6fc <__sinit+0x6c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6b2:	42a3      	cmp	r3, r4
 800b6b4:	bf04      	itt	eq
 800b6b6:	2301      	moveq	r3, #1
 800b6b8:	61a3      	streq	r3, [r4, #24]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f820 	bl	800b700 <__sfp>
 800b6c0:	6060      	str	r0, [r4, #4]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f81c 	bl	800b700 <__sfp>
 800b6c8:	60a0      	str	r0, [r4, #8]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 f818 	bl	800b700 <__sfp>
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	60e0      	str	r0, [r4, #12]
 800b6d4:	2104      	movs	r1, #4
 800b6d6:	6860      	ldr	r0, [r4, #4]
 800b6d8:	f7ff ff82 	bl	800b5e0 <std>
 800b6dc:	68a0      	ldr	r0, [r4, #8]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	2109      	movs	r1, #9
 800b6e2:	f7ff ff7d 	bl	800b5e0 <std>
 800b6e6:	68e0      	ldr	r0, [r4, #12]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	2112      	movs	r1, #18
 800b6ec:	f7ff ff78 	bl	800b5e0 <std>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	61a3      	str	r3, [r4, #24]
 800b6f4:	e7d2      	b.n	800b69c <__sinit+0xc>
 800b6f6:	bf00      	nop
 800b6f8:	08079fd4 	.word	0x08079fd4
 800b6fc:	0800b629 	.word	0x0800b629

0800b700 <__sfp>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	4607      	mov	r7, r0
 800b704:	f7ff ffac 	bl	800b660 <__sfp_lock_acquire>
 800b708:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <__sfp+0x84>)
 800b70a:	681e      	ldr	r6, [r3, #0]
 800b70c:	69b3      	ldr	r3, [r6, #24]
 800b70e:	b913      	cbnz	r3, 800b716 <__sfp+0x16>
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff ffbd 	bl	800b690 <__sinit>
 800b716:	3648      	adds	r6, #72	; 0x48
 800b718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	d503      	bpl.n	800b728 <__sfp+0x28>
 800b720:	6833      	ldr	r3, [r6, #0]
 800b722:	b30b      	cbz	r3, 800b768 <__sfp+0x68>
 800b724:	6836      	ldr	r6, [r6, #0]
 800b726:	e7f7      	b.n	800b718 <__sfp+0x18>
 800b728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b72c:	b9d5      	cbnz	r5, 800b764 <__sfp+0x64>
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <__sfp+0x88>)
 800b730:	60e3      	str	r3, [r4, #12]
 800b732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b736:	6665      	str	r5, [r4, #100]	; 0x64
 800b738:	f000 f84c 	bl	800b7d4 <__retarget_lock_init_recursive>
 800b73c:	f7ff ff96 	bl	800b66c <__sfp_lock_release>
 800b740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b748:	6025      	str	r5, [r4, #0]
 800b74a:	61a5      	str	r5, [r4, #24]
 800b74c:	2208      	movs	r2, #8
 800b74e:	4629      	mov	r1, r5
 800b750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b754:	f7fe fc40 	bl	8009fd8 <memset>
 800b758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b75c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b760:	4620      	mov	r0, r4
 800b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b764:	3468      	adds	r4, #104	; 0x68
 800b766:	e7d9      	b.n	800b71c <__sfp+0x1c>
 800b768:	2104      	movs	r1, #4
 800b76a:	4638      	mov	r0, r7
 800b76c:	f7ff ff62 	bl	800b634 <__sfmoreglue>
 800b770:	4604      	mov	r4, r0
 800b772:	6030      	str	r0, [r6, #0]
 800b774:	2800      	cmp	r0, #0
 800b776:	d1d5      	bne.n	800b724 <__sfp+0x24>
 800b778:	f7ff ff78 	bl	800b66c <__sfp_lock_release>
 800b77c:	230c      	movs	r3, #12
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	e7ee      	b.n	800b760 <__sfp+0x60>
 800b782:	bf00      	nop
 800b784:	08079fd4 	.word	0x08079fd4
 800b788:	ffff0001 	.word	0xffff0001

0800b78c <_fwalk_reent>:
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4606      	mov	r6, r0
 800b792:	4688      	mov	r8, r1
 800b794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b798:	2700      	movs	r7, #0
 800b79a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b79e:	f1b9 0901 	subs.w	r9, r9, #1
 800b7a2:	d505      	bpl.n	800b7b0 <_fwalk_reent+0x24>
 800b7a4:	6824      	ldr	r4, [r4, #0]
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	d1f7      	bne.n	800b79a <_fwalk_reent+0xe>
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b0:	89ab      	ldrh	r3, [r5, #12]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d907      	bls.n	800b7c6 <_fwalk_reent+0x3a>
 800b7b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	d003      	beq.n	800b7c6 <_fwalk_reent+0x3a>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	47c0      	blx	r8
 800b7c4:	4307      	orrs	r7, r0
 800b7c6:	3568      	adds	r5, #104	; 0x68
 800b7c8:	e7e9      	b.n	800b79e <_fwalk_reent+0x12>
	...

0800b7cc <_localeconv_r>:
 800b7cc:	4800      	ldr	r0, [pc, #0]	; (800b7d0 <_localeconv_r+0x4>)
 800b7ce:	4770      	bx	lr
 800b7d0:	20000160 	.word	0x20000160

0800b7d4 <__retarget_lock_init_recursive>:
 800b7d4:	4770      	bx	lr

0800b7d6 <__retarget_lock_acquire_recursive>:
 800b7d6:	4770      	bx	lr

0800b7d8 <__retarget_lock_release_recursive>:
 800b7d8:	4770      	bx	lr
	...

0800b7dc <malloc>:
 800b7dc:	4b02      	ldr	r3, [pc, #8]	; (800b7e8 <malloc+0xc>)
 800b7de:	4601      	mov	r1, r0
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	f000 bbef 	b.w	800bfc4 <_malloc_r>
 800b7e6:	bf00      	nop
 800b7e8:	2000000c 	.word	0x2000000c

0800b7ec <memcpy>:
 800b7ec:	440a      	add	r2, r1
 800b7ee:	4291      	cmp	r1, r2
 800b7f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7f4:	d100      	bne.n	800b7f8 <memcpy+0xc>
 800b7f6:	4770      	bx	lr
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b802:	4291      	cmp	r1, r2
 800b804:	d1f9      	bne.n	800b7fa <memcpy+0xe>
 800b806:	bd10      	pop	{r4, pc}

0800b808 <_Balloc>:
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b80c:	4604      	mov	r4, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	b976      	cbnz	r6, 800b830 <_Balloc+0x28>
 800b812:	2010      	movs	r0, #16
 800b814:	f7ff ffe2 	bl	800b7dc <malloc>
 800b818:	4602      	mov	r2, r0
 800b81a:	6260      	str	r0, [r4, #36]	; 0x24
 800b81c:	b920      	cbnz	r0, 800b828 <_Balloc+0x20>
 800b81e:	4b18      	ldr	r3, [pc, #96]	; (800b880 <_Balloc+0x78>)
 800b820:	4818      	ldr	r0, [pc, #96]	; (800b884 <_Balloc+0x7c>)
 800b822:	2166      	movs	r1, #102	; 0x66
 800b824:	f000 fea8 	bl	800c578 <__assert_func>
 800b828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b82c:	6006      	str	r6, [r0, #0]
 800b82e:	60c6      	str	r6, [r0, #12]
 800b830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b832:	68f3      	ldr	r3, [r6, #12]
 800b834:	b183      	cbz	r3, 800b858 <_Balloc+0x50>
 800b836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b83e:	b9b8      	cbnz	r0, 800b870 <_Balloc+0x68>
 800b840:	2101      	movs	r1, #1
 800b842:	fa01 f605 	lsl.w	r6, r1, r5
 800b846:	1d72      	adds	r2, r6, #5
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 fb5a 	bl	800bf04 <_calloc_r>
 800b850:	b160      	cbz	r0, 800b86c <_Balloc+0x64>
 800b852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b856:	e00e      	b.n	800b876 <_Balloc+0x6e>
 800b858:	2221      	movs	r2, #33	; 0x21
 800b85a:	2104      	movs	r1, #4
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 fb51 	bl	800bf04 <_calloc_r>
 800b862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b864:	60f0      	str	r0, [r6, #12]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1e4      	bne.n	800b836 <_Balloc+0x2e>
 800b86c:	2000      	movs	r0, #0
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	6802      	ldr	r2, [r0, #0]
 800b872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b876:	2300      	movs	r3, #0
 800b878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b87c:	e7f7      	b.n	800b86e <_Balloc+0x66>
 800b87e:	bf00      	nop
 800b880:	0807a019 	.word	0x0807a019
 800b884:	0807a100 	.word	0x0807a100

0800b888 <_Bfree>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b88c:	4605      	mov	r5, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Bfree+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7ff ffa2 	bl	800b7dc <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	6268      	str	r0, [r5, #36]	; 0x24
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Bfree+0x20>
 800b89e:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <_Bfree+0x3c>)
 800b8a0:	4809      	ldr	r0, [pc, #36]	; (800b8c8 <_Bfree+0x40>)
 800b8a2:	218a      	movs	r1, #138	; 0x8a
 800b8a4:	f000 fe68 	bl	800c578 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	b13c      	cbz	r4, 800b8c2 <_Bfree+0x3a>
 800b8b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8b4:	6862      	ldr	r2, [r4, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8bc:	6021      	str	r1, [r4, #0]
 800b8be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	0807a019 	.word	0x0807a019
 800b8c8:	0807a100 	.word	0x0807a100

0800b8cc <__multadd>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	690e      	ldr	r6, [r1, #16]
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	4698      	mov	r8, r3
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	f101 0014 	add.w	r0, r1, #20
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6805      	ldr	r5, [r0, #0]
 800b8e0:	b2a9      	uxth	r1, r5
 800b8e2:	fb02 8101 	mla	r1, r2, r1, r8
 800b8e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b8ea:	0c2d      	lsrs	r5, r5, #16
 800b8ec:	fb02 c505 	mla	r5, r2, r5, ip
 800b8f0:	b289      	uxth	r1, r1
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	f840 1b04 	str.w	r1, [r0], #4
 800b8fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b902:	dcec      	bgt.n	800b8de <__multadd+0x12>
 800b904:	f1b8 0f00 	cmp.w	r8, #0
 800b908:	d022      	beq.n	800b950 <__multadd+0x84>
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	42b3      	cmp	r3, r6
 800b90e:	dc19      	bgt.n	800b944 <__multadd+0x78>
 800b910:	6861      	ldr	r1, [r4, #4]
 800b912:	4638      	mov	r0, r7
 800b914:	3101      	adds	r1, #1
 800b916:	f7ff ff77 	bl	800b808 <_Balloc>
 800b91a:	4605      	mov	r5, r0
 800b91c:	b928      	cbnz	r0, 800b92a <__multadd+0x5e>
 800b91e:	4602      	mov	r2, r0
 800b920:	4b0d      	ldr	r3, [pc, #52]	; (800b958 <__multadd+0x8c>)
 800b922:	480e      	ldr	r0, [pc, #56]	; (800b95c <__multadd+0x90>)
 800b924:	21b5      	movs	r1, #181	; 0xb5
 800b926:	f000 fe27 	bl	800c578 <__assert_func>
 800b92a:	6922      	ldr	r2, [r4, #16]
 800b92c:	3202      	adds	r2, #2
 800b92e:	f104 010c 	add.w	r1, r4, #12
 800b932:	0092      	lsls	r2, r2, #2
 800b934:	300c      	adds	r0, #12
 800b936:	f7ff ff59 	bl	800b7ec <memcpy>
 800b93a:	4621      	mov	r1, r4
 800b93c:	4638      	mov	r0, r7
 800b93e:	f7ff ffa3 	bl	800b888 <_Bfree>
 800b942:	462c      	mov	r4, r5
 800b944:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b948:	3601      	adds	r6, #1
 800b94a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b94e:	6126      	str	r6, [r4, #16]
 800b950:	4620      	mov	r0, r4
 800b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b956:	bf00      	nop
 800b958:	0807a08f 	.word	0x0807a08f
 800b95c:	0807a100 	.word	0x0807a100

0800b960 <__hi0bits>:
 800b960:	0c03      	lsrs	r3, r0, #16
 800b962:	041b      	lsls	r3, r3, #16
 800b964:	b9d3      	cbnz	r3, 800b99c <__hi0bits+0x3c>
 800b966:	0400      	lsls	r0, r0, #16
 800b968:	2310      	movs	r3, #16
 800b96a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b96e:	bf04      	itt	eq
 800b970:	0200      	lsleq	r0, r0, #8
 800b972:	3308      	addeq	r3, #8
 800b974:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b978:	bf04      	itt	eq
 800b97a:	0100      	lsleq	r0, r0, #4
 800b97c:	3304      	addeq	r3, #4
 800b97e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b982:	bf04      	itt	eq
 800b984:	0080      	lsleq	r0, r0, #2
 800b986:	3302      	addeq	r3, #2
 800b988:	2800      	cmp	r0, #0
 800b98a:	db05      	blt.n	800b998 <__hi0bits+0x38>
 800b98c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b990:	f103 0301 	add.w	r3, r3, #1
 800b994:	bf08      	it	eq
 800b996:	2320      	moveq	r3, #32
 800b998:	4618      	mov	r0, r3
 800b99a:	4770      	bx	lr
 800b99c:	2300      	movs	r3, #0
 800b99e:	e7e4      	b.n	800b96a <__hi0bits+0xa>

0800b9a0 <__lo0bits>:
 800b9a0:	6803      	ldr	r3, [r0, #0]
 800b9a2:	f013 0207 	ands.w	r2, r3, #7
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	d00b      	beq.n	800b9c2 <__lo0bits+0x22>
 800b9aa:	07da      	lsls	r2, r3, #31
 800b9ac:	d424      	bmi.n	800b9f8 <__lo0bits+0x58>
 800b9ae:	0798      	lsls	r0, r3, #30
 800b9b0:	bf49      	itett	mi
 800b9b2:	085b      	lsrmi	r3, r3, #1
 800b9b4:	089b      	lsrpl	r3, r3, #2
 800b9b6:	2001      	movmi	r0, #1
 800b9b8:	600b      	strmi	r3, [r1, #0]
 800b9ba:	bf5c      	itt	pl
 800b9bc:	600b      	strpl	r3, [r1, #0]
 800b9be:	2002      	movpl	r0, #2
 800b9c0:	4770      	bx	lr
 800b9c2:	b298      	uxth	r0, r3
 800b9c4:	b9b0      	cbnz	r0, 800b9f4 <__lo0bits+0x54>
 800b9c6:	0c1b      	lsrs	r3, r3, #16
 800b9c8:	2010      	movs	r0, #16
 800b9ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9ce:	bf04      	itt	eq
 800b9d0:	0a1b      	lsreq	r3, r3, #8
 800b9d2:	3008      	addeq	r0, #8
 800b9d4:	071a      	lsls	r2, r3, #28
 800b9d6:	bf04      	itt	eq
 800b9d8:	091b      	lsreq	r3, r3, #4
 800b9da:	3004      	addeq	r0, #4
 800b9dc:	079a      	lsls	r2, r3, #30
 800b9de:	bf04      	itt	eq
 800b9e0:	089b      	lsreq	r3, r3, #2
 800b9e2:	3002      	addeq	r0, #2
 800b9e4:	07da      	lsls	r2, r3, #31
 800b9e6:	d403      	bmi.n	800b9f0 <__lo0bits+0x50>
 800b9e8:	085b      	lsrs	r3, r3, #1
 800b9ea:	f100 0001 	add.w	r0, r0, #1
 800b9ee:	d005      	beq.n	800b9fc <__lo0bits+0x5c>
 800b9f0:	600b      	str	r3, [r1, #0]
 800b9f2:	4770      	bx	lr
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	e7e8      	b.n	800b9ca <__lo0bits+0x2a>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	4770      	bx	lr
 800b9fc:	2020      	movs	r0, #32
 800b9fe:	4770      	bx	lr

0800ba00 <__i2b>:
 800ba00:	b510      	push	{r4, lr}
 800ba02:	460c      	mov	r4, r1
 800ba04:	2101      	movs	r1, #1
 800ba06:	f7ff feff 	bl	800b808 <_Balloc>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	b928      	cbnz	r0, 800ba1a <__i2b+0x1a>
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <__i2b+0x24>)
 800ba10:	4805      	ldr	r0, [pc, #20]	; (800ba28 <__i2b+0x28>)
 800ba12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba16:	f000 fdaf 	bl	800c578 <__assert_func>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	6144      	str	r4, [r0, #20]
 800ba1e:	6103      	str	r3, [r0, #16]
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	bf00      	nop
 800ba24:	0807a08f 	.word	0x0807a08f
 800ba28:	0807a100 	.word	0x0807a100

0800ba2c <__multiply>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	4614      	mov	r4, r2
 800ba32:	690a      	ldr	r2, [r1, #16]
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	bfb8      	it	lt
 800ba3a:	460b      	movlt	r3, r1
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	bfbc      	itt	lt
 800ba40:	4625      	movlt	r5, r4
 800ba42:	461c      	movlt	r4, r3
 800ba44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ba48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba4c:	68ab      	ldr	r3, [r5, #8]
 800ba4e:	6869      	ldr	r1, [r5, #4]
 800ba50:	eb0a 0709 	add.w	r7, sl, r9
 800ba54:	42bb      	cmp	r3, r7
 800ba56:	b085      	sub	sp, #20
 800ba58:	bfb8      	it	lt
 800ba5a:	3101      	addlt	r1, #1
 800ba5c:	f7ff fed4 	bl	800b808 <_Balloc>
 800ba60:	b930      	cbnz	r0, 800ba70 <__multiply+0x44>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4b42      	ldr	r3, [pc, #264]	; (800bb70 <__multiply+0x144>)
 800ba66:	4843      	ldr	r0, [pc, #268]	; (800bb74 <__multiply+0x148>)
 800ba68:	f240 115d 	movw	r1, #349	; 0x15d
 800ba6c:	f000 fd84 	bl	800c578 <__assert_func>
 800ba70:	f100 0614 	add.w	r6, r0, #20
 800ba74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba78:	4633      	mov	r3, r6
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4543      	cmp	r3, r8
 800ba7e:	d31e      	bcc.n	800babe <__multiply+0x92>
 800ba80:	f105 0c14 	add.w	ip, r5, #20
 800ba84:	f104 0314 	add.w	r3, r4, #20
 800ba88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba90:	9202      	str	r2, [sp, #8]
 800ba92:	ebac 0205 	sub.w	r2, ip, r5
 800ba96:	3a15      	subs	r2, #21
 800ba98:	f022 0203 	bic.w	r2, r2, #3
 800ba9c:	3204      	adds	r2, #4
 800ba9e:	f105 0115 	add.w	r1, r5, #21
 800baa2:	458c      	cmp	ip, r1
 800baa4:	bf38      	it	cc
 800baa6:	2204      	movcc	r2, #4
 800baa8:	9201      	str	r2, [sp, #4]
 800baaa:	9a02      	ldr	r2, [sp, #8]
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d808      	bhi.n	800bac4 <__multiply+0x98>
 800bab2:	2f00      	cmp	r7, #0
 800bab4:	dc55      	bgt.n	800bb62 <__multiply+0x136>
 800bab6:	6107      	str	r7, [r0, #16]
 800bab8:	b005      	add	sp, #20
 800baba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babe:	f843 2b04 	str.w	r2, [r3], #4
 800bac2:	e7db      	b.n	800ba7c <__multiply+0x50>
 800bac4:	f8b3 a000 	ldrh.w	sl, [r3]
 800bac8:	f1ba 0f00 	cmp.w	sl, #0
 800bacc:	d020      	beq.n	800bb10 <__multiply+0xe4>
 800bace:	f105 0e14 	add.w	lr, r5, #20
 800bad2:	46b1      	mov	r9, r6
 800bad4:	2200      	movs	r2, #0
 800bad6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bada:	f8d9 b000 	ldr.w	fp, [r9]
 800bade:	b2a1      	uxth	r1, r4
 800bae0:	fa1f fb8b 	uxth.w	fp, fp
 800bae4:	fb0a b101 	mla	r1, sl, r1, fp
 800bae8:	4411      	add	r1, r2
 800baea:	f8d9 2000 	ldr.w	r2, [r9]
 800baee:	0c24      	lsrs	r4, r4, #16
 800baf0:	0c12      	lsrs	r2, r2, #16
 800baf2:	fb0a 2404 	mla	r4, sl, r4, r2
 800baf6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bafa:	b289      	uxth	r1, r1
 800bafc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb00:	45f4      	cmp	ip, lr
 800bb02:	f849 1b04 	str.w	r1, [r9], #4
 800bb06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb0a:	d8e4      	bhi.n	800bad6 <__multiply+0xaa>
 800bb0c:	9901      	ldr	r1, [sp, #4]
 800bb0e:	5072      	str	r2, [r6, r1]
 800bb10:	9a03      	ldr	r2, [sp, #12]
 800bb12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb16:	3304      	adds	r3, #4
 800bb18:	f1b9 0f00 	cmp.w	r9, #0
 800bb1c:	d01f      	beq.n	800bb5e <__multiply+0x132>
 800bb1e:	6834      	ldr	r4, [r6, #0]
 800bb20:	f105 0114 	add.w	r1, r5, #20
 800bb24:	46b6      	mov	lr, r6
 800bb26:	f04f 0a00 	mov.w	sl, #0
 800bb2a:	880a      	ldrh	r2, [r1, #0]
 800bb2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb30:	fb09 b202 	mla	r2, r9, r2, fp
 800bb34:	4492      	add	sl, r2
 800bb36:	b2a4      	uxth	r4, r4
 800bb38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bb3c:	f84e 4b04 	str.w	r4, [lr], #4
 800bb40:	f851 4b04 	ldr.w	r4, [r1], #4
 800bb44:	f8be 2000 	ldrh.w	r2, [lr]
 800bb48:	0c24      	lsrs	r4, r4, #16
 800bb4a:	fb09 2404 	mla	r4, r9, r4, r2
 800bb4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bb52:	458c      	cmp	ip, r1
 800bb54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb58:	d8e7      	bhi.n	800bb2a <__multiply+0xfe>
 800bb5a:	9a01      	ldr	r2, [sp, #4]
 800bb5c:	50b4      	str	r4, [r6, r2]
 800bb5e:	3604      	adds	r6, #4
 800bb60:	e7a3      	b.n	800baaa <__multiply+0x7e>
 800bb62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1a5      	bne.n	800bab6 <__multiply+0x8a>
 800bb6a:	3f01      	subs	r7, #1
 800bb6c:	e7a1      	b.n	800bab2 <__multiply+0x86>
 800bb6e:	bf00      	nop
 800bb70:	0807a08f 	.word	0x0807a08f
 800bb74:	0807a100 	.word	0x0807a100

0800bb78 <__pow5mult>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	4615      	mov	r5, r2
 800bb7e:	f012 0203 	ands.w	r2, r2, #3
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	d007      	beq.n	800bb98 <__pow5mult+0x20>
 800bb88:	4c25      	ldr	r4, [pc, #148]	; (800bc20 <__pow5mult+0xa8>)
 800bb8a:	3a01      	subs	r2, #1
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb92:	f7ff fe9b 	bl	800b8cc <__multadd>
 800bb96:	4607      	mov	r7, r0
 800bb98:	10ad      	asrs	r5, r5, #2
 800bb9a:	d03d      	beq.n	800bc18 <__pow5mult+0xa0>
 800bb9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb9e:	b97c      	cbnz	r4, 800bbc0 <__pow5mult+0x48>
 800bba0:	2010      	movs	r0, #16
 800bba2:	f7ff fe1b 	bl	800b7dc <malloc>
 800bba6:	4602      	mov	r2, r0
 800bba8:	6270      	str	r0, [r6, #36]	; 0x24
 800bbaa:	b928      	cbnz	r0, 800bbb8 <__pow5mult+0x40>
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <__pow5mult+0xac>)
 800bbae:	481e      	ldr	r0, [pc, #120]	; (800bc28 <__pow5mult+0xb0>)
 800bbb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbb4:	f000 fce0 	bl	800c578 <__assert_func>
 800bbb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbbc:	6004      	str	r4, [r0, #0]
 800bbbe:	60c4      	str	r4, [r0, #12]
 800bbc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbc8:	b94c      	cbnz	r4, 800bbde <__pow5mult+0x66>
 800bbca:	f240 2171 	movw	r1, #625	; 0x271
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7ff ff16 	bl	800ba00 <__i2b>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbda:	4604      	mov	r4, r0
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	f04f 0900 	mov.w	r9, #0
 800bbe2:	07eb      	lsls	r3, r5, #31
 800bbe4:	d50a      	bpl.n	800bbfc <__pow5mult+0x84>
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff1e 	bl	800ba2c <__multiply>
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	4680      	mov	r8, r0
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff fe47 	bl	800b888 <_Bfree>
 800bbfa:	4647      	mov	r7, r8
 800bbfc:	106d      	asrs	r5, r5, #1
 800bbfe:	d00b      	beq.n	800bc18 <__pow5mult+0xa0>
 800bc00:	6820      	ldr	r0, [r4, #0]
 800bc02:	b938      	cbnz	r0, 800bc14 <__pow5mult+0x9c>
 800bc04:	4622      	mov	r2, r4
 800bc06:	4621      	mov	r1, r4
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7ff ff0f 	bl	800ba2c <__multiply>
 800bc0e:	6020      	str	r0, [r4, #0]
 800bc10:	f8c0 9000 	str.w	r9, [r0]
 800bc14:	4604      	mov	r4, r0
 800bc16:	e7e4      	b.n	800bbe2 <__pow5mult+0x6a>
 800bc18:	4638      	mov	r0, r7
 800bc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc1e:	bf00      	nop
 800bc20:	0807a250 	.word	0x0807a250
 800bc24:	0807a019 	.word	0x0807a019
 800bc28:	0807a100 	.word	0x0807a100

0800bc2c <__lshift>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	6849      	ldr	r1, [r1, #4]
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	4691      	mov	r9, r2
 800bc40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc44:	f108 0601 	add.w	r6, r8, #1
 800bc48:	42b3      	cmp	r3, r6
 800bc4a:	db0b      	blt.n	800bc64 <__lshift+0x38>
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f7ff fddb 	bl	800b808 <_Balloc>
 800bc52:	4605      	mov	r5, r0
 800bc54:	b948      	cbnz	r0, 800bc6a <__lshift+0x3e>
 800bc56:	4602      	mov	r2, r0
 800bc58:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <__lshift+0xd0>)
 800bc5a:	4829      	ldr	r0, [pc, #164]	; (800bd00 <__lshift+0xd4>)
 800bc5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc60:	f000 fc8a 	bl	800c578 <__assert_func>
 800bc64:	3101      	adds	r1, #1
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	e7ee      	b.n	800bc48 <__lshift+0x1c>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f100 0114 	add.w	r1, r0, #20
 800bc70:	f100 0210 	add.w	r2, r0, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	4553      	cmp	r3, sl
 800bc78:	db33      	blt.n	800bce2 <__lshift+0xb6>
 800bc7a:	6920      	ldr	r0, [r4, #16]
 800bc7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc80:	f104 0314 	add.w	r3, r4, #20
 800bc84:	f019 091f 	ands.w	r9, r9, #31
 800bc88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc90:	d02b      	beq.n	800bcea <__lshift+0xbe>
 800bc92:	f1c9 0e20 	rsb	lr, r9, #32
 800bc96:	468a      	mov	sl, r1
 800bc98:	2200      	movs	r2, #0
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	fa00 f009 	lsl.w	r0, r0, r9
 800bca0:	4302      	orrs	r2, r0
 800bca2:	f84a 2b04 	str.w	r2, [sl], #4
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	459c      	cmp	ip, r3
 800bcac:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcb0:	d8f3      	bhi.n	800bc9a <__lshift+0x6e>
 800bcb2:	ebac 0304 	sub.w	r3, ip, r4
 800bcb6:	3b15      	subs	r3, #21
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	f104 0015 	add.w	r0, r4, #21
 800bcc2:	4584      	cmp	ip, r0
 800bcc4:	bf38      	it	cc
 800bcc6:	2304      	movcc	r3, #4
 800bcc8:	50ca      	str	r2, [r1, r3]
 800bcca:	b10a      	cbz	r2, 800bcd0 <__lshift+0xa4>
 800bccc:	f108 0602 	add.w	r6, r8, #2
 800bcd0:	3e01      	subs	r6, #1
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	612e      	str	r6, [r5, #16]
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	f7ff fdd6 	bl	800b888 <_Bfree>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bce6:	3301      	adds	r3, #1
 800bce8:	e7c5      	b.n	800bc76 <__lshift+0x4a>
 800bcea:	3904      	subs	r1, #4
 800bcec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcf4:	459c      	cmp	ip, r3
 800bcf6:	d8f9      	bhi.n	800bcec <__lshift+0xc0>
 800bcf8:	e7ea      	b.n	800bcd0 <__lshift+0xa4>
 800bcfa:	bf00      	nop
 800bcfc:	0807a08f 	.word	0x0807a08f
 800bd00:	0807a100 	.word	0x0807a100

0800bd04 <__mcmp>:
 800bd04:	b530      	push	{r4, r5, lr}
 800bd06:	6902      	ldr	r2, [r0, #16]
 800bd08:	690c      	ldr	r4, [r1, #16]
 800bd0a:	1b12      	subs	r2, r2, r4
 800bd0c:	d10e      	bne.n	800bd2c <__mcmp+0x28>
 800bd0e:	f100 0314 	add.w	r3, r0, #20
 800bd12:	3114      	adds	r1, #20
 800bd14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd24:	42a5      	cmp	r5, r4
 800bd26:	d003      	beq.n	800bd30 <__mcmp+0x2c>
 800bd28:	d305      	bcc.n	800bd36 <__mcmp+0x32>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	bd30      	pop	{r4, r5, pc}
 800bd30:	4283      	cmp	r3, r0
 800bd32:	d3f3      	bcc.n	800bd1c <__mcmp+0x18>
 800bd34:	e7fa      	b.n	800bd2c <__mcmp+0x28>
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3a:	e7f7      	b.n	800bd2c <__mcmp+0x28>

0800bd3c <__mdiff>:
 800bd3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460c      	mov	r4, r1
 800bd42:	4606      	mov	r6, r0
 800bd44:	4611      	mov	r1, r2
 800bd46:	4620      	mov	r0, r4
 800bd48:	4617      	mov	r7, r2
 800bd4a:	f7ff ffdb 	bl	800bd04 <__mcmp>
 800bd4e:	1e05      	subs	r5, r0, #0
 800bd50:	d110      	bne.n	800bd74 <__mdiff+0x38>
 800bd52:	4629      	mov	r1, r5
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff fd57 	bl	800b808 <_Balloc>
 800bd5a:	b930      	cbnz	r0, 800bd6a <__mdiff+0x2e>
 800bd5c:	4b39      	ldr	r3, [pc, #228]	; (800be44 <__mdiff+0x108>)
 800bd5e:	4602      	mov	r2, r0
 800bd60:	f240 2132 	movw	r1, #562	; 0x232
 800bd64:	4838      	ldr	r0, [pc, #224]	; (800be48 <__mdiff+0x10c>)
 800bd66:	f000 fc07 	bl	800c578 <__assert_func>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	bfa4      	itt	ge
 800bd76:	463b      	movge	r3, r7
 800bd78:	4627      	movge	r7, r4
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	bfa6      	itte	ge
 800bd80:	461c      	movge	r4, r3
 800bd82:	2500      	movge	r5, #0
 800bd84:	2501      	movlt	r5, #1
 800bd86:	f7ff fd3f 	bl	800b808 <_Balloc>
 800bd8a:	b920      	cbnz	r0, 800bd96 <__mdiff+0x5a>
 800bd8c:	4b2d      	ldr	r3, [pc, #180]	; (800be44 <__mdiff+0x108>)
 800bd8e:	4602      	mov	r2, r0
 800bd90:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd94:	e7e6      	b.n	800bd64 <__mdiff+0x28>
 800bd96:	693e      	ldr	r6, [r7, #16]
 800bd98:	60c5      	str	r5, [r0, #12]
 800bd9a:	6925      	ldr	r5, [r4, #16]
 800bd9c:	f107 0114 	add.w	r1, r7, #20
 800bda0:	f104 0914 	add.w	r9, r4, #20
 800bda4:	f100 0e14 	add.w	lr, r0, #20
 800bda8:	f107 0210 	add.w	r2, r7, #16
 800bdac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bdb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bdb4:	46f2      	mov	sl, lr
 800bdb6:	2700      	movs	r7, #0
 800bdb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdc0:	fa1f f883 	uxth.w	r8, r3
 800bdc4:	fa17 f78b 	uxtah	r7, r7, fp
 800bdc8:	0c1b      	lsrs	r3, r3, #16
 800bdca:	eba7 0808 	sub.w	r8, r7, r8
 800bdce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdd6:	fa1f f888 	uxth.w	r8, r8
 800bdda:	141f      	asrs	r7, r3, #16
 800bddc:	454d      	cmp	r5, r9
 800bdde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bde2:	f84a 3b04 	str.w	r3, [sl], #4
 800bde6:	d8e7      	bhi.n	800bdb8 <__mdiff+0x7c>
 800bde8:	1b2b      	subs	r3, r5, r4
 800bdea:	3b15      	subs	r3, #21
 800bdec:	f023 0303 	bic.w	r3, r3, #3
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	3415      	adds	r4, #21
 800bdf4:	42a5      	cmp	r5, r4
 800bdf6:	bf38      	it	cc
 800bdf8:	2304      	movcc	r3, #4
 800bdfa:	4419      	add	r1, r3
 800bdfc:	4473      	add	r3, lr
 800bdfe:	469e      	mov	lr, r3
 800be00:	460d      	mov	r5, r1
 800be02:	4565      	cmp	r5, ip
 800be04:	d30e      	bcc.n	800be24 <__mdiff+0xe8>
 800be06:	f10c 0203 	add.w	r2, ip, #3
 800be0a:	1a52      	subs	r2, r2, r1
 800be0c:	f022 0203 	bic.w	r2, r2, #3
 800be10:	3903      	subs	r1, #3
 800be12:	458c      	cmp	ip, r1
 800be14:	bf38      	it	cc
 800be16:	2200      	movcc	r2, #0
 800be18:	441a      	add	r2, r3
 800be1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be1e:	b17b      	cbz	r3, 800be40 <__mdiff+0x104>
 800be20:	6106      	str	r6, [r0, #16]
 800be22:	e7a5      	b.n	800bd70 <__mdiff+0x34>
 800be24:	f855 8b04 	ldr.w	r8, [r5], #4
 800be28:	fa17 f488 	uxtah	r4, r7, r8
 800be2c:	1422      	asrs	r2, r4, #16
 800be2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800be32:	b2a4      	uxth	r4, r4
 800be34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800be38:	f84e 4b04 	str.w	r4, [lr], #4
 800be3c:	1417      	asrs	r7, r2, #16
 800be3e:	e7e0      	b.n	800be02 <__mdiff+0xc6>
 800be40:	3e01      	subs	r6, #1
 800be42:	e7ea      	b.n	800be1a <__mdiff+0xde>
 800be44:	0807a08f 	.word	0x0807a08f
 800be48:	0807a100 	.word	0x0807a100

0800be4c <__d2b>:
 800be4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be50:	4689      	mov	r9, r1
 800be52:	2101      	movs	r1, #1
 800be54:	ec57 6b10 	vmov	r6, r7, d0
 800be58:	4690      	mov	r8, r2
 800be5a:	f7ff fcd5 	bl	800b808 <_Balloc>
 800be5e:	4604      	mov	r4, r0
 800be60:	b930      	cbnz	r0, 800be70 <__d2b+0x24>
 800be62:	4602      	mov	r2, r0
 800be64:	4b25      	ldr	r3, [pc, #148]	; (800befc <__d2b+0xb0>)
 800be66:	4826      	ldr	r0, [pc, #152]	; (800bf00 <__d2b+0xb4>)
 800be68:	f240 310a 	movw	r1, #778	; 0x30a
 800be6c:	f000 fb84 	bl	800c578 <__assert_func>
 800be70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be78:	bb35      	cbnz	r5, 800bec8 <__d2b+0x7c>
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	9301      	str	r3, [sp, #4]
 800be7e:	d028      	beq.n	800bed2 <__d2b+0x86>
 800be80:	4668      	mov	r0, sp
 800be82:	9600      	str	r6, [sp, #0]
 800be84:	f7ff fd8c 	bl	800b9a0 <__lo0bits>
 800be88:	9900      	ldr	r1, [sp, #0]
 800be8a:	b300      	cbz	r0, 800bece <__d2b+0x82>
 800be8c:	9a01      	ldr	r2, [sp, #4]
 800be8e:	f1c0 0320 	rsb	r3, r0, #32
 800be92:	fa02 f303 	lsl.w	r3, r2, r3
 800be96:	430b      	orrs	r3, r1
 800be98:	40c2      	lsrs	r2, r0
 800be9a:	6163      	str	r3, [r4, #20]
 800be9c:	9201      	str	r2, [sp, #4]
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	61a3      	str	r3, [r4, #24]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	bf14      	ite	ne
 800bea6:	2202      	movne	r2, #2
 800bea8:	2201      	moveq	r2, #1
 800beaa:	6122      	str	r2, [r4, #16]
 800beac:	b1d5      	cbz	r5, 800bee4 <__d2b+0x98>
 800beae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beb2:	4405      	add	r5, r0
 800beb4:	f8c9 5000 	str.w	r5, [r9]
 800beb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bebc:	f8c8 0000 	str.w	r0, [r8]
 800bec0:	4620      	mov	r0, r4
 800bec2:	b003      	add	sp, #12
 800bec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800becc:	e7d5      	b.n	800be7a <__d2b+0x2e>
 800bece:	6161      	str	r1, [r4, #20]
 800bed0:	e7e5      	b.n	800be9e <__d2b+0x52>
 800bed2:	a801      	add	r0, sp, #4
 800bed4:	f7ff fd64 	bl	800b9a0 <__lo0bits>
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	2201      	movs	r2, #1
 800bede:	6122      	str	r2, [r4, #16]
 800bee0:	3020      	adds	r0, #32
 800bee2:	e7e3      	b.n	800beac <__d2b+0x60>
 800bee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800beec:	f8c9 0000 	str.w	r0, [r9]
 800bef0:	6918      	ldr	r0, [r3, #16]
 800bef2:	f7ff fd35 	bl	800b960 <__hi0bits>
 800bef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800befa:	e7df      	b.n	800bebc <__d2b+0x70>
 800befc:	0807a08f 	.word	0x0807a08f
 800bf00:	0807a100 	.word	0x0807a100

0800bf04 <_calloc_r>:
 800bf04:	b513      	push	{r0, r1, r4, lr}
 800bf06:	434a      	muls	r2, r1
 800bf08:	4611      	mov	r1, r2
 800bf0a:	9201      	str	r2, [sp, #4]
 800bf0c:	f000 f85a 	bl	800bfc4 <_malloc_r>
 800bf10:	4604      	mov	r4, r0
 800bf12:	b118      	cbz	r0, 800bf1c <_calloc_r+0x18>
 800bf14:	9a01      	ldr	r2, [sp, #4]
 800bf16:	2100      	movs	r1, #0
 800bf18:	f7fe f85e 	bl	8009fd8 <memset>
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	b002      	add	sp, #8
 800bf20:	bd10      	pop	{r4, pc}
	...

0800bf24 <_free_r>:
 800bf24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf26:	2900      	cmp	r1, #0
 800bf28:	d048      	beq.n	800bfbc <_free_r+0x98>
 800bf2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2e:	9001      	str	r0, [sp, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f1a1 0404 	sub.w	r4, r1, #4
 800bf36:	bfb8      	it	lt
 800bf38:	18e4      	addlt	r4, r4, r3
 800bf3a:	f000 fca7 	bl	800c88c <__malloc_lock>
 800bf3e:	4a20      	ldr	r2, [pc, #128]	; (800bfc0 <_free_r+0x9c>)
 800bf40:	9801      	ldr	r0, [sp, #4]
 800bf42:	6813      	ldr	r3, [r2, #0]
 800bf44:	4615      	mov	r5, r2
 800bf46:	b933      	cbnz	r3, 800bf56 <_free_r+0x32>
 800bf48:	6063      	str	r3, [r4, #4]
 800bf4a:	6014      	str	r4, [r2, #0]
 800bf4c:	b003      	add	sp, #12
 800bf4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf52:	f000 bca1 	b.w	800c898 <__malloc_unlock>
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	d90b      	bls.n	800bf72 <_free_r+0x4e>
 800bf5a:	6821      	ldr	r1, [r4, #0]
 800bf5c:	1862      	adds	r2, r4, r1
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	bf04      	itt	eq
 800bf62:	681a      	ldreq	r2, [r3, #0]
 800bf64:	685b      	ldreq	r3, [r3, #4]
 800bf66:	6063      	str	r3, [r4, #4]
 800bf68:	bf04      	itt	eq
 800bf6a:	1852      	addeq	r2, r2, r1
 800bf6c:	6022      	streq	r2, [r4, #0]
 800bf6e:	602c      	str	r4, [r5, #0]
 800bf70:	e7ec      	b.n	800bf4c <_free_r+0x28>
 800bf72:	461a      	mov	r2, r3
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	b10b      	cbz	r3, 800bf7c <_free_r+0x58>
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	d9fa      	bls.n	800bf72 <_free_r+0x4e>
 800bf7c:	6811      	ldr	r1, [r2, #0]
 800bf7e:	1855      	adds	r5, r2, r1
 800bf80:	42a5      	cmp	r5, r4
 800bf82:	d10b      	bne.n	800bf9c <_free_r+0x78>
 800bf84:	6824      	ldr	r4, [r4, #0]
 800bf86:	4421      	add	r1, r4
 800bf88:	1854      	adds	r4, r2, r1
 800bf8a:	42a3      	cmp	r3, r4
 800bf8c:	6011      	str	r1, [r2, #0]
 800bf8e:	d1dd      	bne.n	800bf4c <_free_r+0x28>
 800bf90:	681c      	ldr	r4, [r3, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	6053      	str	r3, [r2, #4]
 800bf96:	4421      	add	r1, r4
 800bf98:	6011      	str	r1, [r2, #0]
 800bf9a:	e7d7      	b.n	800bf4c <_free_r+0x28>
 800bf9c:	d902      	bls.n	800bfa4 <_free_r+0x80>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	e7d3      	b.n	800bf4c <_free_r+0x28>
 800bfa4:	6825      	ldr	r5, [r4, #0]
 800bfa6:	1961      	adds	r1, r4, r5
 800bfa8:	428b      	cmp	r3, r1
 800bfaa:	bf04      	itt	eq
 800bfac:	6819      	ldreq	r1, [r3, #0]
 800bfae:	685b      	ldreq	r3, [r3, #4]
 800bfb0:	6063      	str	r3, [r4, #4]
 800bfb2:	bf04      	itt	eq
 800bfb4:	1949      	addeq	r1, r1, r5
 800bfb6:	6021      	streq	r1, [r4, #0]
 800bfb8:	6054      	str	r4, [r2, #4]
 800bfba:	e7c7      	b.n	800bf4c <_free_r+0x28>
 800bfbc:	b003      	add	sp, #12
 800bfbe:	bd30      	pop	{r4, r5, pc}
 800bfc0:	20000254 	.word	0x20000254

0800bfc4 <_malloc_r>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	1ccd      	adds	r5, r1, #3
 800bfc8:	f025 0503 	bic.w	r5, r5, #3
 800bfcc:	3508      	adds	r5, #8
 800bfce:	2d0c      	cmp	r5, #12
 800bfd0:	bf38      	it	cc
 800bfd2:	250c      	movcc	r5, #12
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	db01      	blt.n	800bfde <_malloc_r+0x1a>
 800bfda:	42a9      	cmp	r1, r5
 800bfdc:	d903      	bls.n	800bfe6 <_malloc_r+0x22>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	6033      	str	r3, [r6, #0]
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfe6:	f000 fc51 	bl	800c88c <__malloc_lock>
 800bfea:	4921      	ldr	r1, [pc, #132]	; (800c070 <_malloc_r+0xac>)
 800bfec:	680a      	ldr	r2, [r1, #0]
 800bfee:	4614      	mov	r4, r2
 800bff0:	b99c      	cbnz	r4, 800c01a <_malloc_r+0x56>
 800bff2:	4f20      	ldr	r7, [pc, #128]	; (800c074 <_malloc_r+0xb0>)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	b923      	cbnz	r3, 800c002 <_malloc_r+0x3e>
 800bff8:	4621      	mov	r1, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	f000 f996 	bl	800c32c <_sbrk_r>
 800c000:	6038      	str	r0, [r7, #0]
 800c002:	4629      	mov	r1, r5
 800c004:	4630      	mov	r0, r6
 800c006:	f000 f991 	bl	800c32c <_sbrk_r>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d123      	bne.n	800c056 <_malloc_r+0x92>
 800c00e:	230c      	movs	r3, #12
 800c010:	6033      	str	r3, [r6, #0]
 800c012:	4630      	mov	r0, r6
 800c014:	f000 fc40 	bl	800c898 <__malloc_unlock>
 800c018:	e7e3      	b.n	800bfe2 <_malloc_r+0x1e>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	1b5b      	subs	r3, r3, r5
 800c01e:	d417      	bmi.n	800c050 <_malloc_r+0x8c>
 800c020:	2b0b      	cmp	r3, #11
 800c022:	d903      	bls.n	800c02c <_malloc_r+0x68>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	441c      	add	r4, r3
 800c028:	6025      	str	r5, [r4, #0]
 800c02a:	e004      	b.n	800c036 <_malloc_r+0x72>
 800c02c:	6863      	ldr	r3, [r4, #4]
 800c02e:	42a2      	cmp	r2, r4
 800c030:	bf0c      	ite	eq
 800c032:	600b      	streq	r3, [r1, #0]
 800c034:	6053      	strne	r3, [r2, #4]
 800c036:	4630      	mov	r0, r6
 800c038:	f000 fc2e 	bl	800c898 <__malloc_unlock>
 800c03c:	f104 000b 	add.w	r0, r4, #11
 800c040:	1d23      	adds	r3, r4, #4
 800c042:	f020 0007 	bic.w	r0, r0, #7
 800c046:	1ac2      	subs	r2, r0, r3
 800c048:	d0cc      	beq.n	800bfe4 <_malloc_r+0x20>
 800c04a:	1a1b      	subs	r3, r3, r0
 800c04c:	50a3      	str	r3, [r4, r2]
 800c04e:	e7c9      	b.n	800bfe4 <_malloc_r+0x20>
 800c050:	4622      	mov	r2, r4
 800c052:	6864      	ldr	r4, [r4, #4]
 800c054:	e7cc      	b.n	800bff0 <_malloc_r+0x2c>
 800c056:	1cc4      	adds	r4, r0, #3
 800c058:	f024 0403 	bic.w	r4, r4, #3
 800c05c:	42a0      	cmp	r0, r4
 800c05e:	d0e3      	beq.n	800c028 <_malloc_r+0x64>
 800c060:	1a21      	subs	r1, r4, r0
 800c062:	4630      	mov	r0, r6
 800c064:	f000 f962 	bl	800c32c <_sbrk_r>
 800c068:	3001      	adds	r0, #1
 800c06a:	d1dd      	bne.n	800c028 <_malloc_r+0x64>
 800c06c:	e7cf      	b.n	800c00e <_malloc_r+0x4a>
 800c06e:	bf00      	nop
 800c070:	20000254 	.word	0x20000254
 800c074:	20000258 	.word	0x20000258

0800c078 <__sfputc_r>:
 800c078:	6893      	ldr	r3, [r2, #8]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	b410      	push	{r4}
 800c080:	6093      	str	r3, [r2, #8]
 800c082:	da08      	bge.n	800c096 <__sfputc_r+0x1e>
 800c084:	6994      	ldr	r4, [r2, #24]
 800c086:	42a3      	cmp	r3, r4
 800c088:	db01      	blt.n	800c08e <__sfputc_r+0x16>
 800c08a:	290a      	cmp	r1, #10
 800c08c:	d103      	bne.n	800c096 <__sfputc_r+0x1e>
 800c08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c092:	f000 b99f 	b.w	800c3d4 <__swbuf_r>
 800c096:	6813      	ldr	r3, [r2, #0]
 800c098:	1c58      	adds	r0, r3, #1
 800c09a:	6010      	str	r0, [r2, #0]
 800c09c:	7019      	strb	r1, [r3, #0]
 800c09e:	4608      	mov	r0, r1
 800c0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <__sfputs_r>:
 800c0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	18d5      	adds	r5, r2, r3
 800c0b0:	42ac      	cmp	r4, r5
 800c0b2:	d101      	bne.n	800c0b8 <__sfputs_r+0x12>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	e007      	b.n	800c0c8 <__sfputs_r+0x22>
 800c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ffda 	bl	800c078 <__sfputc_r>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d1f3      	bne.n	800c0b0 <__sfputs_r+0xa>
 800c0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0cc <_vfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	b09d      	sub	sp, #116	; 0x74
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	4698      	mov	r8, r3
 800c0d8:	4606      	mov	r6, r0
 800c0da:	b118      	cbz	r0, 800c0e4 <_vfiprintf_r+0x18>
 800c0dc:	6983      	ldr	r3, [r0, #24]
 800c0de:	b90b      	cbnz	r3, 800c0e4 <_vfiprintf_r+0x18>
 800c0e0:	f7ff fad6 	bl	800b690 <__sinit>
 800c0e4:	4b89      	ldr	r3, [pc, #548]	; (800c30c <_vfiprintf_r+0x240>)
 800c0e6:	429d      	cmp	r5, r3
 800c0e8:	d11b      	bne.n	800c122 <_vfiprintf_r+0x56>
 800c0ea:	6875      	ldr	r5, [r6, #4]
 800c0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ee:	07d9      	lsls	r1, r3, #31
 800c0f0:	d405      	bmi.n	800c0fe <_vfiprintf_r+0x32>
 800c0f2:	89ab      	ldrh	r3, [r5, #12]
 800c0f4:	059a      	lsls	r2, r3, #22
 800c0f6:	d402      	bmi.n	800c0fe <_vfiprintf_r+0x32>
 800c0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0fa:	f7ff fb6c 	bl	800b7d6 <__retarget_lock_acquire_recursive>
 800c0fe:	89ab      	ldrh	r3, [r5, #12]
 800c100:	071b      	lsls	r3, r3, #28
 800c102:	d501      	bpl.n	800c108 <_vfiprintf_r+0x3c>
 800c104:	692b      	ldr	r3, [r5, #16]
 800c106:	b9eb      	cbnz	r3, 800c144 <_vfiprintf_r+0x78>
 800c108:	4629      	mov	r1, r5
 800c10a:	4630      	mov	r0, r6
 800c10c:	f000 f9c6 	bl	800c49c <__swsetup_r>
 800c110:	b1c0      	cbz	r0, 800c144 <_vfiprintf_r+0x78>
 800c112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c114:	07dc      	lsls	r4, r3, #31
 800c116:	d50e      	bpl.n	800c136 <_vfiprintf_r+0x6a>
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	b01d      	add	sp, #116	; 0x74
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	4b7b      	ldr	r3, [pc, #492]	; (800c310 <_vfiprintf_r+0x244>)
 800c124:	429d      	cmp	r5, r3
 800c126:	d101      	bne.n	800c12c <_vfiprintf_r+0x60>
 800c128:	68b5      	ldr	r5, [r6, #8]
 800c12a:	e7df      	b.n	800c0ec <_vfiprintf_r+0x20>
 800c12c:	4b79      	ldr	r3, [pc, #484]	; (800c314 <_vfiprintf_r+0x248>)
 800c12e:	429d      	cmp	r5, r3
 800c130:	bf08      	it	eq
 800c132:	68f5      	ldreq	r5, [r6, #12]
 800c134:	e7da      	b.n	800c0ec <_vfiprintf_r+0x20>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	0598      	lsls	r0, r3, #22
 800c13a:	d4ed      	bmi.n	800c118 <_vfiprintf_r+0x4c>
 800c13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13e:	f7ff fb4b 	bl	800b7d8 <__retarget_lock_release_recursive>
 800c142:	e7e9      	b.n	800c118 <_vfiprintf_r+0x4c>
 800c144:	2300      	movs	r3, #0
 800c146:	9309      	str	r3, [sp, #36]	; 0x24
 800c148:	2320      	movs	r3, #32
 800c14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c152:	2330      	movs	r3, #48	; 0x30
 800c154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c318 <_vfiprintf_r+0x24c>
 800c158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c15c:	f04f 0901 	mov.w	r9, #1
 800c160:	4623      	mov	r3, r4
 800c162:	469a      	mov	sl, r3
 800c164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c168:	b10a      	cbz	r2, 800c16e <_vfiprintf_r+0xa2>
 800c16a:	2a25      	cmp	r2, #37	; 0x25
 800c16c:	d1f9      	bne.n	800c162 <_vfiprintf_r+0x96>
 800c16e:	ebba 0b04 	subs.w	fp, sl, r4
 800c172:	d00b      	beq.n	800c18c <_vfiprintf_r+0xc0>
 800c174:	465b      	mov	r3, fp
 800c176:	4622      	mov	r2, r4
 800c178:	4629      	mov	r1, r5
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7ff ff93 	bl	800c0a6 <__sfputs_r>
 800c180:	3001      	adds	r0, #1
 800c182:	f000 80aa 	beq.w	800c2da <_vfiprintf_r+0x20e>
 800c186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c188:	445a      	add	r2, fp
 800c18a:	9209      	str	r2, [sp, #36]	; 0x24
 800c18c:	f89a 3000 	ldrb.w	r3, [sl]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80a2 	beq.w	800c2da <_vfiprintf_r+0x20e>
 800c196:	2300      	movs	r3, #0
 800c198:	f04f 32ff 	mov.w	r2, #4294967295
 800c19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1a0:	f10a 0a01 	add.w	sl, sl, #1
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	9307      	str	r3, [sp, #28]
 800c1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ae:	4654      	mov	r4, sl
 800c1b0:	2205      	movs	r2, #5
 800c1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b6:	4858      	ldr	r0, [pc, #352]	; (800c318 <_vfiprintf_r+0x24c>)
 800c1b8:	f7f4 f842 	bl	8000240 <memchr>
 800c1bc:	9a04      	ldr	r2, [sp, #16]
 800c1be:	b9d8      	cbnz	r0, 800c1f8 <_vfiprintf_r+0x12c>
 800c1c0:	06d1      	lsls	r1, r2, #27
 800c1c2:	bf44      	itt	mi
 800c1c4:	2320      	movmi	r3, #32
 800c1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ca:	0713      	lsls	r3, r2, #28
 800c1cc:	bf44      	itt	mi
 800c1ce:	232b      	movmi	r3, #43	; 0x2b
 800c1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1da:	d015      	beq.n	800c208 <_vfiprintf_r+0x13c>
 800c1dc:	9a07      	ldr	r2, [sp, #28]
 800c1de:	4654      	mov	r4, sl
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f04f 0c0a 	mov.w	ip, #10
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ec:	3b30      	subs	r3, #48	; 0x30
 800c1ee:	2b09      	cmp	r3, #9
 800c1f0:	d94e      	bls.n	800c290 <_vfiprintf_r+0x1c4>
 800c1f2:	b1b0      	cbz	r0, 800c222 <_vfiprintf_r+0x156>
 800c1f4:	9207      	str	r2, [sp, #28]
 800c1f6:	e014      	b.n	800c222 <_vfiprintf_r+0x156>
 800c1f8:	eba0 0308 	sub.w	r3, r0, r8
 800c1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c200:	4313      	orrs	r3, r2
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	46a2      	mov	sl, r4
 800c206:	e7d2      	b.n	800c1ae <_vfiprintf_r+0xe2>
 800c208:	9b03      	ldr	r3, [sp, #12]
 800c20a:	1d19      	adds	r1, r3, #4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	9103      	str	r1, [sp, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	bfbb      	ittet	lt
 800c214:	425b      	neglt	r3, r3
 800c216:	f042 0202 	orrlt.w	r2, r2, #2
 800c21a:	9307      	strge	r3, [sp, #28]
 800c21c:	9307      	strlt	r3, [sp, #28]
 800c21e:	bfb8      	it	lt
 800c220:	9204      	strlt	r2, [sp, #16]
 800c222:	7823      	ldrb	r3, [r4, #0]
 800c224:	2b2e      	cmp	r3, #46	; 0x2e
 800c226:	d10c      	bne.n	800c242 <_vfiprintf_r+0x176>
 800c228:	7863      	ldrb	r3, [r4, #1]
 800c22a:	2b2a      	cmp	r3, #42	; 0x2a
 800c22c:	d135      	bne.n	800c29a <_vfiprintf_r+0x1ce>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	1d1a      	adds	r2, r3, #4
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	9203      	str	r2, [sp, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bfb8      	it	lt
 800c23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c23e:	3402      	adds	r4, #2
 800c240:	9305      	str	r3, [sp, #20]
 800c242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c328 <_vfiprintf_r+0x25c>
 800c246:	7821      	ldrb	r1, [r4, #0]
 800c248:	2203      	movs	r2, #3
 800c24a:	4650      	mov	r0, sl
 800c24c:	f7f3 fff8 	bl	8000240 <memchr>
 800c250:	b140      	cbz	r0, 800c264 <_vfiprintf_r+0x198>
 800c252:	2340      	movs	r3, #64	; 0x40
 800c254:	eba0 000a 	sub.w	r0, r0, sl
 800c258:	fa03 f000 	lsl.w	r0, r3, r0
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	4303      	orrs	r3, r0
 800c260:	3401      	adds	r4, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c268:	482c      	ldr	r0, [pc, #176]	; (800c31c <_vfiprintf_r+0x250>)
 800c26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c26e:	2206      	movs	r2, #6
 800c270:	f7f3 ffe6 	bl	8000240 <memchr>
 800c274:	2800      	cmp	r0, #0
 800c276:	d03f      	beq.n	800c2f8 <_vfiprintf_r+0x22c>
 800c278:	4b29      	ldr	r3, [pc, #164]	; (800c320 <_vfiprintf_r+0x254>)
 800c27a:	bb1b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x1f8>
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	3307      	adds	r3, #7
 800c280:	f023 0307 	bic.w	r3, r3, #7
 800c284:	3308      	adds	r3, #8
 800c286:	9303      	str	r3, [sp, #12]
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	443b      	add	r3, r7
 800c28c:	9309      	str	r3, [sp, #36]	; 0x24
 800c28e:	e767      	b.n	800c160 <_vfiprintf_r+0x94>
 800c290:	fb0c 3202 	mla	r2, ip, r2, r3
 800c294:	460c      	mov	r4, r1
 800c296:	2001      	movs	r0, #1
 800c298:	e7a5      	b.n	800c1e6 <_vfiprintf_r+0x11a>
 800c29a:	2300      	movs	r3, #0
 800c29c:	3401      	adds	r4, #1
 800c29e:	9305      	str	r3, [sp, #20]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f04f 0c0a 	mov.w	ip, #10
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ac:	3a30      	subs	r2, #48	; 0x30
 800c2ae:	2a09      	cmp	r2, #9
 800c2b0:	d903      	bls.n	800c2ba <_vfiprintf_r+0x1ee>
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0c5      	beq.n	800c242 <_vfiprintf_r+0x176>
 800c2b6:	9105      	str	r1, [sp, #20]
 800c2b8:	e7c3      	b.n	800c242 <_vfiprintf_r+0x176>
 800c2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2be:	4604      	mov	r4, r0
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e7f0      	b.n	800c2a6 <_vfiprintf_r+0x1da>
 800c2c4:	ab03      	add	r3, sp, #12
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	462a      	mov	r2, r5
 800c2ca:	4b16      	ldr	r3, [pc, #88]	; (800c324 <_vfiprintf_r+0x258>)
 800c2cc:	a904      	add	r1, sp, #16
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7fd ff2a 	bl	800a128 <_printf_float>
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	1c78      	adds	r0, r7, #1
 800c2d8:	d1d6      	bne.n	800c288 <_vfiprintf_r+0x1bc>
 800c2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2dc:	07d9      	lsls	r1, r3, #31
 800c2de:	d405      	bmi.n	800c2ec <_vfiprintf_r+0x220>
 800c2e0:	89ab      	ldrh	r3, [r5, #12]
 800c2e2:	059a      	lsls	r2, r3, #22
 800c2e4:	d402      	bmi.n	800c2ec <_vfiprintf_r+0x220>
 800c2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e8:	f7ff fa76 	bl	800b7d8 <__retarget_lock_release_recursive>
 800c2ec:	89ab      	ldrh	r3, [r5, #12]
 800c2ee:	065b      	lsls	r3, r3, #25
 800c2f0:	f53f af12 	bmi.w	800c118 <_vfiprintf_r+0x4c>
 800c2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2f6:	e711      	b.n	800c11c <_vfiprintf_r+0x50>
 800c2f8:	ab03      	add	r3, sp, #12
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <_vfiprintf_r+0x258>)
 800c300:	a904      	add	r1, sp, #16
 800c302:	4630      	mov	r0, r6
 800c304:	f7fe f9b4 	bl	800a670 <_printf_i>
 800c308:	e7e4      	b.n	800c2d4 <_vfiprintf_r+0x208>
 800c30a:	bf00      	nop
 800c30c:	0807a0c0 	.word	0x0807a0c0
 800c310:	0807a0e0 	.word	0x0807a0e0
 800c314:	0807a0a0 	.word	0x0807a0a0
 800c318:	0807a25c 	.word	0x0807a25c
 800c31c:	0807a266 	.word	0x0807a266
 800c320:	0800a129 	.word	0x0800a129
 800c324:	0800c0a7 	.word	0x0800c0a7
 800c328:	0807a262 	.word	0x0807a262

0800c32c <_sbrk_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d06      	ldr	r5, [pc, #24]	; (800c348 <_sbrk_r+0x1c>)
 800c330:	2300      	movs	r3, #0
 800c332:	4604      	mov	r4, r0
 800c334:	4608      	mov	r0, r1
 800c336:	602b      	str	r3, [r5, #0]
 800c338:	f7f5 fec0 	bl	80020bc <_sbrk>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_sbrk_r+0x1a>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_sbrk_r+0x1a>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20000a64 	.word	0x20000a64

0800c34c <__sread>:
 800c34c:	b510      	push	{r4, lr}
 800c34e:	460c      	mov	r4, r1
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	f000 faa6 	bl	800c8a4 <_read_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	bfab      	itete	ge
 800c35c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c35e:	89a3      	ldrhlt	r3, [r4, #12]
 800c360:	181b      	addge	r3, r3, r0
 800c362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c366:	bfac      	ite	ge
 800c368:	6563      	strge	r3, [r4, #84]	; 0x54
 800c36a:	81a3      	strhlt	r3, [r4, #12]
 800c36c:	bd10      	pop	{r4, pc}

0800c36e <__swrite>:
 800c36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c372:	461f      	mov	r7, r3
 800c374:	898b      	ldrh	r3, [r1, #12]
 800c376:	05db      	lsls	r3, r3, #23
 800c378:	4605      	mov	r5, r0
 800c37a:	460c      	mov	r4, r1
 800c37c:	4616      	mov	r6, r2
 800c37e:	d505      	bpl.n	800c38c <__swrite+0x1e>
 800c380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c384:	2302      	movs	r3, #2
 800c386:	2200      	movs	r2, #0
 800c388:	f000 f9f8 	bl	800c77c <_lseek_r>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	4632      	mov	r2, r6
 800c39a:	463b      	mov	r3, r7
 800c39c:	4628      	mov	r0, r5
 800c39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	f000 b869 	b.w	800c478 <_write_r>

0800c3a6 <__sseek>:
 800c3a6:	b510      	push	{r4, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ae:	f000 f9e5 	bl	800c77c <_lseek_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	bf15      	itete	ne
 800c3b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3c2:	81a3      	strheq	r3, [r4, #12]
 800c3c4:	bf18      	it	ne
 800c3c6:	81a3      	strhne	r3, [r4, #12]
 800c3c8:	bd10      	pop	{r4, pc}

0800c3ca <__sclose>:
 800c3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ce:	f000 b8f1 	b.w	800c5b4 <_close_r>
	...

0800c3d4 <__swbuf_r>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	460e      	mov	r6, r1
 800c3d8:	4614      	mov	r4, r2
 800c3da:	4605      	mov	r5, r0
 800c3dc:	b118      	cbz	r0, 800c3e6 <__swbuf_r+0x12>
 800c3de:	6983      	ldr	r3, [r0, #24]
 800c3e0:	b90b      	cbnz	r3, 800c3e6 <__swbuf_r+0x12>
 800c3e2:	f7ff f955 	bl	800b690 <__sinit>
 800c3e6:	4b21      	ldr	r3, [pc, #132]	; (800c46c <__swbuf_r+0x98>)
 800c3e8:	429c      	cmp	r4, r3
 800c3ea:	d12b      	bne.n	800c444 <__swbuf_r+0x70>
 800c3ec:	686c      	ldr	r4, [r5, #4]
 800c3ee:	69a3      	ldr	r3, [r4, #24]
 800c3f0:	60a3      	str	r3, [r4, #8]
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	071a      	lsls	r2, r3, #28
 800c3f6:	d52f      	bpl.n	800c458 <__swbuf_r+0x84>
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	b36b      	cbz	r3, 800c458 <__swbuf_r+0x84>
 800c3fc:	6923      	ldr	r3, [r4, #16]
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	1ac0      	subs	r0, r0, r3
 800c402:	6963      	ldr	r3, [r4, #20]
 800c404:	b2f6      	uxtb	r6, r6
 800c406:	4283      	cmp	r3, r0
 800c408:	4637      	mov	r7, r6
 800c40a:	dc04      	bgt.n	800c416 <__swbuf_r+0x42>
 800c40c:	4621      	mov	r1, r4
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 f966 	bl	800c6e0 <_fflush_r>
 800c414:	bb30      	cbnz	r0, 800c464 <__swbuf_r+0x90>
 800c416:	68a3      	ldr	r3, [r4, #8]
 800c418:	3b01      	subs	r3, #1
 800c41a:	60a3      	str	r3, [r4, #8]
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	1c5a      	adds	r2, r3, #1
 800c420:	6022      	str	r2, [r4, #0]
 800c422:	701e      	strb	r6, [r3, #0]
 800c424:	6963      	ldr	r3, [r4, #20]
 800c426:	3001      	adds	r0, #1
 800c428:	4283      	cmp	r3, r0
 800c42a:	d004      	beq.n	800c436 <__swbuf_r+0x62>
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	07db      	lsls	r3, r3, #31
 800c430:	d506      	bpl.n	800c440 <__swbuf_r+0x6c>
 800c432:	2e0a      	cmp	r6, #10
 800c434:	d104      	bne.n	800c440 <__swbuf_r+0x6c>
 800c436:	4621      	mov	r1, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	f000 f951 	bl	800c6e0 <_fflush_r>
 800c43e:	b988      	cbnz	r0, 800c464 <__swbuf_r+0x90>
 800c440:	4638      	mov	r0, r7
 800c442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <__swbuf_r+0x9c>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d101      	bne.n	800c44e <__swbuf_r+0x7a>
 800c44a:	68ac      	ldr	r4, [r5, #8]
 800c44c:	e7cf      	b.n	800c3ee <__swbuf_r+0x1a>
 800c44e:	4b09      	ldr	r3, [pc, #36]	; (800c474 <__swbuf_r+0xa0>)
 800c450:	429c      	cmp	r4, r3
 800c452:	bf08      	it	eq
 800c454:	68ec      	ldreq	r4, [r5, #12]
 800c456:	e7ca      	b.n	800c3ee <__swbuf_r+0x1a>
 800c458:	4621      	mov	r1, r4
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 f81e 	bl	800c49c <__swsetup_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	d0cb      	beq.n	800c3fc <__swbuf_r+0x28>
 800c464:	f04f 37ff 	mov.w	r7, #4294967295
 800c468:	e7ea      	b.n	800c440 <__swbuf_r+0x6c>
 800c46a:	bf00      	nop
 800c46c:	0807a0c0 	.word	0x0807a0c0
 800c470:	0807a0e0 	.word	0x0807a0e0
 800c474:	0807a0a0 	.word	0x0807a0a0

0800c478 <_write_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4d07      	ldr	r5, [pc, #28]	; (800c498 <_write_r+0x20>)
 800c47c:	4604      	mov	r4, r0
 800c47e:	4608      	mov	r0, r1
 800c480:	4611      	mov	r1, r2
 800c482:	2200      	movs	r2, #0
 800c484:	602a      	str	r2, [r5, #0]
 800c486:	461a      	mov	r2, r3
 800c488:	f7f5 fdc7 	bl	800201a <_write>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_write_r+0x1e>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_write_r+0x1e>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	20000a64 	.word	0x20000a64

0800c49c <__swsetup_r>:
 800c49c:	4b32      	ldr	r3, [pc, #200]	; (800c568 <__swsetup_r+0xcc>)
 800c49e:	b570      	push	{r4, r5, r6, lr}
 800c4a0:	681d      	ldr	r5, [r3, #0]
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	b125      	cbz	r5, 800c4b2 <__swsetup_r+0x16>
 800c4a8:	69ab      	ldr	r3, [r5, #24]
 800c4aa:	b913      	cbnz	r3, 800c4b2 <__swsetup_r+0x16>
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7ff f8ef 	bl	800b690 <__sinit>
 800c4b2:	4b2e      	ldr	r3, [pc, #184]	; (800c56c <__swsetup_r+0xd0>)
 800c4b4:	429c      	cmp	r4, r3
 800c4b6:	d10f      	bne.n	800c4d8 <__swsetup_r+0x3c>
 800c4b8:	686c      	ldr	r4, [r5, #4]
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4c0:	0719      	lsls	r1, r3, #28
 800c4c2:	d42c      	bmi.n	800c51e <__swsetup_r+0x82>
 800c4c4:	06dd      	lsls	r5, r3, #27
 800c4c6:	d411      	bmi.n	800c4ec <__swsetup_r+0x50>
 800c4c8:	2309      	movs	r3, #9
 800c4ca:	6033      	str	r3, [r6, #0]
 800c4cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4d0:	81a3      	strh	r3, [r4, #12]
 800c4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d6:	e03e      	b.n	800c556 <__swsetup_r+0xba>
 800c4d8:	4b25      	ldr	r3, [pc, #148]	; (800c570 <__swsetup_r+0xd4>)
 800c4da:	429c      	cmp	r4, r3
 800c4dc:	d101      	bne.n	800c4e2 <__swsetup_r+0x46>
 800c4de:	68ac      	ldr	r4, [r5, #8]
 800c4e0:	e7eb      	b.n	800c4ba <__swsetup_r+0x1e>
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <__swsetup_r+0xd8>)
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	bf08      	it	eq
 800c4e8:	68ec      	ldreq	r4, [r5, #12]
 800c4ea:	e7e6      	b.n	800c4ba <__swsetup_r+0x1e>
 800c4ec:	0758      	lsls	r0, r3, #29
 800c4ee:	d512      	bpl.n	800c516 <__swsetup_r+0x7a>
 800c4f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4f2:	b141      	cbz	r1, 800c506 <__swsetup_r+0x6a>
 800c4f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4f8:	4299      	cmp	r1, r3
 800c4fa:	d002      	beq.n	800c502 <__swsetup_r+0x66>
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7ff fd11 	bl	800bf24 <_free_r>
 800c502:	2300      	movs	r3, #0
 800c504:	6363      	str	r3, [r4, #52]	; 0x34
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	2300      	movs	r3, #0
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	f043 0308 	orr.w	r3, r3, #8
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	b94b      	cbnz	r3, 800c536 <__swsetup_r+0x9a>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c52c:	d003      	beq.n	800c536 <__swsetup_r+0x9a>
 800c52e:	4621      	mov	r1, r4
 800c530:	4630      	mov	r0, r6
 800c532:	f000 f959 	bl	800c7e8 <__smakebuf_r>
 800c536:	89a0      	ldrh	r0, [r4, #12]
 800c538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c53c:	f010 0301 	ands.w	r3, r0, #1
 800c540:	d00a      	beq.n	800c558 <__swsetup_r+0xbc>
 800c542:	2300      	movs	r3, #0
 800c544:	60a3      	str	r3, [r4, #8]
 800c546:	6963      	ldr	r3, [r4, #20]
 800c548:	425b      	negs	r3, r3
 800c54a:	61a3      	str	r3, [r4, #24]
 800c54c:	6923      	ldr	r3, [r4, #16]
 800c54e:	b943      	cbnz	r3, 800c562 <__swsetup_r+0xc6>
 800c550:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c554:	d1ba      	bne.n	800c4cc <__swsetup_r+0x30>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	0781      	lsls	r1, r0, #30
 800c55a:	bf58      	it	pl
 800c55c:	6963      	ldrpl	r3, [r4, #20]
 800c55e:	60a3      	str	r3, [r4, #8]
 800c560:	e7f4      	b.n	800c54c <__swsetup_r+0xb0>
 800c562:	2000      	movs	r0, #0
 800c564:	e7f7      	b.n	800c556 <__swsetup_r+0xba>
 800c566:	bf00      	nop
 800c568:	2000000c 	.word	0x2000000c
 800c56c:	0807a0c0 	.word	0x0807a0c0
 800c570:	0807a0e0 	.word	0x0807a0e0
 800c574:	0807a0a0 	.word	0x0807a0a0

0800c578 <__assert_func>:
 800c578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c57a:	4614      	mov	r4, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <__assert_func+0x2c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4605      	mov	r5, r0
 800c584:	68d8      	ldr	r0, [r3, #12]
 800c586:	b14c      	cbz	r4, 800c59c <__assert_func+0x24>
 800c588:	4b07      	ldr	r3, [pc, #28]	; (800c5a8 <__assert_func+0x30>)
 800c58a:	9100      	str	r1, [sp, #0]
 800c58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c590:	4906      	ldr	r1, [pc, #24]	; (800c5ac <__assert_func+0x34>)
 800c592:	462b      	mov	r3, r5
 800c594:	f000 f8e0 	bl	800c758 <fiprintf>
 800c598:	f000 f9a3 	bl	800c8e2 <abort>
 800c59c:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <__assert_func+0x38>)
 800c59e:	461c      	mov	r4, r3
 800c5a0:	e7f3      	b.n	800c58a <__assert_func+0x12>
 800c5a2:	bf00      	nop
 800c5a4:	2000000c 	.word	0x2000000c
 800c5a8:	0807a26d 	.word	0x0807a26d
 800c5ac:	0807a27a 	.word	0x0807a27a
 800c5b0:	0807a2a8 	.word	0x0807a2a8

0800c5b4 <_close_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d06      	ldr	r5, [pc, #24]	; (800c5d0 <_close_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f5 fd47 	bl	8002052 <_close>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_close_r+0x1a>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_close_r+0x1a>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20000a64 	.word	0x20000a64

0800c5d4 <__sflush_r>:
 800c5d4:	898a      	ldrh	r2, [r1, #12]
 800c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5da:	4605      	mov	r5, r0
 800c5dc:	0710      	lsls	r0, r2, #28
 800c5de:	460c      	mov	r4, r1
 800c5e0:	d458      	bmi.n	800c694 <__sflush_r+0xc0>
 800c5e2:	684b      	ldr	r3, [r1, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dc05      	bgt.n	800c5f4 <__sflush_r+0x20>
 800c5e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dc02      	bgt.n	800c5f4 <__sflush_r+0x20>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5f6:	2e00      	cmp	r6, #0
 800c5f8:	d0f9      	beq.n	800c5ee <__sflush_r+0x1a>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c600:	682f      	ldr	r7, [r5, #0]
 800c602:	602b      	str	r3, [r5, #0]
 800c604:	d032      	beq.n	800c66c <__sflush_r+0x98>
 800c606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	075a      	lsls	r2, r3, #29
 800c60c:	d505      	bpl.n	800c61a <__sflush_r+0x46>
 800c60e:	6863      	ldr	r3, [r4, #4]
 800c610:	1ac0      	subs	r0, r0, r3
 800c612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c614:	b10b      	cbz	r3, 800c61a <__sflush_r+0x46>
 800c616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c618:	1ac0      	subs	r0, r0, r3
 800c61a:	2300      	movs	r3, #0
 800c61c:	4602      	mov	r2, r0
 800c61e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c620:	6a21      	ldr	r1, [r4, #32]
 800c622:	4628      	mov	r0, r5
 800c624:	47b0      	blx	r6
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	d106      	bne.n	800c63a <__sflush_r+0x66>
 800c62c:	6829      	ldr	r1, [r5, #0]
 800c62e:	291d      	cmp	r1, #29
 800c630:	d82c      	bhi.n	800c68c <__sflush_r+0xb8>
 800c632:	4a2a      	ldr	r2, [pc, #168]	; (800c6dc <__sflush_r+0x108>)
 800c634:	40ca      	lsrs	r2, r1
 800c636:	07d6      	lsls	r6, r2, #31
 800c638:	d528      	bpl.n	800c68c <__sflush_r+0xb8>
 800c63a:	2200      	movs	r2, #0
 800c63c:	6062      	str	r2, [r4, #4]
 800c63e:	04d9      	lsls	r1, r3, #19
 800c640:	6922      	ldr	r2, [r4, #16]
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	d504      	bpl.n	800c650 <__sflush_r+0x7c>
 800c646:	1c42      	adds	r2, r0, #1
 800c648:	d101      	bne.n	800c64e <__sflush_r+0x7a>
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	b903      	cbnz	r3, 800c650 <__sflush_r+0x7c>
 800c64e:	6560      	str	r0, [r4, #84]	; 0x54
 800c650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c652:	602f      	str	r7, [r5, #0]
 800c654:	2900      	cmp	r1, #0
 800c656:	d0ca      	beq.n	800c5ee <__sflush_r+0x1a>
 800c658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c65c:	4299      	cmp	r1, r3
 800c65e:	d002      	beq.n	800c666 <__sflush_r+0x92>
 800c660:	4628      	mov	r0, r5
 800c662:	f7ff fc5f 	bl	800bf24 <_free_r>
 800c666:	2000      	movs	r0, #0
 800c668:	6360      	str	r0, [r4, #52]	; 0x34
 800c66a:	e7c1      	b.n	800c5f0 <__sflush_r+0x1c>
 800c66c:	6a21      	ldr	r1, [r4, #32]
 800c66e:	2301      	movs	r3, #1
 800c670:	4628      	mov	r0, r5
 800c672:	47b0      	blx	r6
 800c674:	1c41      	adds	r1, r0, #1
 800c676:	d1c7      	bne.n	800c608 <__sflush_r+0x34>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0c4      	beq.n	800c608 <__sflush_r+0x34>
 800c67e:	2b1d      	cmp	r3, #29
 800c680:	d001      	beq.n	800c686 <__sflush_r+0xb2>
 800c682:	2b16      	cmp	r3, #22
 800c684:	d101      	bne.n	800c68a <__sflush_r+0xb6>
 800c686:	602f      	str	r7, [r5, #0]
 800c688:	e7b1      	b.n	800c5ee <__sflush_r+0x1a>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	e7ad      	b.n	800c5f0 <__sflush_r+0x1c>
 800c694:	690f      	ldr	r7, [r1, #16]
 800c696:	2f00      	cmp	r7, #0
 800c698:	d0a9      	beq.n	800c5ee <__sflush_r+0x1a>
 800c69a:	0793      	lsls	r3, r2, #30
 800c69c:	680e      	ldr	r6, [r1, #0]
 800c69e:	bf08      	it	eq
 800c6a0:	694b      	ldreq	r3, [r1, #20]
 800c6a2:	600f      	str	r7, [r1, #0]
 800c6a4:	bf18      	it	ne
 800c6a6:	2300      	movne	r3, #0
 800c6a8:	eba6 0807 	sub.w	r8, r6, r7
 800c6ac:	608b      	str	r3, [r1, #8]
 800c6ae:	f1b8 0f00 	cmp.w	r8, #0
 800c6b2:	dd9c      	ble.n	800c5ee <__sflush_r+0x1a>
 800c6b4:	6a21      	ldr	r1, [r4, #32]
 800c6b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6b8:	4643      	mov	r3, r8
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	47b0      	blx	r6
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	dc06      	bgt.n	800c6d2 <__sflush_r+0xfe>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e78e      	b.n	800c5f0 <__sflush_r+0x1c>
 800c6d2:	4407      	add	r7, r0
 800c6d4:	eba8 0800 	sub.w	r8, r8, r0
 800c6d8:	e7e9      	b.n	800c6ae <__sflush_r+0xda>
 800c6da:	bf00      	nop
 800c6dc:	20400001 	.word	0x20400001

0800c6e0 <_fflush_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	690b      	ldr	r3, [r1, #16]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	b913      	cbnz	r3, 800c6f0 <_fflush_r+0x10>
 800c6ea:	2500      	movs	r5, #0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	b118      	cbz	r0, 800c6fa <_fflush_r+0x1a>
 800c6f2:	6983      	ldr	r3, [r0, #24]
 800c6f4:	b90b      	cbnz	r3, 800c6fa <_fflush_r+0x1a>
 800c6f6:	f7fe ffcb 	bl	800b690 <__sinit>
 800c6fa:	4b14      	ldr	r3, [pc, #80]	; (800c74c <_fflush_r+0x6c>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	d11b      	bne.n	800c738 <_fflush_r+0x58>
 800c700:	686c      	ldr	r4, [r5, #4]
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0ef      	beq.n	800c6ea <_fflush_r+0xa>
 800c70a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c70c:	07d0      	lsls	r0, r2, #31
 800c70e:	d404      	bmi.n	800c71a <_fflush_r+0x3a>
 800c710:	0599      	lsls	r1, r3, #22
 800c712:	d402      	bmi.n	800c71a <_fflush_r+0x3a>
 800c714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c716:	f7ff f85e 	bl	800b7d6 <__retarget_lock_acquire_recursive>
 800c71a:	4628      	mov	r0, r5
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff ff59 	bl	800c5d4 <__sflush_r>
 800c722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c724:	07da      	lsls	r2, r3, #31
 800c726:	4605      	mov	r5, r0
 800c728:	d4e0      	bmi.n	800c6ec <_fflush_r+0xc>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	059b      	lsls	r3, r3, #22
 800c72e:	d4dd      	bmi.n	800c6ec <_fflush_r+0xc>
 800c730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c732:	f7ff f851 	bl	800b7d8 <__retarget_lock_release_recursive>
 800c736:	e7d9      	b.n	800c6ec <_fflush_r+0xc>
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <_fflush_r+0x70>)
 800c73a:	429c      	cmp	r4, r3
 800c73c:	d101      	bne.n	800c742 <_fflush_r+0x62>
 800c73e:	68ac      	ldr	r4, [r5, #8]
 800c740:	e7df      	b.n	800c702 <_fflush_r+0x22>
 800c742:	4b04      	ldr	r3, [pc, #16]	; (800c754 <_fflush_r+0x74>)
 800c744:	429c      	cmp	r4, r3
 800c746:	bf08      	it	eq
 800c748:	68ec      	ldreq	r4, [r5, #12]
 800c74a:	e7da      	b.n	800c702 <_fflush_r+0x22>
 800c74c:	0807a0c0 	.word	0x0807a0c0
 800c750:	0807a0e0 	.word	0x0807a0e0
 800c754:	0807a0a0 	.word	0x0807a0a0

0800c758 <fiprintf>:
 800c758:	b40e      	push	{r1, r2, r3}
 800c75a:	b503      	push	{r0, r1, lr}
 800c75c:	4601      	mov	r1, r0
 800c75e:	ab03      	add	r3, sp, #12
 800c760:	4805      	ldr	r0, [pc, #20]	; (800c778 <fiprintf+0x20>)
 800c762:	f853 2b04 	ldr.w	r2, [r3], #4
 800c766:	6800      	ldr	r0, [r0, #0]
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	f7ff fcaf 	bl	800c0cc <_vfiprintf_r>
 800c76e:	b002      	add	sp, #8
 800c770:	f85d eb04 	ldr.w	lr, [sp], #4
 800c774:	b003      	add	sp, #12
 800c776:	4770      	bx	lr
 800c778:	2000000c 	.word	0x2000000c

0800c77c <_lseek_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d07      	ldr	r5, [pc, #28]	; (800c79c <_lseek_r+0x20>)
 800c780:	4604      	mov	r4, r0
 800c782:	4608      	mov	r0, r1
 800c784:	4611      	mov	r1, r2
 800c786:	2200      	movs	r2, #0
 800c788:	602a      	str	r2, [r5, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	f7f5 fc88 	bl	80020a0 <_lseek>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_lseek_r+0x1e>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_lseek_r+0x1e>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	20000a64 	.word	0x20000a64

0800c7a0 <__swhatbuf_r>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	460e      	mov	r6, r1
 800c7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	b096      	sub	sp, #88	; 0x58
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	461d      	mov	r5, r3
 800c7b0:	da07      	bge.n	800c7c2 <__swhatbuf_r+0x22>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	89b3      	ldrh	r3, [r6, #12]
 800c7b8:	061a      	lsls	r2, r3, #24
 800c7ba:	d410      	bmi.n	800c7de <__swhatbuf_r+0x3e>
 800c7bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c0:	e00e      	b.n	800c7e0 <__swhatbuf_r+0x40>
 800c7c2:	466a      	mov	r2, sp
 800c7c4:	f000 f894 	bl	800c8f0 <_fstat_r>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	dbf2      	blt.n	800c7b2 <__swhatbuf_r+0x12>
 800c7cc:	9a01      	ldr	r2, [sp, #4]
 800c7ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7d6:	425a      	negs	r2, r3
 800c7d8:	415a      	adcs	r2, r3
 800c7da:	602a      	str	r2, [r5, #0]
 800c7dc:	e7ee      	b.n	800c7bc <__swhatbuf_r+0x1c>
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	b016      	add	sp, #88	; 0x58
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}

0800c7e8 <__smakebuf_r>:
 800c7e8:	898b      	ldrh	r3, [r1, #12]
 800c7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7ec:	079d      	lsls	r5, r3, #30
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	d507      	bpl.n	800c804 <__smakebuf_r+0x1c>
 800c7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	6123      	str	r3, [r4, #16]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	6163      	str	r3, [r4, #20]
 800c800:	b002      	add	sp, #8
 800c802:	bd70      	pop	{r4, r5, r6, pc}
 800c804:	ab01      	add	r3, sp, #4
 800c806:	466a      	mov	r2, sp
 800c808:	f7ff ffca 	bl	800c7a0 <__swhatbuf_r>
 800c80c:	9900      	ldr	r1, [sp, #0]
 800c80e:	4605      	mov	r5, r0
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff fbd7 	bl	800bfc4 <_malloc_r>
 800c816:	b948      	cbnz	r0, 800c82c <__smakebuf_r+0x44>
 800c818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81c:	059a      	lsls	r2, r3, #22
 800c81e:	d4ef      	bmi.n	800c800 <__smakebuf_r+0x18>
 800c820:	f023 0303 	bic.w	r3, r3, #3
 800c824:	f043 0302 	orr.w	r3, r3, #2
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	e7e3      	b.n	800c7f4 <__smakebuf_r+0xc>
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <__smakebuf_r+0x7c>)
 800c82e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	6020      	str	r0, [r4, #0]
 800c834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	6163      	str	r3, [r4, #20]
 800c83e:	9b01      	ldr	r3, [sp, #4]
 800c840:	6120      	str	r0, [r4, #16]
 800c842:	b15b      	cbz	r3, 800c85c <__smakebuf_r+0x74>
 800c844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c848:	4630      	mov	r0, r6
 800c84a:	f000 f863 	bl	800c914 <_isatty_r>
 800c84e:	b128      	cbz	r0, 800c85c <__smakebuf_r+0x74>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	f043 0301 	orr.w	r3, r3, #1
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	89a0      	ldrh	r0, [r4, #12]
 800c85e:	4305      	orrs	r5, r0
 800c860:	81a5      	strh	r5, [r4, #12]
 800c862:	e7cd      	b.n	800c800 <__smakebuf_r+0x18>
 800c864:	0800b629 	.word	0x0800b629

0800c868 <__ascii_mbtowc>:
 800c868:	b082      	sub	sp, #8
 800c86a:	b901      	cbnz	r1, 800c86e <__ascii_mbtowc+0x6>
 800c86c:	a901      	add	r1, sp, #4
 800c86e:	b142      	cbz	r2, 800c882 <__ascii_mbtowc+0x1a>
 800c870:	b14b      	cbz	r3, 800c886 <__ascii_mbtowc+0x1e>
 800c872:	7813      	ldrb	r3, [r2, #0]
 800c874:	600b      	str	r3, [r1, #0]
 800c876:	7812      	ldrb	r2, [r2, #0]
 800c878:	1e10      	subs	r0, r2, #0
 800c87a:	bf18      	it	ne
 800c87c:	2001      	movne	r0, #1
 800c87e:	b002      	add	sp, #8
 800c880:	4770      	bx	lr
 800c882:	4610      	mov	r0, r2
 800c884:	e7fb      	b.n	800c87e <__ascii_mbtowc+0x16>
 800c886:	f06f 0001 	mvn.w	r0, #1
 800c88a:	e7f8      	b.n	800c87e <__ascii_mbtowc+0x16>

0800c88c <__malloc_lock>:
 800c88c:	4801      	ldr	r0, [pc, #4]	; (800c894 <__malloc_lock+0x8>)
 800c88e:	f7fe bfa2 	b.w	800b7d6 <__retarget_lock_acquire_recursive>
 800c892:	bf00      	nop
 800c894:	20000a5c 	.word	0x20000a5c

0800c898 <__malloc_unlock>:
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <__malloc_unlock+0x8>)
 800c89a:	f7fe bf9d 	b.w	800b7d8 <__retarget_lock_release_recursive>
 800c89e:	bf00      	nop
 800c8a0:	20000a5c 	.word	0x20000a5c

0800c8a4 <_read_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_read_r+0x20>)
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	602a      	str	r2, [r5, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f7f5 fb94 	bl	8001fe0 <_read>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_read_r+0x1e>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_read_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000a64 	.word	0x20000a64

0800c8c8 <__ascii_wctomb>:
 800c8c8:	b149      	cbz	r1, 800c8de <__ascii_wctomb+0x16>
 800c8ca:	2aff      	cmp	r2, #255	; 0xff
 800c8cc:	bf85      	ittet	hi
 800c8ce:	238a      	movhi	r3, #138	; 0x8a
 800c8d0:	6003      	strhi	r3, [r0, #0]
 800c8d2:	700a      	strbls	r2, [r1, #0]
 800c8d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8d8:	bf98      	it	ls
 800c8da:	2001      	movls	r0, #1
 800c8dc:	4770      	bx	lr
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4770      	bx	lr

0800c8e2 <abort>:
 800c8e2:	b508      	push	{r3, lr}
 800c8e4:	2006      	movs	r0, #6
 800c8e6:	f000 f84d 	bl	800c984 <raise>
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f7f5 fb6e 	bl	8001fcc <_exit>

0800c8f0 <_fstat_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	; (800c910 <_fstat_r+0x20>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	f7f5 fbb4 	bl	800206a <_fstat>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	d102      	bne.n	800c90c <_fstat_r+0x1c>
 800c906:	682b      	ldr	r3, [r5, #0]
 800c908:	b103      	cbz	r3, 800c90c <_fstat_r+0x1c>
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop
 800c910:	20000a64 	.word	0x20000a64

0800c914 <_isatty_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d06      	ldr	r5, [pc, #24]	; (800c930 <_isatty_r+0x1c>)
 800c918:	2300      	movs	r3, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	602b      	str	r3, [r5, #0]
 800c920:	f7f5 fbb3 	bl	800208a <_isatty>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_isatty_r+0x1a>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_isatty_r+0x1a>
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	20000a64 	.word	0x20000a64

0800c934 <_raise_r>:
 800c934:	291f      	cmp	r1, #31
 800c936:	b538      	push	{r3, r4, r5, lr}
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	d904      	bls.n	800c948 <_raise_r+0x14>
 800c93e:	2316      	movs	r3, #22
 800c940:	6003      	str	r3, [r0, #0]
 800c942:	f04f 30ff 	mov.w	r0, #4294967295
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c94a:	b112      	cbz	r2, 800c952 <_raise_r+0x1e>
 800c94c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c950:	b94b      	cbnz	r3, 800c966 <_raise_r+0x32>
 800c952:	4620      	mov	r0, r4
 800c954:	f000 f830 	bl	800c9b8 <_getpid_r>
 800c958:	462a      	mov	r2, r5
 800c95a:	4601      	mov	r1, r0
 800c95c:	4620      	mov	r0, r4
 800c95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c962:	f000 b817 	b.w	800c994 <_kill_r>
 800c966:	2b01      	cmp	r3, #1
 800c968:	d00a      	beq.n	800c980 <_raise_r+0x4c>
 800c96a:	1c59      	adds	r1, r3, #1
 800c96c:	d103      	bne.n	800c976 <_raise_r+0x42>
 800c96e:	2316      	movs	r3, #22
 800c970:	6003      	str	r3, [r0, #0]
 800c972:	2001      	movs	r0, #1
 800c974:	e7e7      	b.n	800c946 <_raise_r+0x12>
 800c976:	2400      	movs	r4, #0
 800c978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c97c:	4628      	mov	r0, r5
 800c97e:	4798      	blx	r3
 800c980:	2000      	movs	r0, #0
 800c982:	e7e0      	b.n	800c946 <_raise_r+0x12>

0800c984 <raise>:
 800c984:	4b02      	ldr	r3, [pc, #8]	; (800c990 <raise+0xc>)
 800c986:	4601      	mov	r1, r0
 800c988:	6818      	ldr	r0, [r3, #0]
 800c98a:	f7ff bfd3 	b.w	800c934 <_raise_r>
 800c98e:	bf00      	nop
 800c990:	2000000c 	.word	0x2000000c

0800c994 <_kill_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	; (800c9b4 <_kill_r+0x20>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	4611      	mov	r1, r2
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	f7f5 fb03 	bl	8001fac <_kill>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d102      	bne.n	800c9b0 <_kill_r+0x1c>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	b103      	cbz	r3, 800c9b0 <_kill_r+0x1c>
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000a64 	.word	0x20000a64

0800c9b8 <_getpid_r>:
 800c9b8:	f7f5 baf0 	b.w	8001f9c <_getpid>

0800c9bc <_init>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	bf00      	nop
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr

0800c9c8 <_fini>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	bf00      	nop
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr
