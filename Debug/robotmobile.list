
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c764  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800c938  0800c938  0001c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd8c  0800cd8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd94  0800cd94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001e0  0800cf7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0800cf7c  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a15  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f42  00000000  00000000  00040c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00044b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  00046120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002635b  00000000  00000000  00047538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d690  00000000  00000000  0006d893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcd2c  00000000  00000000  0008af23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167c4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  00167ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c91c 	.word	0x0800c91c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c91c 	.word	0x0800c91c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <BH1750_Init>:
BH1750_mode 		Bh1750_Mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c1;
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <BH1750_Init+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	bh1750_i2c2 = hi2c2;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <BH1750_Init+0x40>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f16:	f000 f815 	bl	8000f44 <BH1750_Reset>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <BH1750_Init+0x34>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG))	// Set default value;
 8000f20:	2046      	movs	r0, #70	; 0x46
 8000f22:	f000 f867 	bl	8000ff4 <BH1750_SetMtreg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BH1750_Init+0x30>
		{
			return BH1750_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e001      	b.n	8000f34 <BH1750_Init+0x34>
		}

		return BH1750_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e7ff      	b.n	8000f34 <BH1750_Init+0x34>
	}

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000268 	.word	0x20000268
 8000f40:	20000264 	.word	0x20000264

08000f44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <BH1750_Reset+0x38>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	230a      	movs	r3, #10
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2146      	movs	r1, #70	; 0x46
 8000f5c:	f002 ff46 	bl	8003dec <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp, 1, 10))
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <BH1750_Reset+0x3c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2146      	movs	r1, #70	; 0x46
 8000f6e:	f002 ff3d 	bl	8003dec <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	return BH1750_OK;
 8000f72:	2300      	movs	r3, #0
//	return BH1750_ERROR;

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000268 	.word	0x20000268
 8000f80:	20000264 	.word	0x20000264

08000f84 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_mode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <BH1750_SetMode+0x30>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e015      	b.n	8000fe0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BH1750_SetMode+0x64>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <BH1750_SetMode+0x68>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2146      	movs	r1, #70	; 0x46
 8000fc8:	f002 ff10 	bl	8003dec <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &Mode, 1, 10))
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BH1750_SetMode+0x6c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2146      	movs	r1, #70	; 0x46
 8000fda:	f002 ff07 	bl	8003dec <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	return BH1750_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	20000268 	.word	0x20000268
 8000ff0:	20000264 	.word	0x20000264

08000ff4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode, retCode2;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1e      	cmp	r3, #30
 8001002:	d902      	bls.n	800100a <BH1750_SetMtreg+0x16>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d101      	bne.n	800100e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e056      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	Bh1750_Mtreg = Mtreg;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <BH1750_SetMtreg+0xd0>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2146      	movs	r1, #70	; 0x46
 8001046:	f002 fed1 	bl	8003dec <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[0], 1, 10);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2146      	movs	r1, #70	; 0x46
 800105e:	f002 fec5 	bl	8003dec <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK != retCode || HAL_OK != retCode2) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BH1750_SetMtreg+0x7e>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BH1750_SetMtreg+0x82>
		return BH1750_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e022      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	230a      	movs	r3, #10
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	2146      	movs	r1, #70	; 0x46
 8001088:	f002 feb0 	bl	8003dec <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f002 fea3 	bl	8003dec <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK == retCode && HAL_OK == retCode2) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
		return BH1750_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	return BH1750_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000026c 	.word	0x2000026c
 80010c8:	20000268 	.word	0x20000268
 80010cc:	20000264 	.word	0x20000264

080010d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <BH1750_ReadLight+0xa0>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	230a      	movs	r3, #10
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	f002 ff7e 	bl	8003fe8 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	7a7a      	ldrb	r2, [r7, #9]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d00f      	beq.n	800112e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001178 <BH1750_ReadLight+0xa8>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b21      	cmp	r3, #33	; 0x21
 8001134:	d003      	beq.n	800113e <BH1750_ReadLight+0x6e>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <BH1750_ReadLight+0xac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d107      	bne.n	800114e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800114e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001180 <BH1750_ReadLight+0xb0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000268 	.word	0x20000268
 8001174:	2000026c 	.word	0x2000026c
 8001178:	428c0000 	.word	0x428c0000
 800117c:	20000260 	.word	0x20000260
 8001180:	3f99999a 	.word	0x3f99999a

08001184 <BH1750_ReadLight2>:

BH1750_STATUS BH1750_ReadLight2(float *Result)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c2, BH1750_ADDRESS, tmp, 2, 10))
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <BH1750_ReadLight2+0xa0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	230a      	movs	r3, #10
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	2146      	movs	r1, #70	; 0x46
 800119c:	f002 ff24 	bl	8003fe8 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d138      	bne.n	8001218 <BH1750_ReadLight2+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	7a7a      	ldrb	r2, [r7, #9]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d00f      	beq.n	80011e2 <BH1750_ReadLight2+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800122c <BH1750_ReadLight2+0xa8>
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d003      	beq.n	80011f2 <BH1750_ReadLight2+0x6e>
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d107      	bne.n	8001202 <BH1750_ReadLight2+0x7e>
		{
			result /= 2.0;
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001202:	ed97 7a03 	vldr	s14, [r7, #12]
 8001206:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001234 <BH1750_ReadLight2+0xb0>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <BH1750_ReadLight2+0x96>
	}
	return BH1750_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000264 	.word	0x20000264
 8001228:	2000026c 	.word	0x2000026c
 800122c:	428c0000 	.word	0x428c0000
 8001230:	20000260 	.word	0x20000260
 8001234:	3f99999a 	.word	0x3f99999a

08001238 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_DAC_Init+0x4c>)
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_DAC_Init+0x50>)
 800124a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_DAC_Init+0x4c>)
 800124e:	f001 fee0 	bl	8003012 <HAL_DAC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001258:	f000 fde8 	bl	8001e2c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800125c:	2304      	movs	r3, #4
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_DAC_Init+0x4c>)
 800126c:	f001 fef3 	bl	8003056 <HAL_DAC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001276:	f000 fdd9 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002d0 	.word	0x200002d0
 8001288:	40007400 	.word	0x40007400

0800128c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d157      	bne.n	800135e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f002 fa85 	bl	8003808 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001344:	f001 fed6 	bl	80030f4 <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800134e:	f000 fd6d 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	20000270 	.word	0x20000270
 8001378:	40026088 	.word	0x40026088

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MX_DMA_Init+0x3c>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2010      	movs	r0, #16
 80013a4:	f001 fdff 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013a8:	2010      	movs	r0, #16
 80013aa:	f001 fe18 	bl	8002fde <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <MX_GPIO_Init+0x160>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a50      	ldr	r2, [pc, #320]	; (800151c <MX_GPIO_Init+0x160>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <MX_GPIO_Init+0x160>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_GPIO_Init+0x160>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <MX_GPIO_Init+0x160>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_GPIO_Init+0x160>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <MX_GPIO_Init+0x160>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <MX_GPIO_Init+0x160>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <MX_GPIO_Init+0x160>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_GPIO_Init+0x160>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <MX_GPIO_Init+0x160>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_GPIO_Init+0x160>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <MX_GPIO_Init+0x160>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 800145e:	2200      	movs	r2, #0
 8001460:	f640 114c 	movw	r1, #2380	; 0x94c
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <MX_GPIO_Init+0x164>)
 8001466:	f002 fb63 	bl	8003b30 <HAL_GPIO_WritePin>
                          |DIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	482d      	ldr	r0, [pc, #180]	; (8001524 <MX_GPIO_Init+0x168>)
 8001470:	f002 fb5e 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	482b      	ldr	r0, [pc, #172]	; (8001528 <MX_GPIO_Init+0x16c>)
 800147a:	f002 fb59 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2118      	movs	r1, #24
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <MX_GPIO_Init+0x170>)
 8001484:	f002 fb54 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x164>)
 800149e:	f002 f9b3 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 80014a2:	f640 134c 	movw	r3, #2380	; 0x94c
 80014a6:	617b      	str	r3, [r7, #20]
                          |DIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0x164>)
 80014bc:	f002 f9a4 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0x168>)
 80014d8:	f002 f996 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 80014dc:	2304      	movs	r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0x16c>)
 80014f4:	f002 f988 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80014f8:	2318      	movs	r3, #24
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_GPIO_Init+0x170>)
 8001510:	f002 f97a 	bl	8003808 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40020400 	.word	0x40020400

08001530 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 faf9 	bl	8003b64 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fc58 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002e4 	.word	0x200002e4
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f002 facb 	bl	8003b64 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 fc2a 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000338 	.word	0x20000338
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_I2C_MspInit+0x148>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13d      	bne.n	8001686 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001626:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	483d      	ldr	r0, [pc, #244]	; (8001738 <HAL_I2C_MspInit+0x150>)
 8001644:	f002 f8e0 	bl	8003808 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201f      	movs	r0, #31
 800166a:	f001 fc9c 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166e:	201f      	movs	r0, #31
 8001670:	f001 fcb5 	bl	8002fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2020      	movs	r0, #32
 800167a:	f001 fc94 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167e:	2020      	movs	r0, #32
 8001680:	f001 fcad 	bl	8002fde <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001684:	e050      	b.n	8001728 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x154>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d14b      	bne.n	8001728 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016da:	2304      	movs	r3, #4
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_I2C_MspInit+0x150>)
 80016e6:	f002 f88f 	bl	8003808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_I2C_MspInit+0x158>)
 8001708:	f002 f87e 	bl	8003808 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	40005800 	.word	0x40005800
 8001740:	40020800 	.word	0x40020800

08001744 <setMax>:

#define MIN_SUB -500
#define MAX_SUB 500
#define MAX_V 50

void setMax(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	if(BH1750_lux_sub>MAX_SUB) BH1750_lux_sub=MAX_SUB;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <setMax+0x44>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800178c <setMax+0x48>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd02      	ble.n	8001762 <setMax+0x1e>
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <setMax+0x44>)
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <setMax+0x4c>)
 8001760:	601a      	str	r2, [r3, #0]
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <setMax+0x44>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001794 <setMax+0x50>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d400      	bmi.n	8001778 <setMax+0x34>
}
 8001776:	e002      	b.n	800177e <setMax+0x3a>
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <setMax+0x44>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <setMax+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200003fc 	.word	0x200003fc
 800178c:	43fa0000 	.word	0x43fa0000
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	c3fa0000 	.word	0xc3fa0000
 8001798:	c3fa0000 	.word	0xc3fa0000

0800179c <proportionalPID>:

void proportionalPID(){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	float sub_for_one_lux = (float)MAX_V/(float)MAX_SUB;					//wartosc w prędkosci dla 1lux
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <proportionalPID+0x2c>)
 80017a4:	607b      	str	r3, [r7, #4]
	change = BH1750_lux_sub*sub_for_one_lux;								//wartosc w predkosci dla SUB
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <proportionalPID+0x30>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <proportionalPID+0x34>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	200003fc 	.word	0x200003fc
 80017d0:	2000038c 	.word	0x2000038c

080017d4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int __io_putchar(int sign)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d109      	bne.n	80017f6 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 80017e2:	230d      	movs	r3, #13
 80017e4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 80017e6:	f107 010f 	add.w	r1, r7, #15
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2201      	movs	r2, #1
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <__io_putchar+0x3c>)
 80017f2:	f007 fbfc 	bl	8008fee <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2201      	movs	r2, #1
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <__io_putchar+0x3c>)
 8001800:	f007 fbf5 	bl	8008fee <HAL_UART_Transmit>
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200005d8 	.word	0x200005d8

08001814 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b0d      	cmp	r3, #13
 8001822:	d002      	beq.n	800182a <line_append+0x16>
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d10c      	bne.n	8001844 <line_append+0x30>
	{
		if(line_length>0)
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <line_append+0x5c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d018      	beq.n	8001864 <line_append+0x50>
		{
			line_buffer[line_length]='\0';
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <line_append+0x5c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <line_append+0x60>)
 8001838:	2100      	movs	r1, #0
 800183a:	54d1      	strb	r1, [r2, r3]
			line_length=0;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <line_append+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8001842:	e00f      	b.n	8001864 <line_append+0x50>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <line_append+0x5c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b4f      	cmp	r3, #79	; 0x4f
 800184a:	d902      	bls.n	8001852 <line_append+0x3e>
		{
			line_length=0;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <line_append+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <line_append+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <line_append+0x5c>)
 800185a:	600a      	str	r2, [r1, #0]
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <line_append+0x60>)
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	54ca      	strb	r2, [r1, r3]
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20000250 	.word	0x20000250
 8001874:	200001fc 	.word	0x200001fc

08001878 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d104      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffc1 	bl	8001814 <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001898:	f007 fc3b 	bl	8009112 <HAL_UART_Receive_IT>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200005d8 	.word	0x200005d8
 80018a8:	20000400 	.word	0x20000400

080018ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d16d      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		if (strcmp(line_buffer, "on")==0){
 80018bc:	495d      	ldr	r1, [pc, #372]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018be:	485e      	ldr	r0, [pc, #376]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018c0:	f7fe fca6 	bl	8000210 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	485b      	ldr	r0, [pc, #364]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018d0:	f002 f92e 	bl	8003b30 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018d4:	4958      	ldr	r1, [pc, #352]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018d6:	485a      	ldr	r0, [pc, #360]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018d8:	f008 ffa0 	bl	800a81c <iprintf>
 80018dc:	e05c      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "off")==0){
 80018de:	4959      	ldr	r1, [pc, #356]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80018e0:	4855      	ldr	r0, [pc, #340]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018e2:	f7fe fc95 	bl	8000210 <strcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	4852      	ldr	r0, [pc, #328]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018f2:	f002 f91d 	bl	8003b30 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018f6:	4950      	ldr	r1, [pc, #320]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018f8:	4851      	ldr	r0, [pc, #324]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018fa:	f008 ff8f 	bl	800a81c <iprintf>
 80018fe:	e04b      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "w")==0){
 8001900:	4951      	ldr	r1, [pc, #324]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001902:	484d      	ldr	r0, [pc, #308]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001904:	f7fe fc84 	bl	8000210 <strcmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x6a>
			setCommand = SLOW;
 800190e:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001910:	2205      	movs	r2, #5
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e040      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "s")==0){
 8001916:	494e      	ldr	r1, [pc, #312]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001918:	4847      	ldr	r0, [pc, #284]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800191a:	f7fe fc79 	bl	8000210 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_TIM_PeriodElapsedCallback+0x80>
			setCommand = STOP;
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e035      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "t")==0){
 800192c:	4949      	ldr	r1, [pc, #292]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800192e:	4842      	ldr	r0, [pc, #264]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001930:	f7fe fc6e 	bl	8000210 <strcmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x96>
			setCommand = FAST;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800193c:	2206      	movs	r2, #6
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e02a      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "f")==0){
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001944:	483c      	ldr	r0, [pc, #240]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xac>
			setCommand = FORWARD;
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e01f      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "b")==0){
 8001958:	4940      	ldr	r1, [pc, #256]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800195a:	4837      	ldr	r0, [pc, #220]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800195c:	f7fe fc58 	bl	8000210 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0xc2>
			setCommand = BACKWARD;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e014      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "l")==0){
 800196e:	493c      	ldr	r1, [pc, #240]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001972:	f7fe fc4d 	bl	8000210 <strcmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xd8>
			setCommand = LEFT;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e009      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "r")==0){
 8001984:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001986:	482c      	ldr	r0, [pc, #176]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001988:	f7fe fc42 	bl	8000210 <strcmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
			setCommand = RIGHT;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
		}
		//else printf("Unrecognized command: %s\n", line_buffer);
	}

	if(htim==&htim5)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d129      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
 80019a0:	4832      	ldr	r0, [pc, #200]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019a2:	f7ff fb95 	bl	80010d0 <BH1750_ReadLight>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			//sprintf(buffer,"BH1750 Lux: %.2f\r\n", BH1750_lux);
			len=strlen(buffer);
 80019ac:	4830      	ldr	r0, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ae:	f7fe fc39 	bl	8000224 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019b8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019c4:	482c      	ldr	r0, [pc, #176]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019c6:	f007 fb12 	bl	8008fee <HAL_UART_Transmit>
		}
		if(BH1750_OK == BH1750_ReadLight2(&BH1750_lux2))
 80019ca:	482c      	ldr	r0, [pc, #176]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019cc:	f7ff fbda 	bl	8001184 <BH1750_ReadLight2>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
		{
			//sprintf(buffer,"BH1750 Lux2: %.2f\r\n", BH1750_lux2);
			len=strlen(buffer);
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019d8:	f7fe fc24 	bl	8000224 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	4920      	ldr	r1, [pc, #128]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019f0:	f007 fafd 	bl	8008fee <HAL_UART_Transmit>
		}
	}

	if(htim==&htim9)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d114      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
	{
		BH1750_lux_sub=BH1750_lux2-BH1750_lux;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(buffer,"SUB: %.2f\r\n", BH1750_lux_sub);
		if(strcmp(line_buffer, "i")==0)
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a16:	f7fe fbfb 	bl	8000210 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
		{
			setCommand = PLAY;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	701a      	strb	r2, [r3, #0]
//			setCommand = PLAY;
//		}


	}
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000590 	.word	0x20000590
 8001a34:	0800c938 	.word	0x0800c938
 8001a38:	200001fc 	.word	0x200001fc
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	0800c93c 	.word	0x0800c93c
 8001a44:	0800c94c 	.word	0x0800c94c
 8001a48:	0800c950 	.word	0x0800c950
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	0800c954 	.word	0x0800c954
 8001a54:	0800c958 	.word	0x0800c958
 8001a58:	0800c95c 	.word	0x0800c95c
 8001a5c:	0800c960 	.word	0x0800c960
 8001a60:	0800c964 	.word	0x0800c964
 8001a64:	0800c968 	.word	0x0800c968
 8001a68:	20000428 	.word	0x20000428
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	20000398 	.word	0x20000398
 8001a74:	20000404 	.word	0x20000404
 8001a78:	200005d8 	.word	0x200005d8
 8001a7c:	20000394 	.word	0x20000394
 8001a80:	20000548 	.word	0x20000548
 8001a84:	200003fc 	.word	0x200003fc
 8001a88:	0800c96c 	.word	0x0800c96c

08001a8c <robotControl>:

void robotControl()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	if(FORWARD==setCommand)
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <robotControl+0xa8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <robotControl+0x1a>
	{
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
 8001a98:	2363      	movs	r3, #99	; 0x63
 8001a9a:	2263      	movs	r2, #99	; 0x63
 8001a9c:	2163      	movs	r1, #99	; 0x63
 8001a9e:	2063      	movs	r0, #99	; 0x63
 8001aa0:	f000 fcb0 	bl	8002404 <TB6612_init>
	}
	else if(FAST==setCommand)
	{
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
	}
}
 8001aa4:	e044      	b.n	8001b30 <robotControl+0xa4>
	else if(BACKWARD==setCommand)
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <robotControl+0xa8>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10a      	bne.n	8001ac4 <robotControl+0x38>
		TB6612_init(-V_FAST,-V_FAST,-V_FAST,-V_FAST);
 8001aae:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001ab2:	f06f 0262 	mvn.w	r2, #98	; 0x62
 8001ab6:	f06f 0162 	mvn.w	r1, #98	; 0x62
 8001aba:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8001abe:	f000 fca1 	bl	8002404 <TB6612_init>
}
 8001ac2:	e035      	b.n	8001b30 <robotControl+0xa4>
	else if(LEFT==setCommand)
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <robotControl+0xa8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d106      	bne.n	8001ada <robotControl+0x4e>
		TB6612_init(V_ZERO,V_AVERAGE,V_AVERAGE,V_ZERO);
 8001acc:	2300      	movs	r3, #0
 8001ace:	2250      	movs	r2, #80	; 0x50
 8001ad0:	2150      	movs	r1, #80	; 0x50
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 fc96 	bl	8002404 <TB6612_init>
}
 8001ad8:	e02a      	b.n	8001b30 <robotControl+0xa4>
	else if(RIGHT==setCommand)
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <robotControl+0xa8>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d106      	bne.n	8001af0 <robotControl+0x64>
		TB6612_init(V_AVERAGE,V_ZERO,V_ZERO,V_AVERAGE);
 8001ae2:	2350      	movs	r3, #80	; 0x50
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2050      	movs	r0, #80	; 0x50
 8001aea:	f000 fc8b 	bl	8002404 <TB6612_init>
}
 8001aee:	e01f      	b.n	8001b30 <robotControl+0xa4>
	else if(STOP==setCommand)
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <robotControl+0xa8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d106      	bne.n	8001b06 <robotControl+0x7a>
		TB6612_init(V_ZERO,V_ZERO,V_ZERO,V_ZERO);
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 fc80 	bl	8002404 <TB6612_init>
}
 8001b04:	e014      	b.n	8001b30 <robotControl+0xa4>
	else if(SLOW==setCommand)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <robotControl+0xa8>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d106      	bne.n	8001b1c <robotControl+0x90>
		TB6612_init(V_SLOW,V_SLOW,V_SLOW,V_SLOW);
 8001b0e:	2328      	movs	r3, #40	; 0x28
 8001b10:	2228      	movs	r2, #40	; 0x28
 8001b12:	2128      	movs	r1, #40	; 0x28
 8001b14:	2028      	movs	r0, #40	; 0x28
 8001b16:	f000 fc75 	bl	8002404 <TB6612_init>
}
 8001b1a:	e009      	b.n	8001b30 <robotControl+0xa4>
	else if(FAST==setCommand)
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <robotControl+0xa8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d105      	bne.n	8001b30 <robotControl+0xa4>
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
 8001b24:	2363      	movs	r3, #99	; 0x63
 8001b26:	2263      	movs	r2, #99	; 0x63
 8001b28:	2163      	movs	r1, #99	; 0x63
 8001b2a:	2063      	movs	r0, #99	; 0x63
 8001b2c:	f000 fc6a 	bl	8002404 <TB6612_init>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000000 	.word	0x20000000

08001b38 <followTheLight>:

void followTheLight(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
	if(BH1750_lux>MIN_LUX && BH1750_lux2>MIN_LUX)
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <followTheLight+0xb4>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	dd40      	ble.n	8001bd4 <followTheLight+0x9c>
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <followTheLight+0xb8>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	dd36      	ble.n	8001bd4 <followTheLight+0x9c>
	{
		TB6612_init(V_LIGHT-change,V_LIGHT+change,V_LIGHT+change,V_LIGHT-change);
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <followTheLight+0xbc>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001bf8 <followTheLight+0xc0>
 8001b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b7c:	793b      	ldrb	r3, [r7, #4]
 8001b7e:	b258      	sxtb	r0, r3
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <followTheLight+0xbc>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bf8 <followTheLight+0xc0>
 8001b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b92:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b96:	793b      	ldrb	r3, [r7, #4]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <followTheLight+0xbc>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bf8 <followTheLight+0xc0>
 8001ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bb0:	793b      	ldrb	r3, [r7, #4]
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <followTheLight+0xbc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <followTheLight+0xc0>
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bca:	793b      	ldrb	r3, [r7, #4]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	f000 fc19 	bl	8002404 <TB6612_init>
 8001bd2:	e006      	b.n	8001be2 <followTheLight+0xaa>
	}
	else
	{
		TB6612_init(V_ZERO,V_ZERO,V_ZERO,V_ZERO);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 fc12 	bl	8002404 <TB6612_init>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000390 	.word	0x20000390
 8001bf0:	20000394 	.word	0x20000394
 8001bf4:	2000038c 	.word	0x2000038c
 8001bf8:	42440000 	.word	0x42440000

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c02:	f001 f85f 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c06:	f000 f87b 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0a:	f7ff fbd7 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0e:	f7ff fbb5 	bl	800137c <MX_DMA_Init>
  MX_TIM2_Init();
 8001c12:	f000 fcdf 	bl	80025d4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001c16:	f000 f90f 	bl	8001e38 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c1a:	f000 ff7b 	bl	8002b14 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c1e:	f000 fc2d 	bl	800247c <MX_TIM1_Init>
  MX_I2C1_Init();
 8001c22:	f7ff fc85 	bl	8001530 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c26:	f7ff fcb1 	bl	800158c <MX_I2C2_Init>
  MX_TIM5_Init();
 8001c2a:	f000 fda1 	bl	8002770 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001c2e:	f000 fd1f 	bl	8002670 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001c32:	f000 fe21 	bl	8002878 <MX_TIM9_Init>
  MX_DAC_Init();
 8001c36:	f7ff faff 	bl	8001238 <MX_DAC_Init>
  MX_TIM6_Init();
 8001c3a:	f000 fde7 	bl	800280c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4923      	ldr	r1, [pc, #140]	; (8001cd0 <main+0xd4>)
 8001c42:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <main+0xd8>)
 8001c44:	f007 fa65 	bl	8009112 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <main+0xdc>)
 8001c4a:	f006 f945 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001c4e:	4823      	ldr	r0, [pc, #140]	; (8001cdc <main+0xe0>)
 8001c50:	f006 f942 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001c54:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <main+0xe4>)
 8001c56:	f006 f93f 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim8);

  BH1750_Init(&hi2c1, &hi2c2);
 8001c5a:	4922      	ldr	r1, [pc, #136]	; (8001ce4 <main+0xe8>)
 8001c5c:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <main+0xec>)
 8001c5e:	f7ff f94f 	bl	8000f00 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001c62:	2011      	movs	r0, #17
 8001c64:	f7ff f98e 	bl	8000f84 <BH1750_SetMode>

  setMax();
 8001c68:	f7ff fd6c 	bl	8001744 <setMax>

  wave_player_init(&htim6, &hdac);
 8001c6c:	491f      	ldr	r1, [pc, #124]	; (8001cec <main+0xf0>)
 8001c6e:	4820      	ldr	r0, [pc, #128]	; (8001cf0 <main+0xf4>)
 8001c70:	f000 ffea 	bl	8002c48 <wave_player_init>
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		  timer_val = __HAL_TIM_GET_COUNTER(&htim8);
//	  }


	  if(PLAY==setCommand)
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <main+0xf8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d106      	bne.n	8001c8a <main+0x8e>
	  {
		  //wave_player_start(audio_file);
		  HAL_Delay(2000);
 8001c7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c80:	f001 f892 	bl	8002da8 <HAL_Delay>
		  setCommand=CLOSE;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <main+0xf8>)
 8001c86:	2209      	movs	r2, #9
 8001c88:	701a      	strb	r2, [r3, #0]
//	  }

	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;

	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <main+0xfc>)
 8001c92:	f005 fdff 	bl	8007894 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <main+0xfc>)
 8001c9e:	f005 fefe 	bl	8007a9e <HAL_RTC_GetDate>



	  printf("Time: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001ca2:	793b      	ldrb	r3, [r7, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	797b      	ldrb	r3, [r7, #5]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <main+0x100>)
 8001cae:	f008 fdb5 	bl	800a81c <iprintf>
	  HAL_Delay(200);
 8001cb2:	20c8      	movs	r0, #200	; 0xc8
 8001cb4:	f001 f878 	bl	8002da8 <HAL_Delay>



	  robotControl();
 8001cb8:	f7ff fee8 	bl	8001a8c <robotControl>

	  proportionalPID();
 8001cbc:	f7ff fd6e 	bl	800179c <proportionalPID>
	  if(LIGHT==setCommand)
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <main+0xf8>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b07      	cmp	r3, #7
 8001cc6:	d1d5      	bne.n	8001c74 <main+0x78>
		  followTheLight();
 8001cc8:	f7ff ff36 	bl	8001b38 <followTheLight>
  {
 8001ccc:	e7d2      	b.n	8001c74 <main+0x78>
 8001cce:	bf00      	nop
 8001cd0:	20000400 	.word	0x20000400
 8001cd4:	200005d8 	.word	0x200005d8
 8001cd8:	20000590 	.word	0x20000590
 8001cdc:	20000428 	.word	0x20000428
 8001ce0:	20000548 	.word	0x20000548
 8001ce4:	20000338 	.word	0x20000338
 8001ce8:	200002e4 	.word	0x200002e4
 8001cec:	200002d0 	.word	0x200002d0
 8001cf0:	200004b8 	.word	0x200004b8
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000408 	.word	0x20000408
 8001cfc:	0800c970 	.word	0x0800c970

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ac      	sub	sp, #176	; 0xb0
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d0a:	2234      	movs	r2, #52	; 0x34
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f008 f912 	bl	8009f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	225c      	movs	r2, #92	; 0x5c
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 f903 	bl	8009f38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <SystemClock_Config+0x124>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <SystemClock_Config+0x124>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <SystemClock_Config+0x124>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <SystemClock_Config+0x128>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a34      	ldr	r2, [pc, #208]	; (8001e28 <SystemClock_Config+0x128>)
 8001d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <SystemClock_Config+0x128>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d90:	2304      	movs	r3, #4
 8001d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d96:	23b4      	movs	r3, #180	; 0xb4
 8001d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 f982 	bl	80070bc <HAL_RCC_OscConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dbe:	f000 f835 	bl	8001e2c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dc2:	f004 fb35 	bl	8006430 <HAL_PWREx_EnableOverDrive>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001dcc:	f000 f82e 	bl	8001e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ddc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001de0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dec:	2105      	movs	r1, #5
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fb6e 	bl	80064d0 <HAL_RCC_ClockConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001dfa:	f000 f817 	bl	8001e2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 fc79 	bl	8006704 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001e18:	f000 f808 	bl	8001e2c <Error_Handler>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	37b0      	adds	r7, #176	; 0xb0
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e52:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <MX_RTC_Init+0xc4>)
 8001e54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e5e:	227f      	movs	r2, #127	; 0x7f
 8001e60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e7a:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001e7c:	f005 fbbc 	bl	80075f8 <HAL_RTC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e86:	f7ff ffd1 	bl	8001e2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001ea6:	f005 fc38 	bl	800771a <HAL_RTC_SetTime>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001eb0:	f7ff ffbc 	bl	8001e2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001ecc:	f005 fd40 	bl	8007950 <HAL_RTC_SetDate>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001ed6:	f7ff ffa9 	bl	8001e2c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 9, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001eda:	2204      	movs	r2, #4
 8001edc:	2109      	movs	r1, #9
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_RTC_Init+0xc0>)
 8001ee0:	f005 febc 	bl	8007c5c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001eea:	f7ff ff9f 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000408 	.word	0x20000408
 8001efc:	40002800 	.word	0x40002800

08001f00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_RTC_MspInit+0x30>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10a      	bne.n	8001f28 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_RTC_MspInit+0x34>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f001 f842 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f001 f85b 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40002800 	.word	0x40002800
 8001f34:	42470e3c 	.word	0x42470e3c

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 fec8 	bl	8002d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <RTC_WKUP_IRQHandler+0x10>)
 8001fe2:	f005 fefb 	bl	8007ddc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000408 	.word	0x20000408

08001ff0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <DMA1_Stream5_IRQHandler+0x10>)
 8001ff6:	f001 f9bd 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000270 	.word	0x20000270

08002004 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800200a:	f006 f8f7 	bl	80081fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800200e:	4803      	ldr	r0, [pc, #12]	; (800201c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002010:	f006 f8f4 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000500 	.word	0x20000500
 800201c:	20000548 	.word	0x20000548

08002020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM2_IRQHandler+0x10>)
 8002026:	f006 f8e9 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000590 	.word	0x20000590

08002034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <TIM3_IRQHandler+0x10>)
 800203a:	f006 f8df 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000470 	.word	0x20000470

08002048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <I2C1_EV_IRQHandler+0x10>)
 800204e:	f002 f9f1 	bl	8004434 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002e4 	.word	0x200002e4

0800205c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <I2C1_ER_IRQHandler+0x10>)
 8002062:	f002 fb58 	bl	8004716 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200002e4 	.word	0x200002e4

08002070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <USART1_IRQHandler+0x10>)
 8002076:	f007 f87d 	bl	8009174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200005d8 	.word	0x200005d8

08002084 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM5_IRQHandler+0x10>)
 800208a:	f006 f8b7 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000428 	.word	0x20000428

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020b2:	f007 ff17 	bl	8009ee4 <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
	return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0x12>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
	}

return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb4f 	bl	80017d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
	}
	return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
	return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
	return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f007 fe7c 	bl	8009ee4 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20020000 	.word	0x20020000
 8002218:	00000400 	.word	0x00000400
 800221c:	20000254 	.word	0x20000254
 8002220:	20000a70 	.word	0x20000a70

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <set_motorA>:
#include "tb6612fng.h"
#include "main.h"


void set_motorA(int8_t speed)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0a      	blt.n	8002270 <set_motorA+0x28>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 800225a:	2201      	movs	r2, #1
 800225c:	2108      	movs	r1, #8
 800225e:	4813      	ldr	r0, [pc, #76]	; (80022ac <set_motorA+0x64>)
 8002260:	f001 fc66 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2110      	movs	r1, #16
 8002268:	4810      	ldr	r0, [pc, #64]	; (80022ac <set_motorA+0x64>)
 800226a:	f001 fc61 	bl	8003b30 <HAL_GPIO_WritePin>
 800226e:	e009      	b.n	8002284 <set_motorA+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	2108      	movs	r1, #8
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <set_motorA+0x64>)
 8002276:	f001 fc5b 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 800227a:	2201      	movs	r2, #1
 800227c:	2110      	movs	r1, #16
 800227e:	480b      	ldr	r0, [pc, #44]	; (80022ac <set_motorA+0x64>)
 8002280:	f001 fc56 	bl	8003b30 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 8002284:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <set_motorA+0x68>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	429a      	cmp	r2, r3
 8002290:	d303      	bcc.n	800229a <set_motorA+0x52>
		speed=htim1.Instance->ARR;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <set_motorA+0x68>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <set_motorA+0x68>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40020400 	.word	0x40020400
 80022b0:	20000500 	.word	0x20000500

080022b4 <set_motorB>:

void set_motorB(int8_t speed)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <set_motorB+0x2a>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <set_motorB+0x68>)
 80022cc:	f001 fc30 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <set_motorB+0x68>)
 80022d8:	f001 fc2a 	bl	8003b30 <HAL_GPIO_WritePin>
 80022dc:	e00a      	b.n	80022f4 <set_motorB+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <set_motorB+0x68>)
 80022e4:	f001 fc24 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <set_motorB+0x68>)
 80022f0:	f001 fc1e 	bl	8003b30 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 80022f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <set_motorB+0x6c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	429a      	cmp	r2, r3
 8002300:	d303      	bcc.n	800230a <set_motorB+0x56>
		speed=htim1.Instance->ARR;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <set_motorB+0x6c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <set_motorB+0x6c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40020800 	.word	0x40020800
 8002320:	20000500 	.word	0x20000500

08002324 <set_motorC>:

void set_motorC(int8_t speed)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0a      	blt.n	800234c <set_motorC+0x28>
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2104      	movs	r1, #4
 800233a:	4813      	ldr	r0, [pc, #76]	; (8002388 <set_motorC+0x64>)
 800233c:	f001 fbf8 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2108      	movs	r1, #8
 8002344:	4810      	ldr	r0, [pc, #64]	; (8002388 <set_motorC+0x64>)
 8002346:	f001 fbf3 	bl	8003b30 <HAL_GPIO_WritePin>
 800234a:	e009      	b.n	8002360 <set_motorC+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2104      	movs	r1, #4
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <set_motorC+0x64>)
 8002352:	f001 fbed 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, SET);
 8002356:	2201      	movs	r2, #1
 8002358:	2108      	movs	r1, #8
 800235a:	480b      	ldr	r0, [pc, #44]	; (8002388 <set_motorC+0x64>)
 800235c:	f001 fbe8 	bl	8003b30 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 8002360:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <set_motorC+0x68>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	429a      	cmp	r2, r3
 800236c:	d303      	bcc.n	8002376 <set_motorC+0x52>
		speed=htim3.Instance->ARR;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <set_motorC+0x68>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <set_motorC+0x68>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800237e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020800 	.word	0x40020800
 800238c:	20000470 	.word	0x20000470

08002390 <set_motorD>:

void set_motorD(int8_t speed)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <set_motorD+0x2a>
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <set_motorD+0x68>)
 80023aa:	f001 fbc1 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2104      	movs	r1, #4
 80023b2:	4812      	ldr	r0, [pc, #72]	; (80023fc <set_motorD+0x6c>)
 80023b4:	f001 fbbc 	bl	8003b30 <HAL_GPIO_WritePin>
 80023b8:	e00a      	b.n	80023d0 <set_motorD+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <set_motorD+0x68>)
 80023c2:	f001 fbb5 	bl	8003b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2104      	movs	r1, #4
 80023ca:	480c      	ldr	r0, [pc, #48]	; (80023fc <set_motorD+0x6c>)
 80023cc:	f001 fbb0 	bl	8003b30 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 80023d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <set_motorD+0x70>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	429a      	cmp	r2, r3
 80023dc:	d303      	bcc.n	80023e6 <set_motorD+0x56>
		speed=htim3.Instance->ARR;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <set_motorD+0x70>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <set_motorD+0x70>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	20000470 	.word	0x20000470

08002404 <TB6612_init>:

void TB6612_init(int8_t speedA, int8_t speedB, int8_t speedC, int8_t speedD)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	4603      	mov	r3, r0
 8002418:	71bb      	strb	r3, [r7, #6]
 800241a:	460b      	mov	r3, r1
 800241c:	717b      	strb	r3, [r7, #5]
 800241e:	4613      	mov	r3, r2
 8002420:	713b      	strb	r3, [r7, #4]
	set_motorA(speedA);
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff0e 	bl	8002248 <set_motorA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800242c:	2100      	movs	r1, #0
 800242e:	4811      	ldr	r0, [pc, #68]	; (8002474 <TB6612_init+0x70>)
 8002430:	f005 fe1c 	bl	800806c <HAL_TIM_PWM_Start>
	set_motorB(speedB);
 8002434:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff3b 	bl	80022b4 <set_motorB>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800243e:	2104      	movs	r1, #4
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <TB6612_init+0x70>)
 8002442:	f005 fe13 	bl	800806c <HAL_TIM_PWM_Start>
	set_motorC(speedC);
 8002446:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff6a 	bl	8002324 <set_motorC>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002450:	2100      	movs	r1, #0
 8002452:	4809      	ldr	r0, [pc, #36]	; (8002478 <TB6612_init+0x74>)
 8002454:	f005 fe0a 	bl	800806c <HAL_TIM_PWM_Start>
	set_motorD(speedD);
 8002458:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff97 	bl	8002390 <set_motorD>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002462:	2104      	movs	r1, #4
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <TB6612_init+0x74>)
 8002466:	f005 fe01 	bl	800806c <HAL_TIM_PWM_Start>
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	20000500 	.word	0x20000500
 8002478:	20000470 	.word	0x20000470

0800247c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b096      	sub	sp, #88	; 0x58
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002482:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002490:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2220      	movs	r2, #32
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f007 fd3f 	bl	8009f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <MX_TIM1_Init+0x150>)
 80024bc:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <MX_TIM1_Init+0x154>)
 80024be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 80024c0:	4b42      	ldr	r3, [pc, #264]	; (80025cc <MX_TIM1_Init+0x150>)
 80024c2:	222c      	movs	r2, #44	; 0x2c
 80024c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <MX_TIM1_Init+0x150>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <MX_TIM1_Init+0x150>)
 80024ce:	2263      	movs	r2, #99	; 0x63
 80024d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <MX_TIM1_Init+0x150>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <MX_TIM1_Init+0x150>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <MX_TIM1_Init+0x150>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024e4:	4839      	ldr	r0, [pc, #228]	; (80025cc <MX_TIM1_Init+0x150>)
 80024e6:	f005 fca7 	bl	8007e38 <HAL_TIM_Base_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80024f0:	f7ff fc9c 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024fe:	4619      	mov	r1, r3
 8002500:	4832      	ldr	r0, [pc, #200]	; (80025cc <MX_TIM1_Init+0x150>)
 8002502:	f006 f845 	bl	8008590 <HAL_TIM_ConfigClockSource>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800250c:	f7ff fc8e 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002510:	482e      	ldr	r0, [pc, #184]	; (80025cc <MX_TIM1_Init+0x150>)
 8002512:	f005 fd51 	bl	8007fb8 <HAL_TIM_PWM_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800251c:	f7ff fc86 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800252c:	4619      	mov	r1, r3
 800252e:	4827      	ldr	r0, [pc, #156]	; (80025cc <MX_TIM1_Init+0x150>)
 8002530:	f006 fc2e 	bl	8008d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800253a:	f7ff fc77 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	; 0x60
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	2200      	movs	r2, #0
 8002560:	4619      	mov	r1, r3
 8002562:	481a      	ldr	r0, [pc, #104]	; (80025cc <MX_TIM1_Init+0x150>)
 8002564:	f005 ff52 	bl	800840c <HAL_TIM_PWM_ConfigChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800256e:	f7ff fc5d 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002576:	2204      	movs	r2, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <MX_TIM1_Init+0x150>)
 800257c:	f005 ff46 	bl	800840c <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002586:	f7ff fc51 	bl	8001e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800259e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_TIM1_Init+0x150>)
 80025ae:	f006 fc6b 	bl	8008e88 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80025b8:	f7ff fc38 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <MX_TIM1_Init+0x150>)
 80025be:	f000 fa49 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 80025c2:	bf00      	nop
 80025c4:	3758      	adds	r7, #88	; 0x58
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000500 	.word	0x20000500
 80025d0:	40010000 	.word	0x40010000

080025d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <MX_TIM2_Init+0x98>)
 80025f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <MX_TIM2_Init+0x98>)
 80025fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80025fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <MX_TIM2_Init+0x98>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <MX_TIM2_Init+0x98>)
 8002608:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800260c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <MX_TIM2_Init+0x98>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <MX_TIM2_Init+0x98>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800261a:	4814      	ldr	r0, [pc, #80]	; (800266c <MX_TIM2_Init+0x98>)
 800261c:	f005 fc0c 	bl	8007e38 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002626:	f7ff fc01 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4619      	mov	r1, r3
 8002636:	480d      	ldr	r0, [pc, #52]	; (800266c <MX_TIM2_Init+0x98>)
 8002638:	f005 ffaa 	bl	8008590 <HAL_TIM_ConfigClockSource>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002642:	f7ff fbf3 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002646:	2320      	movs	r3, #32
 8002648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800264e:	463b      	mov	r3, r7
 8002650:	4619      	mov	r1, r3
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <MX_TIM2_Init+0x98>)
 8002654:	f006 fb9c 	bl	8008d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800265e:	f7ff fbe5 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000590 	.word	0x20000590

08002670 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08e      	sub	sp, #56	; 0x38
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	615a      	str	r2, [r3, #20]
 800269e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <MX_TIM3_Init+0xfc>)
 80026a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026a8:	222c      	movs	r2, #44	; 0x2c
 80026aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026b4:	2263      	movs	r2, #99	; 0x63
 80026b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026c4:	4828      	ldr	r0, [pc, #160]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026c6:	f005 fbb7 	bl	8007e38 <HAL_TIM_Base_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80026d0:	f7ff fbac 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	4619      	mov	r1, r3
 80026e0:	4821      	ldr	r0, [pc, #132]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026e2:	f005 ff55 	bl	8008590 <HAL_TIM_ConfigClockSource>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80026ec:	f7ff fb9e 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026f0:	481d      	ldr	r0, [pc, #116]	; (8002768 <MX_TIM3_Init+0xf8>)
 80026f2:	f005 fc61 	bl	8007fb8 <HAL_TIM_PWM_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80026fc:	f7ff fb96 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002708:	f107 0320 	add.w	r3, r7, #32
 800270c:	4619      	mov	r1, r3
 800270e:	4816      	ldr	r0, [pc, #88]	; (8002768 <MX_TIM3_Init+0xf8>)
 8002710:	f006 fb3e 	bl	8008d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800271a:	f7ff fb87 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271e:	2360      	movs	r3, #96	; 0x60
 8002720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <MX_TIM3_Init+0xf8>)
 8002736:	f005 fe69 	bl	800840c <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002740:	f7ff fb74 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2204      	movs	r2, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM3_Init+0xf8>)
 800274c:	f005 fe5e 	bl	800840c <HAL_TIM_PWM_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002756:	f7ff fb69 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM3_Init+0xf8>)
 800275c:	f000 f97a 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 8002760:	bf00      	nop
 8002762:	3738      	adds	r7, #56	; 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000470 	.word	0x20000470
 800276c:	40000400 	.word	0x40000400

08002770 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_TIM5_Init+0x94>)
 800278e:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <MX_TIM5_Init+0x98>)
 8002790:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <MX_TIM5_Init+0x94>)
 8002794:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002798:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <MX_TIM5_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_TIM5_Init+0x94>)
 80027a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_TIM5_Init+0x94>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <MX_TIM5_Init+0x94>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027b4:	4813      	ldr	r0, [pc, #76]	; (8002804 <MX_TIM5_Init+0x94>)
 80027b6:	f005 fb3f 	bl	8007e38 <HAL_TIM_Base_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027c0:	f7ff fb34 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <MX_TIM5_Init+0x94>)
 80027d2:	f005 fedd 	bl	8008590 <HAL_TIM_ConfigClockSource>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027dc:	f7ff fb26 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027e0:	2320      	movs	r3, #32
 80027e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027e8:	463b      	mov	r3, r7
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_TIM5_Init+0x94>)
 80027ee:	f006 facf 	bl	8008d90 <HAL_TIMEx_MasterConfigSynchronization>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027f8:	f7ff fb18 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000428 	.word	0x20000428
 8002808:	40000c00 	.word	0x40000c00

0800280c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	463b      	mov	r3, r7
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <MX_TIM6_Init+0x64>)
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <MX_TIM6_Init+0x68>)
 800281e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <MX_TIM6_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <MX_TIM6_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <MX_TIM6_Init+0x64>)
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <MX_TIM6_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_TIM6_Init+0x64>)
 800283c:	f005 fafc 	bl	8007e38 <HAL_TIM_Base_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002846:	f7ff faf1 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800284a:	2320      	movs	r3, #32
 800284c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002852:	463b      	mov	r3, r7
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <MX_TIM6_Init+0x64>)
 8002858:	f006 fa9a 	bl	8008d90 <HAL_TIMEx_MasterConfigSynchronization>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002862:	f7ff fae3 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200004b8 	.word	0x200004b8
 8002874:	40001000 	.word	0x40001000

08002878 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	463b      	mov	r3, r7
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_TIM9_Init+0x6c>)
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <MX_TIM9_Init+0x70>)
 800288e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8000-1;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <MX_TIM9_Init+0x6c>)
 8002892:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002896:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <MX_TIM9_Init+0x6c>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_TIM9_Init+0x6c>)
 80028a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028a4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <MX_TIM9_Init+0x6c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <MX_TIM9_Init+0x6c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80028b2:	480c      	ldr	r0, [pc, #48]	; (80028e4 <MX_TIM9_Init+0x6c>)
 80028b4:	f005 fac0 	bl	8007e38 <HAL_TIM_Base_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80028be:	f7ff fab5 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80028c8:	463b      	mov	r3, r7
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_TIM9_Init+0x6c>)
 80028ce:	f005 fe5f 	bl	8008590 <HAL_TIM_ConfigClockSource>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80028d8:	f7ff faa8 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000548 	.word	0x20000548
 80028e8:	40014000 	.word	0x40014000

080028ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <HAL_TIM_Base_MspInit+0x150>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d116      	bne.n	800292c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	2018      	movs	r0, #24
 8002920:	f000 fb41 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002924:	2018      	movs	r0, #24
 8002926:	f000 fb5a 	bl	8002fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800292a:	e082      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d116      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201c      	movs	r0, #28
 8002958:	f000 fb25 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295c:	201c      	movs	r0, #28
 800295e:	f000 fb3e 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 8002962:	e066      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a36      	ldr	r2, [pc, #216]	; (8002a44 <HAL_TIM_Base_MspInit+0x158>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d116      	bne.n	800299c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a32      	ldr	r2, [pc, #200]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	201d      	movs	r0, #29
 8002990:	f000 fb09 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002994:	201d      	movs	r0, #29
 8002996:	f000 fb22 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 800299a:	e04a      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_TIM_Base_MspInit+0x15c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d116      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2032      	movs	r0, #50	; 0x32
 80029c8:	f000 faed 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029cc:	2032      	movs	r0, #50	; 0x32
 80029ce:	f000 fb06 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 80029d2:	e02e      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_TIM_Base_MspInit+0x160>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029e8:	f043 0310 	orr.w	r3, r3, #16
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	e01a      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <HAL_TIM_Base_MspInit+0x164>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d115      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_TIM_Base_MspInit+0x154>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2018      	movs	r0, #24
 8002a28:	f000 fabd 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a2c:	2018      	movs	r0, #24
 8002a2e:	f000 fad6 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40001000 	.word	0x40001000
 8002a50:	40014000 	.word	0x40014000

08002a54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_TIM_MspPostInit+0xb0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11f      	bne.n	8002ab6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin|PWM2_Pin;
 8002a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4817      	ldr	r0, [pc, #92]	; (8002b0c <HAL_TIM_MspPostInit+0xb8>)
 8002ab0:	f000 feaa 	bl	8003808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ab4:	e022      	b.n	8002afc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_TIM_MspPostInit+0xbc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d11d      	bne.n	8002afc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aec:	2302      	movs	r3, #2
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_TIM_MspPostInit+0xb8>)
 8002af8:	f000 fe86 	bl	8003808 <HAL_GPIO_Init>
}
 8002afc:	bf00      	nop
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40000400 	.word	0x40000400

08002b14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <MX_USART1_UART_Init+0x50>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b4c:	f006 fa02 	bl	8008f54 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b56:	f7ff f969 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200005d8 	.word	0x200005d8
 8002b64:	40011000 	.word	0x40011000

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <HAL_UART_MspInit+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d152      	bne.n	8002c30 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_UART_MspInit+0xd4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <HAL_UART_MspInit+0xd8>)
 8002bfc:	f000 fe04 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c00:	2340      	movs	r3, #64	; 0x40
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c10:	2307      	movs	r3, #7
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480a      	ldr	r0, [pc, #40]	; (8002c44 <HAL_UART_MspInit+0xdc>)
 8002c1c:	f000 fdf4 	bl	8003808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	2025      	movs	r0, #37	; 0x25
 8002c26:	f000 f9be 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c2a:	2025      	movs	r0, #37	; 0x25
 8002c2c:	f000 f9d7 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c30:	bf00      	nop
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400

08002c48 <wave_player_init>:
#include "main.h"

struct wave_player_s wave_player;

void wave_player_init(TIM_HandleTypeDef *_htim, DAC_HandleTypeDef *_hdac)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	wave_player.htim = _htim;
 8002c52:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <wave_player_init+0x24>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6013      	str	r3, [r2, #0]
	wave_player.hdac = _hdac;
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <wave_player_init+0x24>)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6053      	str	r3, [r2, #4]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000061c 	.word	0x2000061c

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9a:	f7ff fac3 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f007 f927 	bl	8009ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fe ffab 	bl	8001bfc <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cb4:	0800cd9c 	.word	0x0800cd9c
  ldr r2, =_sbss
 8002cb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cbc:	20000a6c 	.word	0x20000a6c

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 f94f 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f808 	bl	8002d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7ff f91e 	bl	8001f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x54>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x58>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f967 	bl	8002ffa <HAL_SYSTICK_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00e      	b.n	8002d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d80a      	bhi.n	8002d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f000 f92f 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_InitTick+0x5c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	2000000c 	.word	0x2000000c
 8002d64:	20000008 	.word	0x20000008

08002d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x20>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_IncTick+0x24>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	20000a58 	.word	0x20000a58

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GetTick+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000a58 	.word	0x20000a58

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff ffee 	bl	8002d90 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f7ff ff8e 	bl	8002e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff29 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff3e 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff8e 	bl	8002ee4 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5d 	bl	8002e90 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff31 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffa2 	bl	8002f4c <SysTick_Config>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e014      	b.n	800304e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	791b      	ldrb	r3, [r3, #4]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fe f929 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	795b      	ldrb	r3, [r3, #5]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_DAC_ConfigChannel+0x18>
 800306a:	2302      	movs	r3, #2
 800306c:	e03c      	b.n	80030e8 <HAL_DAC_ConfigChannel+0x92>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2202      	movs	r2, #2
 8003078:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	f640 72fe 	movw	r2, #4094	; 0xffe
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4013      	ands	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	22c0      	movs	r2, #192	; 0xc0
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	400a      	ands	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff fe46 	bl	8002d90 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e099      	b.n	8003244 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003130:	e00f      	b.n	8003152 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003132:	f7ff fe2d 	bl	8002d90 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b05      	cmp	r3, #5
 800313e:	d908      	bls.n	8003152 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2203      	movs	r2, #3
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e078      	b.n	8003244 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e8      	bne.n	8003132 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_DMA_Init+0x158>)
 800316c:	4013      	ands	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800317e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4313      	orrs	r3, r2
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d117      	bne.n	8003216 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fa89 	bl	8003710 <DMA_CheckFifoParam>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003212:	2301      	movs	r3, #1
 8003214:	e016      	b.n	8003244 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa40 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003224:	4603      	mov	r3, r0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	223f      	movs	r2, #63	; 0x3f
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	f010803f 	.word	0xf010803f

08003250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325e:	f7ff fd97 	bl	8002d90 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d008      	beq.n	8003282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e052      	b.n	8003328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_Abort+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d2:	e013      	b.n	80032fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d4:	f7ff fd5c 	bl	8002d90 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d90c      	bls.n	80032fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2203      	movs	r2, #3
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e015      	b.n	8003328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e4      	bne.n	80032d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	223f      	movs	r2, #63	; 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d004      	beq.n	800334e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00c      	b.n	8003368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2205      	movs	r2, #5
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003380:	4b92      	ldr	r3, [pc, #584]	; (80035cc <HAL_DMA_IRQHandler+0x258>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a92      	ldr	r2, [pc, #584]	; (80035d0 <HAL_DMA_IRQHandler+0x25c>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2208      	movs	r2, #8
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2208      	movs	r2, #8
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2204      	movs	r2, #4
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2210      	movs	r2, #16
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d043      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2210      	movs	r2, #16
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d024      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
 80034a2:	e01f      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e016      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0208 	bic.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	2220      	movs	r2, #32
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 808e 	beq.w	8003612 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8086 	beq.w	8003612 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2220      	movs	r2, #32
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b05      	cmp	r3, #5
 800351c:	d136      	bne.n	800358c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800353c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_IRQHandler+0x1da>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	223f      	movs	r2, #63	; 0x3f
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d07d      	beq.n	800367e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
        }
        return;
 800358a:	e078      	b.n	800367e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01c      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d030      	beq.n	8003612 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e02b      	b.n	8003612 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d027      	beq.n	8003612 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
 80035ca:	e022      	b.n	8003612 <HAL_DMA_IRQHandler+0x29e>
 80035cc:	20000004 	.word	0x20000004
 80035d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0210 	bic.w	r2, r2, #16
 80035f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2b00      	cmp	r3, #0
 8003618:	d032      	beq.n	8003680 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d022      	beq.n	800366c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2205      	movs	r2, #5
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3301      	adds	r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d307      	bcc.n	800365a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f2      	bne.n	800363e <HAL_DMA_IRQHandler+0x2ca>
 8003658:	e000      	b.n	800365c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800365a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e000      	b.n	8003680 <HAL_DMA_IRQHandler+0x30c>
        return;
 800367e:	bf00      	nop
    }
  }
}
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop

08003688 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003696:	b2db      	uxtb	r3, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	0800c9a0 	.word	0x0800c9a0

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d856      	bhi.n	80037de <DMA_CheckFifoParam+0xce>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037df 	.word	0x080037df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d046      	beq.n	80037e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e043      	b.n	80037e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003762:	d140      	bne.n	80037e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03d      	b.n	80037e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d837      	bhi.n	80037ea <DMA_CheckFifoParam+0xda>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e030      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d025      	beq.n	80037ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e022      	b.n	80037ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01c      	b.n	80037f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d903      	bls.n	80037c6 <DMA_CheckFifoParam+0xb6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c4:	e018      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e015      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e00b      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037de:	bf00      	nop
 80037e0:	e00a      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e008      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e006      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e004      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
    }
  } 
  
  return status; 
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e165      	b.n	8003af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8154 	bne.w	8003aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80ae 	beq.w	8003aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b5d      	ldr	r3, [pc, #372]	; (8003b08 <HAL_GPIO_Init+0x300>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	4a5c      	ldr	r2, [pc, #368]	; (8003b08 <HAL_GPIO_Init+0x300>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399c:	6453      	str	r3, [r2, #68]	; 0x44
 800399e:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_GPIO_Init+0x300>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039aa:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_GPIO_Init+0x304>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4f      	ldr	r2, [pc, #316]	; (8003b10 <HAL_GPIO_Init+0x308>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x21a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_GPIO_Init+0x30c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x216>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_GPIO_Init+0x310>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x212>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_GPIO_Init+0x314>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_GPIO_Init+0x318>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x20a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_GPIO_Init+0x31c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x206>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a49      	ldr	r2, [pc, #292]	; (8003b28 <HAL_GPIO_Init+0x320>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x202>
 8003a06:	2306      	movs	r3, #6
 8003a08:	e00c      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	e00a      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a12:	2304      	movs	r3, #4
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4935      	ldr	r1, [pc, #212]	; (8003b0c <HAL_GPIO_Init+0x304>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a66:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a6c:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <HAL_GPIO_Init+0x324>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f ae96 	bls.w	8003824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e12b      	b.n	8003dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fd2c 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f002 fd74 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a81      	ldr	r2, [pc, #516]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d807      	bhi.n	8003be8 <HAL_I2C_Init+0x84>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a80      	ldr	r2, [pc, #512]	; (8003ddc <HAL_I2C_Init+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bf94      	ite	ls
 8003be0:	2301      	movls	r3, #1
 8003be2:	2300      	movhi	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e006      	b.n	8003bf6 <HAL_I2C_Init+0x92>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_I2C_Init+0x27c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf94      	ite	ls
 8003bf0:	2301      	movls	r3, #1
 8003bf2:	2300      	movhi	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0e7      	b.n	8003dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a78      	ldr	r2, [pc, #480]	; (8003de4 <HAL_I2C_Init+0x280>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0c9b      	lsrs	r3, r3, #18
 8003c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d802      	bhi.n	8003c38 <HAL_I2C_Init+0xd4>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3301      	adds	r3, #1
 8003c36:	e009      	b.n	8003c4c <HAL_I2C_Init+0xe8>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <HAL_I2C_Init+0x284>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	495c      	ldr	r1, [pc, #368]	; (8003dd8 <HAL_I2C_Init+0x274>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d819      	bhi.n	8003ca0 <HAL_I2C_Init+0x13c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e59      	subs	r1, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c80:	400b      	ands	r3, r1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_I2C_Init+0x138>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1e59      	subs	r1, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	e051      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e04f      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d111      	bne.n	8003ccc <HAL_I2C_Init+0x168>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	440b      	add	r3, r1
 8003cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e012      	b.n	8003cf2 <HAL_I2C_Init+0x18e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	0099      	lsls	r1, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Init+0x196>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e022      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <HAL_I2C_Init+0x1bc>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e58      	subs	r0, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	440b      	add	r3, r1
 8003d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	e00f      	b.n	8003d40 <HAL_I2C_Init+0x1dc>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	6809      	ldr	r1, [r1, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6911      	ldr	r1, [r2, #16]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	000186a0 	.word	0x000186a0
 8003ddc:	001e847f 	.word	0x001e847f
 8003de0:	003d08ff 	.word	0x003d08ff
 8003de4:	431bde83 	.word	0x431bde83
 8003de8:	10624dd3 	.word	0x10624dd3

08003dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	817b      	strh	r3, [r7, #10]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7fe ffc6 	bl	8002d90 <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	f040 80e0 	bne.w	8003fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2319      	movs	r3, #25
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4970      	ldr	r1, [pc, #448]	; (8003fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f002 f8dc 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0d3      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x50>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0cc      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d007      	beq.n	8003e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	; 0x21
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	893a      	ldrh	r2, [r7, #8]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a50      	ldr	r2, [pc, #320]	; (8003fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea4:	8979      	ldrh	r1, [r7, #10]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f001 fe9e 	bl	8005bec <I2C_MasterRequestWrite>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e08d      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ed0:	e066      	b.n	8003fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f002 f956 	bl	8006188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06b      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_I2C_Master_Transmit+0x188>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	6a39      	ldr	r1, [r7, #32]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f002 f946 	bl	800620a <I2C_WaitOnBTFFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d107      	bne.n	8003f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e01a      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d194      	bne.n	8003ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	00100002 	.word	0x00100002
 8003fe4:	ffff0000 	.word	0xffff0000

08003fe8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08c      	sub	sp, #48	; 0x30
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	817b      	strh	r3, [r7, #10]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7fe fec8 	bl	8002d90 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	f040 820b 	bne.w	8004426 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2319      	movs	r3, #25
 8004016:	2201      	movs	r2, #1
 8004018:	497c      	ldr	r1, [pc, #496]	; (800420c <HAL_I2C_Master_Receive+0x224>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f001 ffde 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	e1fe      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2C_Master_Receive+0x50>
 8004034:	2302      	movs	r3, #2
 8004036:	e1f7      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d007      	beq.n	800405e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2222      	movs	r2, #34	; 0x22
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2210      	movs	r2, #16
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a5c      	ldr	r2, [pc, #368]	; (8004210 <HAL_I2C_Master_Receive+0x228>)
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a0:	8979      	ldrh	r1, [r7, #10]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f001 fe22 	bl	8005cf0 <I2C_MasterRequestRead>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1b8      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d113      	bne.n	80040e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	623b      	str	r3, [r7, #32]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e18c      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d11b      	bne.n	8004126 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e16c      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b02      	cmp	r3, #2
 800412c:	d11b      	bne.n	8004166 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	e14c      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800418c:	e138      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	2b03      	cmp	r3, #3
 8004194:	f200 80f1 	bhi.w	800437a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b01      	cmp	r3, #1
 800419e:	d123      	bne.n	80041e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f002 f8a3 	bl	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e139      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e6:	e10b      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d14e      	bne.n	800428e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	2200      	movs	r2, #0
 80041f8:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_I2C_Master_Receive+0x22c>)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f001 feee 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e10e      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
 800420a:	bf00      	nop
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000
 8004214:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800428c:	e0b8      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	4966      	ldr	r1, [pc, #408]	; (8004430 <HAL_I2C_Master_Receive+0x448>)
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f001 fe9f 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0bf      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	494f      	ldr	r1, [pc, #316]	; (8004430 <HAL_I2C_Master_Receive+0x448>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f001 fe71 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e091      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004378:	e042      	b.n	8004400 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f001 ffb6 	bl	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e04c      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d118      	bne.n	8004400 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f aec2 	bne.w	800418e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010004 	.word	0x00010004

08004434 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004454:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b10      	cmp	r3, #16
 8004462:	d003      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x38>
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	f040 80c1 	bne.w	80045ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800448c:	d003      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0x62>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004494:	d101      	bne.n	800449a <HAL_I2C_EV_IRQHandler+0x66>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_I2C_EV_IRQHandler+0x68>
 800449a:	2300      	movs	r3, #0
 800449c:	2b01      	cmp	r3, #1
 800449e:	f000 8132 	beq.w	8004706 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0x92>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	0a5b      	lsrs	r3, r3, #9
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 ff9e 	bl	80063fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fd79 	bl	8004fb6 <I2C_Master_SB>
 80044c4:	e092      	b.n	80045ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	0a5b      	lsrs	r3, r3, #9
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fdef 	bl	80050c2 <I2C_Master_ADD10>
 80044e4:	e082      	b.n	80045ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0xd2>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	0a5b      	lsrs	r3, r3, #9
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fe09 	bl	8005116 <I2C_Master_ADDR>
 8004504:	e072      	b.n	80045ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03b      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004520:	f000 80f3 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	09db      	lsrs	r3, r3, #7
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00f      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0x11c>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0x11c>
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9f3 	bl	8004934 <I2C_MasterTransmit_TXE>
 800454e:	e04d      	b.n	80045ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80d6 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80cf 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	2b21      	cmp	r3, #33	; 0x21
 8004570:	d103      	bne.n	800457a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa7a 	bl	8004a6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004578:	e0c7      	b.n	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	f040 80c4 	bne.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fae8 	bl	8004b58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004588:	e0bf      	b.n	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004598:	f000 80b7 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00f      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x194>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x194>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fb5d 	bl	8004c80 <I2C_MasterReceive_RXNE>
 80045c6:	e011      	b.n	80045ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 809a 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	0a5b      	lsrs	r3, r3, #9
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8093 	beq.w	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fbfc 	bl	8004de2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ea:	e08e      	b.n	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
 80045ec:	e08d      	b.n	800470a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e007      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x20e>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	0a5b      	lsrs	r3, r3, #9
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 ffba 	bl	80055b4 <I2C_Slave_ADDR>
 8004640:	e066      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x22e>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fff4 	bl	8005648 <I2C_Slave_STOPF>
 8004660:	e056      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2b21      	cmp	r3, #33	; 0x21
 8004666:	d002      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x23a>
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	2b29      	cmp	r3, #41	; 0x29
 800466c:	d125      	bne.n	80046ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	09db      	lsrs	r3, r3, #7
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00f      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0x266>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0a9b      	lsrs	r3, r3, #10
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0x266>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fed0 	bl	8005438 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004698:	e039      	b.n	800470e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d033      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x2da>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02d      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fefd 	bl	80054b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b8:	e029      	b.n	800470e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00f      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	0a9b      	lsrs	r3, r3, #10
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 ff08 	bl	80054f4 <I2C_SlaveReceive_RXNE>
 80046e4:	e014      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a5b      	lsrs	r3, r3, #9
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 ff36 	bl	8005570 <I2C_SlaveReceive_BTF>
 8004704:	e004      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800470e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b08a      	sub	sp, #40	; 0x28
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004738:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <HAL_I2C_ER_IRQHandler+0x4e>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004762:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	0a5b      	lsrs	r3, r3, #9
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <HAL_I2C_ER_IRQHandler+0x78>
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f043 0302 	orr.w	r3, r3, #2
 8004782:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800478c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	0a9b      	lsrs	r3, r3, #10
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03f      	beq.n	800481a <HAL_I2C_ER_IRQHandler+0x104>
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d039      	beq.n	800481a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80047a6:	7efb      	ldrb	r3, [r7, #27]
 80047a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047c0:	7ebb      	ldrb	r3, [r7, #26]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d112      	bne.n	80047ec <HAL_I2C_ER_IRQHandler+0xd6>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <HAL_I2C_ER_IRQHandler+0xd6>
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b21      	cmp	r3, #33	; 0x21
 80047d0:	d008      	beq.n	80047e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b29      	cmp	r3, #41	; 0x29
 80047d6:	d005      	beq.n	80047e4 <HAL_I2C_ER_IRQHandler+0xce>
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	2b28      	cmp	r3, #40	; 0x28
 80047dc:	d106      	bne.n	80047ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b21      	cmp	r3, #33	; 0x21
 80047e2:	d103      	bne.n	80047ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f001 f85f 	bl	80058a8 <I2C_Slave_AF>
 80047ea:	e016      	b.n	800481a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047fe:	7efb      	ldrb	r3, [r7, #27]
 8004800:	2b10      	cmp	r3, #16
 8004802:	d002      	beq.n	800480a <HAL_I2C_ER_IRQHandler+0xf4>
 8004804:	7efb      	ldrb	r3, [r7, #27]
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d107      	bne.n	800481a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	0adb      	lsrs	r3, r3, #11
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <HAL_I2C_ER_IRQHandler+0x12e>
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f043 0308 	orr.w	r3, r3, #8
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004842:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 f896 	bl	8005988 <I2C_ITError>
  }
}
 800485c:	bf00      	nop
 800485e:	3728      	adds	r7, #40	; 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
 80048c0:	4613      	mov	r3, r2
 80048c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d150      	bne.n	80049fc <I2C_MasterTransmit_TXE+0xc8>
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b21      	cmp	r3, #33	; 0x21
 800495e:	d14d      	bne.n	80049fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b08      	cmp	r3, #8
 8004964:	d01d      	beq.n	80049a2 <I2C_MasterTransmit_TXE+0x6e>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b20      	cmp	r3, #32
 800496a:	d01a      	beq.n	80049a2 <I2C_MasterTransmit_TXE+0x6e>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004972:	d016      	beq.n	80049a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004982:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2211      	movs	r2, #17
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff62 	bl	8004864 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a0:	e060      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d107      	bne.n	80049ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff7d 	bl	80048e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049ea:	e03b      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff35 	bl	8004864 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049fa:	e033      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b21      	cmp	r3, #33	; 0x21
 8004a00:	d005      	beq.n	8004a0e <I2C_MasterTransmit_TXE+0xda>
 8004a02:	7bbb      	ldrb	r3, [r7, #14]
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d12d      	bne.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b22      	cmp	r3, #34	; 0x22
 8004a0c:	d12a      	bne.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a28:	e01c      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d103      	bne.n	8004a3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f88e 	bl	8004b58 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a3c:	e012      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a62:	e7ff      	b.n	8004a64 <I2C_MasterTransmit_TXE+0x130>
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	d164      	bne.n	8004b50 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d012      	beq.n	8004ab6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ab4:	e04c      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d01d      	beq.n	8004af8 <I2C_MasterTransmit_BTF+0x8c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d01a      	beq.n	8004af8 <I2C_MasterTransmit_BTF+0x8c>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac8:	d016      	beq.n	8004af8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ad8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2211      	movs	r2, #17
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff feb7 	bl	8004864 <HAL_I2C_MasterTxCpltCallback>
}
 8004af6:	e02b      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d107      	bne.n	8004b42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fed2 	bl	80048e4 <HAL_I2C_MemTxCpltCallback>
}
 8004b40:	e006      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fe8a 	bl	8004864 <HAL_I2C_MasterTxCpltCallback>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11d      	bne.n	8004bac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10b      	bne.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b8e:	e073      	b.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	121b      	asrs	r3, r3, #8
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004baa:	e065      	b.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10b      	bne.n	8004bcc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bca:	e055      	b.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d151      	bne.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b22      	cmp	r3, #34	; 0x22
 8004bd8:	d10d      	bne.n	8004bf6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bf4:	e040      	b.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b21      	cmp	r3, #33	; 0x21
 8004c04:	d112      	bne.n	8004c2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c2a:	e025      	b.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d120      	bne.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b21      	cmp	r3, #33	; 0x21
 8004c3a:	d11d      	bne.n	8004c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fe36 	bl	80048e4 <HAL_I2C_MemTxCpltCallback>
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	; 0x22
 8004c92:	f040 80a2 	bne.w	8004dda <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d921      	bls.n	8004ce8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	f040 8082 	bne.w	8004dda <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004ce6:	e078      	b.n	8004dda <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d074      	beq.n	8004dda <I2C_MasterReceive_RXNE+0x15a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d002      	beq.n	8004cfc <I2C_MasterReceive_RXNE+0x7c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d16e      	bne.n	8004dda <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fac5 	bl	800628c <I2C_WaitOnSTOPRequestThroughIT>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d142      	bne.n	8004d8e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d10a      	bne.n	8004d78 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fdc1 	bl	80048f8 <HAL_I2C_MemRxCpltCallback>
}
 8004d76:	e030      	b.n	8004dda <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2212      	movs	r2, #18
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fd76 	bl	8004878 <HAL_I2C_MasterRxCpltCallback>
}
 8004d8c:	e025      	b.n	8004dda <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fd99 	bl	800490c <HAL_I2C_ErrorCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d11b      	bne.n	8004e32 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e08:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e30:	e0bd      	b.n	8004fae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d129      	bne.n	8004e90 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00a      	beq.n	8004e68 <I2C_MasterReceive_BTF+0x86>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d007      	beq.n	8004e68 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e8e:	e08e      	b.n	8004fae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d176      	bne.n	8004f88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d002      	beq.n	8004ea6 <I2C_MasterReceive_BTF+0xc4>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e019      	b.n	8004eec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d002      	beq.n	8004ec4 <I2C_MasterReceive_BTF+0xe2>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d108      	bne.n	8004ed6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e00a      	b.n	8004eec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d007      	beq.n	8004eec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d10a      	bne.n	8004f72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fcc4 	bl	80048f8 <HAL_I2C_MemRxCpltCallback>
}
 8004f70:	e01d      	b.n	8004fae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2212      	movs	r2, #18
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fc79 	bl	8004878 <HAL_I2C_MasterRxCpltCallback>
}
 8004f86:	e012      	b.n	8004fae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d117      	bne.n	8004ffa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fe4:	e067      	b.n	80050b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]
}
 8004ff8:	e05d      	b.n	80050b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005002:	d133      	bne.n	800506c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b21      	cmp	r3, #33	; 0x21
 800500e:	d109      	bne.n	8005024 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	e008      	b.n	8005036 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <I2C_Master_SB+0x92>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d032      	beq.n	80050b6 <I2C_Master_SB+0x100>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02d      	beq.n	80050b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005068:	605a      	str	r2, [r3, #4]
}
 800506a:	e024      	b.n	80050b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10e      	bne.n	8005092 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	b29b      	uxth	r3, r3
 800507a:	11db      	asrs	r3, r3, #7
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0306 	and.w	r3, r3, #6
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f063 030f 	orn	r3, r3, #15
 8005088:	b2da      	uxtb	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
}
 8005090:	e011      	b.n	80050b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	2b01      	cmp	r3, #1
 8005098:	d10d      	bne.n	80050b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	b29b      	uxth	r3, r3
 80050a0:	11db      	asrs	r3, r3, #7
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0306 	and.w	r3, r3, #6
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f063 030e 	orn	r3, r3, #14
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	611a      	str	r2, [r3, #16]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <I2C_Master_ADD10+0x26>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <I2C_Master_ADD10+0x48>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005108:	605a      	str	r2, [r3, #4]
  }
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005116:	b480      	push	{r7}
 8005118:	b091      	sub	sp, #68	; 0x44
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b22      	cmp	r3, #34	; 0x22
 800513e:	f040 8169 	bne.w	8005414 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <I2C_Master_ADDR+0x54>
 800514a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d10b      	bne.n	800516a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005152:	2300      	movs	r3, #0
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	e160      	b.n	800542c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <I2C_Master_ADDR+0x98>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517a:	d118      	bne.n	80051ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	651a      	str	r2, [r3, #80]	; 0x50
 80051ac:	e13e      	b.n	800542c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d113      	bne.n	80051e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e115      	b.n	800540c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f040 808a 	bne.w	8005300 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f2:	d137      	bne.n	8005264 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005212:	d113      	bne.n	800523c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	e0e7      	b.n	800540c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523c:	2300      	movs	r3, #0
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e0d3      	b.n	800540c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b08      	cmp	r3, #8
 8005268:	d02e      	beq.n	80052c8 <I2C_Master_ADDR+0x1b2>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b20      	cmp	r3, #32
 800526e:	d02b      	beq.n	80052c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	2b12      	cmp	r3, #18
 8005274:	d102      	bne.n	800527c <I2C_Master_ADDR+0x166>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b01      	cmp	r3, #1
 800527a:	d125      	bne.n	80052c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	2b04      	cmp	r3, #4
 8005280:	d00e      	beq.n	80052a0 <I2C_Master_ADDR+0x18a>
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	2b02      	cmp	r3, #2
 8005286:	d00b      	beq.n	80052a0 <I2C_Master_ADDR+0x18a>
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	2b10      	cmp	r3, #16
 800528c:	d008      	beq.n	80052a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e007      	b.n	80052b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	e0a1      	b.n	800540c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e085      	b.n	800540c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d14d      	bne.n	80053a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b04      	cmp	r3, #4
 800530e:	d016      	beq.n	800533e <I2C_Master_ADDR+0x228>
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	2b02      	cmp	r3, #2
 8005314:	d013      	beq.n	800533e <I2C_Master_ADDR+0x228>
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	2b10      	cmp	r3, #16
 800531a:	d010      	beq.n	800533e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e007      	b.n	800534e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535c:	d117      	bne.n	800538e <I2C_Master_ADDR+0x278>
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005364:	d00b      	beq.n	800537e <I2C_Master_ADDR+0x268>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b01      	cmp	r3, #1
 800536a:	d008      	beq.n	800537e <I2C_Master_ADDR+0x268>
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b08      	cmp	r3, #8
 8005370:	d005      	beq.n	800537e <I2C_Master_ADDR+0x268>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b10      	cmp	r3, #16
 8005376:	d002      	beq.n	800537e <I2C_Master_ADDR+0x268>
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	2b20      	cmp	r3, #32
 800537c:	d107      	bne.n	800538e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800538c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	e032      	b.n	800540c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c4:	d117      	bne.n	80053f6 <I2C_Master_ADDR+0x2e0>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053cc:	d00b      	beq.n	80053e6 <I2C_Master_ADDR+0x2d0>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d008      	beq.n	80053e6 <I2C_Master_ADDR+0x2d0>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d005      	beq.n	80053e6 <I2C_Master_ADDR+0x2d0>
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d002      	beq.n	80053e6 <I2C_Master_ADDR+0x2d0>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d107      	bne.n	80053f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005412:	e00b      	b.n	800542c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	e7ff      	b.n	800542c <I2C_Master_ADDR+0x316>
 800542c:	bf00      	nop
 800542e:	3744      	adds	r7, #68	; 0x44
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d02b      	beq.n	80054aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d114      	bne.n	80054aa <I2C_SlaveTransmit_TXE+0x72>
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b29      	cmp	r3, #41	; 0x29
 8005484:	d111      	bne.n	80054aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005494:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2221      	movs	r2, #33	; 0x21
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2228      	movs	r2, #40	; 0x28
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff f9f1 	bl	800488c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02c      	beq.n	8005568 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d114      	bne.n	8005568 <I2C_SlaveReceive_RXNE+0x74>
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b2a      	cmp	r3, #42	; 0x2a
 8005542:	d111      	bne.n	8005568 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005552:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2222      	movs	r2, #34	; 0x22
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2228      	movs	r2, #40	; 0x28
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff f99c 	bl	80048a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055ce:	2b28      	cmp	r3, #40	; 0x28
 80055d0:	d127      	bne.n	8005622 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	089b      	lsrs	r3, r3, #2
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	09db      	lsrs	r3, r3, #7
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	81bb      	strh	r3, [r7, #12]
 8005604:	e002      	b.n	800560c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005614:	89ba      	ldrh	r2, [r7, #12]
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f94a 	bl	80048b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005620:	e00e      	b.n	8005640 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005666:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005694:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a4:	d172      	bne.n	800578c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b22      	cmp	r3, #34	; 0x22
 80056aa:	d002      	beq.n	80056b2 <I2C_Slave_STOPF+0x6a>
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b2a      	cmp	r3, #42	; 0x2a
 80056b0:	d135      	bne.n	800571e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd ffcc 	bl	8003688 <HAL_DMA_GetState>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d049      	beq.n	800578a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	4a69      	ldr	r2, [pc, #420]	; (80058a0 <I2C_Slave_STOPF+0x258>)
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fe14 	bl	8003330 <HAL_DMA_Abort_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03d      	beq.n	800578a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800571c:	e035      	b.n	800578a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005750:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd ff96 	bl	8003688 <HAL_DMA_GetState>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d014      	beq.n	800578c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	4a4e      	ldr	r2, [pc, #312]	; (80058a0 <I2C_Slave_STOPF+0x258>)
 8005768:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	4618      	mov	r0, r3
 8005770:	f7fd fdde 	bl	8003330 <HAL_DMA_Abort_IT>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005784:	4610      	mov	r0, r2
 8005786:	4798      	blx	r3
 8005788:	e000      	b.n	800578c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800578a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03e      	beq.n	8005814 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d112      	bne.n	80057ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d112      	bne.n	80057fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f043 0204 	orr.w	r2, r3, #4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8b3 	bl	8005988 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005822:	e039      	b.n	8005898 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b2a      	cmp	r3, #42	; 0x2a
 8005828:	d109      	bne.n	800583e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2228      	movs	r2, #40	; 0x28
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff f831 	bl	80048a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b28      	cmp	r3, #40	; 0x28
 8005848:	d111      	bne.n	800586e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <I2C_Slave_STOPF+0x25c>)
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff f832 	bl	80048d0 <HAL_I2C_ListenCpltCallback>
}
 800586c:	e014      	b.n	8005898 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b22      	cmp	r3, #34	; 0x22
 8005874:	d002      	beq.n	800587c <I2C_Slave_STOPF+0x234>
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b22      	cmp	r3, #34	; 0x22
 800587a:	d10d      	bne.n	8005898 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f804 	bl	80048a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08005e8d 	.word	0x08005e8d
 80058a4:	ffff0000 	.word	0xffff0000

080058a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d002      	beq.n	80058ca <I2C_Slave_AF+0x22>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d129      	bne.n	800591e <I2C_Slave_AF+0x76>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b28      	cmp	r3, #40	; 0x28
 80058ce:	d126      	bne.n	800591e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <I2C_Slave_AF+0xdc>)
 80058d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fe ffda 	bl	80048d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800591c:	e02e      	b.n	800597c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b21      	cmp	r3, #33	; 0x21
 8005922:	d126      	bne.n	8005972 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <I2C_Slave_AF+0xdc>)
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2221      	movs	r2, #33	; 0x21
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005958:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fe ff8e 	bl	800488c <HAL_I2C_SlaveTxCpltCallback>
}
 8005970:	e004      	b.n	800597c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800597a:	615a      	str	r2, [r3, #20]
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	ffff0000 	.word	0xffff0000

08005988 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d002      	beq.n	80059ac <I2C_ITError+0x24>
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d10a      	bne.n	80059c2 <I2C_ITError+0x3a>
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b22      	cmp	r3, #34	; 0x22
 80059b0:	d107      	bne.n	80059c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059c8:	2b28      	cmp	r3, #40	; 0x28
 80059ca:	d107      	bne.n	80059dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2228      	movs	r2, #40	; 0x28
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059da:	e015      	b.n	8005a08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ea:	d00a      	beq.n	8005a02 <I2C_ITError+0x7a>
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b60      	cmp	r3, #96	; 0x60
 80059f0:	d007      	beq.n	8005a02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d162      	bne.n	8005ade <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d020      	beq.n	8005a78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	4a6a      	ldr	r2, [pc, #424]	; (8005be4 <I2C_ITError+0x25c>)
 8005a3c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd fc74 	bl	8003330 <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8089 	beq.w	8005b62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a72:	4610      	mov	r0, r2
 8005a74:	4798      	blx	r3
 8005a76:	e074      	b.n	8005b62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	4a59      	ldr	r2, [pc, #356]	; (8005be4 <I2C_ITError+0x25c>)
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fc53 	bl	8003330 <HAL_DMA_Abort_IT>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d068      	beq.n	8005b62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d10b      	bne.n	8005ab6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	e041      	b.n	8005b62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b60      	cmp	r3, #96	; 0x60
 8005ae8:	d125      	bne.n	8005b36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d10b      	bne.n	8005b1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fe fef6 	bl	8004920 <HAL_I2C_AbortCpltCallback>
 8005b34:	e015      	b.n	8005b62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d10b      	bne.n	8005b5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fe fed5 	bl	800490c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d113      	bne.n	8005bdc <I2C_ITError+0x254>
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b28      	cmp	r3, #40	; 0x28
 8005bb8:	d110      	bne.n	8005bdc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <I2C_ITError+0x260>)
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fe fe7a 	bl	80048d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	08005e8d 	.word	0x08005e8d
 8005be8:	ffff0000 	.word	0xffff0000

08005bec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d006      	beq.n	8005c16 <I2C_MasterRequestWrite+0x2a>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d003      	beq.n	8005c16 <I2C_MasterRequestWrite+0x2a>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c14:	d108      	bne.n	8005c28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e00b      	b.n	8005c40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	2b12      	cmp	r3, #18
 8005c2e:	d107      	bne.n	8005c40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f9c5 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c66:	d103      	bne.n	8005c70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e035      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7c:	d108      	bne.n	8005c90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	e01b      	b.n	8005cc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c90:	897b      	ldrh	r3, [r7, #10]
 8005c92:	11db      	asrs	r3, r3, #7
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 0306 	and.w	r3, r3, #6
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f063 030f 	orn	r3, r3, #15
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <I2C_MasterRequestWrite+0xfc>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f9eb 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e010      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4907      	ldr	r1, [pc, #28]	; (8005cec <I2C_MasterRequestWrite+0x100>)
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f9db 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	00010008 	.word	0x00010008
 8005cec:	00010002 	.word	0x00010002

08005cf0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d006      	beq.n	8005d2a <I2C_MasterRequestRead+0x3a>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d003      	beq.n	8005d2a <I2C_MasterRequestRead+0x3a>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d28:	d108      	bne.n	8005d3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e00b      	b.n	8005d54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	2b11      	cmp	r3, #17
 8005d42:	d107      	bne.n	8005d54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f93b 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d103      	bne.n	8005d84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e079      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d90:	d108      	bne.n	8005da4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	611a      	str	r2, [r3, #16]
 8005da2:	e05f      	b.n	8005e64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005da4:	897b      	ldrh	r3, [r7, #10]
 8005da6:	11db      	asrs	r3, r3, #7
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f063 030f 	orn	r3, r3, #15
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4930      	ldr	r1, [pc, #192]	; (8005e84 <I2C_MasterRequestRead+0x194>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f961 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e054      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4929      	ldr	r1, [pc, #164]	; (8005e88 <I2C_MasterRequestRead+0x198>)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f951 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e044      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f8d9 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d103      	bne.n	8005e48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e017      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e4c:	897b      	ldrh	r3, [r7, #10]
 8005e4e:	11db      	asrs	r3, r3, #7
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 0306 	and.w	r3, r3, #6
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f063 030e 	orn	r3, r3, #14
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4907      	ldr	r1, [pc, #28]	; (8005e88 <I2C_MasterRequestRead+0x198>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f90d 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	00010008 	.word	0x00010008
 8005e88:	00010002 	.word	0x00010002

08005e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ea6:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <I2C_DMAAbort+0x148>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	4a4a      	ldr	r2, [pc, #296]	; (8005fd8 <I2C_DMAAbort+0x14c>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0a1a      	lsrs	r2, r3, #8
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00da      	lsls	r2, r3, #3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005ed2:	e00a      	b.n	8005eea <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee8:	d0ea      	beq.n	8005ec0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2200      	movs	r2, #0
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b60      	cmp	r3, #96	; 0x60
 8005f5a:	d10e      	bne.n	8005f7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f7fe fcd4 	bl	8004920 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f78:	e027      	b.n	8005fca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f80:	2b28      	cmp	r3, #40	; 0x28
 8005f82:	d117      	bne.n	8005fb4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2228      	movs	r2, #40	; 0x28
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fb2:	e007      	b.n	8005fc4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fc4:	6978      	ldr	r0, [r7, #20]
 8005fc6:	f7fe fca1 	bl	800490c <HAL_I2C_ErrorCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000004 	.word	0x20000004
 8005fd8:	14f8b589 	.word	0x14f8b589

08005fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fec:	e025      	b.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d021      	beq.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fc fecb 	bl	8002d90 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e023      	b.n	8006082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10d      	bne.n	8006060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	43da      	mvns	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	e00c      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	43da      	mvns	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4013      	ands	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	429a      	cmp	r2, r3
 800607e:	d0b6      	beq.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006098:	e051      	b.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d123      	bne.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e046      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d021      	beq.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fc fe49 	bl	8002d90 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e020      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10c      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	e00b      	b.n	800617a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d18d      	bne.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006194:	e02d      	b.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f900 	bl	800639c <I2C_IsAcknowledgeFailed>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e02d      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d021      	beq.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ae:	f7fc fdef 	bl	8002d90 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e007      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d1ca      	bne.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006216:	e02d      	b.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8bf 	bl	800639c <I2C_IsAcknowledgeFailed>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e02d      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d021      	beq.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006230:	f7fc fdae 	bl	8002d90 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d116      	bne.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e007      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b04      	cmp	r3, #4
 8006280:	d1ca      	bne.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062a0:	fba2 2303 	umull	r2, r3, r2, r3
 80062a4:	0a1a      	lsrs	r2, r3, #8
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e008      	b.n	80062dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d0e9      	beq.n	80062ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	20000004 	.word	0x20000004
 80062ec:	14f8b589 	.word	0x14f8b589

080062f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062fc:	e042      	b.n	8006384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d119      	bne.n	8006340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e029      	b.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006340:	f7fc fd26 	bl	8002d90 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	429a      	cmp	r2, r3
 800634e:	d302      	bcc.n	8006356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0220 	orr.w	r2, r3, #32
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e007      	b.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d1b5      	bne.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d11b      	bne.n	80063ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800640a:	d103      	bne.n	8006414 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006412:	e007      	b.n	8006424 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800641c:	d102      	bne.n	8006424 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2208      	movs	r2, #8
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	; 0x40
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800645c:	f7fc fc98 	bl	8002d90 <HAL_GetTick>
 8006460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006462:	e009      	b.n	8006478 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006464:	f7fc fc94 	bl	8002d90 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006472:	d901      	bls.n	8006478 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e01f      	b.n	80064b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006484:	d1ee      	bne.n	8006464 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800648c:	f7fc fc80 	bl	8002d90 <HAL_GetTick>
 8006490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006492:	e009      	b.n	80064a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006494:	f7fc fc7c 	bl	8002d90 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	d901      	bls.n	80064a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e007      	b.n	80064b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064a8:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b4:	d1ee      	bne.n	8006494 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	420e0040 	.word	0x420e0040
 80064c8:	40007000 	.word	0x40007000
 80064cc:	420e0044 	.word	0x420e0044

080064d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0cc      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b68      	ldr	r3, [pc, #416]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90c      	bls.n	800650c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b65      	ldr	r3, [pc, #404]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b63      	ldr	r3, [pc, #396]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0b8      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d020      	beq.n	800655a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a58      	ldr	r2, [pc, #352]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800652e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653c:	4b53      	ldr	r3, [pc, #332]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a52      	ldr	r2, [pc, #328]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	4b50      	ldr	r3, [pc, #320]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	494d      	ldr	r1, [pc, #308]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d044      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b47      	ldr	r3, [pc, #284]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d119      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d003      	beq.n	800658e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658a:	2b03      	cmp	r3, #3
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	4b3f      	ldr	r3, [pc, #252]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e06f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4b3b      	ldr	r3, [pc, #236]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e067      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ae:	4b37      	ldr	r3, [pc, #220]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4934      	ldr	r1, [pc, #208]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c0:	f7fc fbe6 	bl	8002d90 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fc fbe2 	bl	8002d90 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e04f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 020c 	and.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1eb      	bne.n	80065c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20c      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b22      	ldr	r3, [pc, #136]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e032      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006624:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4916      	ldr	r1, [pc, #88]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	490e      	ldr	r1, [pc, #56]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006656:	f000 fb7f 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 800665a:	4602      	mov	r2, r0
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	490a      	ldr	r1, [pc, #40]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006668:	5ccb      	ldrb	r3, [r1, r3]
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fc fb46 	bl	8002d08 <HAL_InitTick>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023c00 	.word	0x40023c00
 800668c:	40023800 	.word	0x40023800
 8006690:	0800c988 	.word	0x0800c988
 8006694:	20000004 	.word	0x20000004
 8006698:	20000008 	.word	0x20000008

0800669c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000004 	.word	0x20000004

080066b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066b8:	f7ff fff0 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0a9b      	lsrs	r3, r3, #10
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	0800c998 	.word	0x0800c998

080066dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e0:	f7ff ffdc 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	0b5b      	lsrs	r3, r3, #13
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	4903      	ldr	r1, [pc, #12]	; (8006700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40023800 	.word	0x40023800
 8006700:	0800c998 	.word	0x0800c998

08006704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800673c:	4b6f      	ldr	r3, [pc, #444]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800673e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006742:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	496c      	ldr	r1, [pc, #432]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800675a:	2301      	movs	r3, #1
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d010      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800676a:	4b64      	ldr	r3, [pc, #400]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800676c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006770:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	4960      	ldr	r1, [pc, #384]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006788:	2301      	movs	r3, #1
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d017      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006798:	4b58      	ldr	r3, [pc, #352]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800679a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800679e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	4955      	ldr	r1, [pc, #340]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b6:	d101      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80067b8:	2301      	movs	r3, #1
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80067c4:	2301      	movs	r3, #1
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d017      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067d4:	4b49      	ldr	r3, [pc, #292]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	4946      	ldr	r1, [pc, #280]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f2:	d101      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80067f4:	2301      	movs	r3, #1
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 808a 	beq.w	8006926 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	4b39      	ldr	r3, [pc, #228]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a38      	ldr	r2, [pc, #224]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800682e:	4b34      	ldr	r3, [pc, #208]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a33      	ldr	r2, [pc, #204]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800683a:	f7fc faa9 	bl	8002d90 <HAL_GetTick>
 800683e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006840:	e008      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006842:	f7fc faa5 	bl	8002d90 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e278      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006854:	4b2a      	ldr	r3, [pc, #168]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f0      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006860:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006868:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02f      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	429a      	cmp	r2, r3
 800687c:	d028      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800687e:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006886:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006894:	4a19      	ldr	r2, [pc, #100]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800689a:	4b18      	ldr	r3, [pc, #96]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d114      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fc fa73 	bl	8002d90 <HAL_GetTick>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ac:	e00a      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ae:	f7fc fa6f 	bl	8002d90 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e240      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ee      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068dc:	d114      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80068de:	4b07      	ldr	r3, [pc, #28]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	4902      	ldr	r1, [pc, #8]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	608b      	str	r3, [r1, #8]
 80068f8:	e00c      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80068fa:	bf00      	nop
 80068fc:	40023800 	.word	0x40023800
 8006900:	40007000 	.word	0x40007000
 8006904:	42470e40 	.word	0x42470e40
 8006908:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a49      	ldr	r2, [pc, #292]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800690e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006912:	6093      	str	r3, [r2, #8]
 8006914:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	4944      	ldr	r1, [pc, #272]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006922:	4313      	orrs	r3, r2
 8006924:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800693a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006948:	4b3a      	ldr	r3, [pc, #232]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800694a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800694e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006956:	4937      	ldr	r1, [pc, #220]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800696a:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800696c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006970:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006978:	492e      	ldr	r1, [pc, #184]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800698c:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006992:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	4926      	ldr	r1, [pc, #152]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069aa:	d101      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80069ac:	2301      	movs	r3, #1
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80069bc:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	491a      	ldr	r1, [pc, #104]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	4911      	ldr	r1, [pc, #68]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fc:	d101      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80069fe:	2301      	movs	r3, #1
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d005      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a10:	f040 80ff 	bne.w	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a1a:	f7fc f9b9 	bl	8002d90 <HAL_GetTick>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a20:	e00e      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a22:	f7fc f9b5 	bl	8002d90 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d907      	bls.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e188      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a34:	40023800 	.word	0x40023800
 8006a38:	424711e0 	.word	0x424711e0
 8006a3c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a40:	4b7e      	ldr	r3, [pc, #504]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1ea      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d028      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d124      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a74:	4b71      	ldr	r3, [pc, #452]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	0c1b      	lsrs	r3, r3, #16
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	3301      	adds	r3, #1
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a86:	4b6d      	ldr	r3, [pc, #436]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	019b      	lsls	r3, r3, #6
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	071b      	lsls	r3, r3, #28
 8006ab6:	4961      	ldr	r1, [pc, #388]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d035      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae8:	d130      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006aea:	4b54      	ldr	r3, [pc, #336]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	3301      	adds	r3, #1
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006afc:	4b4f      	ldr	r3, [pc, #316]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b02:	0f1b      	lsrs	r3, r3, #28
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	019b      	lsls	r3, r3, #6
 8006b14:	431a      	orrs	r2, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	061b      	lsls	r3, r3, #24
 8006b26:	431a      	orrs	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	071b      	lsls	r3, r3, #28
 8006b2c:	4943      	ldr	r1, [pc, #268]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b34:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3a:	f023 021f 	bic.w	r2, r3, #31
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	3b01      	subs	r3, #1
 8006b44:	493d      	ldr	r1, [pc, #244]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d029      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b60:	d124      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b74:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7a:	0f1b      	lsrs	r3, r3, #28
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	019b      	lsls	r3, r3, #6
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	3b01      	subs	r3, #1
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	061b      	lsls	r3, r3, #24
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	071b      	lsls	r3, r3, #28
 8006ba4:	4925      	ldr	r1, [pc, #148]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d016      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	019b      	lsls	r3, r3, #6
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	061b      	lsls	r3, r3, #24
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	071b      	lsls	r3, r3, #28
 8006bde:	4917      	ldr	r1, [pc, #92]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006be6:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bec:	f7fc f8d0 	bl	8002d90 <HAL_GetTick>
 8006bf0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bf4:	f7fc f8cc 	bl	8002d90 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e09f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f040 8095 	bne.w	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c20:	f7fc f8b6 	bl	8002d90 <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c26:	e00f      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c28:	f7fc f8b2 	bl	8002d90 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d908      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e085      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	42470068 	.word	0x42470068
 8006c44:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c48:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c54:	d0e8      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02b      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d127      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	061b      	lsls	r3, r3, #24
 8006cac:	4928      	ldr	r1, [pc, #160]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	4922      	ldr	r1, [pc, #136]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01d      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce2:	d118      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	019b      	lsls	r3, r3, #6
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	3b01      	subs	r3, #1
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	4910      	ldr	r1, [pc, #64]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d1c:	f7fc f838 	bl	8002d90 <HAL_GetTick>
 8006d20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d24:	f7fc f834 	bl	8002d90 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e007      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d42:	d1ef      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	42470070 	.word	0x42470070

08006d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d5c:	b088      	sub	sp, #32
 8006d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d74:	4bce      	ldr	r3, [pc, #824]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	f200 818d 	bhi.w	800709c <HAL_RCC_GetSysClockFreq+0x344>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <HAL_RCC_GetSysClockFreq+0x30>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006dbd 	.word	0x08006dbd
 8006d8c:	0800709d 	.word	0x0800709d
 8006d90:	0800709d 	.word	0x0800709d
 8006d94:	0800709d 	.word	0x0800709d
 8006d98:	08006dc3 	.word	0x08006dc3
 8006d9c:	0800709d 	.word	0x0800709d
 8006da0:	0800709d 	.word	0x0800709d
 8006da4:	0800709d 	.word	0x0800709d
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	0800709d 	.word	0x0800709d
 8006db0:	0800709d 	.word	0x0800709d
 8006db4:	0800709d 	.word	0x0800709d
 8006db8:	08006f3d 	.word	0x08006f3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dbc:	4bbd      	ldr	r3, [pc, #756]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006dbe:	61bb      	str	r3, [r7, #24]
       break;
 8006dc0:	e16f      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dc2:	4bbd      	ldr	r3, [pc, #756]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x360>)
 8006dc4:	61bb      	str	r3, [r7, #24]
      break;
 8006dc6:	e16c      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc8:	4bb9      	ldr	r3, [pc, #740]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dd2:	4bb7      	ldr	r3, [pc, #732]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d053      	beq.n	8006e86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dde:	4bb4      	ldr	r3, [pc, #720]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	461a      	mov	r2, r3
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	ea02 0400 	and.w	r4, r2, r0
 8006df6:	603c      	str	r4, [r7, #0]
 8006df8:	400b      	ands	r3, r1
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e00:	4620      	mov	r0, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	014b      	lsls	r3, r1, #5
 8006e0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e12:	0142      	lsls	r2, r0, #5
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	4623      	mov	r3, r4
 8006e1a:	1ac0      	subs	r0, r0, r3
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	eb61 0103 	sbc.w	r1, r1, r3
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	018b      	lsls	r3, r1, #6
 8006e2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e30:	0182      	lsls	r2, r0, #6
 8006e32:	1a12      	subs	r2, r2, r0
 8006e34:	eb63 0301 	sbc.w	r3, r3, r1
 8006e38:	f04f 0000 	mov.w	r0, #0
 8006e3c:	f04f 0100 	mov.w	r1, #0
 8006e40:	00d9      	lsls	r1, r3, #3
 8006e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e46:	00d0      	lsls	r0, r2, #3
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	1852      	adds	r2, r2, r1
 8006e50:	4629      	mov	r1, r5
 8006e52:	eb43 0101 	adc.w	r1, r3, r1
 8006e56:	460b      	mov	r3, r1
 8006e58:	f04f 0000 	mov.w	r0, #0
 8006e5c:	f04f 0100 	mov.w	r1, #0
 8006e60:	0259      	lsls	r1, r3, #9
 8006e62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e66:	0250      	lsls	r0, r2, #9
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	f7f9 fec6 	bl	8000c08 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4613      	mov	r3, r2
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	e04c      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e86:	4b8a      	ldr	r3, [pc, #552]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e96:	f04f 0100 	mov.w	r1, #0
 8006e9a:	ea02 0a00 	and.w	sl, r2, r0
 8006e9e:	ea03 0b01 	and.w	fp, r3, r1
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	014b      	lsls	r3, r1, #5
 8006eb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006eb4:	0142      	lsls	r2, r0, #5
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	ebb0 000a 	subs.w	r0, r0, sl
 8006ebe:	eb61 010b 	sbc.w	r1, r1, fp
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	018b      	lsls	r3, r1, #6
 8006ecc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ed0:	0182      	lsls	r2, r0, #6
 8006ed2:	1a12      	subs	r2, r2, r0
 8006ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed8:	f04f 0000 	mov.w	r0, #0
 8006edc:	f04f 0100 	mov.w	r1, #0
 8006ee0:	00d9      	lsls	r1, r3, #3
 8006ee2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ee6:	00d0      	lsls	r0, r2, #3
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	eb12 020a 	adds.w	r2, r2, sl
 8006ef0:	eb43 030b 	adc.w	r3, r3, fp
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f04f 0100 	mov.w	r1, #0
 8006efc:	0299      	lsls	r1, r3, #10
 8006efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f02:	0290      	lsls	r0, r2, #10
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	f7f9 fe78 	bl	8000c08 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f20:	4b63      	ldr	r3, [pc, #396]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	61bb      	str	r3, [r7, #24]
      break;
 8006f3a:	e0b2      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f3c:	4b5c      	ldr	r3, [pc, #368]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f46:	4b5a      	ldr	r3, [pc, #360]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d04d      	beq.n	8006fee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f52:	4b57      	ldr	r3, [pc, #348]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f62:	f04f 0100 	mov.w	r1, #0
 8006f66:	ea02 0800 	and.w	r8, r2, r0
 8006f6a:	ea03 0901 	and.w	r9, r3, r1
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4649      	mov	r1, r9
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	014b      	lsls	r3, r1, #5
 8006f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f80:	0142      	lsls	r2, r0, #5
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	ebb0 0008 	subs.w	r0, r0, r8
 8006f8a:	eb61 0109 	sbc.w	r1, r1, r9
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	018b      	lsls	r3, r1, #6
 8006f98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f9c:	0182      	lsls	r2, r0, #6
 8006f9e:	1a12      	subs	r2, r2, r0
 8006fa0:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa4:	f04f 0000 	mov.w	r0, #0
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	00d9      	lsls	r1, r3, #3
 8006fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb2:	00d0      	lsls	r0, r2, #3
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	eb12 0208 	adds.w	r2, r2, r8
 8006fbc:	eb43 0309 	adc.w	r3, r3, r9
 8006fc0:	f04f 0000 	mov.w	r0, #0
 8006fc4:	f04f 0100 	mov.w	r1, #0
 8006fc8:	0259      	lsls	r1, r3, #9
 8006fca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006fce:	0250      	lsls	r0, r2, #9
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	f7f9 fe12 	bl	8000c08 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4613      	mov	r3, r2
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	e04a      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b30      	ldr	r3, [pc, #192]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ffe:	f04f 0100 	mov.w	r1, #0
 8007002:	ea02 0400 	and.w	r4, r2, r0
 8007006:	ea03 0501 	and.w	r5, r3, r1
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	014b      	lsls	r3, r1, #5
 8007018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800701c:	0142      	lsls	r2, r0, #5
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	1b00      	subs	r0, r0, r4
 8007024:	eb61 0105 	sbc.w	r1, r1, r5
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	018b      	lsls	r3, r1, #6
 8007032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007036:	0182      	lsls	r2, r0, #6
 8007038:	1a12      	subs	r2, r2, r0
 800703a:	eb63 0301 	sbc.w	r3, r3, r1
 800703e:	f04f 0000 	mov.w	r0, #0
 8007042:	f04f 0100 	mov.w	r1, #0
 8007046:	00d9      	lsls	r1, r3, #3
 8007048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800704c:	00d0      	lsls	r0, r2, #3
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	1912      	adds	r2, r2, r4
 8007054:	eb45 0303 	adc.w	r3, r5, r3
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	0299      	lsls	r1, r3, #10
 8007062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007066:	0290      	lsls	r0, r2, #10
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	461a      	mov	r2, r3
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	f7f9 fdc6 	bl	8000c08 <__aeabi_uldivmod>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4613      	mov	r3, r2
 8007082:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	0f1b      	lsrs	r3, r3, #28
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	61bb      	str	r3, [r7, #24]
      break;
 800709a:	e002      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800709e:	61bb      	str	r3, [r7, #24]
      break;
 80070a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070a2:	69bb      	ldr	r3, [r7, #24]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	00f42400 	.word	0x00f42400
 80070b8:	007a1200 	.word	0x007a1200

080070bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e28d      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8083 	beq.w	80071e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80070dc:	4b94      	ldr	r3, [pc, #592]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 030c 	and.w	r3, r3, #12
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d019      	beq.n	800711c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070e8:	4b91      	ldr	r3, [pc, #580]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d106      	bne.n	8007102 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070f4:	4b8e      	ldr	r3, [pc, #568]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007100:	d00c      	beq.n	800711c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007102:	4b8b      	ldr	r3, [pc, #556]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800710a:	2b0c      	cmp	r3, #12
 800710c:	d112      	bne.n	8007134 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800710e:	4b88      	ldr	r3, [pc, #544]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800711a:	d10b      	bne.n	8007134 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711c:	4b84      	ldr	r3, [pc, #528]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d05b      	beq.n	80071e0 <HAL_RCC_OscConfig+0x124>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d157      	bne.n	80071e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e25a      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713c:	d106      	bne.n	800714c <HAL_RCC_OscConfig+0x90>
 800713e:	4b7c      	ldr	r3, [pc, #496]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a7b      	ldr	r2, [pc, #492]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	e01d      	b.n	8007188 <HAL_RCC_OscConfig+0xcc>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0xb4>
 8007156:	4b76      	ldr	r3, [pc, #472]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a75      	ldr	r2, [pc, #468]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800715c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b73      	ldr	r3, [pc, #460]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a72      	ldr	r2, [pc, #456]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e00b      	b.n	8007188 <HAL_RCC_OscConfig+0xcc>
 8007170:	4b6f      	ldr	r3, [pc, #444]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a6e      	ldr	r2, [pc, #440]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	4b6c      	ldr	r3, [pc, #432]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6b      	ldr	r2, [pc, #428]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fb fdfe 	bl	8002d90 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007198:	f7fb fdfa 	bl	8002d90 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e21f      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071aa:	4b61      	ldr	r3, [pc, #388]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f0      	beq.n	8007198 <HAL_RCC_OscConfig+0xdc>
 80071b6:	e014      	b.n	80071e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fb fdea 	bl	8002d90 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071c0:	f7fb fde6 	bl	8002d90 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	; 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e20b      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d2:	4b57      	ldr	r3, [pc, #348]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x104>
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d06f      	beq.n	80072ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80071ee:	4b50      	ldr	r3, [pc, #320]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d017      	beq.n	800722a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80071fa:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007202:	2b08      	cmp	r3, #8
 8007204:	d105      	bne.n	8007212 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007206:	4b4a      	ldr	r3, [pc, #296]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007212:	4b47      	ldr	r3, [pc, #284]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d11c      	bne.n	8007258 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800721e:	4b44      	ldr	r3, [pc, #272]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d116      	bne.n	8007258 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722a:	4b41      	ldr	r3, [pc, #260]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_RCC_OscConfig+0x186>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d001      	beq.n	8007242 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e1d3      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007242:	4b3b      	ldr	r3, [pc, #236]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4937      	ldr	r1, [pc, #220]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007252:	4313      	orrs	r3, r2
 8007254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007256:	e03a      	b.n	80072ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007260:	4b34      	ldr	r3, [pc, #208]	; (8007334 <HAL_RCC_OscConfig+0x278>)
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fb fd93 	bl	8002d90 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800726e:	f7fb fd8f 	bl	8002d90 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e1b4      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007280:	4b2b      	ldr	r3, [pc, #172]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800728c:	4b28      	ldr	r3, [pc, #160]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4925      	ldr	r1, [pc, #148]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 800729c:	4313      	orrs	r3, r2
 800729e:	600b      	str	r3, [r1, #0]
 80072a0:	e015      	b.n	80072ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <HAL_RCC_OscConfig+0x278>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fb fd72 	bl	8002d90 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b0:	f7fb fd6e 	bl	8002d90 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e193      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072c2:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d036      	beq.n	8007348 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e8:	f7fb fd52 	bl	8002d90 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072f0:	f7fb fd4e 	bl	8002d90 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e173      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_RCC_OscConfig+0x274>)
 8007304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f0      	beq.n	80072f0 <HAL_RCC_OscConfig+0x234>
 800730e:	e01b      	b.n	8007348 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <HAL_RCC_OscConfig+0x27c>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fb fd3b 	bl	8002d90 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800731c:	e00e      	b.n	800733c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731e:	f7fb fd37 	bl	8002d90 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d907      	bls.n	800733c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e15c      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
 8007330:	40023800 	.word	0x40023800
 8007334:	42470000 	.word	0x42470000
 8007338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800733c:	4b8a      	ldr	r3, [pc, #552]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800733e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1ea      	bne.n	800731e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8097 	beq.w	8007484 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	4b7f      	ldr	r3, [pc, #508]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	4a7e      	ldr	r2, [pc, #504]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007374:	6413      	str	r3, [r2, #64]	; 0x40
 8007376:	4b7c      	ldr	r3, [pc, #496]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007382:	2301      	movs	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007386:	4b79      	ldr	r3, [pc, #484]	; (800756c <HAL_RCC_OscConfig+0x4b0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d118      	bne.n	80073c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007392:	4b76      	ldr	r3, [pc, #472]	; (800756c <HAL_RCC_OscConfig+0x4b0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a75      	ldr	r2, [pc, #468]	; (800756c <HAL_RCC_OscConfig+0x4b0>)
 8007398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800739e:	f7fb fcf7 	bl	8002d90 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a6:	f7fb fcf3 	bl	8002d90 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e118      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b8:	4b6c      	ldr	r3, [pc, #432]	; (800756c <HAL_RCC_OscConfig+0x4b0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0f0      	beq.n	80073a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d106      	bne.n	80073da <HAL_RCC_OscConfig+0x31e>
 80073cc:	4b66      	ldr	r3, [pc, #408]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	4a65      	ldr	r2, [pc, #404]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	6713      	str	r3, [r2, #112]	; 0x70
 80073d8:	e01c      	b.n	8007414 <HAL_RCC_OscConfig+0x358>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d10c      	bne.n	80073fc <HAL_RCC_OscConfig+0x340>
 80073e2:	4b61      	ldr	r3, [pc, #388]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	4a60      	ldr	r2, [pc, #384]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	6713      	str	r3, [r2, #112]	; 0x70
 80073ee:	4b5e      	ldr	r3, [pc, #376]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	4a5d      	ldr	r2, [pc, #372]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	6713      	str	r3, [r2, #112]	; 0x70
 80073fa:	e00b      	b.n	8007414 <HAL_RCC_OscConfig+0x358>
 80073fc:	4b5a      	ldr	r3, [pc, #360]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	4a59      	ldr	r2, [pc, #356]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	6713      	str	r3, [r2, #112]	; 0x70
 8007408:	4b57      	ldr	r3, [pc, #348]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740c:	4a56      	ldr	r2, [pc, #344]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800740e:	f023 0304 	bic.w	r3, r3, #4
 8007412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d015      	beq.n	8007448 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741c:	f7fb fcb8 	bl	8002d90 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007422:	e00a      	b.n	800743a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007424:	f7fb fcb4 	bl	8002d90 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e0d7      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743a:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0ee      	beq.n	8007424 <HAL_RCC_OscConfig+0x368>
 8007446:	e014      	b.n	8007472 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007448:	f7fb fca2 	bl	8002d90 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800744e:	e00a      	b.n	8007466 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007450:	f7fb fc9e 	bl	8002d90 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f241 3288 	movw	r2, #5000	; 0x1388
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e0c1      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007466:	4b40      	ldr	r3, [pc, #256]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1ee      	bne.n	8007450 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d105      	bne.n	8007484 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007478:	4b3b      	ldr	r3, [pc, #236]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 800747e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80ad 	beq.w	80075e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 030c 	and.w	r3, r3, #12
 8007496:	2b08      	cmp	r3, #8
 8007498:	d060      	beq.n	800755c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d145      	bne.n	800752e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a2:	4b33      	ldr	r3, [pc, #204]	; (8007570 <HAL_RCC_OscConfig+0x4b4>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fb fc72 	bl	8002d90 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fb fc6e 	bl	8002d90 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e093      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c2:	4b29      	ldr	r3, [pc, #164]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69da      	ldr	r2, [r3, #28]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	019b      	lsls	r3, r3, #6
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	3b01      	subs	r3, #1
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	061b      	lsls	r3, r3, #24
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	071b      	lsls	r3, r3, #28
 80074fa:	491b      	ldr	r1, [pc, #108]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007500:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <HAL_RCC_OscConfig+0x4b4>)
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007506:	f7fb fc43 	bl	8002d90 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750e:	f7fb fc3f 	bl	8002d90 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e064      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0f0      	beq.n	800750e <HAL_RCC_OscConfig+0x452>
 800752c:	e05c      	b.n	80075e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <HAL_RCC_OscConfig+0x4b4>)
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fb fc2c 	bl	8002d90 <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800753c:	f7fb fc28 	bl	8002d90 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e04d      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <HAL_RCC_OscConfig+0x4ac>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_OscConfig+0x480>
 800755a:	e045      	b.n	80075e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d107      	bne.n	8007574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e040      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
 8007568:	40023800 	.word	0x40023800
 800756c:	40007000 	.word	0x40007000
 8007570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007574:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <HAL_RCC_OscConfig+0x538>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d030      	beq.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800758c:	429a      	cmp	r2, r3
 800758e:	d129      	bne.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759a:	429a      	cmp	r2, r3
 800759c:	d122      	bne.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075a4:	4013      	ands	r3, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d119      	bne.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	3b01      	subs	r3, #1
 80075be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d10f      	bne.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d107      	bne.n	80075e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40023800 	.word	0x40023800

080075f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e083      	b.n	8007712 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7f5b      	ldrb	r3, [r3, #29]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fa fc70 	bl	8001f00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	22ca      	movs	r2, #202	; 0xca
 800762c:	625a      	str	r2, [r3, #36]	; 0x24
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2253      	movs	r2, #83	; 0x53
 8007634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 faa8 	bl	8007b8c <RTC_EnterInitMode>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	22ff      	movs	r2, #255	; 0xff
 8007648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2204      	movs	r2, #4
 800764e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e05e      	b.n	8007712 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007666:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6899      	ldr	r1, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68d2      	ldr	r2, [r2, #12]
 800768e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6919      	ldr	r1, [r3, #16]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	041a      	lsls	r2, r3, #16
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10e      	bne.n	80076e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa3a 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	22ff      	movs	r2, #255	; 0xff
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2204      	movs	r2, #4
 80076da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e018      	b.n	8007712 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	22ff      	movs	r2, #255	; 0xff
 8007708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007710:	2300      	movs	r3, #0
  }
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800771a:	b590      	push	{r4, r7, lr}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7f1b      	ldrb	r3, [r3, #28]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <HAL_RTC_SetTime+0x1c>
 8007732:	2302      	movs	r3, #2
 8007734:	e0aa      	b.n	800788c <HAL_RTC_SetTime+0x172>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2202      	movs	r2, #2
 8007740:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d126      	bne.n	8007796 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fa3f 	bl	8007be4 <RTC_ByteToBcd2>
 8007766:	4603      	mov	r3, r0
 8007768:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa38 	bl	8007be4 <RTC_ByteToBcd2>
 8007774:	4603      	mov	r3, r0
 8007776:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007778:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	789b      	ldrb	r3, [r3, #2]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fa30 	bl	8007be4 <RTC_ByteToBcd2>
 8007784:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007786:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e018      	b.n	80077c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80077b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80077bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	78db      	ldrb	r3, [r3, #3]
 80077c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	22ca      	movs	r2, #202	; 0xca
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2253      	movs	r2, #83	; 0x53
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f9d7 	bl	8007b8c <RTC_EnterInitMode>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2204      	movs	r2, #4
 80077f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e047      	b.n	800788c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007806:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800780a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800781a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	431a      	orrs	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007842:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d111      	bne.n	8007876 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f972 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	22ff      	movs	r2, #255	; 0xff
 8007864:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2204      	movs	r2, #4
 800786a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e00a      	b.n	800788c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800788a:	2300      	movs	r3, #0
  }
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd90      	pop	{r4, r7, pc}

08007894 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	0c1b      	lsrs	r3, r3, #16
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11a      	bne.n	8007946 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4618      	mov	r0, r3
 8007916:	f000 f983 	bl	8007c20 <RTC_Bcd2ToByte>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f97a 	bl	8007c20 <RTC_Bcd2ToByte>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	789b      	ldrb	r3, [r3, #2]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f971 	bl	8007c20 <RTC_Bcd2ToByte>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007950:	b590      	push	{r4, r7, lr}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	7f1b      	ldrb	r3, [r3, #28]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_RTC_SetDate+0x1c>
 8007968:	2302      	movs	r3, #2
 800796a:	e094      	b.n	8007a96 <HAL_RTC_SetDate+0x146>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2202      	movs	r2, #2
 8007976:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10e      	bne.n	800799c <HAL_RTC_SetDate+0x4c>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	f023 0310 	bic.w	r3, r3, #16
 8007992:	b2db      	uxtb	r3, r3
 8007994:	330a      	adds	r3, #10
 8007996:	b2da      	uxtb	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d11c      	bne.n	80079dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	78db      	ldrb	r3, [r3, #3]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f91c 	bl	8007be4 <RTC_ByteToBcd2>
 80079ac:	4603      	mov	r3, r0
 80079ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 f915 	bl	8007be4 <RTC_ByteToBcd2>
 80079ba:	4603      	mov	r3, r0
 80079bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	789b      	ldrb	r3, [r3, #2]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f90d 	bl	8007be4 <RTC_ByteToBcd2>
 80079ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e00e      	b.n	80079fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	78db      	ldrb	r3, [r3, #3]
 80079e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80079ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	22ca      	movs	r2, #202	; 0xca
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2253      	movs	r2, #83	; 0x53
 8007a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f8be 	bl	8007b8c <RTC_EnterInitMode>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	22ff      	movs	r2, #255	; 0xff
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2204      	movs	r2, #4
 8007a22:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e033      	b.n	8007a96 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d111      	bne.n	8007a80 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f86d 	bl	8007b3c <HAL_RTC_WaitForSynchro>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	22ff      	movs	r2, #255	; 0xff
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2204      	movs	r2, #4
 8007a74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e00a      	b.n	8007a96 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd90      	pop	{r4, r7, pc}

08007a9e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ab8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007abc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	0b5b      	lsrs	r3, r3, #13
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11a      	bne.n	8007b32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	78db      	ldrb	r3, [r3, #3]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f88d 	bl	8007c20 <RTC_Bcd2ToByte>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f884 	bl	8007c20 <RTC_Bcd2ToByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	789b      	ldrb	r3, [r3, #2]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f87b 	bl	8007c20 <RTC_Bcd2ToByte>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b58:	f7fb f91a 	bl	8002d90 <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b5e:	e009      	b.n	8007b74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b60:	f7fb f916 	bl	8002d90 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b6e:	d901      	bls.n	8007b74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e007      	b.n	8007b84 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0ee      	beq.n	8007b60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d119      	bne.n	8007bda <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bb0:	f7fb f8ee 	bl	8002d90 <HAL_GetTick>
 8007bb4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bb6:	e009      	b.n	8007bcc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bb8:	f7fb f8ea 	bl	8002d90 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bc6:	d901      	bls.n	8007bcc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e007      	b.n	8007bdc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0ee      	beq.n	8007bb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007bf2:	e005      	b.n	8007c00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	3b0a      	subs	r3, #10
 8007bfe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	d8f6      	bhi.n	8007bf4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2db      	uxtb	r3, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	4413      	add	r3, r2
 8007c4e:	b2db      	uxtb	r3, r3
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	7f1b      	ldrb	r3, [r3, #28]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0a6      	b.n	8007dc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	22ca      	movs	r2, #202	; 0xca
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2253      	movs	r2, #83	; 0x53
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d022      	beq.n	8007ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8007c9e:	4b4c      	ldr	r3, [pc, #304]	; (8007dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4c      	ldr	r2, [pc, #304]	; (8007dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	0adb      	lsrs	r3, r3, #11
 8007caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	617a      	str	r2, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	22ff      	movs	r2, #255	; 0xff
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e075      	b.n	8007dc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e7      	bne.n	8007cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8007cf4:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a36      	ldr	r2, [pc, #216]	; (8007dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	0adb      	lsrs	r3, r3, #11
 8007d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	617a      	str	r2, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	22ff      	movs	r2, #255	; 0xff
 8007d1a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e04a      	b.n	8007dc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0e7      	beq.n	8007d0a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0207 	bic.w	r2, r2, #7
 8007d50:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6899      	ldr	r1, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d62:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1c      	ldr	r2, [pc, #112]	; (8007dd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d6c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8007d6e:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	4a19      	ldr	r2, [pc, #100]	; (8007dd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8007d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d78:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007d8a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007daa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000004 	.word	0x20000004
 8007dd4:	10624dd3 	.word	0x10624dd3
 8007dd8:	40013c00 	.word	0x40013c00

08007ddc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f816 	bl	8007e24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007e08:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8007e0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007e10:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	775a      	strb	r2, [r3, #29]
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40013c00 	.word	0x40013c00

08007e24 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e041      	b.n	8007ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fa fd44 	bl	80028ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f000 fc7a 	bl	8008770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d001      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e04e      	b.n	8007f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a23      	ldr	r2, [pc, #140]	; (8007f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d01d      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1c      	ldr	r2, [pc, #112]	; (8007fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1b      	ldr	r2, [pc, #108]	; (8007fac <HAL_TIM_Base_Start_IT+0xd4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a19      	ldr	r2, [pc, #100]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x80>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a18      	ldr	r2, [pc, #96]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d111      	bne.n	8007f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b06      	cmp	r3, #6
 8007f68:	d010      	beq.n	8007f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7a:	e007      	b.n	8007f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0201 	orr.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40000400 	.word	0x40000400
 8007fa4:	40000800 	.word	0x40000800
 8007fa8:	40000c00 	.word	0x40000c00
 8007fac:	40010400 	.word	0x40010400
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40001800 	.word	0x40001800

08007fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e041      	b.n	800804e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f839 	bl	8008056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f000 fbba 	bl	8008770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_TIM_PWM_Start+0x24>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	e022      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b04      	cmp	r3, #4
 8008094:	d109      	bne.n	80080aa <HAL_TIM_PWM_Start+0x3e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b01      	cmp	r3, #1
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	e015      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d109      	bne.n	80080c4 <HAL_TIM_PWM_Start+0x58>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	e008      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	bf14      	ite	ne
 80080d0:	2301      	movne	r3, #1
 80080d2:	2300      	moveq	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e07c      	b.n	80081d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <HAL_TIM_PWM_Start+0x82>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ec:	e013      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d104      	bne.n	80080fe <HAL_TIM_PWM_Start+0x92>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fc:	e00b      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b08      	cmp	r3, #8
 8008102:	d104      	bne.n	800810e <HAL_TIM_PWM_Start+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800810c:	e003      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2201      	movs	r2, #1
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fe10 	bl	8008d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2d      	ldr	r2, [pc, #180]	; (80081e0 <HAL_TIM_PWM_Start+0x174>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIM_PWM_Start+0xcc>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2c      	ldr	r2, [pc, #176]	; (80081e4 <HAL_TIM_PWM_Start+0x178>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d101      	bne.n	800813c <HAL_TIM_PWM_Start+0xd0>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <HAL_TIM_PWM_Start+0xd2>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <HAL_TIM_PWM_Start+0x174>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d022      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008164:	d01d      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <HAL_TIM_PWM_Start+0x17c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d018      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <HAL_TIM_PWM_Start+0x180>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_TIM_PWM_Start+0x184>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <HAL_TIM_PWM_Start+0x178>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d009      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <HAL_TIM_PWM_Start+0x188>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d004      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a16      	ldr	r2, [pc, #88]	; (80081f8 <HAL_TIM_PWM_Start+0x18c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d111      	bne.n	80081c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b06      	cmp	r3, #6
 80081b2:	d010      	beq.n	80081d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0201 	orr.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c4:	e007      	b.n	80081d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40010000 	.word	0x40010000
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40001800 	.word	0x40001800

080081fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d122      	bne.n	8008258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b02      	cmp	r3, #2
 800821e:	d11b      	bne.n	8008258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0202 	mvn.w	r2, #2
 8008228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa77 	bl	8008732 <HAL_TIM_IC_CaptureCallback>
 8008244:	e005      	b.n	8008252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa69 	bl	800871e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fa7a 	bl	8008746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b04      	cmp	r3, #4
 8008264:	d122      	bne.n	80082ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d11b      	bne.n	80082ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0204 	mvn.w	r2, #4
 800827c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa4d 	bl	8008732 <HAL_TIM_IC_CaptureCallback>
 8008298:	e005      	b.n	80082a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa3f 	bl	800871e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa50 	bl	8008746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0208 	mvn.w	r2, #8
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2204      	movs	r2, #4
 80082d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa23 	bl	8008732 <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa15 	bl	800871e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa26 	bl	8008746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b10      	cmp	r3, #16
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b10      	cmp	r3, #16
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0210 	mvn.w	r2, #16
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2208      	movs	r2, #8
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9f9 	bl	8008732 <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9eb 	bl	800871e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9fc 	bl	8008746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b01      	cmp	r3, #1
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0201 	mvn.w	r2, #1
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f9 fa96 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d10e      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b80      	cmp	r3, #128	; 0x80
 800839a:	d107      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fdca 	bl	8008f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d10e      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d107      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9c1 	bl	800875a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d10e      	bne.n	8008404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d107      	bne.n	8008404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0220 	mvn.w	r2, #32
 80083fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fd94 	bl	8008f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008426:	2302      	movs	r3, #2
 8008428:	e0ae      	b.n	8008588 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b0c      	cmp	r3, #12
 8008436:	f200 809f 	bhi.w	8008578 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008475 	.word	0x08008475
 8008444:	08008579 	.word	0x08008579
 8008448:	08008579 	.word	0x08008579
 800844c:	08008579 	.word	0x08008579
 8008450:	080084b5 	.word	0x080084b5
 8008454:	08008579 	.word	0x08008579
 8008458:	08008579 	.word	0x08008579
 800845c:	08008579 	.word	0x08008579
 8008460:	080084f7 	.word	0x080084f7
 8008464:	08008579 	.word	0x08008579
 8008468:	08008579 	.word	0x08008579
 800846c:	08008579 	.word	0x08008579
 8008470:	08008537 	.word	0x08008537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fa18 	bl	80088b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0208 	orr.w	r2, r2, #8
 800848e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699a      	ldr	r2, [r3, #24]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0204 	bic.w	r2, r2, #4
 800849e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6999      	ldr	r1, [r3, #24]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	619a      	str	r2, [r3, #24]
      break;
 80084b2:	e064      	b.n	800857e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fa68 	bl	8008990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6999      	ldr	r1, [r3, #24]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	021a      	lsls	r2, r3, #8
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	619a      	str	r2, [r3, #24]
      break;
 80084f4:	e043      	b.n	800857e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fabd 	bl	8008a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0208 	orr.w	r2, r2, #8
 8008510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0204 	bic.w	r2, r2, #4
 8008520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69d9      	ldr	r1, [r3, #28]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	61da      	str	r2, [r3, #28]
      break;
 8008534:	e023      	b.n	800857e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fb11 	bl	8008b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69d9      	ldr	r1, [r3, #28]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	021a      	lsls	r2, r3, #8
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	61da      	str	r2, [r3, #28]
      break;
 8008576:	e002      	b.n	800857e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75fb      	strb	r3, [r7, #23]
      break;
 800857c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_TIM_ConfigClockSource+0x1c>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e0b4      	b.n	8008716 <HAL_TIM_ConfigClockSource+0x186>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e4:	d03e      	beq.n	8008664 <HAL_TIM_ConfigClockSource+0xd4>
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ea:	f200 8087 	bhi.w	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	f000 8086 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x172>
 80085f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fa:	d87f      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 80085fc:	2b70      	cmp	r3, #112	; 0x70
 80085fe:	d01a      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0xa6>
 8008600:	2b70      	cmp	r3, #112	; 0x70
 8008602:	d87b      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 8008604:	2b60      	cmp	r3, #96	; 0x60
 8008606:	d050      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x11a>
 8008608:	2b60      	cmp	r3, #96	; 0x60
 800860a:	d877      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 800860c:	2b50      	cmp	r3, #80	; 0x50
 800860e:	d03c      	beq.n	800868a <HAL_TIM_ConfigClockSource+0xfa>
 8008610:	2b50      	cmp	r3, #80	; 0x50
 8008612:	d873      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d058      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x13a>
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	d86f      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 800861c:	2b30      	cmp	r3, #48	; 0x30
 800861e:	d064      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x15a>
 8008620:	2b30      	cmp	r3, #48	; 0x30
 8008622:	d86b      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d060      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x15a>
 8008628:	2b20      	cmp	r3, #32
 800862a:	d867      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d05c      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x15a>
 8008630:	2b10      	cmp	r3, #16
 8008632:	d05a      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x15a>
 8008634:	e062      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6899      	ldr	r1, [r3, #8]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f000 fb5d 	bl	8008d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	609a      	str	r2, [r3, #8]
      break;
 8008662:	e04f      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	6899      	ldr	r1, [r3, #8]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f000 fb46 	bl	8008d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008686:	609a      	str	r2, [r3, #8]
      break;
 8008688:	e03c      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6859      	ldr	r1, [r3, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	461a      	mov	r2, r3
 8008698:	f000 faba 	bl	8008c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2150      	movs	r1, #80	; 0x50
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fb13 	bl	8008cce <TIM_ITRx_SetConfig>
      break;
 80086a8:	e02c      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6859      	ldr	r1, [r3, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f000 fad9 	bl	8008c6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2160      	movs	r1, #96	; 0x60
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fb03 	bl	8008cce <TIM_ITRx_SetConfig>
      break;
 80086c8:	e01c      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6859      	ldr	r1, [r3, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f000 fa9a 	bl	8008c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2140      	movs	r1, #64	; 0x40
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 faf3 	bl	8008cce <TIM_ITRx_SetConfig>
      break;
 80086e8:	e00c      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f000 faea 	bl	8008cce <TIM_ITRx_SetConfig>
      break;
 80086fa:	e003      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008700:	e000      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a40      	ldr	r2, [pc, #256]	; (8008884 <TIM_Base_SetConfig+0x114>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d013      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800878e:	d00f      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a3d      	ldr	r2, [pc, #244]	; (8008888 <TIM_Base_SetConfig+0x118>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00b      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a3c      	ldr	r2, [pc, #240]	; (800888c <TIM_Base_SetConfig+0x11c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d007      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a3b      	ldr	r2, [pc, #236]	; (8008890 <TIM_Base_SetConfig+0x120>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3a      	ldr	r2, [pc, #232]	; (8008894 <TIM_Base_SetConfig+0x124>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d108      	bne.n	80087c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <TIM_Base_SetConfig+0x114>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d02b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d027      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2c      	ldr	r2, [pc, #176]	; (8008888 <TIM_Base_SetConfig+0x118>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d023      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2b      	ldr	r2, [pc, #172]	; (800888c <TIM_Base_SetConfig+0x11c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01f      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2a      	ldr	r2, [pc, #168]	; (8008890 <TIM_Base_SetConfig+0x120>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a29      	ldr	r2, [pc, #164]	; (8008894 <TIM_Base_SetConfig+0x124>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d017      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a28      	ldr	r2, [pc, #160]	; (8008898 <TIM_Base_SetConfig+0x128>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a27      	ldr	r2, [pc, #156]	; (800889c <TIM_Base_SetConfig+0x12c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <TIM_Base_SetConfig+0x130>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a25      	ldr	r2, [pc, #148]	; (80088a4 <TIM_Base_SetConfig+0x134>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a24      	ldr	r2, [pc, #144]	; (80088a8 <TIM_Base_SetConfig+0x138>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a23      	ldr	r2, [pc, #140]	; (80088ac <TIM_Base_SetConfig+0x13c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <TIM_Base_SetConfig+0x114>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_Base_SetConfig+0xf8>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a0c      	ldr	r2, [pc, #48]	; (8008894 <TIM_Base_SetConfig+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d103      	bne.n	8008870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	615a      	str	r2, [r3, #20]
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40010000 	.word	0x40010000
 8008888:	40000400 	.word	0x40000400
 800888c:	40000800 	.word	0x40000800
 8008890:	40000c00 	.word	0x40000c00
 8008894:	40010400 	.word	0x40010400
 8008898:	40014000 	.word	0x40014000
 800889c:	40014400 	.word	0x40014400
 80088a0:	40014800 	.word	0x40014800
 80088a4:	40001800 	.word	0x40001800
 80088a8:	40001c00 	.word	0x40001c00
 80088ac:	40002000 	.word	0x40002000

080088b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f023 0201 	bic.w	r2, r3, #1
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0303 	bic.w	r3, r3, #3
 80088e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f023 0302 	bic.w	r3, r3, #2
 80088f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4313      	orrs	r3, r2
 8008902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a20      	ldr	r2, [pc, #128]	; (8008988 <TIM_OC1_SetConfig+0xd8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d003      	beq.n	8008914 <TIM_OC1_SetConfig+0x64>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1f      	ldr	r2, [pc, #124]	; (800898c <TIM_OC1_SetConfig+0xdc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d10c      	bne.n	800892e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0308 	bic.w	r3, r3, #8
 800891a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 0304 	bic.w	r3, r3, #4
 800892c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a15      	ldr	r2, [pc, #84]	; (8008988 <TIM_OC1_SetConfig+0xd8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d003      	beq.n	800893e <TIM_OC1_SetConfig+0x8e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a14      	ldr	r2, [pc, #80]	; (800898c <TIM_OC1_SetConfig+0xdc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d111      	bne.n	8008962 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800894c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	621a      	str	r2, [r3, #32]
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	40010000 	.word	0x40010000
 800898c:	40010400 	.word	0x40010400

08008990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f023 0210 	bic.w	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0320 	bic.w	r3, r3, #32
 80089da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a22      	ldr	r2, [pc, #136]	; (8008a74 <TIM_OC2_SetConfig+0xe4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC2_SetConfig+0x68>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a21      	ldr	r2, [pc, #132]	; (8008a78 <TIM_OC2_SetConfig+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d10d      	bne.n	8008a14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a17      	ldr	r2, [pc, #92]	; (8008a74 <TIM_OC2_SetConfig+0xe4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC2_SetConfig+0x94>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a16      	ldr	r2, [pc, #88]	; (8008a78 <TIM_OC2_SetConfig+0xe8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d113      	bne.n	8008a4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400

08008a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a21      	ldr	r2, [pc, #132]	; (8008b5c <TIM_OC3_SetConfig+0xe0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d003      	beq.n	8008ae2 <TIM_OC3_SetConfig+0x66>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a20      	ldr	r2, [pc, #128]	; (8008b60 <TIM_OC3_SetConfig+0xe4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d10d      	bne.n	8008afe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <TIM_OC3_SetConfig+0xe0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC3_SetConfig+0x92>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <TIM_OC3_SetConfig+0xe4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d113      	bne.n	8008b36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	621a      	str	r2, [r3, #32]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40010400 	.word	0x40010400

08008b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	031b      	lsls	r3, r3, #12
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a12      	ldr	r2, [pc, #72]	; (8008c08 <TIM_OC4_SetConfig+0xa4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d003      	beq.n	8008bcc <TIM_OC4_SetConfig+0x68>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a11      	ldr	r2, [pc, #68]	; (8008c0c <TIM_OC4_SetConfig+0xa8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d109      	bne.n	8008be0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	019b      	lsls	r3, r3, #6
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	621a      	str	r2, [r3, #32]
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	40010000 	.word	0x40010000
 8008c0c:	40010400 	.word	0x40010400

08008c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f023 0201 	bic.w	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f023 030a 	bic.w	r3, r3, #10
 8008c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b087      	sub	sp, #28
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0210 	bic.w	r2, r3, #16
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	031b      	lsls	r3, r3, #12
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	621a      	str	r2, [r3, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f043 0307 	orr.w	r3, r3, #7
 8008cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	609a      	str	r2, [r3, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	021a      	lsls	r2, r3, #8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	609a      	str	r2, [r3, #8]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 031f 	and.w	r3, r3, #31
 8008d56:	2201      	movs	r2, #1
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1a      	ldr	r2, [r3, #32]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1a      	ldr	r2, [r3, #32]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e05a      	b.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a21      	ldr	r2, [pc, #132]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d022      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df4:	d01d      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a1d      	ldr	r2, [pc, #116]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d018      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d013      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1a      	ldr	r2, [pc, #104]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00e      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d009      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a17      	ldr	r2, [pc, #92]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d004      	beq.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a15      	ldr	r2, [pc, #84]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d10c      	bne.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40010400 	.word	0x40010400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40001800 	.word	0x40001800

08008e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e03d      	b.n	8008f20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e03f      	b.n	8008fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7f9 fdf4 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2224      	movs	r2, #36	; 0x24
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fddb 	bl	8009b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695a      	ldr	r2, [r3, #20]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b08a      	sub	sp, #40	; 0x28
 8008ff2:	af02      	add	r7, sp, #8
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b20      	cmp	r3, #32
 800900c:	d17c      	bne.n	8009108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <HAL_UART_Transmit+0x2c>
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e075      	b.n	800910a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_UART_Transmit+0x3e>
 8009028:	2302      	movs	r3, #2
 800902a:	e06e      	b.n	800910a <HAL_UART_Transmit+0x11c>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2221      	movs	r2, #33	; 0x21
 800903e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009042:	f7f9 fea5 	bl	8002d90 <HAL_GetTick>
 8009046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	88fa      	ldrh	r2, [r7, #6]
 800904c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905c:	d108      	bne.n	8009070 <HAL_UART_Transmit+0x82>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e003      	b.n	8009078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009080:	e02a      	b.n	80090d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2200      	movs	r2, #0
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 fb1f 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e036      	b.n	800910a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	3302      	adds	r3, #2
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e007      	b.n	80090ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	781a      	ldrb	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	3301      	adds	r3, #1
 80090c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1cf      	bne.n	8009082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2200      	movs	r2, #0
 80090ea:	2140      	movs	r1, #64	; 0x40
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 faef 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e006      	b.n	800910a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e000      	b.n	800910a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	4613      	mov	r3, r2
 800911e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b20      	cmp	r3, #32
 800912a:	d11d      	bne.n	8009168 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <HAL_UART_Receive_IT+0x26>
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e016      	b.n	800916a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_UART_Receive_IT+0x38>
 8009146:	2302      	movs	r3, #2
 8009148:	e00f      	b.n	800916a <HAL_UART_Receive_IT+0x58>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009158:	88fb      	ldrh	r3, [r7, #6]
 800915a:	461a      	mov	r2, r3
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fb24 	bl	80097ac <UART_Start_Receive_IT>
 8009164:	4603      	mov	r3, r0
 8009166:	e000      	b.n	800916a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009168:	2302      	movs	r3, #2
  }
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b0ba      	sub	sp, #232	; 0xe8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800919a:	2300      	movs	r3, #0
 800919c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80091b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10f      	bne.n	80091da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d009      	beq.n	80091da <HAL_UART_IRQHandler+0x66>
 80091c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fc03 	bl	80099de <UART_Receive_IT>
      return;
 80091d8:	e256      	b.n	8009688 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80de 	beq.w	80093a0 <HAL_UART_IRQHandler+0x22c>
 80091e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d106      	bne.n	80091fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80d1 	beq.w	80093a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <HAL_UART_IRQHandler+0xae>
 800920a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800920e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f043 0201 	orr.w	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <HAL_UART_IRQHandler+0xd2>
 800922e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f043 0202 	orr.w	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <HAL_UART_IRQHandler+0xf6>
 8009252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	f043 0204 	orr.w	r2, r3, #4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	f003 0308 	and.w	r3, r3, #8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <HAL_UART_IRQHandler+0x126>
 8009276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f043 0208 	orr.w	r2, r3, #8
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 81ed 	beq.w	800967e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d008      	beq.n	80092c2 <HAL_UART_IRQHandler+0x14e>
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fb8e 	bl	80099de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	bf0c      	ite	eq
 80092d0:	2301      	moveq	r3, #1
 80092d2:	2300      	movne	r3, #0
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d103      	bne.n	80092ee <HAL_UART_IRQHandler+0x17a>
 80092e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d04f      	beq.n	800938e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa96 	bl	8009820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b40      	cmp	r3, #64	; 0x40
 8009300:	d141      	bne.n	8009386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3314      	adds	r3, #20
 8009308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800931c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3314      	adds	r3, #20
 800932a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800932e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800933a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1d9      	bne.n	8009302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	2b00      	cmp	r3, #0
 8009354:	d013      	beq.n	800937e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	4a7d      	ldr	r2, [pc, #500]	; (8009550 <HAL_UART_IRQHandler+0x3dc>)
 800935c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	4618      	mov	r0, r3
 8009364:	f7f9 ffe4 	bl	8003330 <HAL_DMA_Abort_IT>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937c:	e00e      	b.n	800939c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f990 	bl	80096a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	e00a      	b.n	800939c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f98c 	bl	80096a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938c:	e006      	b.n	800939c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f988 	bl	80096a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800939a:	e170      	b.n	800967e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939c:	bf00      	nop
    return;
 800939e:	e16e      	b.n	800967e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	f040 814a 	bne.w	800963e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8143 	beq.w	800963e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 813c 	beq.w	800963e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	60bb      	str	r3, [r7, #8]
 80093da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b40      	cmp	r3, #64	; 0x40
 80093e8:	f040 80b4 	bne.w	8009554 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8140 	beq.w	8009682 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800940a:	429a      	cmp	r2, r3
 800940c:	f080 8139 	bcs.w	8009682 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009422:	f000 8088 	beq.w	8009536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	330c      	adds	r3, #12
 800942c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800943c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800945e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800946a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1d9      	bne.n	8009426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3314      	adds	r3, #20
 8009478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009484:	f023 0301 	bic.w	r3, r3, #1
 8009488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3314      	adds	r3, #20
 8009492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800949a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800949e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e1      	bne.n	8009472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3314      	adds	r3, #20
 80094b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3314      	adds	r3, #20
 80094ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e3      	bne.n	80094ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	330c      	adds	r3, #12
 80094fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009506:	f023 0310 	bic.w	r3, r3, #16
 800950a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	330c      	adds	r3, #12
 8009514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009518:	65ba      	str	r2, [r7, #88]	; 0x58
 800951a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800951e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e3      	bne.n	80094f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	4618      	mov	r0, r3
 8009532:	f7f9 fe8d 	bl	8003250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800953e:	b29b      	uxth	r3, r3
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8b6 	bl	80096b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800954c:	e099      	b.n	8009682 <HAL_UART_IRQHandler+0x50e>
 800954e:	bf00      	nop
 8009550:	080098e7 	.word	0x080098e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800955c:	b29b      	uxth	r3, r3
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 808b 	beq.w	8009686 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8086 	beq.w	8009686 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800958a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800959e:	647a      	str	r2, [r7, #68]	; 0x44
 80095a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3314      	adds	r3, #20
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	623b      	str	r3, [r7, #32]
   return(result);
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	f023 0301 	bic.w	r3, r3, #1
 80095c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3314      	adds	r3, #20
 80095d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095d6:	633a      	str	r2, [r7, #48]	; 0x30
 80095d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e3      	bne.n	80095b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	330c      	adds	r3, #12
 80095fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	e853 3f00 	ldrex	r3, [r3]
 8009606:	60fb      	str	r3, [r7, #12]
   return(result);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0310 	bic.w	r3, r3, #16
 800960e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	330c      	adds	r3, #12
 8009618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800961c:	61fa      	str	r2, [r7, #28]
 800961e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	69b9      	ldr	r1, [r7, #24]
 8009622:	69fa      	ldr	r2, [r7, #28]
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	617b      	str	r3, [r7, #20]
   return(result);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e3      	bne.n	80095f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f83e 	bl	80096b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800963c:	e023      	b.n	8009686 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800963e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <HAL_UART_IRQHandler+0x4ea>
 800964a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f959 	bl	800990e <UART_Transmit_IT>
    return;
 800965c:	e014      	b.n	8009688 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00e      	beq.n	8009688 <HAL_UART_IRQHandler+0x514>
 800966a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009672:	2b00      	cmp	r3, #0
 8009674:	d008      	beq.n	8009688 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f999 	bl	80099ae <UART_EndTransmit_IT>
    return;
 800967c:	e004      	b.n	8009688 <HAL_UART_IRQHandler+0x514>
    return;
 800967e:	bf00      	nop
 8009680:	e002      	b.n	8009688 <HAL_UART_IRQHandler+0x514>
      return;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <HAL_UART_IRQHandler+0x514>
      return;
 8009686:	bf00      	nop
  }
}
 8009688:	37e8      	adds	r7, #232	; 0xe8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop

08009690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b090      	sub	sp, #64	; 0x40
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4613      	mov	r3, r2
 80096de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e0:	e050      	b.n	8009784 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d04c      	beq.n	8009784 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <UART_WaitOnFlagUntilTimeout+0x30>
 80096f0:	f7f9 fb4e 	bl	8002d90 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d241      	bcs.n	8009784 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009720:	637a      	str	r2, [r7, #52]	; 0x34
 8009722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009728:	e841 2300 	strex	r3, r2, [r1]
 800972c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e5      	bne.n	8009700 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3314      	adds	r3, #20
 800973a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	e853 3f00 	ldrex	r3, [r3]
 8009742:	613b      	str	r3, [r7, #16]
   return(result);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f023 0301 	bic.w	r3, r3, #1
 800974a:	63bb      	str	r3, [r7, #56]	; 0x38
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009754:	623a      	str	r2, [r7, #32]
 8009756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009758:	69f9      	ldr	r1, [r7, #28]
 800975a:	6a3a      	ldr	r2, [r7, #32]
 800975c:	e841 2300 	strex	r3, r2, [r1]
 8009760:	61bb      	str	r3, [r7, #24]
   return(result);
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e5      	bne.n	8009734 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e00f      	b.n	80097a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4013      	ands	r3, r2
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	429a      	cmp	r2, r3
 8009792:	bf0c      	ite	eq
 8009794:	2301      	moveq	r3, #1
 8009796:	2300      	movne	r3, #0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	461a      	mov	r2, r3
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d09f      	beq.n	80096e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3740      	adds	r7, #64	; 0x40
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	88fa      	ldrh	r2, [r7, #6]
 80097c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	88fa      	ldrh	r2, [r7, #6]
 80097ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2222      	movs	r2, #34	; 0x22
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0201 	orr.w	r2, r2, #1
 8009800:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0220 	orr.w	r2, r2, #32
 8009810:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b095      	sub	sp, #84	; 0x54
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	330c      	adds	r3, #12
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009848:	643a      	str	r2, [r7, #64]	; 0x40
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800984e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e5      	bne.n	8009828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	61fb      	str	r3, [r7, #28]
   return(result);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e5      	bne.n	800985c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	2b01      	cmp	r3, #1
 8009896:	d119      	bne.n	80098cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098b8:	61ba      	str	r2, [r7, #24]
 80098ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6979      	ldr	r1, [r7, #20]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	613b      	str	r3, [r7, #16]
   return(result);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e5      	bne.n	8009898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80098da:	bf00      	nop
 80098dc:	3754      	adds	r7, #84	; 0x54
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff fecf 	bl	80096a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b21      	cmp	r3, #33	; 0x21
 8009920:	d13e      	bne.n	80099a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992a:	d114      	bne.n	8009956 <UART_Transmit_IT+0x48>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d110      	bne.n	8009956 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	621a      	str	r2, [r3, #32]
 8009954:	e008      	b.n	8009968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	6211      	str	r1, [r2, #32]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4619      	mov	r1, r3
 8009976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10f      	bne.n	800999c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800998a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800999a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff fe5e 	bl	8009690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b08c      	sub	sp, #48	; 0x30
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b22      	cmp	r3, #34	; 0x22
 80099f0:	f040 80ab 	bne.w	8009b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099fc:	d117      	bne.n	8009a2e <UART_Receive_IT+0x50>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d113      	bne.n	8009a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	1c9a      	adds	r2, r3, #2
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a2c:	e026      	b.n	8009a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009a34:	2300      	movs	r3, #0
 8009a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a40:	d007      	beq.n	8009a52 <UART_Receive_IT+0x74>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10a      	bne.n	8009a60 <UART_Receive_IT+0x82>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e008      	b.n	8009a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d15a      	bne.n	8009b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0220 	bic.w	r2, r2, #32
 8009a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695a      	ldr	r2, [r3, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0201 	bic.w	r2, r2, #1
 8009abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d135      	bne.n	8009b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	330c      	adds	r3, #12
 8009adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	e853 3f00 	ldrex	r3, [r3]
 8009ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f023 0310 	bic.w	r3, r3, #16
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af6:	623a      	str	r2, [r7, #32]
 8009af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afa:	69f9      	ldr	r1, [r7, #28]
 8009afc:	6a3a      	ldr	r2, [r7, #32]
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e5      	bne.n	8009ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d10a      	bne.n	8009b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fdbf 	bl	80096b8 <HAL_UARTEx_RxEventCallback>
 8009b3a:	e002      	b.n	8009b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7f7 fe9b 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e002      	b.n	8009b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e000      	b.n	8009b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009b4a:	2302      	movs	r3, #2
  }
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3730      	adds	r7, #48	; 0x30
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	b09f      	sub	sp, #124	; 0x7c
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6a:	68d9      	ldr	r1, [r3, #12]
 8009b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	ea40 0301 	orr.w	r3, r0, r1
 8009b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	431a      	orrs	r2, r3
 8009b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b98:	f021 010c 	bic.w	r1, r1, #12
 8009b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb2:	6999      	ldr	r1, [r3, #24]
 8009bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	ea40 0301 	orr.w	r3, r0, r1
 8009bbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4bc5      	ldr	r3, [pc, #788]	; (8009ed8 <UART_SetConfig+0x384>)
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d004      	beq.n	8009bd2 <UART_SetConfig+0x7e>
 8009bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	4bc3      	ldr	r3, [pc, #780]	; (8009edc <UART_SetConfig+0x388>)
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d103      	bne.n	8009bda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bd2:	f7fc fd83 	bl	80066dc <HAL_RCC_GetPCLK2Freq>
 8009bd6:	6778      	str	r0, [r7, #116]	; 0x74
 8009bd8:	e002      	b.n	8009be0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bda:	f7fc fd6b 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 8009bde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be8:	f040 80b6 	bne.w	8009d58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bee:	461c      	mov	r4, r3
 8009bf0:	f04f 0500 	mov.w	r5, #0
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	1891      	adds	r1, r2, r2
 8009bfa:	6439      	str	r1, [r7, #64]	; 0x40
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8009c00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c04:	1912      	adds	r2, r2, r4
 8009c06:	eb45 0303 	adc.w	r3, r5, r3
 8009c0a:	f04f 0000 	mov.w	r0, #0
 8009c0e:	f04f 0100 	mov.w	r1, #0
 8009c12:	00d9      	lsls	r1, r3, #3
 8009c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c18:	00d0      	lsls	r0, r2, #3
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	1911      	adds	r1, r2, r4
 8009c20:	6639      	str	r1, [r7, #96]	; 0x60
 8009c22:	416b      	adcs	r3, r5
 8009c24:	667b      	str	r3, [r7, #100]	; 0x64
 8009c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	1891      	adds	r1, r2, r2
 8009c32:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c34:	415b      	adcs	r3, r3
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009c40:	f7f6 ffe2 	bl	8000c08 <__aeabi_uldivmod>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4ba5      	ldr	r3, [pc, #660]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	011e      	lsls	r6, r3, #4
 8009c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c54:	461c      	mov	r4, r3
 8009c56:	f04f 0500 	mov.w	r5, #0
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	1891      	adds	r1, r2, r2
 8009c60:	6339      	str	r1, [r7, #48]	; 0x30
 8009c62:	415b      	adcs	r3, r3
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
 8009c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c6a:	1912      	adds	r2, r2, r4
 8009c6c:	eb45 0303 	adc.w	r3, r5, r3
 8009c70:	f04f 0000 	mov.w	r0, #0
 8009c74:	f04f 0100 	mov.w	r1, #0
 8009c78:	00d9      	lsls	r1, r3, #3
 8009c7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c7e:	00d0      	lsls	r0, r2, #3
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	1911      	adds	r1, r2, r4
 8009c86:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c88:	416b      	adcs	r3, r5
 8009c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	461a      	mov	r2, r3
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	1891      	adds	r1, r2, r2
 8009c98:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c9a:	415b      	adcs	r3, r3
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ca2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ca6:	f7f6 ffaf 	bl	8000c08 <__aeabi_uldivmod>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4b8c      	ldr	r3, [pc, #560]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	2164      	movs	r1, #100	; 0x64
 8009cb8:	fb01 f303 	mul.w	r3, r1, r3
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	3332      	adds	r3, #50	; 0x32
 8009cc2:	4a87      	ldr	r2, [pc, #540]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cd0:	441e      	add	r6, r3
 8009cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f04f 0100 	mov.w	r1, #0
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	1894      	adds	r4, r2, r2
 8009ce0:	623c      	str	r4, [r7, #32]
 8009ce2:	415b      	adcs	r3, r3
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cea:	1812      	adds	r2, r2, r0
 8009cec:	eb41 0303 	adc.w	r3, r1, r3
 8009cf0:	f04f 0400 	mov.w	r4, #0
 8009cf4:	f04f 0500 	mov.w	r5, #0
 8009cf8:	00dd      	lsls	r5, r3, #3
 8009cfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009cfe:	00d4      	lsls	r4, r2, #3
 8009d00:	4622      	mov	r2, r4
 8009d02:	462b      	mov	r3, r5
 8009d04:	1814      	adds	r4, r2, r0
 8009d06:	653c      	str	r4, [r7, #80]	; 0x50
 8009d08:	414b      	adcs	r3, r1
 8009d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	1891      	adds	r1, r2, r2
 8009d18:	61b9      	str	r1, [r7, #24]
 8009d1a:	415b      	adcs	r3, r3
 8009d1c:	61fb      	str	r3, [r7, #28]
 8009d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009d26:	f7f6 ff6f 	bl	8000c08 <__aeabi_uldivmod>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4b6c      	ldr	r3, [pc, #432]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009d30:	fba3 1302 	umull	r1, r3, r3, r2
 8009d34:	095b      	lsrs	r3, r3, #5
 8009d36:	2164      	movs	r1, #100	; 0x64
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	3332      	adds	r3, #50	; 0x32
 8009d42:	4a67      	ldr	r2, [pc, #412]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009d44:	fba2 2303 	umull	r2, r3, r2, r3
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	f003 0207 	and.w	r2, r3, #7
 8009d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4432      	add	r2, r6
 8009d54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d56:	e0b9      	b.n	8009ecc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d5a:	461c      	mov	r4, r3
 8009d5c:	f04f 0500 	mov.w	r5, #0
 8009d60:	4622      	mov	r2, r4
 8009d62:	462b      	mov	r3, r5
 8009d64:	1891      	adds	r1, r2, r2
 8009d66:	6139      	str	r1, [r7, #16]
 8009d68:	415b      	adcs	r3, r3
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d70:	1912      	adds	r2, r2, r4
 8009d72:	eb45 0303 	adc.w	r3, r5, r3
 8009d76:	f04f 0000 	mov.w	r0, #0
 8009d7a:	f04f 0100 	mov.w	r1, #0
 8009d7e:	00d9      	lsls	r1, r3, #3
 8009d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d84:	00d0      	lsls	r0, r2, #3
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	eb12 0804 	adds.w	r8, r2, r4
 8009d8e:	eb43 0905 	adc.w	r9, r3, r5
 8009d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f04f 0100 	mov.w	r1, #0
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	008b      	lsls	r3, r1, #2
 8009da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009daa:	0082      	lsls	r2, r0, #2
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 ff2a 	bl	8000c08 <__aeabi_uldivmod>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4b49      	ldr	r3, [pc, #292]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009dba:	fba3 2302 	umull	r2, r3, r3, r2
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	011e      	lsls	r6, r3, #4
 8009dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f04f 0100 	mov.w	r1, #0
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	1894      	adds	r4, r2, r2
 8009dd0:	60bc      	str	r4, [r7, #8]
 8009dd2:	415b      	adcs	r3, r3
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dda:	1812      	adds	r2, r2, r0
 8009ddc:	eb41 0303 	adc.w	r3, r1, r3
 8009de0:	f04f 0400 	mov.w	r4, #0
 8009de4:	f04f 0500 	mov.w	r5, #0
 8009de8:	00dd      	lsls	r5, r3, #3
 8009dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009dee:	00d4      	lsls	r4, r2, #3
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	1814      	adds	r4, r2, r0
 8009df6:	64bc      	str	r4, [r7, #72]	; 0x48
 8009df8:	414b      	adcs	r3, r1
 8009dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f04f 0100 	mov.w	r1, #0
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	008b      	lsls	r3, r1, #2
 8009e10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e14:	0082      	lsls	r2, r0, #2
 8009e16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009e1a:	f7f6 fef5 	bl	8000c08 <__aeabi_uldivmod>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4b2f      	ldr	r3, [pc, #188]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009e24:	fba3 1302 	umull	r1, r3, r3, r2
 8009e28:	095b      	lsrs	r3, r3, #5
 8009e2a:	2164      	movs	r1, #100	; 0x64
 8009e2c:	fb01 f303 	mul.w	r3, r1, r3
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	3332      	adds	r3, #50	; 0x32
 8009e36:	4a2a      	ldr	r2, [pc, #168]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009e38:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3c:	095b      	lsrs	r3, r3, #5
 8009e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e42:	441e      	add	r6, r3
 8009e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e46:	4618      	mov	r0, r3
 8009e48:	f04f 0100 	mov.w	r1, #0
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	1894      	adds	r4, r2, r2
 8009e52:	603c      	str	r4, [r7, #0]
 8009e54:	415b      	adcs	r3, r3
 8009e56:	607b      	str	r3, [r7, #4]
 8009e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e5c:	1812      	adds	r2, r2, r0
 8009e5e:	eb41 0303 	adc.w	r3, r1, r3
 8009e62:	f04f 0400 	mov.w	r4, #0
 8009e66:	f04f 0500 	mov.w	r5, #0
 8009e6a:	00dd      	lsls	r5, r3, #3
 8009e6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e70:	00d4      	lsls	r4, r2, #3
 8009e72:	4622      	mov	r2, r4
 8009e74:	462b      	mov	r3, r5
 8009e76:	eb12 0a00 	adds.w	sl, r2, r0
 8009e7a:	eb43 0b01 	adc.w	fp, r3, r1
 8009e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	f04f 0200 	mov.w	r2, #0
 8009e8c:	f04f 0300 	mov.w	r3, #0
 8009e90:	008b      	lsls	r3, r1, #2
 8009e92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e96:	0082      	lsls	r2, r0, #2
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	f7f6 feb4 	bl	8000c08 <__aeabi_uldivmod>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8009eaa:	095b      	lsrs	r3, r3, #5
 8009eac:	2164      	movs	r1, #100	; 0x64
 8009eae:	fb01 f303 	mul.w	r3, r1, r3
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	3332      	adds	r3, #50	; 0x32
 8009eb8:	4a09      	ldr	r2, [pc, #36]	; (8009ee0 <UART_SetConfig+0x38c>)
 8009eba:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	f003 020f 	and.w	r2, r3, #15
 8009ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4432      	add	r2, r6
 8009eca:	609a      	str	r2, [r3, #8]
}
 8009ecc:	bf00      	nop
 8009ece:	377c      	adds	r7, #124	; 0x7c
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40011000 	.word	0x40011000
 8009edc:	40011400 	.word	0x40011400
 8009ee0:	51eb851f 	.word	0x51eb851f

08009ee4 <__errno>:
 8009ee4:	4b01      	ldr	r3, [pc, #4]	; (8009eec <__errno+0x8>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	20000010 	.word	0x20000010

08009ef0 <__libc_init_array>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	4d0d      	ldr	r5, [pc, #52]	; (8009f28 <__libc_init_array+0x38>)
 8009ef4:	4c0d      	ldr	r4, [pc, #52]	; (8009f2c <__libc_init_array+0x3c>)
 8009ef6:	1b64      	subs	r4, r4, r5
 8009ef8:	10a4      	asrs	r4, r4, #2
 8009efa:	2600      	movs	r6, #0
 8009efc:	42a6      	cmp	r6, r4
 8009efe:	d109      	bne.n	8009f14 <__libc_init_array+0x24>
 8009f00:	4d0b      	ldr	r5, [pc, #44]	; (8009f30 <__libc_init_array+0x40>)
 8009f02:	4c0c      	ldr	r4, [pc, #48]	; (8009f34 <__libc_init_array+0x44>)
 8009f04:	f002 fd0a 	bl	800c91c <_init>
 8009f08:	1b64      	subs	r4, r4, r5
 8009f0a:	10a4      	asrs	r4, r4, #2
 8009f0c:	2600      	movs	r6, #0
 8009f0e:	42a6      	cmp	r6, r4
 8009f10:	d105      	bne.n	8009f1e <__libc_init_array+0x2e>
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f18:	4798      	blx	r3
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	e7ee      	b.n	8009efc <__libc_init_array+0xc>
 8009f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f22:	4798      	blx	r3
 8009f24:	3601      	adds	r6, #1
 8009f26:	e7f2      	b.n	8009f0e <__libc_init_array+0x1e>
 8009f28:	0800cd94 	.word	0x0800cd94
 8009f2c:	0800cd94 	.word	0x0800cd94
 8009f30:	0800cd94 	.word	0x0800cd94
 8009f34:	0800cd98 	.word	0x0800cd98

08009f38 <memset>:
 8009f38:	4402      	add	r2, r0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d100      	bne.n	8009f42 <memset+0xa>
 8009f40:	4770      	bx	lr
 8009f42:	f803 1b01 	strb.w	r1, [r3], #1
 8009f46:	e7f9      	b.n	8009f3c <memset+0x4>

08009f48 <__cvt>:
 8009f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	ec55 4b10 	vmov	r4, r5, d0
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	460e      	mov	r6, r1
 8009f54:	4619      	mov	r1, r3
 8009f56:	462b      	mov	r3, r5
 8009f58:	bfbb      	ittet	lt
 8009f5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f5e:	461d      	movlt	r5, r3
 8009f60:	2300      	movge	r3, #0
 8009f62:	232d      	movlt	r3, #45	; 0x2d
 8009f64:	700b      	strb	r3, [r1, #0]
 8009f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f6c:	4691      	mov	r9, r2
 8009f6e:	f023 0820 	bic.w	r8, r3, #32
 8009f72:	bfbc      	itt	lt
 8009f74:	4622      	movlt	r2, r4
 8009f76:	4614      	movlt	r4, r2
 8009f78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f7c:	d005      	beq.n	8009f8a <__cvt+0x42>
 8009f7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f82:	d100      	bne.n	8009f86 <__cvt+0x3e>
 8009f84:	3601      	adds	r6, #1
 8009f86:	2102      	movs	r1, #2
 8009f88:	e000      	b.n	8009f8c <__cvt+0x44>
 8009f8a:	2103      	movs	r1, #3
 8009f8c:	ab03      	add	r3, sp, #12
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	ab02      	add	r3, sp, #8
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	ec45 4b10 	vmov	d0, r4, r5
 8009f98:	4653      	mov	r3, sl
 8009f9a:	4632      	mov	r2, r6
 8009f9c:	f000 fce4 	bl	800a968 <_dtoa_r>
 8009fa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	d102      	bne.n	8009fae <__cvt+0x66>
 8009fa8:	f019 0f01 	tst.w	r9, #1
 8009fac:	d022      	beq.n	8009ff4 <__cvt+0xac>
 8009fae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fb2:	eb07 0906 	add.w	r9, r7, r6
 8009fb6:	d110      	bne.n	8009fda <__cvt+0x92>
 8009fb8:	783b      	ldrb	r3, [r7, #0]
 8009fba:	2b30      	cmp	r3, #48	; 0x30
 8009fbc:	d10a      	bne.n	8009fd4 <__cvt+0x8c>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7f6 fdaf 	bl	8000b28 <__aeabi_dcmpeq>
 8009fca:	b918      	cbnz	r0, 8009fd4 <__cvt+0x8c>
 8009fcc:	f1c6 0601 	rsb	r6, r6, #1
 8009fd0:	f8ca 6000 	str.w	r6, [sl]
 8009fd4:	f8da 3000 	ldr.w	r3, [sl]
 8009fd8:	4499      	add	r9, r3
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f7f6 fda1 	bl	8000b28 <__aeabi_dcmpeq>
 8009fe6:	b108      	cbz	r0, 8009fec <__cvt+0xa4>
 8009fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fec:	2230      	movs	r2, #48	; 0x30
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	454b      	cmp	r3, r9
 8009ff2:	d307      	bcc.n	800a004 <__cvt+0xbc>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ff8:	1bdb      	subs	r3, r3, r7
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	b004      	add	sp, #16
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	1c59      	adds	r1, r3, #1
 800a006:	9103      	str	r1, [sp, #12]
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	e7f0      	b.n	8009fee <__cvt+0xa6>

0800a00c <__exponent>:
 800a00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a00e:	4603      	mov	r3, r0
 800a010:	2900      	cmp	r1, #0
 800a012:	bfb8      	it	lt
 800a014:	4249      	neglt	r1, r1
 800a016:	f803 2b02 	strb.w	r2, [r3], #2
 800a01a:	bfb4      	ite	lt
 800a01c:	222d      	movlt	r2, #45	; 0x2d
 800a01e:	222b      	movge	r2, #43	; 0x2b
 800a020:	2909      	cmp	r1, #9
 800a022:	7042      	strb	r2, [r0, #1]
 800a024:	dd2a      	ble.n	800a07c <__exponent+0x70>
 800a026:	f10d 0407 	add.w	r4, sp, #7
 800a02a:	46a4      	mov	ip, r4
 800a02c:	270a      	movs	r7, #10
 800a02e:	46a6      	mov	lr, r4
 800a030:	460a      	mov	r2, r1
 800a032:	fb91 f6f7 	sdiv	r6, r1, r7
 800a036:	fb07 1516 	mls	r5, r7, r6, r1
 800a03a:	3530      	adds	r5, #48	; 0x30
 800a03c:	2a63      	cmp	r2, #99	; 0x63
 800a03e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a042:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a046:	4631      	mov	r1, r6
 800a048:	dcf1      	bgt.n	800a02e <__exponent+0x22>
 800a04a:	3130      	adds	r1, #48	; 0x30
 800a04c:	f1ae 0502 	sub.w	r5, lr, #2
 800a050:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a054:	1c44      	adds	r4, r0, #1
 800a056:	4629      	mov	r1, r5
 800a058:	4561      	cmp	r1, ip
 800a05a:	d30a      	bcc.n	800a072 <__exponent+0x66>
 800a05c:	f10d 0209 	add.w	r2, sp, #9
 800a060:	eba2 020e 	sub.w	r2, r2, lr
 800a064:	4565      	cmp	r5, ip
 800a066:	bf88      	it	hi
 800a068:	2200      	movhi	r2, #0
 800a06a:	4413      	add	r3, r2
 800a06c:	1a18      	subs	r0, r3, r0
 800a06e:	b003      	add	sp, #12
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a076:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a07a:	e7ed      	b.n	800a058 <__exponent+0x4c>
 800a07c:	2330      	movs	r3, #48	; 0x30
 800a07e:	3130      	adds	r1, #48	; 0x30
 800a080:	7083      	strb	r3, [r0, #2]
 800a082:	70c1      	strb	r1, [r0, #3]
 800a084:	1d03      	adds	r3, r0, #4
 800a086:	e7f1      	b.n	800a06c <__exponent+0x60>

0800a088 <_printf_float>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	ed2d 8b02 	vpush	{d8}
 800a090:	b08d      	sub	sp, #52	; 0x34
 800a092:	460c      	mov	r4, r1
 800a094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a098:	4616      	mov	r6, r2
 800a09a:	461f      	mov	r7, r3
 800a09c:	4605      	mov	r5, r0
 800a09e:	f001 fb45 	bl	800b72c <_localeconv_r>
 800a0a2:	f8d0 a000 	ldr.w	sl, [r0]
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	f7f6 f8bc 	bl	8000224 <strlen>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a0b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0bc:	3307      	adds	r3, #7
 800a0be:	f023 0307 	bic.w	r3, r3, #7
 800a0c2:	f103 0208 	add.w	r2, r3, #8
 800a0c6:	f8c8 2000 	str.w	r2, [r8]
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0da:	9307      	str	r3, [sp, #28]
 800a0dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0e0:	ee08 0a10 	vmov	s16, r0
 800a0e4:	4b9f      	ldr	r3, [pc, #636]	; (800a364 <_printf_float+0x2dc>)
 800a0e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ee:	f7f6 fd4d 	bl	8000b8c <__aeabi_dcmpun>
 800a0f2:	bb88      	cbnz	r0, 800a158 <_printf_float+0xd0>
 800a0f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0f8:	4b9a      	ldr	r3, [pc, #616]	; (800a364 <_printf_float+0x2dc>)
 800a0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fe:	f7f6 fd27 	bl	8000b50 <__aeabi_dcmple>
 800a102:	bb48      	cbnz	r0, 800a158 <_printf_float+0xd0>
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4640      	mov	r0, r8
 800a10a:	4649      	mov	r1, r9
 800a10c:	f7f6 fd16 	bl	8000b3c <__aeabi_dcmplt>
 800a110:	b110      	cbz	r0, 800a118 <_printf_float+0x90>
 800a112:	232d      	movs	r3, #45	; 0x2d
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a118:	4b93      	ldr	r3, [pc, #588]	; (800a368 <_printf_float+0x2e0>)
 800a11a:	4894      	ldr	r0, [pc, #592]	; (800a36c <_printf_float+0x2e4>)
 800a11c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a120:	bf94      	ite	ls
 800a122:	4698      	movls	r8, r3
 800a124:	4680      	movhi	r8, r0
 800a126:	2303      	movs	r3, #3
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	9b05      	ldr	r3, [sp, #20]
 800a12c:	f023 0204 	bic.w	r2, r3, #4
 800a130:	6022      	str	r2, [r4, #0]
 800a132:	f04f 0900 	mov.w	r9, #0
 800a136:	9700      	str	r7, [sp, #0]
 800a138:	4633      	mov	r3, r6
 800a13a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a13c:	4621      	mov	r1, r4
 800a13e:	4628      	mov	r0, r5
 800a140:	f000 f9d8 	bl	800a4f4 <_printf_common>
 800a144:	3001      	adds	r0, #1
 800a146:	f040 8090 	bne.w	800a26a <_printf_float+0x1e2>
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	b00d      	add	sp, #52	; 0x34
 800a150:	ecbd 8b02 	vpop	{d8}
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	4642      	mov	r2, r8
 800a15a:	464b      	mov	r3, r9
 800a15c:	4640      	mov	r0, r8
 800a15e:	4649      	mov	r1, r9
 800a160:	f7f6 fd14 	bl	8000b8c <__aeabi_dcmpun>
 800a164:	b140      	cbz	r0, 800a178 <_printf_float+0xf0>
 800a166:	464b      	mov	r3, r9
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfbc      	itt	lt
 800a16c:	232d      	movlt	r3, #45	; 0x2d
 800a16e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a172:	487f      	ldr	r0, [pc, #508]	; (800a370 <_printf_float+0x2e8>)
 800a174:	4b7f      	ldr	r3, [pc, #508]	; (800a374 <_printf_float+0x2ec>)
 800a176:	e7d1      	b.n	800a11c <_printf_float+0x94>
 800a178:	6863      	ldr	r3, [r4, #4]
 800a17a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a17e:	9206      	str	r2, [sp, #24]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	d13f      	bne.n	800a204 <_printf_float+0x17c>
 800a184:	2306      	movs	r3, #6
 800a186:	6063      	str	r3, [r4, #4]
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	6861      	ldr	r1, [r4, #4]
 800a18c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a190:	2300      	movs	r3, #0
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	ab0a      	add	r3, sp, #40	; 0x28
 800a196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a19a:	ab09      	add	r3, sp, #36	; 0x24
 800a19c:	ec49 8b10 	vmov	d0, r8, r9
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	6022      	str	r2, [r4, #0]
 800a1a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7ff fecd 	bl	8009f48 <__cvt>
 800a1ae:	9b06      	ldr	r3, [sp, #24]
 800a1b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1b2:	2b47      	cmp	r3, #71	; 0x47
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	d108      	bne.n	800a1ca <_printf_float+0x142>
 800a1b8:	1cc8      	adds	r0, r1, #3
 800a1ba:	db02      	blt.n	800a1c2 <_printf_float+0x13a>
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	4299      	cmp	r1, r3
 800a1c0:	dd41      	ble.n	800a246 <_printf_float+0x1be>
 800a1c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1c6:	fa5f fb8b 	uxtb.w	fp, fp
 800a1ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1ce:	d820      	bhi.n	800a212 <_printf_float+0x18a>
 800a1d0:	3901      	subs	r1, #1
 800a1d2:	465a      	mov	r2, fp
 800a1d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a1da:	f7ff ff17 	bl	800a00c <__exponent>
 800a1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e0:	1813      	adds	r3, r2, r0
 800a1e2:	2a01      	cmp	r2, #1
 800a1e4:	4681      	mov	r9, r0
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	dc02      	bgt.n	800a1f0 <_printf_float+0x168>
 800a1ea:	6822      	ldr	r2, [r4, #0]
 800a1ec:	07d2      	lsls	r2, r2, #31
 800a1ee:	d501      	bpl.n	800a1f4 <_printf_float+0x16c>
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d09c      	beq.n	800a136 <_printf_float+0xae>
 800a1fc:	232d      	movs	r3, #45	; 0x2d
 800a1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a202:	e798      	b.n	800a136 <_printf_float+0xae>
 800a204:	9a06      	ldr	r2, [sp, #24]
 800a206:	2a47      	cmp	r2, #71	; 0x47
 800a208:	d1be      	bne.n	800a188 <_printf_float+0x100>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1bc      	bne.n	800a188 <_printf_float+0x100>
 800a20e:	2301      	movs	r3, #1
 800a210:	e7b9      	b.n	800a186 <_printf_float+0xfe>
 800a212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a216:	d118      	bne.n	800a24a <_printf_float+0x1c2>
 800a218:	2900      	cmp	r1, #0
 800a21a:	6863      	ldr	r3, [r4, #4]
 800a21c:	dd0b      	ble.n	800a236 <_printf_float+0x1ae>
 800a21e:	6121      	str	r1, [r4, #16]
 800a220:	b913      	cbnz	r3, 800a228 <_printf_float+0x1a0>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	07d0      	lsls	r0, r2, #31
 800a226:	d502      	bpl.n	800a22e <_printf_float+0x1a6>
 800a228:	3301      	adds	r3, #1
 800a22a:	440b      	add	r3, r1
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a230:	f04f 0900 	mov.w	r9, #0
 800a234:	e7de      	b.n	800a1f4 <_printf_float+0x16c>
 800a236:	b913      	cbnz	r3, 800a23e <_printf_float+0x1b6>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	07d2      	lsls	r2, r2, #31
 800a23c:	d501      	bpl.n	800a242 <_printf_float+0x1ba>
 800a23e:	3302      	adds	r3, #2
 800a240:	e7f4      	b.n	800a22c <_printf_float+0x1a4>
 800a242:	2301      	movs	r3, #1
 800a244:	e7f2      	b.n	800a22c <_printf_float+0x1a4>
 800a246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24c:	4299      	cmp	r1, r3
 800a24e:	db05      	blt.n	800a25c <_printf_float+0x1d4>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	6121      	str	r1, [r4, #16]
 800a254:	07d8      	lsls	r0, r3, #31
 800a256:	d5ea      	bpl.n	800a22e <_printf_float+0x1a6>
 800a258:	1c4b      	adds	r3, r1, #1
 800a25a:	e7e7      	b.n	800a22c <_printf_float+0x1a4>
 800a25c:	2900      	cmp	r1, #0
 800a25e:	bfd4      	ite	le
 800a260:	f1c1 0202 	rsble	r2, r1, #2
 800a264:	2201      	movgt	r2, #1
 800a266:	4413      	add	r3, r2
 800a268:	e7e0      	b.n	800a22c <_printf_float+0x1a4>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	055a      	lsls	r2, r3, #21
 800a26e:	d407      	bmi.n	800a280 <_printf_float+0x1f8>
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	4642      	mov	r2, r8
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	d12c      	bne.n	800a2d8 <_printf_float+0x250>
 800a27e:	e764      	b.n	800a14a <_printf_float+0xc2>
 800a280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a284:	f240 80e0 	bls.w	800a448 <_printf_float+0x3c0>
 800a288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	f7f6 fc4a 	bl	8000b28 <__aeabi_dcmpeq>
 800a294:	2800      	cmp	r0, #0
 800a296:	d034      	beq.n	800a302 <_printf_float+0x27a>
 800a298:	4a37      	ldr	r2, [pc, #220]	; (800a378 <_printf_float+0x2f0>)
 800a29a:	2301      	movs	r3, #1
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f af51 	beq.w	800a14a <_printf_float+0xc2>
 800a2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	db02      	blt.n	800a2b6 <_printf_float+0x22e>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	07d8      	lsls	r0, r3, #31
 800a2b4:	d510      	bpl.n	800a2d8 <_printf_float+0x250>
 800a2b6:	ee18 3a10 	vmov	r3, s16
 800a2ba:	4652      	mov	r2, sl
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4628      	mov	r0, r5
 800a2c0:	47b8      	blx	r7
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f43f af41 	beq.w	800a14a <_printf_float+0xc2>
 800a2c8:	f04f 0800 	mov.w	r8, #0
 800a2cc:	f104 091a 	add.w	r9, r4, #26
 800a2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4543      	cmp	r3, r8
 800a2d6:	dc09      	bgt.n	800a2ec <_printf_float+0x264>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	079b      	lsls	r3, r3, #30
 800a2dc:	f100 8105 	bmi.w	800a4ea <_printf_float+0x462>
 800a2e0:	68e0      	ldr	r0, [r4, #12]
 800a2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e4:	4298      	cmp	r0, r3
 800a2e6:	bfb8      	it	lt
 800a2e8:	4618      	movlt	r0, r3
 800a2ea:	e730      	b.n	800a14e <_printf_float+0xc6>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	464a      	mov	r2, r9
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	47b8      	blx	r7
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	f43f af27 	beq.w	800a14a <_printf_float+0xc2>
 800a2fc:	f108 0801 	add.w	r8, r8, #1
 800a300:	e7e6      	b.n	800a2d0 <_printf_float+0x248>
 800a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a304:	2b00      	cmp	r3, #0
 800a306:	dc39      	bgt.n	800a37c <_printf_float+0x2f4>
 800a308:	4a1b      	ldr	r2, [pc, #108]	; (800a378 <_printf_float+0x2f0>)
 800a30a:	2301      	movs	r3, #1
 800a30c:	4631      	mov	r1, r6
 800a30e:	4628      	mov	r0, r5
 800a310:	47b8      	blx	r7
 800a312:	3001      	adds	r0, #1
 800a314:	f43f af19 	beq.w	800a14a <_printf_float+0xc2>
 800a318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a31c:	4313      	orrs	r3, r2
 800a31e:	d102      	bne.n	800a326 <_printf_float+0x29e>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	07d9      	lsls	r1, r3, #31
 800a324:	d5d8      	bpl.n	800a2d8 <_printf_float+0x250>
 800a326:	ee18 3a10 	vmov	r3, s16
 800a32a:	4652      	mov	r2, sl
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	f43f af09 	beq.w	800a14a <_printf_float+0xc2>
 800a338:	f04f 0900 	mov.w	r9, #0
 800a33c:	f104 0a1a 	add.w	sl, r4, #26
 800a340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a342:	425b      	negs	r3, r3
 800a344:	454b      	cmp	r3, r9
 800a346:	dc01      	bgt.n	800a34c <_printf_float+0x2c4>
 800a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34a:	e792      	b.n	800a272 <_printf_float+0x1ea>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4652      	mov	r2, sl
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f aef7 	beq.w	800a14a <_printf_float+0xc2>
 800a35c:	f109 0901 	add.w	r9, r9, #1
 800a360:	e7ee      	b.n	800a340 <_printf_float+0x2b8>
 800a362:	bf00      	nop
 800a364:	7fefffff 	.word	0x7fefffff
 800a368:	0800c9ac 	.word	0x0800c9ac
 800a36c:	0800c9b0 	.word	0x0800c9b0
 800a370:	0800c9b8 	.word	0x0800c9b8
 800a374:	0800c9b4 	.word	0x0800c9b4
 800a378:	0800c9bc 	.word	0x0800c9bc
 800a37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a380:	429a      	cmp	r2, r3
 800a382:	bfa8      	it	ge
 800a384:	461a      	movge	r2, r3
 800a386:	2a00      	cmp	r2, #0
 800a388:	4691      	mov	r9, r2
 800a38a:	dc37      	bgt.n	800a3fc <_printf_float+0x374>
 800a38c:	f04f 0b00 	mov.w	fp, #0
 800a390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a394:	f104 021a 	add.w	r2, r4, #26
 800a398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	eba3 0309 	sub.w	r3, r3, r9
 800a3a0:	455b      	cmp	r3, fp
 800a3a2:	dc33      	bgt.n	800a40c <_printf_float+0x384>
 800a3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	db3b      	blt.n	800a424 <_printf_float+0x39c>
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d438      	bmi.n	800a424 <_printf_float+0x39c>
 800a3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b4:	9b05      	ldr	r3, [sp, #20]
 800a3b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	eba2 0901 	sub.w	r9, r2, r1
 800a3be:	4599      	cmp	r9, r3
 800a3c0:	bfa8      	it	ge
 800a3c2:	4699      	movge	r9, r3
 800a3c4:	f1b9 0f00 	cmp.w	r9, #0
 800a3c8:	dc35      	bgt.n	800a436 <_printf_float+0x3ae>
 800a3ca:	f04f 0800 	mov.w	r8, #0
 800a3ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3d2:	f104 0a1a 	add.w	sl, r4, #26
 800a3d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	eba3 0309 	sub.w	r3, r3, r9
 800a3e0:	4543      	cmp	r3, r8
 800a3e2:	f77f af79 	ble.w	800a2d8 <_printf_float+0x250>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f43f aeaa 	beq.w	800a14a <_printf_float+0xc2>
 800a3f6:	f108 0801 	add.w	r8, r8, #1
 800a3fa:	e7ec      	b.n	800a3d6 <_printf_float+0x34e>
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	4631      	mov	r1, r6
 800a400:	4642      	mov	r2, r8
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	d1c0      	bne.n	800a38c <_printf_float+0x304>
 800a40a:	e69e      	b.n	800a14a <_printf_float+0xc2>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4631      	mov	r1, r6
 800a410:	4628      	mov	r0, r5
 800a412:	9205      	str	r2, [sp, #20]
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	f43f ae97 	beq.w	800a14a <_printf_float+0xc2>
 800a41c:	9a05      	ldr	r2, [sp, #20]
 800a41e:	f10b 0b01 	add.w	fp, fp, #1
 800a422:	e7b9      	b.n	800a398 <_printf_float+0x310>
 800a424:	ee18 3a10 	vmov	r3, s16
 800a428:	4652      	mov	r2, sl
 800a42a:	4631      	mov	r1, r6
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b8      	blx	r7
 800a430:	3001      	adds	r0, #1
 800a432:	d1be      	bne.n	800a3b2 <_printf_float+0x32a>
 800a434:	e689      	b.n	800a14a <_printf_float+0xc2>
 800a436:	9a05      	ldr	r2, [sp, #20]
 800a438:	464b      	mov	r3, r9
 800a43a:	4442      	add	r2, r8
 800a43c:	4631      	mov	r1, r6
 800a43e:	4628      	mov	r0, r5
 800a440:	47b8      	blx	r7
 800a442:	3001      	adds	r0, #1
 800a444:	d1c1      	bne.n	800a3ca <_printf_float+0x342>
 800a446:	e680      	b.n	800a14a <_printf_float+0xc2>
 800a448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a44a:	2a01      	cmp	r2, #1
 800a44c:	dc01      	bgt.n	800a452 <_printf_float+0x3ca>
 800a44e:	07db      	lsls	r3, r3, #31
 800a450:	d538      	bpl.n	800a4c4 <_printf_float+0x43c>
 800a452:	2301      	movs	r3, #1
 800a454:	4642      	mov	r2, r8
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	f43f ae74 	beq.w	800a14a <_printf_float+0xc2>
 800a462:	ee18 3a10 	vmov	r3, s16
 800a466:	4652      	mov	r2, sl
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	f43f ae6b 	beq.w	800a14a <_printf_float+0xc2>
 800a474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a478:	2200      	movs	r2, #0
 800a47a:	2300      	movs	r3, #0
 800a47c:	f7f6 fb54 	bl	8000b28 <__aeabi_dcmpeq>
 800a480:	b9d8      	cbnz	r0, 800a4ba <_printf_float+0x432>
 800a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a484:	f108 0201 	add.w	r2, r8, #1
 800a488:	3b01      	subs	r3, #1
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	d10e      	bne.n	800a4b2 <_printf_float+0x42a>
 800a494:	e659      	b.n	800a14a <_printf_float+0xc2>
 800a496:	2301      	movs	r3, #1
 800a498:	4652      	mov	r2, sl
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f43f ae52 	beq.w	800a14a <_printf_float+0xc2>
 800a4a6:	f108 0801 	add.w	r8, r8, #1
 800a4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	4543      	cmp	r3, r8
 800a4b0:	dcf1      	bgt.n	800a496 <_printf_float+0x40e>
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4b8:	e6dc      	b.n	800a274 <_printf_float+0x1ec>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	f104 0a1a 	add.w	sl, r4, #26
 800a4c2:	e7f2      	b.n	800a4aa <_printf_float+0x422>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	e7df      	b.n	800a48a <_printf_float+0x402>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f43f ae38 	beq.w	800a14a <_printf_float+0xc2>
 800a4da:	f108 0801 	add.w	r8, r8, #1
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4e2:	1a5b      	subs	r3, r3, r1
 800a4e4:	4543      	cmp	r3, r8
 800a4e6:	dcf0      	bgt.n	800a4ca <_printf_float+0x442>
 800a4e8:	e6fa      	b.n	800a2e0 <_printf_float+0x258>
 800a4ea:	f04f 0800 	mov.w	r8, #0
 800a4ee:	f104 0919 	add.w	r9, r4, #25
 800a4f2:	e7f4      	b.n	800a4de <_printf_float+0x456>

0800a4f4 <_printf_common>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	4699      	mov	r9, r3
 800a4fc:	688a      	ldr	r2, [r1, #8]
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a504:	4293      	cmp	r3, r2
 800a506:	bfb8      	it	lt
 800a508:	4613      	movlt	r3, r2
 800a50a:	6033      	str	r3, [r6, #0]
 800a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a510:	4607      	mov	r7, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b10a      	cbz	r2, 800a51a <_printf_common+0x26>
 800a516:	3301      	adds	r3, #1
 800a518:	6033      	str	r3, [r6, #0]
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	0699      	lsls	r1, r3, #26
 800a51e:	bf42      	ittt	mi
 800a520:	6833      	ldrmi	r3, [r6, #0]
 800a522:	3302      	addmi	r3, #2
 800a524:	6033      	strmi	r3, [r6, #0]
 800a526:	6825      	ldr	r5, [r4, #0]
 800a528:	f015 0506 	ands.w	r5, r5, #6
 800a52c:	d106      	bne.n	800a53c <_printf_common+0x48>
 800a52e:	f104 0a19 	add.w	sl, r4, #25
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	6832      	ldr	r2, [r6, #0]
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	42ab      	cmp	r3, r5
 800a53a:	dc26      	bgt.n	800a58a <_printf_common+0x96>
 800a53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a540:	1e13      	subs	r3, r2, #0
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	bf18      	it	ne
 800a546:	2301      	movne	r3, #1
 800a548:	0692      	lsls	r2, r2, #26
 800a54a:	d42b      	bmi.n	800a5a4 <_printf_common+0xb0>
 800a54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a550:	4649      	mov	r1, r9
 800a552:	4638      	mov	r0, r7
 800a554:	47c0      	blx	r8
 800a556:	3001      	adds	r0, #1
 800a558:	d01e      	beq.n	800a598 <_printf_common+0xa4>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	68e5      	ldr	r5, [r4, #12]
 800a55e:	6832      	ldr	r2, [r6, #0]
 800a560:	f003 0306 	and.w	r3, r3, #6
 800a564:	2b04      	cmp	r3, #4
 800a566:	bf08      	it	eq
 800a568:	1aad      	subeq	r5, r5, r2
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	6922      	ldr	r2, [r4, #16]
 800a56e:	bf0c      	ite	eq
 800a570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a574:	2500      	movne	r5, #0
 800a576:	4293      	cmp	r3, r2
 800a578:	bfc4      	itt	gt
 800a57a:	1a9b      	subgt	r3, r3, r2
 800a57c:	18ed      	addgt	r5, r5, r3
 800a57e:	2600      	movs	r6, #0
 800a580:	341a      	adds	r4, #26
 800a582:	42b5      	cmp	r5, r6
 800a584:	d11a      	bne.n	800a5bc <_printf_common+0xc8>
 800a586:	2000      	movs	r0, #0
 800a588:	e008      	b.n	800a59c <_printf_common+0xa8>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4652      	mov	r2, sl
 800a58e:	4649      	mov	r1, r9
 800a590:	4638      	mov	r0, r7
 800a592:	47c0      	blx	r8
 800a594:	3001      	adds	r0, #1
 800a596:	d103      	bne.n	800a5a0 <_printf_common+0xac>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	e7c6      	b.n	800a532 <_printf_common+0x3e>
 800a5a4:	18e1      	adds	r1, r4, r3
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	2030      	movs	r0, #48	; 0x30
 800a5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5ae:	4422      	add	r2, r4
 800a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	e7c7      	b.n	800a54c <_printf_common+0x58>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c0      	blx	r8
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d0e6      	beq.n	800a598 <_printf_common+0xa4>
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	e7d9      	b.n	800a582 <_printf_common+0x8e>
	...

0800a5d0 <_printf_i>:
 800a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	4691      	mov	r9, r2
 800a5d8:	7e27      	ldrb	r7, [r4, #24]
 800a5da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5dc:	2f78      	cmp	r7, #120	; 0x78
 800a5de:	4680      	mov	r8, r0
 800a5e0:	469a      	mov	sl, r3
 800a5e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5e6:	d807      	bhi.n	800a5f8 <_printf_i+0x28>
 800a5e8:	2f62      	cmp	r7, #98	; 0x62
 800a5ea:	d80a      	bhi.n	800a602 <_printf_i+0x32>
 800a5ec:	2f00      	cmp	r7, #0
 800a5ee:	f000 80d8 	beq.w	800a7a2 <_printf_i+0x1d2>
 800a5f2:	2f58      	cmp	r7, #88	; 0x58
 800a5f4:	f000 80a3 	beq.w	800a73e <_printf_i+0x16e>
 800a5f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a600:	e03a      	b.n	800a678 <_printf_i+0xa8>
 800a602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a606:	2b15      	cmp	r3, #21
 800a608:	d8f6      	bhi.n	800a5f8 <_printf_i+0x28>
 800a60a:	a001      	add	r0, pc, #4	; (adr r0, 800a610 <_printf_i+0x40>)
 800a60c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a610:	0800a669 	.word	0x0800a669
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a5f9 	.word	0x0800a5f9
 800a61c:	0800a5f9 	.word	0x0800a5f9
 800a620:	0800a5f9 	.word	0x0800a5f9
 800a624:	0800a5f9 	.word	0x0800a5f9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5f9 	.word	0x0800a5f9
 800a630:	0800a5f9 	.word	0x0800a5f9
 800a634:	0800a5f9 	.word	0x0800a5f9
 800a638:	0800a5f9 	.word	0x0800a5f9
 800a63c:	0800a789 	.word	0x0800a789
 800a640:	0800a6ad 	.word	0x0800a6ad
 800a644:	0800a76b 	.word	0x0800a76b
 800a648:	0800a5f9 	.word	0x0800a5f9
 800a64c:	0800a5f9 	.word	0x0800a5f9
 800a650:	0800a7ab 	.word	0x0800a7ab
 800a654:	0800a5f9 	.word	0x0800a5f9
 800a658:	0800a6ad 	.word	0x0800a6ad
 800a65c:	0800a5f9 	.word	0x0800a5f9
 800a660:	0800a5f9 	.word	0x0800a5f9
 800a664:	0800a773 	.word	0x0800a773
 800a668:	680b      	ldr	r3, [r1, #0]
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	600a      	str	r2, [r1, #0]
 800a670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a678:	2301      	movs	r3, #1
 800a67a:	e0a3      	b.n	800a7c4 <_printf_i+0x1f4>
 800a67c:	6825      	ldr	r5, [r4, #0]
 800a67e:	6808      	ldr	r0, [r1, #0]
 800a680:	062e      	lsls	r6, r5, #24
 800a682:	f100 0304 	add.w	r3, r0, #4
 800a686:	d50a      	bpl.n	800a69e <_printf_i+0xce>
 800a688:	6805      	ldr	r5, [r0, #0]
 800a68a:	600b      	str	r3, [r1, #0]
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	da03      	bge.n	800a698 <_printf_i+0xc8>
 800a690:	232d      	movs	r3, #45	; 0x2d
 800a692:	426d      	negs	r5, r5
 800a694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a698:	485e      	ldr	r0, [pc, #376]	; (800a814 <_printf_i+0x244>)
 800a69a:	230a      	movs	r3, #10
 800a69c:	e019      	b.n	800a6d2 <_printf_i+0x102>
 800a69e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a6a2:	6805      	ldr	r5, [r0, #0]
 800a6a4:	600b      	str	r3, [r1, #0]
 800a6a6:	bf18      	it	ne
 800a6a8:	b22d      	sxthne	r5, r5
 800a6aa:	e7ef      	b.n	800a68c <_printf_i+0xbc>
 800a6ac:	680b      	ldr	r3, [r1, #0]
 800a6ae:	6825      	ldr	r5, [r4, #0]
 800a6b0:	1d18      	adds	r0, r3, #4
 800a6b2:	6008      	str	r0, [r1, #0]
 800a6b4:	0628      	lsls	r0, r5, #24
 800a6b6:	d501      	bpl.n	800a6bc <_printf_i+0xec>
 800a6b8:	681d      	ldr	r5, [r3, #0]
 800a6ba:	e002      	b.n	800a6c2 <_printf_i+0xf2>
 800a6bc:	0669      	lsls	r1, r5, #25
 800a6be:	d5fb      	bpl.n	800a6b8 <_printf_i+0xe8>
 800a6c0:	881d      	ldrh	r5, [r3, #0]
 800a6c2:	4854      	ldr	r0, [pc, #336]	; (800a814 <_printf_i+0x244>)
 800a6c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a6c6:	bf0c      	ite	eq
 800a6c8:	2308      	moveq	r3, #8
 800a6ca:	230a      	movne	r3, #10
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6d2:	6866      	ldr	r6, [r4, #4]
 800a6d4:	60a6      	str	r6, [r4, #8]
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	bfa2      	ittt	ge
 800a6da:	6821      	ldrge	r1, [r4, #0]
 800a6dc:	f021 0104 	bicge.w	r1, r1, #4
 800a6e0:	6021      	strge	r1, [r4, #0]
 800a6e2:	b90d      	cbnz	r5, 800a6e8 <_printf_i+0x118>
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	d04d      	beq.n	800a784 <_printf_i+0x1b4>
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a6f2:	5dc7      	ldrb	r7, [r0, r7]
 800a6f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f8:	462f      	mov	r7, r5
 800a6fa:	42bb      	cmp	r3, r7
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	d9f4      	bls.n	800a6ea <_printf_i+0x11a>
 800a700:	2b08      	cmp	r3, #8
 800a702:	d10b      	bne.n	800a71c <_printf_i+0x14c>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	07df      	lsls	r7, r3, #31
 800a708:	d508      	bpl.n	800a71c <_printf_i+0x14c>
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	6861      	ldr	r1, [r4, #4]
 800a70e:	4299      	cmp	r1, r3
 800a710:	bfde      	ittt	le
 800a712:	2330      	movle	r3, #48	; 0x30
 800a714:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a71c:	1b92      	subs	r2, r2, r6
 800a71e:	6122      	str	r2, [r4, #16]
 800a720:	f8cd a000 	str.w	sl, [sp]
 800a724:	464b      	mov	r3, r9
 800a726:	aa03      	add	r2, sp, #12
 800a728:	4621      	mov	r1, r4
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7ff fee2 	bl	800a4f4 <_printf_common>
 800a730:	3001      	adds	r0, #1
 800a732:	d14c      	bne.n	800a7ce <_printf_i+0x1fe>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	b004      	add	sp, #16
 800a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73e:	4835      	ldr	r0, [pc, #212]	; (800a814 <_printf_i+0x244>)
 800a740:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	680e      	ldr	r6, [r1, #0]
 800a748:	061f      	lsls	r7, r3, #24
 800a74a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a74e:	600e      	str	r6, [r1, #0]
 800a750:	d514      	bpl.n	800a77c <_printf_i+0x1ac>
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	bf44      	itt	mi
 800a756:	f043 0320 	orrmi.w	r3, r3, #32
 800a75a:	6023      	strmi	r3, [r4, #0]
 800a75c:	b91d      	cbnz	r5, 800a766 <_printf_i+0x196>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	f023 0320 	bic.w	r3, r3, #32
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	2310      	movs	r3, #16
 800a768:	e7b0      	b.n	800a6cc <_printf_i+0xfc>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	f043 0320 	orr.w	r3, r3, #32
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	2378      	movs	r3, #120	; 0x78
 800a774:	4828      	ldr	r0, [pc, #160]	; (800a818 <_printf_i+0x248>)
 800a776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a77a:	e7e3      	b.n	800a744 <_printf_i+0x174>
 800a77c:	065e      	lsls	r6, r3, #25
 800a77e:	bf48      	it	mi
 800a780:	b2ad      	uxthmi	r5, r5
 800a782:	e7e6      	b.n	800a752 <_printf_i+0x182>
 800a784:	4616      	mov	r6, r2
 800a786:	e7bb      	b.n	800a700 <_printf_i+0x130>
 800a788:	680b      	ldr	r3, [r1, #0]
 800a78a:	6826      	ldr	r6, [r4, #0]
 800a78c:	6960      	ldr	r0, [r4, #20]
 800a78e:	1d1d      	adds	r5, r3, #4
 800a790:	600d      	str	r5, [r1, #0]
 800a792:	0635      	lsls	r5, r6, #24
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	d501      	bpl.n	800a79c <_printf_i+0x1cc>
 800a798:	6018      	str	r0, [r3, #0]
 800a79a:	e002      	b.n	800a7a2 <_printf_i+0x1d2>
 800a79c:	0671      	lsls	r1, r6, #25
 800a79e:	d5fb      	bpl.n	800a798 <_printf_i+0x1c8>
 800a7a0:	8018      	strh	r0, [r3, #0]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	6123      	str	r3, [r4, #16]
 800a7a6:	4616      	mov	r6, r2
 800a7a8:	e7ba      	b.n	800a720 <_printf_i+0x150>
 800a7aa:	680b      	ldr	r3, [r1, #0]
 800a7ac:	1d1a      	adds	r2, r3, #4
 800a7ae:	600a      	str	r2, [r1, #0]
 800a7b0:	681e      	ldr	r6, [r3, #0]
 800a7b2:	6862      	ldr	r2, [r4, #4]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7f5 fd42 	bl	8000240 <memchr>
 800a7bc:	b108      	cbz	r0, 800a7c2 <_printf_i+0x1f2>
 800a7be:	1b80      	subs	r0, r0, r6
 800a7c0:	6060      	str	r0, [r4, #4]
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7cc:	e7a8      	b.n	800a720 <_printf_i+0x150>
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	47d0      	blx	sl
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d0ab      	beq.n	800a734 <_printf_i+0x164>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	079b      	lsls	r3, r3, #30
 800a7e0:	d413      	bmi.n	800a80a <_printf_i+0x23a>
 800a7e2:	68e0      	ldr	r0, [r4, #12]
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	4298      	cmp	r0, r3
 800a7e8:	bfb8      	it	lt
 800a7ea:	4618      	movlt	r0, r3
 800a7ec:	e7a4      	b.n	800a738 <_printf_i+0x168>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	47d0      	blx	sl
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d09b      	beq.n	800a734 <_printf_i+0x164>
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	68e3      	ldr	r3, [r4, #12]
 800a800:	9903      	ldr	r1, [sp, #12]
 800a802:	1a5b      	subs	r3, r3, r1
 800a804:	42ab      	cmp	r3, r5
 800a806:	dcf2      	bgt.n	800a7ee <_printf_i+0x21e>
 800a808:	e7eb      	b.n	800a7e2 <_printf_i+0x212>
 800a80a:	2500      	movs	r5, #0
 800a80c:	f104 0619 	add.w	r6, r4, #25
 800a810:	e7f5      	b.n	800a7fe <_printf_i+0x22e>
 800a812:	bf00      	nop
 800a814:	0800c9be 	.word	0x0800c9be
 800a818:	0800c9cf 	.word	0x0800c9cf

0800a81c <iprintf>:
 800a81c:	b40f      	push	{r0, r1, r2, r3}
 800a81e:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <iprintf+0x2c>)
 800a820:	b513      	push	{r0, r1, r4, lr}
 800a822:	681c      	ldr	r4, [r3, #0]
 800a824:	b124      	cbz	r4, 800a830 <iprintf+0x14>
 800a826:	69a3      	ldr	r3, [r4, #24]
 800a828:	b913      	cbnz	r3, 800a830 <iprintf+0x14>
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fee0 	bl	800b5f0 <__sinit>
 800a830:	ab05      	add	r3, sp, #20
 800a832:	9a04      	ldr	r2, [sp, #16]
 800a834:	68a1      	ldr	r1, [r4, #8]
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	4620      	mov	r0, r4
 800a83a:	f001 fbf7 	bl	800c02c <_vfiprintf_r>
 800a83e:	b002      	add	sp, #8
 800a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a844:	b004      	add	sp, #16
 800a846:	4770      	bx	lr
 800a848:	20000010 	.word	0x20000010

0800a84c <quorem>:
 800a84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	6903      	ldr	r3, [r0, #16]
 800a852:	690c      	ldr	r4, [r1, #16]
 800a854:	42a3      	cmp	r3, r4
 800a856:	4607      	mov	r7, r0
 800a858:	f2c0 8081 	blt.w	800a95e <quorem+0x112>
 800a85c:	3c01      	subs	r4, #1
 800a85e:	f101 0814 	add.w	r8, r1, #20
 800a862:	f100 0514 	add.w	r5, r0, #20
 800a866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a874:	3301      	adds	r3, #1
 800a876:	429a      	cmp	r2, r3
 800a878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a87c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a880:	fbb2 f6f3 	udiv	r6, r2, r3
 800a884:	d331      	bcc.n	800a8ea <quorem+0x9e>
 800a886:	f04f 0e00 	mov.w	lr, #0
 800a88a:	4640      	mov	r0, r8
 800a88c:	46ac      	mov	ip, r5
 800a88e:	46f2      	mov	sl, lr
 800a890:	f850 2b04 	ldr.w	r2, [r0], #4
 800a894:	b293      	uxth	r3, r2
 800a896:	fb06 e303 	mla	r3, r6, r3, lr
 800a89a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8a4:	0c12      	lsrs	r2, r2, #16
 800a8a6:	f8dc a000 	ldr.w	sl, [ip]
 800a8aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a8ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a8b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8b6:	fa1f fa82 	uxth.w	sl, r2
 800a8ba:	f8dc 2000 	ldr.w	r2, [ip]
 800a8be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a8c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8cc:	4581      	cmp	r9, r0
 800a8ce:	f84c 3b04 	str.w	r3, [ip], #4
 800a8d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8d6:	d2db      	bcs.n	800a890 <quorem+0x44>
 800a8d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8dc:	b92b      	cbnz	r3, 800a8ea <quorem+0x9e>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	3b04      	subs	r3, #4
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	d32e      	bcc.n	800a946 <quorem+0xfa>
 800a8e8:	613c      	str	r4, [r7, #16]
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f001 f9ba 	bl	800bc64 <__mcmp>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	db24      	blt.n	800a93e <quorem+0xf2>
 800a8f4:	3601      	adds	r6, #1
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f04f 0c00 	mov.w	ip, #0
 800a8fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a900:	f8d0 e000 	ldr.w	lr, [r0]
 800a904:	b293      	uxth	r3, r2
 800a906:	ebac 0303 	sub.w	r3, ip, r3
 800a90a:	0c12      	lsrs	r2, r2, #16
 800a90c:	fa13 f38e 	uxtah	r3, r3, lr
 800a910:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a918:	b29b      	uxth	r3, r3
 800a91a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a91e:	45c1      	cmp	r9, r8
 800a920:	f840 3b04 	str.w	r3, [r0], #4
 800a924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a928:	d2e8      	bcs.n	800a8fc <quorem+0xb0>
 800a92a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a932:	b922      	cbnz	r2, 800a93e <quorem+0xf2>
 800a934:	3b04      	subs	r3, #4
 800a936:	429d      	cmp	r5, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	d30a      	bcc.n	800a952 <quorem+0x106>
 800a93c:	613c      	str	r4, [r7, #16]
 800a93e:	4630      	mov	r0, r6
 800a940:	b003      	add	sp, #12
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	3b04      	subs	r3, #4
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d1cc      	bne.n	800a8e8 <quorem+0x9c>
 800a94e:	3c01      	subs	r4, #1
 800a950:	e7c7      	b.n	800a8e2 <quorem+0x96>
 800a952:	6812      	ldr	r2, [r2, #0]
 800a954:	3b04      	subs	r3, #4
 800a956:	2a00      	cmp	r2, #0
 800a958:	d1f0      	bne.n	800a93c <quorem+0xf0>
 800a95a:	3c01      	subs	r4, #1
 800a95c:	e7eb      	b.n	800a936 <quorem+0xea>
 800a95e:	2000      	movs	r0, #0
 800a960:	e7ee      	b.n	800a940 <quorem+0xf4>
 800a962:	0000      	movs	r0, r0
 800a964:	0000      	movs	r0, r0
	...

0800a968 <_dtoa_r>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	ed2d 8b02 	vpush	{d8}
 800a970:	ec57 6b10 	vmov	r6, r7, d0
 800a974:	b095      	sub	sp, #84	; 0x54
 800a976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a978:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a97c:	9105      	str	r1, [sp, #20]
 800a97e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a982:	4604      	mov	r4, r0
 800a984:	9209      	str	r2, [sp, #36]	; 0x24
 800a986:	930f      	str	r3, [sp, #60]	; 0x3c
 800a988:	b975      	cbnz	r5, 800a9a8 <_dtoa_r+0x40>
 800a98a:	2010      	movs	r0, #16
 800a98c:	f000 fed6 	bl	800b73c <malloc>
 800a990:	4602      	mov	r2, r0
 800a992:	6260      	str	r0, [r4, #36]	; 0x24
 800a994:	b920      	cbnz	r0, 800a9a0 <_dtoa_r+0x38>
 800a996:	4bb2      	ldr	r3, [pc, #712]	; (800ac60 <_dtoa_r+0x2f8>)
 800a998:	21ea      	movs	r1, #234	; 0xea
 800a99a:	48b2      	ldr	r0, [pc, #712]	; (800ac64 <_dtoa_r+0x2fc>)
 800a99c:	f001 fd9c 	bl	800c4d8 <__assert_func>
 800a9a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9a4:	6005      	str	r5, [r0, #0]
 800a9a6:	60c5      	str	r5, [r0, #12]
 800a9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9aa:	6819      	ldr	r1, [r3, #0]
 800a9ac:	b151      	cbz	r1, 800a9c4 <_dtoa_r+0x5c>
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	604a      	str	r2, [r1, #4]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4093      	lsls	r3, r2
 800a9b6:	608b      	str	r3, [r1, #8]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 ff15 	bl	800b7e8 <_Bfree>
 800a9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	1e3b      	subs	r3, r7, #0
 800a9c6:	bfb9      	ittee	lt
 800a9c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9cc:	9303      	strlt	r3, [sp, #12]
 800a9ce:	2300      	movge	r3, #0
 800a9d0:	f8c8 3000 	strge.w	r3, [r8]
 800a9d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a9d8:	4ba3      	ldr	r3, [pc, #652]	; (800ac68 <_dtoa_r+0x300>)
 800a9da:	bfbc      	itt	lt
 800a9dc:	2201      	movlt	r2, #1
 800a9de:	f8c8 2000 	strlt.w	r2, [r8]
 800a9e2:	ea33 0309 	bics.w	r3, r3, r9
 800a9e6:	d11b      	bne.n	800aa20 <_dtoa_r+0xb8>
 800a9e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9f4:	4333      	orrs	r3, r6
 800a9f6:	f000 857a 	beq.w	800b4ee <_dtoa_r+0xb86>
 800a9fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9fc:	b963      	cbnz	r3, 800aa18 <_dtoa_r+0xb0>
 800a9fe:	4b9b      	ldr	r3, [pc, #620]	; (800ac6c <_dtoa_r+0x304>)
 800aa00:	e024      	b.n	800aa4c <_dtoa_r+0xe4>
 800aa02:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <_dtoa_r+0x308>)
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	3308      	adds	r3, #8
 800aa08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	9800      	ldr	r0, [sp, #0]
 800aa0e:	b015      	add	sp, #84	; 0x54
 800aa10:	ecbd 8b02 	vpop	{d8}
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	4b94      	ldr	r3, [pc, #592]	; (800ac6c <_dtoa_r+0x304>)
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	3303      	adds	r3, #3
 800aa1e:	e7f3      	b.n	800aa08 <_dtoa_r+0xa0>
 800aa20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa24:	2200      	movs	r2, #0
 800aa26:	ec51 0b17 	vmov	r0, r1, d7
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aa30:	f7f6 f87a 	bl	8000b28 <__aeabi_dcmpeq>
 800aa34:	4680      	mov	r8, r0
 800aa36:	b158      	cbz	r0, 800aa50 <_dtoa_r+0xe8>
 800aa38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 8551 	beq.w	800b4e8 <_dtoa_r+0xb80>
 800aa46:	488b      	ldr	r0, [pc, #556]	; (800ac74 <_dtoa_r+0x30c>)
 800aa48:	6018      	str	r0, [r3, #0]
 800aa4a:	1e43      	subs	r3, r0, #1
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	e7dd      	b.n	800aa0c <_dtoa_r+0xa4>
 800aa50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aa54:	aa12      	add	r2, sp, #72	; 0x48
 800aa56:	a913      	add	r1, sp, #76	; 0x4c
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f001 f9a7 	bl	800bdac <__d2b>
 800aa5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa62:	4683      	mov	fp, r0
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d07c      	beq.n	800ab62 <_dtoa_r+0x1fa>
 800aa68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aa6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800aa76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa82:	4b7d      	ldr	r3, [pc, #500]	; (800ac78 <_dtoa_r+0x310>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fc2d 	bl	80002e8 <__aeabi_dsub>
 800aa8e:	a36e      	add	r3, pc, #440	; (adr r3, 800ac48 <_dtoa_r+0x2e0>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fde0 	bl	8000658 <__aeabi_dmul>
 800aa98:	a36d      	add	r3, pc, #436	; (adr r3, 800ac50 <_dtoa_r+0x2e8>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fc25 	bl	80002ec <__adddf3>
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	460f      	mov	r7, r1
 800aaa8:	f7f5 fd6c 	bl	8000584 <__aeabi_i2d>
 800aaac:	a36a      	add	r3, pc, #424	; (adr r3, 800ac58 <_dtoa_r+0x2f0>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f5 fdd1 	bl	8000658 <__aeabi_dmul>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	f7f5 fc15 	bl	80002ec <__adddf3>
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	f7f6 f877 	bl	8000bb8 <__aeabi_d2iz>
 800aaca:	2200      	movs	r2, #0
 800aacc:	4682      	mov	sl, r0
 800aace:	2300      	movs	r3, #0
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f6 f832 	bl	8000b3c <__aeabi_dcmplt>
 800aad8:	b148      	cbz	r0, 800aaee <_dtoa_r+0x186>
 800aada:	4650      	mov	r0, sl
 800aadc:	f7f5 fd52 	bl	8000584 <__aeabi_i2d>
 800aae0:	4632      	mov	r2, r6
 800aae2:	463b      	mov	r3, r7
 800aae4:	f7f6 f820 	bl	8000b28 <__aeabi_dcmpeq>
 800aae8:	b908      	cbnz	r0, 800aaee <_dtoa_r+0x186>
 800aaea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaee:	f1ba 0f16 	cmp.w	sl, #22
 800aaf2:	d854      	bhi.n	800ab9e <_dtoa_r+0x236>
 800aaf4:	4b61      	ldr	r3, [pc, #388]	; (800ac7c <_dtoa_r+0x314>)
 800aaf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab02:	f7f6 f81b 	bl	8000b3c <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d04b      	beq.n	800aba2 <_dtoa_r+0x23a>
 800ab0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab0e:	2300      	movs	r3, #0
 800ab10:	930e      	str	r3, [sp, #56]	; 0x38
 800ab12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab14:	1b5d      	subs	r5, r3, r5
 800ab16:	1e6b      	subs	r3, r5, #1
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	bf43      	ittte	mi
 800ab1c:	2300      	movmi	r3, #0
 800ab1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ab22:	9304      	strmi	r3, [sp, #16]
 800ab24:	f04f 0800 	movpl.w	r8, #0
 800ab28:	f1ba 0f00 	cmp.w	sl, #0
 800ab2c:	db3b      	blt.n	800aba6 <_dtoa_r+0x23e>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ab34:	4453      	add	r3, sl
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	9b05      	ldr	r3, [sp, #20]
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d869      	bhi.n	800ac16 <_dtoa_r+0x2ae>
 800ab42:	2b05      	cmp	r3, #5
 800ab44:	bfc4      	itt	gt
 800ab46:	3b04      	subgt	r3, #4
 800ab48:	9305      	strgt	r3, [sp, #20]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	f1a3 0302 	sub.w	r3, r3, #2
 800ab50:	bfcc      	ite	gt
 800ab52:	2500      	movgt	r5, #0
 800ab54:	2501      	movle	r5, #1
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d869      	bhi.n	800ac2e <_dtoa_r+0x2c6>
 800ab5a:	e8df f003 	tbb	[pc, r3]
 800ab5e:	4e2c      	.short	0x4e2c
 800ab60:	5a4c      	.short	0x5a4c
 800ab62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ab66:	441d      	add	r5, r3
 800ab68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	bfc1      	itttt	gt
 800ab70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab78:	fa09 f303 	lslgt.w	r3, r9, r3
 800ab7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab80:	bfda      	itte	le
 800ab82:	f1c3 0320 	rsble	r3, r3, #32
 800ab86:	fa06 f003 	lslle.w	r0, r6, r3
 800ab8a:	4318      	orrgt	r0, r3
 800ab8c:	f7f5 fcea 	bl	8000564 <__aeabi_ui2d>
 800ab90:	2301      	movs	r3, #1
 800ab92:	4606      	mov	r6, r0
 800ab94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab98:	3d01      	subs	r5, #1
 800ab9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ab9c:	e771      	b.n	800aa82 <_dtoa_r+0x11a>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7b6      	b.n	800ab10 <_dtoa_r+0x1a8>
 800aba2:	900e      	str	r0, [sp, #56]	; 0x38
 800aba4:	e7b5      	b.n	800ab12 <_dtoa_r+0x1aa>
 800aba6:	f1ca 0300 	rsb	r3, sl, #0
 800abaa:	9306      	str	r3, [sp, #24]
 800abac:	2300      	movs	r3, #0
 800abae:	eba8 080a 	sub.w	r8, r8, sl
 800abb2:	930d      	str	r3, [sp, #52]	; 0x34
 800abb4:	e7c2      	b.n	800ab3c <_dtoa_r+0x1d4>
 800abb6:	2300      	movs	r3, #0
 800abb8:	9308      	str	r3, [sp, #32]
 800abba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dc39      	bgt.n	800ac34 <_dtoa_r+0x2cc>
 800abc0:	f04f 0901 	mov.w	r9, #1
 800abc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800abc8:	464b      	mov	r3, r9
 800abca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800abce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800abd0:	2200      	movs	r2, #0
 800abd2:	6042      	str	r2, [r0, #4]
 800abd4:	2204      	movs	r2, #4
 800abd6:	f102 0614 	add.w	r6, r2, #20
 800abda:	429e      	cmp	r6, r3
 800abdc:	6841      	ldr	r1, [r0, #4]
 800abde:	d92f      	bls.n	800ac40 <_dtoa_r+0x2d8>
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 fdc1 	bl	800b768 <_Balloc>
 800abe6:	9000      	str	r0, [sp, #0]
 800abe8:	2800      	cmp	r0, #0
 800abea:	d14b      	bne.n	800ac84 <_dtoa_r+0x31c>
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <_dtoa_r+0x318>)
 800abee:	4602      	mov	r2, r0
 800abf0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800abf4:	e6d1      	b.n	800a99a <_dtoa_r+0x32>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e7de      	b.n	800abb8 <_dtoa_r+0x250>
 800abfa:	2300      	movs	r3, #0
 800abfc:	9308      	str	r3, [sp, #32]
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	eb0a 0903 	add.w	r9, sl, r3
 800ac04:	f109 0301 	add.w	r3, r9, #1
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	bfb8      	it	lt
 800ac0e:	2301      	movlt	r3, #1
 800ac10:	e7dd      	b.n	800abce <_dtoa_r+0x266>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7f2      	b.n	800abfc <_dtoa_r+0x294>
 800ac16:	2501      	movs	r5, #1
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	9508      	str	r5, [sp, #32]
 800ac1e:	f04f 39ff 	mov.w	r9, #4294967295
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac28:	2312      	movs	r3, #18
 800ac2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac2c:	e7cf      	b.n	800abce <_dtoa_r+0x266>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	9308      	str	r3, [sp, #32]
 800ac32:	e7f4      	b.n	800ac1e <_dtoa_r+0x2b6>
 800ac34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac38:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	e7c6      	b.n	800abce <_dtoa_r+0x266>
 800ac40:	3101      	adds	r1, #1
 800ac42:	6041      	str	r1, [r0, #4]
 800ac44:	0052      	lsls	r2, r2, #1
 800ac46:	e7c6      	b.n	800abd6 <_dtoa_r+0x26e>
 800ac48:	636f4361 	.word	0x636f4361
 800ac4c:	3fd287a7 	.word	0x3fd287a7
 800ac50:	8b60c8b3 	.word	0x8b60c8b3
 800ac54:	3fc68a28 	.word	0x3fc68a28
 800ac58:	509f79fb 	.word	0x509f79fb
 800ac5c:	3fd34413 	.word	0x3fd34413
 800ac60:	0800c9ed 	.word	0x0800c9ed
 800ac64:	0800ca04 	.word	0x0800ca04
 800ac68:	7ff00000 	.word	0x7ff00000
 800ac6c:	0800c9e9 	.word	0x0800c9e9
 800ac70:	0800c9e0 	.word	0x0800c9e0
 800ac74:	0800c9bd 	.word	0x0800c9bd
 800ac78:	3ff80000 	.word	0x3ff80000
 800ac7c:	0800cb60 	.word	0x0800cb60
 800ac80:	0800ca63 	.word	0x0800ca63
 800ac84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac86:	9a00      	ldr	r2, [sp, #0]
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	2b0e      	cmp	r3, #14
 800ac8e:	f200 80ad 	bhi.w	800adec <_dtoa_r+0x484>
 800ac92:	2d00      	cmp	r5, #0
 800ac94:	f000 80aa 	beq.w	800adec <_dtoa_r+0x484>
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	dd36      	ble.n	800ad0c <_dtoa_r+0x3a4>
 800ac9e:	4ac3      	ldr	r2, [pc, #780]	; (800afac <_dtoa_r+0x644>)
 800aca0:	f00a 030f 	and.w	r3, sl, #15
 800aca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aca8:	ed93 7b00 	vldr	d7, [r3]
 800acac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800acb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800acb4:	eeb0 8a47 	vmov.f32	s16, s14
 800acb8:	eef0 8a67 	vmov.f32	s17, s15
 800acbc:	d016      	beq.n	800acec <_dtoa_r+0x384>
 800acbe:	4bbc      	ldr	r3, [pc, #752]	; (800afb0 <_dtoa_r+0x648>)
 800acc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acc8:	f7f5 fdf0 	bl	80008ac <__aeabi_ddiv>
 800accc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acd0:	f007 070f 	and.w	r7, r7, #15
 800acd4:	2503      	movs	r5, #3
 800acd6:	4eb6      	ldr	r6, [pc, #728]	; (800afb0 <_dtoa_r+0x648>)
 800acd8:	b957      	cbnz	r7, 800acf0 <_dtoa_r+0x388>
 800acda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acde:	ec53 2b18 	vmov	r2, r3, d8
 800ace2:	f7f5 fde3 	bl	80008ac <__aeabi_ddiv>
 800ace6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acea:	e029      	b.n	800ad40 <_dtoa_r+0x3d8>
 800acec:	2502      	movs	r5, #2
 800acee:	e7f2      	b.n	800acd6 <_dtoa_r+0x36e>
 800acf0:	07f9      	lsls	r1, r7, #31
 800acf2:	d508      	bpl.n	800ad06 <_dtoa_r+0x39e>
 800acf4:	ec51 0b18 	vmov	r0, r1, d8
 800acf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acfc:	f7f5 fcac 	bl	8000658 <__aeabi_dmul>
 800ad00:	ec41 0b18 	vmov	d8, r0, r1
 800ad04:	3501      	adds	r5, #1
 800ad06:	107f      	asrs	r7, r7, #1
 800ad08:	3608      	adds	r6, #8
 800ad0a:	e7e5      	b.n	800acd8 <_dtoa_r+0x370>
 800ad0c:	f000 80a6 	beq.w	800ae5c <_dtoa_r+0x4f4>
 800ad10:	f1ca 0600 	rsb	r6, sl, #0
 800ad14:	4ba5      	ldr	r3, [pc, #660]	; (800afac <_dtoa_r+0x644>)
 800ad16:	4fa6      	ldr	r7, [pc, #664]	; (800afb0 <_dtoa_r+0x648>)
 800ad18:	f006 020f 	and.w	r2, r6, #15
 800ad1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad28:	f7f5 fc96 	bl	8000658 <__aeabi_dmul>
 800ad2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad30:	1136      	asrs	r6, r6, #4
 800ad32:	2300      	movs	r3, #0
 800ad34:	2502      	movs	r5, #2
 800ad36:	2e00      	cmp	r6, #0
 800ad38:	f040 8085 	bne.w	800ae46 <_dtoa_r+0x4de>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1d2      	bne.n	800ace6 <_dtoa_r+0x37e>
 800ad40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 808c 	beq.w	800ae60 <_dtoa_r+0x4f8>
 800ad48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad4c:	4b99      	ldr	r3, [pc, #612]	; (800afb4 <_dtoa_r+0x64c>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fef2 	bl	8000b3c <__aeabi_dcmplt>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f000 8081 	beq.w	800ae60 <_dtoa_r+0x4f8>
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d07d      	beq.n	800ae60 <_dtoa_r+0x4f8>
 800ad64:	f1b9 0f00 	cmp.w	r9, #0
 800ad68:	dd3c      	ble.n	800ade4 <_dtoa_r+0x47c>
 800ad6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	2200      	movs	r2, #0
 800ad72:	4b91      	ldr	r3, [pc, #580]	; (800afb8 <_dtoa_r+0x650>)
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 fc6e 	bl	8000658 <__aeabi_dmul>
 800ad7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad80:	3501      	adds	r5, #1
 800ad82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ad86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f7f5 fbfa 	bl	8000584 <__aeabi_i2d>
 800ad90:	4632      	mov	r2, r6
 800ad92:	463b      	mov	r3, r7
 800ad94:	f7f5 fc60 	bl	8000658 <__aeabi_dmul>
 800ad98:	4b88      	ldr	r3, [pc, #544]	; (800afbc <_dtoa_r+0x654>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7f5 faa6 	bl	80002ec <__adddf3>
 800ada0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ada4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adac:	2b00      	cmp	r3, #0
 800adae:	d15c      	bne.n	800ae6a <_dtoa_r+0x502>
 800adb0:	4b83      	ldr	r3, [pc, #524]	; (800afc0 <_dtoa_r+0x658>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa96 	bl	80002e8 <__aeabi_dsub>
 800adbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adc0:	4606      	mov	r6, r0
 800adc2:	460f      	mov	r7, r1
 800adc4:	f7f5 fed8 	bl	8000b78 <__aeabi_dcmpgt>
 800adc8:	2800      	cmp	r0, #0
 800adca:	f040 8296 	bne.w	800b2fa <_dtoa_r+0x992>
 800adce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800add2:	4630      	mov	r0, r6
 800add4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 feaf 	bl	8000b3c <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f040 8288 	bne.w	800b2f4 <_dtoa_r+0x98c>
 800ade4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ade8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f2c0 8158 	blt.w	800b0a4 <_dtoa_r+0x73c>
 800adf4:	f1ba 0f0e 	cmp.w	sl, #14
 800adf8:	f300 8154 	bgt.w	800b0a4 <_dtoa_r+0x73c>
 800adfc:	4b6b      	ldr	r3, [pc, #428]	; (800afac <_dtoa_r+0x644>)
 800adfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f280 80e3 	bge.w	800afd4 <_dtoa_r+0x66c>
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f300 80df 	bgt.w	800afd4 <_dtoa_r+0x66c>
 800ae16:	f040 826d 	bne.w	800b2f4 <_dtoa_r+0x98c>
 800ae1a:	4b69      	ldr	r3, [pc, #420]	; (800afc0 <_dtoa_r+0x658>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4640      	mov	r0, r8
 800ae20:	4649      	mov	r1, r9
 800ae22:	f7f5 fc19 	bl	8000658 <__aeabi_dmul>
 800ae26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae2a:	f7f5 fe9b 	bl	8000b64 <__aeabi_dcmpge>
 800ae2e:	9e01      	ldr	r6, [sp, #4]
 800ae30:	4637      	mov	r7, r6
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f040 8243 	bne.w	800b2be <_dtoa_r+0x956>
 800ae38:	9d00      	ldr	r5, [sp, #0]
 800ae3a:	2331      	movs	r3, #49	; 0x31
 800ae3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ae40:	f10a 0a01 	add.w	sl, sl, #1
 800ae44:	e23f      	b.n	800b2c6 <_dtoa_r+0x95e>
 800ae46:	07f2      	lsls	r2, r6, #31
 800ae48:	d505      	bpl.n	800ae56 <_dtoa_r+0x4ee>
 800ae4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae4e:	f7f5 fc03 	bl	8000658 <__aeabi_dmul>
 800ae52:	3501      	adds	r5, #1
 800ae54:	2301      	movs	r3, #1
 800ae56:	1076      	asrs	r6, r6, #1
 800ae58:	3708      	adds	r7, #8
 800ae5a:	e76c      	b.n	800ad36 <_dtoa_r+0x3ce>
 800ae5c:	2502      	movs	r5, #2
 800ae5e:	e76f      	b.n	800ad40 <_dtoa_r+0x3d8>
 800ae60:	9b01      	ldr	r3, [sp, #4]
 800ae62:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae66:	930c      	str	r3, [sp, #48]	; 0x30
 800ae68:	e78d      	b.n	800ad86 <_dtoa_r+0x41e>
 800ae6a:	9900      	ldr	r1, [sp, #0]
 800ae6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae70:	4b4e      	ldr	r3, [pc, #312]	; (800afac <_dtoa_r+0x644>)
 800ae72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae76:	4401      	add	r1, r0
 800ae78:	9102      	str	r1, [sp, #8]
 800ae7a:	9908      	ldr	r1, [sp, #32]
 800ae7c:	eeb0 8a47 	vmov.f32	s16, s14
 800ae80:	eef0 8a67 	vmov.f32	s17, s15
 800ae84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d045      	beq.n	800af1c <_dtoa_r+0x5b4>
 800ae90:	494c      	ldr	r1, [pc, #304]	; (800afc4 <_dtoa_r+0x65c>)
 800ae92:	2000      	movs	r0, #0
 800ae94:	f7f5 fd0a 	bl	80008ac <__aeabi_ddiv>
 800ae98:	ec53 2b18 	vmov	r2, r3, d8
 800ae9c:	f7f5 fa24 	bl	80002e8 <__aeabi_dsub>
 800aea0:	9d00      	ldr	r5, [sp, #0]
 800aea2:	ec41 0b18 	vmov	d8, r0, r1
 800aea6:	4639      	mov	r1, r7
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7f5 fe85 	bl	8000bb8 <__aeabi_d2iz>
 800aeae:	900c      	str	r0, [sp, #48]	; 0x30
 800aeb0:	f7f5 fb68 	bl	8000584 <__aeabi_i2d>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fa14 	bl	80002e8 <__aeabi_dsub>
 800aec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aec2:	3330      	adds	r3, #48	; 0x30
 800aec4:	f805 3b01 	strb.w	r3, [r5], #1
 800aec8:	ec53 2b18 	vmov	r2, r3, d8
 800aecc:	4606      	mov	r6, r0
 800aece:	460f      	mov	r7, r1
 800aed0:	f7f5 fe34 	bl	8000b3c <__aeabi_dcmplt>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d165      	bne.n	800afa4 <_dtoa_r+0x63c>
 800aed8:	4632      	mov	r2, r6
 800aeda:	463b      	mov	r3, r7
 800aedc:	4935      	ldr	r1, [pc, #212]	; (800afb4 <_dtoa_r+0x64c>)
 800aede:	2000      	movs	r0, #0
 800aee0:	f7f5 fa02 	bl	80002e8 <__aeabi_dsub>
 800aee4:	ec53 2b18 	vmov	r2, r3, d8
 800aee8:	f7f5 fe28 	bl	8000b3c <__aeabi_dcmplt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f040 80b9 	bne.w	800b064 <_dtoa_r+0x6fc>
 800aef2:	9b02      	ldr	r3, [sp, #8]
 800aef4:	429d      	cmp	r5, r3
 800aef6:	f43f af75 	beq.w	800ade4 <_dtoa_r+0x47c>
 800aefa:	4b2f      	ldr	r3, [pc, #188]	; (800afb8 <_dtoa_r+0x650>)
 800aefc:	ec51 0b18 	vmov	r0, r1, d8
 800af00:	2200      	movs	r2, #0
 800af02:	f7f5 fba9 	bl	8000658 <__aeabi_dmul>
 800af06:	4b2c      	ldr	r3, [pc, #176]	; (800afb8 <_dtoa_r+0x650>)
 800af08:	ec41 0b18 	vmov	d8, r0, r1
 800af0c:	2200      	movs	r2, #0
 800af0e:	4630      	mov	r0, r6
 800af10:	4639      	mov	r1, r7
 800af12:	f7f5 fba1 	bl	8000658 <__aeabi_dmul>
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	e7c4      	b.n	800aea6 <_dtoa_r+0x53e>
 800af1c:	ec51 0b17 	vmov	r0, r1, d7
 800af20:	f7f5 fb9a 	bl	8000658 <__aeabi_dmul>
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	9d00      	ldr	r5, [sp, #0]
 800af28:	930c      	str	r3, [sp, #48]	; 0x30
 800af2a:	ec41 0b18 	vmov	d8, r0, r1
 800af2e:	4639      	mov	r1, r7
 800af30:	4630      	mov	r0, r6
 800af32:	f7f5 fe41 	bl	8000bb8 <__aeabi_d2iz>
 800af36:	9011      	str	r0, [sp, #68]	; 0x44
 800af38:	f7f5 fb24 	bl	8000584 <__aeabi_i2d>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 f9d0 	bl	80002e8 <__aeabi_dsub>
 800af48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af4a:	3330      	adds	r3, #48	; 0x30
 800af4c:	f805 3b01 	strb.w	r3, [r5], #1
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	429d      	cmp	r5, r3
 800af54:	4606      	mov	r6, r0
 800af56:	460f      	mov	r7, r1
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	d134      	bne.n	800afc8 <_dtoa_r+0x660>
 800af5e:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <_dtoa_r+0x65c>)
 800af60:	ec51 0b18 	vmov	r0, r1, d8
 800af64:	f7f5 f9c2 	bl	80002ec <__adddf3>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fe02 	bl	8000b78 <__aeabi_dcmpgt>
 800af74:	2800      	cmp	r0, #0
 800af76:	d175      	bne.n	800b064 <_dtoa_r+0x6fc>
 800af78:	ec53 2b18 	vmov	r2, r3, d8
 800af7c:	4911      	ldr	r1, [pc, #68]	; (800afc4 <_dtoa_r+0x65c>)
 800af7e:	2000      	movs	r0, #0
 800af80:	f7f5 f9b2 	bl	80002e8 <__aeabi_dsub>
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4630      	mov	r0, r6
 800af8a:	4639      	mov	r1, r7
 800af8c:	f7f5 fdd6 	bl	8000b3c <__aeabi_dcmplt>
 800af90:	2800      	cmp	r0, #0
 800af92:	f43f af27 	beq.w	800ade4 <_dtoa_r+0x47c>
 800af96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af98:	1e6b      	subs	r3, r5, #1
 800af9a:	930c      	str	r3, [sp, #48]	; 0x30
 800af9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afa0:	2b30      	cmp	r3, #48	; 0x30
 800afa2:	d0f8      	beq.n	800af96 <_dtoa_r+0x62e>
 800afa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800afa8:	e04a      	b.n	800b040 <_dtoa_r+0x6d8>
 800afaa:	bf00      	nop
 800afac:	0800cb60 	.word	0x0800cb60
 800afb0:	0800cb38 	.word	0x0800cb38
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	40240000 	.word	0x40240000
 800afbc:	401c0000 	.word	0x401c0000
 800afc0:	40140000 	.word	0x40140000
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	4baf      	ldr	r3, [pc, #700]	; (800b288 <_dtoa_r+0x920>)
 800afca:	f7f5 fb45 	bl	8000658 <__aeabi_dmul>
 800afce:	4606      	mov	r6, r0
 800afd0:	460f      	mov	r7, r1
 800afd2:	e7ac      	b.n	800af2e <_dtoa_r+0x5c6>
 800afd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afd8:	9d00      	ldr	r5, [sp, #0]
 800afda:	4642      	mov	r2, r8
 800afdc:	464b      	mov	r3, r9
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	f7f5 fc63 	bl	80008ac <__aeabi_ddiv>
 800afe6:	f7f5 fde7 	bl	8000bb8 <__aeabi_d2iz>
 800afea:	9002      	str	r0, [sp, #8]
 800afec:	f7f5 faca 	bl	8000584 <__aeabi_i2d>
 800aff0:	4642      	mov	r2, r8
 800aff2:	464b      	mov	r3, r9
 800aff4:	f7f5 fb30 	bl	8000658 <__aeabi_dmul>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4630      	mov	r0, r6
 800affe:	4639      	mov	r1, r7
 800b000:	f7f5 f972 	bl	80002e8 <__aeabi_dsub>
 800b004:	9e02      	ldr	r6, [sp, #8]
 800b006:	9f01      	ldr	r7, [sp, #4]
 800b008:	3630      	adds	r6, #48	; 0x30
 800b00a:	f805 6b01 	strb.w	r6, [r5], #1
 800b00e:	9e00      	ldr	r6, [sp, #0]
 800b010:	1bae      	subs	r6, r5, r6
 800b012:	42b7      	cmp	r7, r6
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	d137      	bne.n	800b08a <_dtoa_r+0x722>
 800b01a:	f7f5 f967 	bl	80002ec <__adddf3>
 800b01e:	4642      	mov	r2, r8
 800b020:	464b      	mov	r3, r9
 800b022:	4606      	mov	r6, r0
 800b024:	460f      	mov	r7, r1
 800b026:	f7f5 fda7 	bl	8000b78 <__aeabi_dcmpgt>
 800b02a:	b9c8      	cbnz	r0, 800b060 <_dtoa_r+0x6f8>
 800b02c:	4642      	mov	r2, r8
 800b02e:	464b      	mov	r3, r9
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fd78 	bl	8000b28 <__aeabi_dcmpeq>
 800b038:	b110      	cbz	r0, 800b040 <_dtoa_r+0x6d8>
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	07d9      	lsls	r1, r3, #31
 800b03e:	d40f      	bmi.n	800b060 <_dtoa_r+0x6f8>
 800b040:	4620      	mov	r0, r4
 800b042:	4659      	mov	r1, fp
 800b044:	f000 fbd0 	bl	800b7e8 <_Bfree>
 800b048:	2300      	movs	r3, #0
 800b04a:	702b      	strb	r3, [r5, #0]
 800b04c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b04e:	f10a 0001 	add.w	r0, sl, #1
 800b052:	6018      	str	r0, [r3, #0]
 800b054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b056:	2b00      	cmp	r3, #0
 800b058:	f43f acd8 	beq.w	800aa0c <_dtoa_r+0xa4>
 800b05c:	601d      	str	r5, [r3, #0]
 800b05e:	e4d5      	b.n	800aa0c <_dtoa_r+0xa4>
 800b060:	f8cd a01c 	str.w	sl, [sp, #28]
 800b064:	462b      	mov	r3, r5
 800b066:	461d      	mov	r5, r3
 800b068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b06c:	2a39      	cmp	r2, #57	; 0x39
 800b06e:	d108      	bne.n	800b082 <_dtoa_r+0x71a>
 800b070:	9a00      	ldr	r2, [sp, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d1f7      	bne.n	800b066 <_dtoa_r+0x6fe>
 800b076:	9a07      	ldr	r2, [sp, #28]
 800b078:	9900      	ldr	r1, [sp, #0]
 800b07a:	3201      	adds	r2, #1
 800b07c:	9207      	str	r2, [sp, #28]
 800b07e:	2230      	movs	r2, #48	; 0x30
 800b080:	700a      	strb	r2, [r1, #0]
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	3201      	adds	r2, #1
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	e78c      	b.n	800afa4 <_dtoa_r+0x63c>
 800b08a:	4b7f      	ldr	r3, [pc, #508]	; (800b288 <_dtoa_r+0x920>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	f7f5 fae3 	bl	8000658 <__aeabi_dmul>
 800b092:	2200      	movs	r2, #0
 800b094:	2300      	movs	r3, #0
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	f7f5 fd45 	bl	8000b28 <__aeabi_dcmpeq>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d09b      	beq.n	800afda <_dtoa_r+0x672>
 800b0a2:	e7cd      	b.n	800b040 <_dtoa_r+0x6d8>
 800b0a4:	9a08      	ldr	r2, [sp, #32]
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	f000 80c4 	beq.w	800b234 <_dtoa_r+0x8cc>
 800b0ac:	9a05      	ldr	r2, [sp, #20]
 800b0ae:	2a01      	cmp	r2, #1
 800b0b0:	f300 80a8 	bgt.w	800b204 <_dtoa_r+0x89c>
 800b0b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	f000 80a0 	beq.w	800b1fc <_dtoa_r+0x894>
 800b0bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0c0:	9e06      	ldr	r6, [sp, #24]
 800b0c2:	4645      	mov	r5, r8
 800b0c4:	9a04      	ldr	r2, [sp, #16]
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	441a      	add	r2, r3
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4498      	add	r8, r3
 800b0ce:	9204      	str	r2, [sp, #16]
 800b0d0:	f000 fc46 	bl	800b960 <__i2b>
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	dd0b      	ble.n	800b0f2 <_dtoa_r+0x78a>
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dd08      	ble.n	800b0f2 <_dtoa_r+0x78a>
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	9a04      	ldr	r2, [sp, #16]
 800b0e4:	bfa8      	it	ge
 800b0e6:	462b      	movge	r3, r5
 800b0e8:	eba8 0803 	sub.w	r8, r8, r3
 800b0ec:	1aed      	subs	r5, r5, r3
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	9b06      	ldr	r3, [sp, #24]
 800b0f4:	b1fb      	cbz	r3, 800b136 <_dtoa_r+0x7ce>
 800b0f6:	9b08      	ldr	r3, [sp, #32]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 809f 	beq.w	800b23c <_dtoa_r+0x8d4>
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	dd11      	ble.n	800b126 <_dtoa_r+0x7be>
 800b102:	4639      	mov	r1, r7
 800b104:	4632      	mov	r2, r6
 800b106:	4620      	mov	r0, r4
 800b108:	f000 fce6 	bl	800bad8 <__pow5mult>
 800b10c:	465a      	mov	r2, fp
 800b10e:	4601      	mov	r1, r0
 800b110:	4607      	mov	r7, r0
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fc3a 	bl	800b98c <__multiply>
 800b118:	4659      	mov	r1, fp
 800b11a:	9007      	str	r0, [sp, #28]
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fb63 	bl	800b7e8 <_Bfree>
 800b122:	9b07      	ldr	r3, [sp, #28]
 800b124:	469b      	mov	fp, r3
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	1b9a      	subs	r2, r3, r6
 800b12a:	d004      	beq.n	800b136 <_dtoa_r+0x7ce>
 800b12c:	4659      	mov	r1, fp
 800b12e:	4620      	mov	r0, r4
 800b130:	f000 fcd2 	bl	800bad8 <__pow5mult>
 800b134:	4683      	mov	fp, r0
 800b136:	2101      	movs	r1, #1
 800b138:	4620      	mov	r0, r4
 800b13a:	f000 fc11 	bl	800b960 <__i2b>
 800b13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b140:	2b00      	cmp	r3, #0
 800b142:	4606      	mov	r6, r0
 800b144:	dd7c      	ble.n	800b240 <_dtoa_r+0x8d8>
 800b146:	461a      	mov	r2, r3
 800b148:	4601      	mov	r1, r0
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fcc4 	bl	800bad8 <__pow5mult>
 800b150:	9b05      	ldr	r3, [sp, #20]
 800b152:	2b01      	cmp	r3, #1
 800b154:	4606      	mov	r6, r0
 800b156:	dd76      	ble.n	800b246 <_dtoa_r+0x8de>
 800b158:	2300      	movs	r3, #0
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	6933      	ldr	r3, [r6, #16]
 800b15e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b162:	6918      	ldr	r0, [r3, #16]
 800b164:	f000 fbac 	bl	800b8c0 <__hi0bits>
 800b168:	f1c0 0020 	rsb	r0, r0, #32
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	4418      	add	r0, r3
 800b170:	f010 001f 	ands.w	r0, r0, #31
 800b174:	f000 8086 	beq.w	800b284 <_dtoa_r+0x91c>
 800b178:	f1c0 0320 	rsb	r3, r0, #32
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	dd7f      	ble.n	800b280 <_dtoa_r+0x918>
 800b180:	f1c0 001c 	rsb	r0, r0, #28
 800b184:	9b04      	ldr	r3, [sp, #16]
 800b186:	4403      	add	r3, r0
 800b188:	4480      	add	r8, r0
 800b18a:	4405      	add	r5, r0
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	dd05      	ble.n	800b1a0 <_dtoa_r+0x838>
 800b194:	4659      	mov	r1, fp
 800b196:	4642      	mov	r2, r8
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fcf7 	bl	800bb8c <__lshift>
 800b19e:	4683      	mov	fp, r0
 800b1a0:	9b04      	ldr	r3, [sp, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	dd05      	ble.n	800b1b2 <_dtoa_r+0x84a>
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fcee 	bl	800bb8c <__lshift>
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d069      	beq.n	800b28c <_dtoa_r+0x924>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4658      	mov	r0, fp
 800b1bc:	f000 fd52 	bl	800bc64 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	da63      	bge.n	800b28c <_dtoa_r+0x924>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	220a      	movs	r2, #10
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fb2e 	bl	800b82c <__multadd>
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1d6:	4683      	mov	fp, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 818f 	beq.w	800b4fc <_dtoa_r+0xb94>
 800b1de:	4639      	mov	r1, r7
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	220a      	movs	r2, #10
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fb21 	bl	800b82c <__multadd>
 800b1ea:	f1b9 0f00 	cmp.w	r9, #0
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	f300 808e 	bgt.w	800b310 <_dtoa_r+0x9a8>
 800b1f4:	9b05      	ldr	r3, [sp, #20]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	dc50      	bgt.n	800b29c <_dtoa_r+0x934>
 800b1fa:	e089      	b.n	800b310 <_dtoa_r+0x9a8>
 800b1fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b202:	e75d      	b.n	800b0c0 <_dtoa_r+0x758>
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	1e5e      	subs	r6, r3, #1
 800b208:	9b06      	ldr	r3, [sp, #24]
 800b20a:	42b3      	cmp	r3, r6
 800b20c:	bfbf      	itttt	lt
 800b20e:	9b06      	ldrlt	r3, [sp, #24]
 800b210:	9606      	strlt	r6, [sp, #24]
 800b212:	1af2      	sublt	r2, r6, r3
 800b214:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b216:	bfb6      	itet	lt
 800b218:	189b      	addlt	r3, r3, r2
 800b21a:	1b9e      	subge	r6, r3, r6
 800b21c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	bfb8      	it	lt
 800b222:	2600      	movlt	r6, #0
 800b224:	2b00      	cmp	r3, #0
 800b226:	bfb5      	itete	lt
 800b228:	eba8 0503 	sublt.w	r5, r8, r3
 800b22c:	9b01      	ldrge	r3, [sp, #4]
 800b22e:	2300      	movlt	r3, #0
 800b230:	4645      	movge	r5, r8
 800b232:	e747      	b.n	800b0c4 <_dtoa_r+0x75c>
 800b234:	9e06      	ldr	r6, [sp, #24]
 800b236:	9f08      	ldr	r7, [sp, #32]
 800b238:	4645      	mov	r5, r8
 800b23a:	e74c      	b.n	800b0d6 <_dtoa_r+0x76e>
 800b23c:	9a06      	ldr	r2, [sp, #24]
 800b23e:	e775      	b.n	800b12c <_dtoa_r+0x7c4>
 800b240:	9b05      	ldr	r3, [sp, #20]
 800b242:	2b01      	cmp	r3, #1
 800b244:	dc18      	bgt.n	800b278 <_dtoa_r+0x910>
 800b246:	9b02      	ldr	r3, [sp, #8]
 800b248:	b9b3      	cbnz	r3, 800b278 <_dtoa_r+0x910>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b250:	b9a3      	cbnz	r3, 800b27c <_dtoa_r+0x914>
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b258:	0d1b      	lsrs	r3, r3, #20
 800b25a:	051b      	lsls	r3, r3, #20
 800b25c:	b12b      	cbz	r3, 800b26a <_dtoa_r+0x902>
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	3301      	adds	r3, #1
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	f108 0801 	add.w	r8, r8, #1
 800b268:	2301      	movs	r3, #1
 800b26a:	9306      	str	r3, [sp, #24]
 800b26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f47f af74 	bne.w	800b15c <_dtoa_r+0x7f4>
 800b274:	2001      	movs	r0, #1
 800b276:	e779      	b.n	800b16c <_dtoa_r+0x804>
 800b278:	2300      	movs	r3, #0
 800b27a:	e7f6      	b.n	800b26a <_dtoa_r+0x902>
 800b27c:	9b02      	ldr	r3, [sp, #8]
 800b27e:	e7f4      	b.n	800b26a <_dtoa_r+0x902>
 800b280:	d085      	beq.n	800b18e <_dtoa_r+0x826>
 800b282:	4618      	mov	r0, r3
 800b284:	301c      	adds	r0, #28
 800b286:	e77d      	b.n	800b184 <_dtoa_r+0x81c>
 800b288:	40240000 	.word	0x40240000
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dc38      	bgt.n	800b304 <_dtoa_r+0x99c>
 800b292:	9b05      	ldr	r3, [sp, #20]
 800b294:	2b02      	cmp	r3, #2
 800b296:	dd35      	ble.n	800b304 <_dtoa_r+0x99c>
 800b298:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b29c:	f1b9 0f00 	cmp.w	r9, #0
 800b2a0:	d10d      	bne.n	800b2be <_dtoa_r+0x956>
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	2205      	movs	r2, #5
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fabf 	bl	800b82c <__multadd>
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	4658      	mov	r0, fp
 800b2b4:	f000 fcd6 	bl	800bc64 <__mcmp>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f73f adbd 	bgt.w	800ae38 <_dtoa_r+0x4d0>
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	9d00      	ldr	r5, [sp, #0]
 800b2c2:	ea6f 0a03 	mvn.w	sl, r3
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fa8b 	bl	800b7e8 <_Bfree>
 800b2d2:	2f00      	cmp	r7, #0
 800b2d4:	f43f aeb4 	beq.w	800b040 <_dtoa_r+0x6d8>
 800b2d8:	f1b8 0f00 	cmp.w	r8, #0
 800b2dc:	d005      	beq.n	800b2ea <_dtoa_r+0x982>
 800b2de:	45b8      	cmp	r8, r7
 800b2e0:	d003      	beq.n	800b2ea <_dtoa_r+0x982>
 800b2e2:	4641      	mov	r1, r8
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fa7f 	bl	800b7e8 <_Bfree>
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fa7b 	bl	800b7e8 <_Bfree>
 800b2f2:	e6a5      	b.n	800b040 <_dtoa_r+0x6d8>
 800b2f4:	2600      	movs	r6, #0
 800b2f6:	4637      	mov	r7, r6
 800b2f8:	e7e1      	b.n	800b2be <_dtoa_r+0x956>
 800b2fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b2fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b300:	4637      	mov	r7, r6
 800b302:	e599      	b.n	800ae38 <_dtoa_r+0x4d0>
 800b304:	9b08      	ldr	r3, [sp, #32]
 800b306:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80fd 	beq.w	800b50a <_dtoa_r+0xba2>
 800b310:	2d00      	cmp	r5, #0
 800b312:	dd05      	ble.n	800b320 <_dtoa_r+0x9b8>
 800b314:	4639      	mov	r1, r7
 800b316:	462a      	mov	r2, r5
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fc37 	bl	800bb8c <__lshift>
 800b31e:	4607      	mov	r7, r0
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d05c      	beq.n	800b3e0 <_dtoa_r+0xa78>
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fa1d 	bl	800b768 <_Balloc>
 800b32e:	4605      	mov	r5, r0
 800b330:	b928      	cbnz	r0, 800b33e <_dtoa_r+0x9d6>
 800b332:	4b80      	ldr	r3, [pc, #512]	; (800b534 <_dtoa_r+0xbcc>)
 800b334:	4602      	mov	r2, r0
 800b336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b33a:	f7ff bb2e 	b.w	800a99a <_dtoa_r+0x32>
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	0092      	lsls	r2, r2, #2
 800b344:	f107 010c 	add.w	r1, r7, #12
 800b348:	300c      	adds	r0, #12
 800b34a:	f000 f9ff 	bl	800b74c <memcpy>
 800b34e:	2201      	movs	r2, #1
 800b350:	4629      	mov	r1, r5
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fc1a 	bl	800bb8c <__lshift>
 800b358:	9b00      	ldr	r3, [sp, #0]
 800b35a:	3301      	adds	r3, #1
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	9b00      	ldr	r3, [sp, #0]
 800b360:	444b      	add	r3, r9
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	46b8      	mov	r8, r7
 800b36c:	9306      	str	r3, [sp, #24]
 800b36e:	4607      	mov	r7, r0
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	4631      	mov	r1, r6
 800b374:	3b01      	subs	r3, #1
 800b376:	4658      	mov	r0, fp
 800b378:	9302      	str	r3, [sp, #8]
 800b37a:	f7ff fa67 	bl	800a84c <quorem>
 800b37e:	4603      	mov	r3, r0
 800b380:	3330      	adds	r3, #48	; 0x30
 800b382:	9004      	str	r0, [sp, #16]
 800b384:	4641      	mov	r1, r8
 800b386:	4658      	mov	r0, fp
 800b388:	9308      	str	r3, [sp, #32]
 800b38a:	f000 fc6b 	bl	800bc64 <__mcmp>
 800b38e:	463a      	mov	r2, r7
 800b390:	4681      	mov	r9, r0
 800b392:	4631      	mov	r1, r6
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fc81 	bl	800bc9c <__mdiff>
 800b39a:	68c2      	ldr	r2, [r0, #12]
 800b39c:	9b08      	ldr	r3, [sp, #32]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	bb02      	cbnz	r2, 800b3e4 <_dtoa_r+0xa7c>
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	4658      	mov	r0, fp
 800b3a6:	f000 fc5d 	bl	800bc64 <__mcmp>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b3b6:	f000 fa17 	bl	800b7e8 <_Bfree>
 800b3ba:	9b05      	ldr	r3, [sp, #20]
 800b3bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3be:	9d01      	ldr	r5, [sp, #4]
 800b3c0:	ea43 0102 	orr.w	r1, r3, r2
 800b3c4:	9b06      	ldr	r3, [sp, #24]
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	d10d      	bne.n	800b3e8 <_dtoa_r+0xa80>
 800b3cc:	2b39      	cmp	r3, #57	; 0x39
 800b3ce:	d029      	beq.n	800b424 <_dtoa_r+0xabc>
 800b3d0:	f1b9 0f00 	cmp.w	r9, #0
 800b3d4:	dd01      	ble.n	800b3da <_dtoa_r+0xa72>
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	3331      	adds	r3, #49	; 0x31
 800b3da:	9a02      	ldr	r2, [sp, #8]
 800b3dc:	7013      	strb	r3, [r2, #0]
 800b3de:	e774      	b.n	800b2ca <_dtoa_r+0x962>
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	e7b9      	b.n	800b358 <_dtoa_r+0x9f0>
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	e7e2      	b.n	800b3ae <_dtoa_r+0xa46>
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	db06      	blt.n	800b3fc <_dtoa_r+0xa94>
 800b3ee:	9905      	ldr	r1, [sp, #20]
 800b3f0:	ea41 0909 	orr.w	r9, r1, r9
 800b3f4:	9906      	ldr	r1, [sp, #24]
 800b3f6:	ea59 0101 	orrs.w	r1, r9, r1
 800b3fa:	d120      	bne.n	800b43e <_dtoa_r+0xad6>
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	ddec      	ble.n	800b3da <_dtoa_r+0xa72>
 800b400:	4659      	mov	r1, fp
 800b402:	2201      	movs	r2, #1
 800b404:	4620      	mov	r0, r4
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	f000 fbc0 	bl	800bb8c <__lshift>
 800b40c:	4631      	mov	r1, r6
 800b40e:	4683      	mov	fp, r0
 800b410:	f000 fc28 	bl	800bc64 <__mcmp>
 800b414:	2800      	cmp	r0, #0
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	dc02      	bgt.n	800b420 <_dtoa_r+0xab8>
 800b41a:	d1de      	bne.n	800b3da <_dtoa_r+0xa72>
 800b41c:	07da      	lsls	r2, r3, #31
 800b41e:	d5dc      	bpl.n	800b3da <_dtoa_r+0xa72>
 800b420:	2b39      	cmp	r3, #57	; 0x39
 800b422:	d1d8      	bne.n	800b3d6 <_dtoa_r+0xa6e>
 800b424:	9a02      	ldr	r2, [sp, #8]
 800b426:	2339      	movs	r3, #57	; 0x39
 800b428:	7013      	strb	r3, [r2, #0]
 800b42a:	462b      	mov	r3, r5
 800b42c:	461d      	mov	r5, r3
 800b42e:	3b01      	subs	r3, #1
 800b430:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b434:	2a39      	cmp	r2, #57	; 0x39
 800b436:	d050      	beq.n	800b4da <_dtoa_r+0xb72>
 800b438:	3201      	adds	r2, #1
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e745      	b.n	800b2ca <_dtoa_r+0x962>
 800b43e:	2a00      	cmp	r2, #0
 800b440:	dd03      	ble.n	800b44a <_dtoa_r+0xae2>
 800b442:	2b39      	cmp	r3, #57	; 0x39
 800b444:	d0ee      	beq.n	800b424 <_dtoa_r+0xabc>
 800b446:	3301      	adds	r3, #1
 800b448:	e7c7      	b.n	800b3da <_dtoa_r+0xa72>
 800b44a:	9a01      	ldr	r2, [sp, #4]
 800b44c:	9907      	ldr	r1, [sp, #28]
 800b44e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b452:	428a      	cmp	r2, r1
 800b454:	d02a      	beq.n	800b4ac <_dtoa_r+0xb44>
 800b456:	4659      	mov	r1, fp
 800b458:	2300      	movs	r3, #0
 800b45a:	220a      	movs	r2, #10
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 f9e5 	bl	800b82c <__multadd>
 800b462:	45b8      	cmp	r8, r7
 800b464:	4683      	mov	fp, r0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	f04f 020a 	mov.w	r2, #10
 800b46e:	4641      	mov	r1, r8
 800b470:	4620      	mov	r0, r4
 800b472:	d107      	bne.n	800b484 <_dtoa_r+0xb1c>
 800b474:	f000 f9da 	bl	800b82c <__multadd>
 800b478:	4680      	mov	r8, r0
 800b47a:	4607      	mov	r7, r0
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	3301      	adds	r3, #1
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	e775      	b.n	800b370 <_dtoa_r+0xa08>
 800b484:	f000 f9d2 	bl	800b82c <__multadd>
 800b488:	4639      	mov	r1, r7
 800b48a:	4680      	mov	r8, r0
 800b48c:	2300      	movs	r3, #0
 800b48e:	220a      	movs	r2, #10
 800b490:	4620      	mov	r0, r4
 800b492:	f000 f9cb 	bl	800b82c <__multadd>
 800b496:	4607      	mov	r7, r0
 800b498:	e7f0      	b.n	800b47c <_dtoa_r+0xb14>
 800b49a:	f1b9 0f00 	cmp.w	r9, #0
 800b49e:	9a00      	ldr	r2, [sp, #0]
 800b4a0:	bfcc      	ite	gt
 800b4a2:	464d      	movgt	r5, r9
 800b4a4:	2501      	movle	r5, #1
 800b4a6:	4415      	add	r5, r2
 800b4a8:	f04f 0800 	mov.w	r8, #0
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	f000 fb6a 	bl	800bb8c <__lshift>
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4683      	mov	fp, r0
 800b4bc:	f000 fbd2 	bl	800bc64 <__mcmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dcb2      	bgt.n	800b42a <_dtoa_r+0xac2>
 800b4c4:	d102      	bne.n	800b4cc <_dtoa_r+0xb64>
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	07db      	lsls	r3, r3, #31
 800b4ca:	d4ae      	bmi.n	800b42a <_dtoa_r+0xac2>
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	461d      	mov	r5, r3
 800b4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4d4:	2a30      	cmp	r2, #48	; 0x30
 800b4d6:	d0fa      	beq.n	800b4ce <_dtoa_r+0xb66>
 800b4d8:	e6f7      	b.n	800b2ca <_dtoa_r+0x962>
 800b4da:	9a00      	ldr	r2, [sp, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d1a5      	bne.n	800b42c <_dtoa_r+0xac4>
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	2331      	movs	r3, #49	; 0x31
 800b4e6:	e779      	b.n	800b3dc <_dtoa_r+0xa74>
 800b4e8:	4b13      	ldr	r3, [pc, #76]	; (800b538 <_dtoa_r+0xbd0>)
 800b4ea:	f7ff baaf 	b.w	800aa4c <_dtoa_r+0xe4>
 800b4ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f47f aa86 	bne.w	800aa02 <_dtoa_r+0x9a>
 800b4f6:	4b11      	ldr	r3, [pc, #68]	; (800b53c <_dtoa_r+0xbd4>)
 800b4f8:	f7ff baa8 	b.w	800aa4c <_dtoa_r+0xe4>
 800b4fc:	f1b9 0f00 	cmp.w	r9, #0
 800b500:	dc03      	bgt.n	800b50a <_dtoa_r+0xba2>
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	2b02      	cmp	r3, #2
 800b506:	f73f aec9 	bgt.w	800b29c <_dtoa_r+0x934>
 800b50a:	9d00      	ldr	r5, [sp, #0]
 800b50c:	4631      	mov	r1, r6
 800b50e:	4658      	mov	r0, fp
 800b510:	f7ff f99c 	bl	800a84c <quorem>
 800b514:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b518:	f805 3b01 	strb.w	r3, [r5], #1
 800b51c:	9a00      	ldr	r2, [sp, #0]
 800b51e:	1aaa      	subs	r2, r5, r2
 800b520:	4591      	cmp	r9, r2
 800b522:	ddba      	ble.n	800b49a <_dtoa_r+0xb32>
 800b524:	4659      	mov	r1, fp
 800b526:	2300      	movs	r3, #0
 800b528:	220a      	movs	r2, #10
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 f97e 	bl	800b82c <__multadd>
 800b530:	4683      	mov	fp, r0
 800b532:	e7eb      	b.n	800b50c <_dtoa_r+0xba4>
 800b534:	0800ca63 	.word	0x0800ca63
 800b538:	0800c9bc 	.word	0x0800c9bc
 800b53c:	0800c9e0 	.word	0x0800c9e0

0800b540 <std>:
 800b540:	2300      	movs	r3, #0
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	e9c0 3300 	strd	r3, r3, [r0]
 800b54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b54e:	6083      	str	r3, [r0, #8]
 800b550:	8181      	strh	r1, [r0, #12]
 800b552:	6643      	str	r3, [r0, #100]	; 0x64
 800b554:	81c2      	strh	r2, [r0, #14]
 800b556:	6183      	str	r3, [r0, #24]
 800b558:	4619      	mov	r1, r3
 800b55a:	2208      	movs	r2, #8
 800b55c:	305c      	adds	r0, #92	; 0x5c
 800b55e:	f7fe fceb 	bl	8009f38 <memset>
 800b562:	4b05      	ldr	r3, [pc, #20]	; (800b578 <std+0x38>)
 800b564:	6263      	str	r3, [r4, #36]	; 0x24
 800b566:	4b05      	ldr	r3, [pc, #20]	; (800b57c <std+0x3c>)
 800b568:	62a3      	str	r3, [r4, #40]	; 0x28
 800b56a:	4b05      	ldr	r3, [pc, #20]	; (800b580 <std+0x40>)
 800b56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b56e:	4b05      	ldr	r3, [pc, #20]	; (800b584 <std+0x44>)
 800b570:	6224      	str	r4, [r4, #32]
 800b572:	6323      	str	r3, [r4, #48]	; 0x30
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800c2ad 	.word	0x0800c2ad
 800b57c:	0800c2cf 	.word	0x0800c2cf
 800b580:	0800c307 	.word	0x0800c307
 800b584:	0800c32b 	.word	0x0800c32b

0800b588 <_cleanup_r>:
 800b588:	4901      	ldr	r1, [pc, #4]	; (800b590 <_cleanup_r+0x8>)
 800b58a:	f000 b8af 	b.w	800b6ec <_fwalk_reent>
 800b58e:	bf00      	nop
 800b590:	0800c641 	.word	0x0800c641

0800b594 <__sfmoreglue>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	1e4a      	subs	r2, r1, #1
 800b598:	2568      	movs	r5, #104	; 0x68
 800b59a:	4355      	muls	r5, r2
 800b59c:	460e      	mov	r6, r1
 800b59e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5a2:	f000 fcbf 	bl	800bf24 <_malloc_r>
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	b140      	cbz	r0, 800b5bc <__sfmoreglue+0x28>
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	e9c0 1600 	strd	r1, r6, [r0]
 800b5b0:	300c      	adds	r0, #12
 800b5b2:	60a0      	str	r0, [r4, #8]
 800b5b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5b8:	f7fe fcbe 	bl	8009f38 <memset>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	bd70      	pop	{r4, r5, r6, pc}

0800b5c0 <__sfp_lock_acquire>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	; (800b5c8 <__sfp_lock_acquire+0x8>)
 800b5c2:	f000 b8b8 	b.w	800b736 <__retarget_lock_acquire_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	20000a64 	.word	0x20000a64

0800b5cc <__sfp_lock_release>:
 800b5cc:	4801      	ldr	r0, [pc, #4]	; (800b5d4 <__sfp_lock_release+0x8>)
 800b5ce:	f000 b8b3 	b.w	800b738 <__retarget_lock_release_recursive>
 800b5d2:	bf00      	nop
 800b5d4:	20000a64 	.word	0x20000a64

0800b5d8 <__sinit_lock_acquire>:
 800b5d8:	4801      	ldr	r0, [pc, #4]	; (800b5e0 <__sinit_lock_acquire+0x8>)
 800b5da:	f000 b8ac 	b.w	800b736 <__retarget_lock_acquire_recursive>
 800b5de:	bf00      	nop
 800b5e0:	20000a5f 	.word	0x20000a5f

0800b5e4 <__sinit_lock_release>:
 800b5e4:	4801      	ldr	r0, [pc, #4]	; (800b5ec <__sinit_lock_release+0x8>)
 800b5e6:	f000 b8a7 	b.w	800b738 <__retarget_lock_release_recursive>
 800b5ea:	bf00      	nop
 800b5ec:	20000a5f 	.word	0x20000a5f

0800b5f0 <__sinit>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	f7ff fff0 	bl	800b5d8 <__sinit_lock_acquire>
 800b5f8:	69a3      	ldr	r3, [r4, #24]
 800b5fa:	b11b      	cbz	r3, 800b604 <__sinit+0x14>
 800b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b600:	f7ff bff0 	b.w	800b5e4 <__sinit_lock_release>
 800b604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b608:	6523      	str	r3, [r4, #80]	; 0x50
 800b60a:	4b13      	ldr	r3, [pc, #76]	; (800b658 <__sinit+0x68>)
 800b60c:	4a13      	ldr	r2, [pc, #76]	; (800b65c <__sinit+0x6c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	62a2      	str	r2, [r4, #40]	; 0x28
 800b612:	42a3      	cmp	r3, r4
 800b614:	bf04      	itt	eq
 800b616:	2301      	moveq	r3, #1
 800b618:	61a3      	streq	r3, [r4, #24]
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 f820 	bl	800b660 <__sfp>
 800b620:	6060      	str	r0, [r4, #4]
 800b622:	4620      	mov	r0, r4
 800b624:	f000 f81c 	bl	800b660 <__sfp>
 800b628:	60a0      	str	r0, [r4, #8]
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f818 	bl	800b660 <__sfp>
 800b630:	2200      	movs	r2, #0
 800b632:	60e0      	str	r0, [r4, #12]
 800b634:	2104      	movs	r1, #4
 800b636:	6860      	ldr	r0, [r4, #4]
 800b638:	f7ff ff82 	bl	800b540 <std>
 800b63c:	68a0      	ldr	r0, [r4, #8]
 800b63e:	2201      	movs	r2, #1
 800b640:	2109      	movs	r1, #9
 800b642:	f7ff ff7d 	bl	800b540 <std>
 800b646:	68e0      	ldr	r0, [r4, #12]
 800b648:	2202      	movs	r2, #2
 800b64a:	2112      	movs	r1, #18
 800b64c:	f7ff ff78 	bl	800b540 <std>
 800b650:	2301      	movs	r3, #1
 800b652:	61a3      	str	r3, [r4, #24]
 800b654:	e7d2      	b.n	800b5fc <__sinit+0xc>
 800b656:	bf00      	nop
 800b658:	0800c9a8 	.word	0x0800c9a8
 800b65c:	0800b589 	.word	0x0800b589

0800b660 <__sfp>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	4607      	mov	r7, r0
 800b664:	f7ff ffac 	bl	800b5c0 <__sfp_lock_acquire>
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <__sfp+0x84>)
 800b66a:	681e      	ldr	r6, [r3, #0]
 800b66c:	69b3      	ldr	r3, [r6, #24]
 800b66e:	b913      	cbnz	r3, 800b676 <__sfp+0x16>
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff ffbd 	bl	800b5f0 <__sinit>
 800b676:	3648      	adds	r6, #72	; 0x48
 800b678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	d503      	bpl.n	800b688 <__sfp+0x28>
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	b30b      	cbz	r3, 800b6c8 <__sfp+0x68>
 800b684:	6836      	ldr	r6, [r6, #0]
 800b686:	e7f7      	b.n	800b678 <__sfp+0x18>
 800b688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b68c:	b9d5      	cbnz	r5, 800b6c4 <__sfp+0x64>
 800b68e:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <__sfp+0x88>)
 800b690:	60e3      	str	r3, [r4, #12]
 800b692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b696:	6665      	str	r5, [r4, #100]	; 0x64
 800b698:	f000 f84c 	bl	800b734 <__retarget_lock_init_recursive>
 800b69c:	f7ff ff96 	bl	800b5cc <__sfp_lock_release>
 800b6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6a8:	6025      	str	r5, [r4, #0]
 800b6aa:	61a5      	str	r5, [r4, #24]
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6b4:	f7fe fc40 	bl	8009f38 <memset>
 800b6b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c4:	3468      	adds	r4, #104	; 0x68
 800b6c6:	e7d9      	b.n	800b67c <__sfp+0x1c>
 800b6c8:	2104      	movs	r1, #4
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	f7ff ff62 	bl	800b594 <__sfmoreglue>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	6030      	str	r0, [r6, #0]
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d1d5      	bne.n	800b684 <__sfp+0x24>
 800b6d8:	f7ff ff78 	bl	800b5cc <__sfp_lock_release>
 800b6dc:	230c      	movs	r3, #12
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	e7ee      	b.n	800b6c0 <__sfp+0x60>
 800b6e2:	bf00      	nop
 800b6e4:	0800c9a8 	.word	0x0800c9a8
 800b6e8:	ffff0001 	.word	0xffff0001

0800b6ec <_fwalk_reent>:
 800b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	4688      	mov	r8, r1
 800b6f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6f8:	2700      	movs	r7, #0
 800b6fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6fe:	f1b9 0901 	subs.w	r9, r9, #1
 800b702:	d505      	bpl.n	800b710 <_fwalk_reent+0x24>
 800b704:	6824      	ldr	r4, [r4, #0]
 800b706:	2c00      	cmp	r4, #0
 800b708:	d1f7      	bne.n	800b6fa <_fwalk_reent+0xe>
 800b70a:	4638      	mov	r0, r7
 800b70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b710:	89ab      	ldrh	r3, [r5, #12]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d907      	bls.n	800b726 <_fwalk_reent+0x3a>
 800b716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b71a:	3301      	adds	r3, #1
 800b71c:	d003      	beq.n	800b726 <_fwalk_reent+0x3a>
 800b71e:	4629      	mov	r1, r5
 800b720:	4630      	mov	r0, r6
 800b722:	47c0      	blx	r8
 800b724:	4307      	orrs	r7, r0
 800b726:	3568      	adds	r5, #104	; 0x68
 800b728:	e7e9      	b.n	800b6fe <_fwalk_reent+0x12>
	...

0800b72c <_localeconv_r>:
 800b72c:	4800      	ldr	r0, [pc, #0]	; (800b730 <_localeconv_r+0x4>)
 800b72e:	4770      	bx	lr
 800b730:	20000164 	.word	0x20000164

0800b734 <__retarget_lock_init_recursive>:
 800b734:	4770      	bx	lr

0800b736 <__retarget_lock_acquire_recursive>:
 800b736:	4770      	bx	lr

0800b738 <__retarget_lock_release_recursive>:
 800b738:	4770      	bx	lr
	...

0800b73c <malloc>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <malloc+0xc>)
 800b73e:	4601      	mov	r1, r0
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f000 bbef 	b.w	800bf24 <_malloc_r>
 800b746:	bf00      	nop
 800b748:	20000010 	.word	0x20000010

0800b74c <memcpy>:
 800b74c:	440a      	add	r2, r1
 800b74e:	4291      	cmp	r1, r2
 800b750:	f100 33ff 	add.w	r3, r0, #4294967295
 800b754:	d100      	bne.n	800b758 <memcpy+0xc>
 800b756:	4770      	bx	lr
 800b758:	b510      	push	{r4, lr}
 800b75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b762:	4291      	cmp	r1, r2
 800b764:	d1f9      	bne.n	800b75a <memcpy+0xe>
 800b766:	bd10      	pop	{r4, pc}

0800b768 <_Balloc>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b76c:	4604      	mov	r4, r0
 800b76e:	460d      	mov	r5, r1
 800b770:	b976      	cbnz	r6, 800b790 <_Balloc+0x28>
 800b772:	2010      	movs	r0, #16
 800b774:	f7ff ffe2 	bl	800b73c <malloc>
 800b778:	4602      	mov	r2, r0
 800b77a:	6260      	str	r0, [r4, #36]	; 0x24
 800b77c:	b920      	cbnz	r0, 800b788 <_Balloc+0x20>
 800b77e:	4b18      	ldr	r3, [pc, #96]	; (800b7e0 <_Balloc+0x78>)
 800b780:	4818      	ldr	r0, [pc, #96]	; (800b7e4 <_Balloc+0x7c>)
 800b782:	2166      	movs	r1, #102	; 0x66
 800b784:	f000 fea8 	bl	800c4d8 <__assert_func>
 800b788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b78c:	6006      	str	r6, [r0, #0]
 800b78e:	60c6      	str	r6, [r0, #12]
 800b790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b792:	68f3      	ldr	r3, [r6, #12]
 800b794:	b183      	cbz	r3, 800b7b8 <_Balloc+0x50>
 800b796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b79e:	b9b8      	cbnz	r0, 800b7d0 <_Balloc+0x68>
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b7a6:	1d72      	adds	r2, r6, #5
 800b7a8:	0092      	lsls	r2, r2, #2
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 fb5a 	bl	800be64 <_calloc_r>
 800b7b0:	b160      	cbz	r0, 800b7cc <_Balloc+0x64>
 800b7b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7b6:	e00e      	b.n	800b7d6 <_Balloc+0x6e>
 800b7b8:	2221      	movs	r2, #33	; 0x21
 800b7ba:	2104      	movs	r1, #4
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 fb51 	bl	800be64 <_calloc_r>
 800b7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c4:	60f0      	str	r0, [r6, #12]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e4      	bne.n	800b796 <_Balloc+0x2e>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	6802      	ldr	r2, [r0, #0]
 800b7d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7dc:	e7f7      	b.n	800b7ce <_Balloc+0x66>
 800b7de:	bf00      	nop
 800b7e0:	0800c9ed 	.word	0x0800c9ed
 800b7e4:	0800cad4 	.word	0x0800cad4

0800b7e8 <_Bfree>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	b976      	cbnz	r6, 800b810 <_Bfree+0x28>
 800b7f2:	2010      	movs	r0, #16
 800b7f4:	f7ff ffa2 	bl	800b73c <malloc>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	6268      	str	r0, [r5, #36]	; 0x24
 800b7fc:	b920      	cbnz	r0, 800b808 <_Bfree+0x20>
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <_Bfree+0x3c>)
 800b800:	4809      	ldr	r0, [pc, #36]	; (800b828 <_Bfree+0x40>)
 800b802:	218a      	movs	r1, #138	; 0x8a
 800b804:	f000 fe68 	bl	800c4d8 <__assert_func>
 800b808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b80c:	6006      	str	r6, [r0, #0]
 800b80e:	60c6      	str	r6, [r0, #12]
 800b810:	b13c      	cbz	r4, 800b822 <_Bfree+0x3a>
 800b812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b814:	6862      	ldr	r2, [r4, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b81c:	6021      	str	r1, [r4, #0]
 800b81e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	0800c9ed 	.word	0x0800c9ed
 800b828:	0800cad4 	.word	0x0800cad4

0800b82c <__multadd>:
 800b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b830:	690e      	ldr	r6, [r1, #16]
 800b832:	4607      	mov	r7, r0
 800b834:	4698      	mov	r8, r3
 800b836:	460c      	mov	r4, r1
 800b838:	f101 0014 	add.w	r0, r1, #20
 800b83c:	2300      	movs	r3, #0
 800b83e:	6805      	ldr	r5, [r0, #0]
 800b840:	b2a9      	uxth	r1, r5
 800b842:	fb02 8101 	mla	r1, r2, r1, r8
 800b846:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b84a:	0c2d      	lsrs	r5, r5, #16
 800b84c:	fb02 c505 	mla	r5, r2, r5, ip
 800b850:	b289      	uxth	r1, r1
 800b852:	3301      	adds	r3, #1
 800b854:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b858:	429e      	cmp	r6, r3
 800b85a:	f840 1b04 	str.w	r1, [r0], #4
 800b85e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b862:	dcec      	bgt.n	800b83e <__multadd+0x12>
 800b864:	f1b8 0f00 	cmp.w	r8, #0
 800b868:	d022      	beq.n	800b8b0 <__multadd+0x84>
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	42b3      	cmp	r3, r6
 800b86e:	dc19      	bgt.n	800b8a4 <__multadd+0x78>
 800b870:	6861      	ldr	r1, [r4, #4]
 800b872:	4638      	mov	r0, r7
 800b874:	3101      	adds	r1, #1
 800b876:	f7ff ff77 	bl	800b768 <_Balloc>
 800b87a:	4605      	mov	r5, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__multadd+0x5e>
 800b87e:	4602      	mov	r2, r0
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <__multadd+0x8c>)
 800b882:	480e      	ldr	r0, [pc, #56]	; (800b8bc <__multadd+0x90>)
 800b884:	21b5      	movs	r1, #181	; 0xb5
 800b886:	f000 fe27 	bl	800c4d8 <__assert_func>
 800b88a:	6922      	ldr	r2, [r4, #16]
 800b88c:	3202      	adds	r2, #2
 800b88e:	f104 010c 	add.w	r1, r4, #12
 800b892:	0092      	lsls	r2, r2, #2
 800b894:	300c      	adds	r0, #12
 800b896:	f7ff ff59 	bl	800b74c <memcpy>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4638      	mov	r0, r7
 800b89e:	f7ff ffa3 	bl	800b7e8 <_Bfree>
 800b8a2:	462c      	mov	r4, r5
 800b8a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b8a8:	3601      	adds	r6, #1
 800b8aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b8ae:	6126      	str	r6, [r4, #16]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800ca63 	.word	0x0800ca63
 800b8bc:	0800cad4 	.word	0x0800cad4

0800b8c0 <__hi0bits>:
 800b8c0:	0c03      	lsrs	r3, r0, #16
 800b8c2:	041b      	lsls	r3, r3, #16
 800b8c4:	b9d3      	cbnz	r3, 800b8fc <__hi0bits+0x3c>
 800b8c6:	0400      	lsls	r0, r0, #16
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8ce:	bf04      	itt	eq
 800b8d0:	0200      	lsleq	r0, r0, #8
 800b8d2:	3308      	addeq	r3, #8
 800b8d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8d8:	bf04      	itt	eq
 800b8da:	0100      	lsleq	r0, r0, #4
 800b8dc:	3304      	addeq	r3, #4
 800b8de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8e2:	bf04      	itt	eq
 800b8e4:	0080      	lsleq	r0, r0, #2
 800b8e6:	3302      	addeq	r3, #2
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	db05      	blt.n	800b8f8 <__hi0bits+0x38>
 800b8ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8f0:	f103 0301 	add.w	r3, r3, #1
 800b8f4:	bf08      	it	eq
 800b8f6:	2320      	moveq	r3, #32
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	4770      	bx	lr
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e7e4      	b.n	800b8ca <__hi0bits+0xa>

0800b900 <__lo0bits>:
 800b900:	6803      	ldr	r3, [r0, #0]
 800b902:	f013 0207 	ands.w	r2, r3, #7
 800b906:	4601      	mov	r1, r0
 800b908:	d00b      	beq.n	800b922 <__lo0bits+0x22>
 800b90a:	07da      	lsls	r2, r3, #31
 800b90c:	d424      	bmi.n	800b958 <__lo0bits+0x58>
 800b90e:	0798      	lsls	r0, r3, #30
 800b910:	bf49      	itett	mi
 800b912:	085b      	lsrmi	r3, r3, #1
 800b914:	089b      	lsrpl	r3, r3, #2
 800b916:	2001      	movmi	r0, #1
 800b918:	600b      	strmi	r3, [r1, #0]
 800b91a:	bf5c      	itt	pl
 800b91c:	600b      	strpl	r3, [r1, #0]
 800b91e:	2002      	movpl	r0, #2
 800b920:	4770      	bx	lr
 800b922:	b298      	uxth	r0, r3
 800b924:	b9b0      	cbnz	r0, 800b954 <__lo0bits+0x54>
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	2010      	movs	r0, #16
 800b92a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b92e:	bf04      	itt	eq
 800b930:	0a1b      	lsreq	r3, r3, #8
 800b932:	3008      	addeq	r0, #8
 800b934:	071a      	lsls	r2, r3, #28
 800b936:	bf04      	itt	eq
 800b938:	091b      	lsreq	r3, r3, #4
 800b93a:	3004      	addeq	r0, #4
 800b93c:	079a      	lsls	r2, r3, #30
 800b93e:	bf04      	itt	eq
 800b940:	089b      	lsreq	r3, r3, #2
 800b942:	3002      	addeq	r0, #2
 800b944:	07da      	lsls	r2, r3, #31
 800b946:	d403      	bmi.n	800b950 <__lo0bits+0x50>
 800b948:	085b      	lsrs	r3, r3, #1
 800b94a:	f100 0001 	add.w	r0, r0, #1
 800b94e:	d005      	beq.n	800b95c <__lo0bits+0x5c>
 800b950:	600b      	str	r3, [r1, #0]
 800b952:	4770      	bx	lr
 800b954:	4610      	mov	r0, r2
 800b956:	e7e8      	b.n	800b92a <__lo0bits+0x2a>
 800b958:	2000      	movs	r0, #0
 800b95a:	4770      	bx	lr
 800b95c:	2020      	movs	r0, #32
 800b95e:	4770      	bx	lr

0800b960 <__i2b>:
 800b960:	b510      	push	{r4, lr}
 800b962:	460c      	mov	r4, r1
 800b964:	2101      	movs	r1, #1
 800b966:	f7ff feff 	bl	800b768 <_Balloc>
 800b96a:	4602      	mov	r2, r0
 800b96c:	b928      	cbnz	r0, 800b97a <__i2b+0x1a>
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <__i2b+0x24>)
 800b970:	4805      	ldr	r0, [pc, #20]	; (800b988 <__i2b+0x28>)
 800b972:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b976:	f000 fdaf 	bl	800c4d8 <__assert_func>
 800b97a:	2301      	movs	r3, #1
 800b97c:	6144      	str	r4, [r0, #20]
 800b97e:	6103      	str	r3, [r0, #16]
 800b980:	bd10      	pop	{r4, pc}
 800b982:	bf00      	nop
 800b984:	0800ca63 	.word	0x0800ca63
 800b988:	0800cad4 	.word	0x0800cad4

0800b98c <__multiply>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	4614      	mov	r4, r2
 800b992:	690a      	ldr	r2, [r1, #16]
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	bfb8      	it	lt
 800b99a:	460b      	movlt	r3, r1
 800b99c:	460d      	mov	r5, r1
 800b99e:	bfbc      	itt	lt
 800b9a0:	4625      	movlt	r5, r4
 800b9a2:	461c      	movlt	r4, r3
 800b9a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b9a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b9ac:	68ab      	ldr	r3, [r5, #8]
 800b9ae:	6869      	ldr	r1, [r5, #4]
 800b9b0:	eb0a 0709 	add.w	r7, sl, r9
 800b9b4:	42bb      	cmp	r3, r7
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	bfb8      	it	lt
 800b9ba:	3101      	addlt	r1, #1
 800b9bc:	f7ff fed4 	bl	800b768 <_Balloc>
 800b9c0:	b930      	cbnz	r0, 800b9d0 <__multiply+0x44>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4b42      	ldr	r3, [pc, #264]	; (800bad0 <__multiply+0x144>)
 800b9c6:	4843      	ldr	r0, [pc, #268]	; (800bad4 <__multiply+0x148>)
 800b9c8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9cc:	f000 fd84 	bl	800c4d8 <__assert_func>
 800b9d0:	f100 0614 	add.w	r6, r0, #20
 800b9d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b9d8:	4633      	mov	r3, r6
 800b9da:	2200      	movs	r2, #0
 800b9dc:	4543      	cmp	r3, r8
 800b9de:	d31e      	bcc.n	800ba1e <__multiply+0x92>
 800b9e0:	f105 0c14 	add.w	ip, r5, #20
 800b9e4:	f104 0314 	add.w	r3, r4, #20
 800b9e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b9ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b9f0:	9202      	str	r2, [sp, #8]
 800b9f2:	ebac 0205 	sub.w	r2, ip, r5
 800b9f6:	3a15      	subs	r2, #21
 800b9f8:	f022 0203 	bic.w	r2, r2, #3
 800b9fc:	3204      	adds	r2, #4
 800b9fe:	f105 0115 	add.w	r1, r5, #21
 800ba02:	458c      	cmp	ip, r1
 800ba04:	bf38      	it	cc
 800ba06:	2204      	movcc	r2, #4
 800ba08:	9201      	str	r2, [sp, #4]
 800ba0a:	9a02      	ldr	r2, [sp, #8]
 800ba0c:	9303      	str	r3, [sp, #12]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d808      	bhi.n	800ba24 <__multiply+0x98>
 800ba12:	2f00      	cmp	r7, #0
 800ba14:	dc55      	bgt.n	800bac2 <__multiply+0x136>
 800ba16:	6107      	str	r7, [r0, #16]
 800ba18:	b005      	add	sp, #20
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	f843 2b04 	str.w	r2, [r3], #4
 800ba22:	e7db      	b.n	800b9dc <__multiply+0x50>
 800ba24:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba28:	f1ba 0f00 	cmp.w	sl, #0
 800ba2c:	d020      	beq.n	800ba70 <__multiply+0xe4>
 800ba2e:	f105 0e14 	add.w	lr, r5, #20
 800ba32:	46b1      	mov	r9, r6
 800ba34:	2200      	movs	r2, #0
 800ba36:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba3a:	f8d9 b000 	ldr.w	fp, [r9]
 800ba3e:	b2a1      	uxth	r1, r4
 800ba40:	fa1f fb8b 	uxth.w	fp, fp
 800ba44:	fb0a b101 	mla	r1, sl, r1, fp
 800ba48:	4411      	add	r1, r2
 800ba4a:	f8d9 2000 	ldr.w	r2, [r9]
 800ba4e:	0c24      	lsrs	r4, r4, #16
 800ba50:	0c12      	lsrs	r2, r2, #16
 800ba52:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba5a:	b289      	uxth	r1, r1
 800ba5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba60:	45f4      	cmp	ip, lr
 800ba62:	f849 1b04 	str.w	r1, [r9], #4
 800ba66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba6a:	d8e4      	bhi.n	800ba36 <__multiply+0xaa>
 800ba6c:	9901      	ldr	r1, [sp, #4]
 800ba6e:	5072      	str	r2, [r6, r1]
 800ba70:	9a03      	ldr	r2, [sp, #12]
 800ba72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba76:	3304      	adds	r3, #4
 800ba78:	f1b9 0f00 	cmp.w	r9, #0
 800ba7c:	d01f      	beq.n	800babe <__multiply+0x132>
 800ba7e:	6834      	ldr	r4, [r6, #0]
 800ba80:	f105 0114 	add.w	r1, r5, #20
 800ba84:	46b6      	mov	lr, r6
 800ba86:	f04f 0a00 	mov.w	sl, #0
 800ba8a:	880a      	ldrh	r2, [r1, #0]
 800ba8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ba90:	fb09 b202 	mla	r2, r9, r2, fp
 800ba94:	4492      	add	sl, r2
 800ba96:	b2a4      	uxth	r4, r4
 800ba98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ba9c:	f84e 4b04 	str.w	r4, [lr], #4
 800baa0:	f851 4b04 	ldr.w	r4, [r1], #4
 800baa4:	f8be 2000 	ldrh.w	r2, [lr]
 800baa8:	0c24      	lsrs	r4, r4, #16
 800baaa:	fb09 2404 	mla	r4, r9, r4, r2
 800baae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bab2:	458c      	cmp	ip, r1
 800bab4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bab8:	d8e7      	bhi.n	800ba8a <__multiply+0xfe>
 800baba:	9a01      	ldr	r2, [sp, #4]
 800babc:	50b4      	str	r4, [r6, r2]
 800babe:	3604      	adds	r6, #4
 800bac0:	e7a3      	b.n	800ba0a <__multiply+0x7e>
 800bac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1a5      	bne.n	800ba16 <__multiply+0x8a>
 800baca:	3f01      	subs	r7, #1
 800bacc:	e7a1      	b.n	800ba12 <__multiply+0x86>
 800bace:	bf00      	nop
 800bad0:	0800ca63 	.word	0x0800ca63
 800bad4:	0800cad4 	.word	0x0800cad4

0800bad8 <__pow5mult>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4615      	mov	r5, r2
 800bade:	f012 0203 	ands.w	r2, r2, #3
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	d007      	beq.n	800baf8 <__pow5mult+0x20>
 800bae8:	4c25      	ldr	r4, [pc, #148]	; (800bb80 <__pow5mult+0xa8>)
 800baea:	3a01      	subs	r2, #1
 800baec:	2300      	movs	r3, #0
 800baee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baf2:	f7ff fe9b 	bl	800b82c <__multadd>
 800baf6:	4607      	mov	r7, r0
 800baf8:	10ad      	asrs	r5, r5, #2
 800bafa:	d03d      	beq.n	800bb78 <__pow5mult+0xa0>
 800bafc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bafe:	b97c      	cbnz	r4, 800bb20 <__pow5mult+0x48>
 800bb00:	2010      	movs	r0, #16
 800bb02:	f7ff fe1b 	bl	800b73c <malloc>
 800bb06:	4602      	mov	r2, r0
 800bb08:	6270      	str	r0, [r6, #36]	; 0x24
 800bb0a:	b928      	cbnz	r0, 800bb18 <__pow5mult+0x40>
 800bb0c:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <__pow5mult+0xac>)
 800bb0e:	481e      	ldr	r0, [pc, #120]	; (800bb88 <__pow5mult+0xb0>)
 800bb10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb14:	f000 fce0 	bl	800c4d8 <__assert_func>
 800bb18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb1c:	6004      	str	r4, [r0, #0]
 800bb1e:	60c4      	str	r4, [r0, #12]
 800bb20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb28:	b94c      	cbnz	r4, 800bb3e <__pow5mult+0x66>
 800bb2a:	f240 2171 	movw	r1, #625	; 0x271
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f7ff ff16 	bl	800b960 <__i2b>
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	07eb      	lsls	r3, r5, #31
 800bb44:	d50a      	bpl.n	800bb5c <__pow5mult+0x84>
 800bb46:	4639      	mov	r1, r7
 800bb48:	4622      	mov	r2, r4
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7ff ff1e 	bl	800b98c <__multiply>
 800bb50:	4639      	mov	r1, r7
 800bb52:	4680      	mov	r8, r0
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff fe47 	bl	800b7e8 <_Bfree>
 800bb5a:	4647      	mov	r7, r8
 800bb5c:	106d      	asrs	r5, r5, #1
 800bb5e:	d00b      	beq.n	800bb78 <__pow5mult+0xa0>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	b938      	cbnz	r0, 800bb74 <__pow5mult+0x9c>
 800bb64:	4622      	mov	r2, r4
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff ff0f 	bl	800b98c <__multiply>
 800bb6e:	6020      	str	r0, [r4, #0]
 800bb70:	f8c0 9000 	str.w	r9, [r0]
 800bb74:	4604      	mov	r4, r0
 800bb76:	e7e4      	b.n	800bb42 <__pow5mult+0x6a>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800cc28 	.word	0x0800cc28
 800bb84:	0800c9ed 	.word	0x0800c9ed
 800bb88:	0800cad4 	.word	0x0800cad4

0800bb8c <__lshift>:
 800bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	460c      	mov	r4, r1
 800bb92:	6849      	ldr	r1, [r1, #4]
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb9a:	68a3      	ldr	r3, [r4, #8]
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	4691      	mov	r9, r2
 800bba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bba4:	f108 0601 	add.w	r6, r8, #1
 800bba8:	42b3      	cmp	r3, r6
 800bbaa:	db0b      	blt.n	800bbc4 <__lshift+0x38>
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff fddb 	bl	800b768 <_Balloc>
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	b948      	cbnz	r0, 800bbca <__lshift+0x3e>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	4b28      	ldr	r3, [pc, #160]	; (800bc5c <__lshift+0xd0>)
 800bbba:	4829      	ldr	r0, [pc, #164]	; (800bc60 <__lshift+0xd4>)
 800bbbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbc0:	f000 fc8a 	bl	800c4d8 <__assert_func>
 800bbc4:	3101      	adds	r1, #1
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	e7ee      	b.n	800bba8 <__lshift+0x1c>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f100 0114 	add.w	r1, r0, #20
 800bbd0:	f100 0210 	add.w	r2, r0, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	4553      	cmp	r3, sl
 800bbd8:	db33      	blt.n	800bc42 <__lshift+0xb6>
 800bbda:	6920      	ldr	r0, [r4, #16]
 800bbdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	f019 091f 	ands.w	r9, r9, #31
 800bbe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbf0:	d02b      	beq.n	800bc4a <__lshift+0xbe>
 800bbf2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbf6:	468a      	mov	sl, r1
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	fa00 f009 	lsl.w	r0, r0, r9
 800bc00:	4302      	orrs	r2, r0
 800bc02:	f84a 2b04 	str.w	r2, [sl], #4
 800bc06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0a:	459c      	cmp	ip, r3
 800bc0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc10:	d8f3      	bhi.n	800bbfa <__lshift+0x6e>
 800bc12:	ebac 0304 	sub.w	r3, ip, r4
 800bc16:	3b15      	subs	r3, #21
 800bc18:	f023 0303 	bic.w	r3, r3, #3
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	f104 0015 	add.w	r0, r4, #21
 800bc22:	4584      	cmp	ip, r0
 800bc24:	bf38      	it	cc
 800bc26:	2304      	movcc	r3, #4
 800bc28:	50ca      	str	r2, [r1, r3]
 800bc2a:	b10a      	cbz	r2, 800bc30 <__lshift+0xa4>
 800bc2c:	f108 0602 	add.w	r6, r8, #2
 800bc30:	3e01      	subs	r6, #1
 800bc32:	4638      	mov	r0, r7
 800bc34:	612e      	str	r6, [r5, #16]
 800bc36:	4621      	mov	r1, r4
 800bc38:	f7ff fdd6 	bl	800b7e8 <_Bfree>
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc42:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc46:	3301      	adds	r3, #1
 800bc48:	e7c5      	b.n	800bbd6 <__lshift+0x4a>
 800bc4a:	3904      	subs	r1, #4
 800bc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc50:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc54:	459c      	cmp	ip, r3
 800bc56:	d8f9      	bhi.n	800bc4c <__lshift+0xc0>
 800bc58:	e7ea      	b.n	800bc30 <__lshift+0xa4>
 800bc5a:	bf00      	nop
 800bc5c:	0800ca63 	.word	0x0800ca63
 800bc60:	0800cad4 	.word	0x0800cad4

0800bc64 <__mcmp>:
 800bc64:	b530      	push	{r4, r5, lr}
 800bc66:	6902      	ldr	r2, [r0, #16]
 800bc68:	690c      	ldr	r4, [r1, #16]
 800bc6a:	1b12      	subs	r2, r2, r4
 800bc6c:	d10e      	bne.n	800bc8c <__mcmp+0x28>
 800bc6e:	f100 0314 	add.w	r3, r0, #20
 800bc72:	3114      	adds	r1, #20
 800bc74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc84:	42a5      	cmp	r5, r4
 800bc86:	d003      	beq.n	800bc90 <__mcmp+0x2c>
 800bc88:	d305      	bcc.n	800bc96 <__mcmp+0x32>
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	bd30      	pop	{r4, r5, pc}
 800bc90:	4283      	cmp	r3, r0
 800bc92:	d3f3      	bcc.n	800bc7c <__mcmp+0x18>
 800bc94:	e7fa      	b.n	800bc8c <__mcmp+0x28>
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	e7f7      	b.n	800bc8c <__mcmp+0x28>

0800bc9c <__mdiff>:
 800bc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	460c      	mov	r4, r1
 800bca2:	4606      	mov	r6, r0
 800bca4:	4611      	mov	r1, r2
 800bca6:	4620      	mov	r0, r4
 800bca8:	4617      	mov	r7, r2
 800bcaa:	f7ff ffdb 	bl	800bc64 <__mcmp>
 800bcae:	1e05      	subs	r5, r0, #0
 800bcb0:	d110      	bne.n	800bcd4 <__mdiff+0x38>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff fd57 	bl	800b768 <_Balloc>
 800bcba:	b930      	cbnz	r0, 800bcca <__mdiff+0x2e>
 800bcbc:	4b39      	ldr	r3, [pc, #228]	; (800bda4 <__mdiff+0x108>)
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	f240 2132 	movw	r1, #562	; 0x232
 800bcc4:	4838      	ldr	r0, [pc, #224]	; (800bda8 <__mdiff+0x10c>)
 800bcc6:	f000 fc07 	bl	800c4d8 <__assert_func>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	bfa4      	itt	ge
 800bcd6:	463b      	movge	r3, r7
 800bcd8:	4627      	movge	r7, r4
 800bcda:	4630      	mov	r0, r6
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	bfa6      	itte	ge
 800bce0:	461c      	movge	r4, r3
 800bce2:	2500      	movge	r5, #0
 800bce4:	2501      	movlt	r5, #1
 800bce6:	f7ff fd3f 	bl	800b768 <_Balloc>
 800bcea:	b920      	cbnz	r0, 800bcf6 <__mdiff+0x5a>
 800bcec:	4b2d      	ldr	r3, [pc, #180]	; (800bda4 <__mdiff+0x108>)
 800bcee:	4602      	mov	r2, r0
 800bcf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bcf4:	e7e6      	b.n	800bcc4 <__mdiff+0x28>
 800bcf6:	693e      	ldr	r6, [r7, #16]
 800bcf8:	60c5      	str	r5, [r0, #12]
 800bcfa:	6925      	ldr	r5, [r4, #16]
 800bcfc:	f107 0114 	add.w	r1, r7, #20
 800bd00:	f104 0914 	add.w	r9, r4, #20
 800bd04:	f100 0e14 	add.w	lr, r0, #20
 800bd08:	f107 0210 	add.w	r2, r7, #16
 800bd0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bd10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bd14:	46f2      	mov	sl, lr
 800bd16:	2700      	movs	r7, #0
 800bd18:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd20:	fa1f f883 	uxth.w	r8, r3
 800bd24:	fa17 f78b 	uxtah	r7, r7, fp
 800bd28:	0c1b      	lsrs	r3, r3, #16
 800bd2a:	eba7 0808 	sub.w	r8, r7, r8
 800bd2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd36:	fa1f f888 	uxth.w	r8, r8
 800bd3a:	141f      	asrs	r7, r3, #16
 800bd3c:	454d      	cmp	r5, r9
 800bd3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd42:	f84a 3b04 	str.w	r3, [sl], #4
 800bd46:	d8e7      	bhi.n	800bd18 <__mdiff+0x7c>
 800bd48:	1b2b      	subs	r3, r5, r4
 800bd4a:	3b15      	subs	r3, #21
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
 800bd50:	3304      	adds	r3, #4
 800bd52:	3415      	adds	r4, #21
 800bd54:	42a5      	cmp	r5, r4
 800bd56:	bf38      	it	cc
 800bd58:	2304      	movcc	r3, #4
 800bd5a:	4419      	add	r1, r3
 800bd5c:	4473      	add	r3, lr
 800bd5e:	469e      	mov	lr, r3
 800bd60:	460d      	mov	r5, r1
 800bd62:	4565      	cmp	r5, ip
 800bd64:	d30e      	bcc.n	800bd84 <__mdiff+0xe8>
 800bd66:	f10c 0203 	add.w	r2, ip, #3
 800bd6a:	1a52      	subs	r2, r2, r1
 800bd6c:	f022 0203 	bic.w	r2, r2, #3
 800bd70:	3903      	subs	r1, #3
 800bd72:	458c      	cmp	ip, r1
 800bd74:	bf38      	it	cc
 800bd76:	2200      	movcc	r2, #0
 800bd78:	441a      	add	r2, r3
 800bd7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd7e:	b17b      	cbz	r3, 800bda0 <__mdiff+0x104>
 800bd80:	6106      	str	r6, [r0, #16]
 800bd82:	e7a5      	b.n	800bcd0 <__mdiff+0x34>
 800bd84:	f855 8b04 	ldr.w	r8, [r5], #4
 800bd88:	fa17 f488 	uxtah	r4, r7, r8
 800bd8c:	1422      	asrs	r2, r4, #16
 800bd8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bd92:	b2a4      	uxth	r4, r4
 800bd94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bd98:	f84e 4b04 	str.w	r4, [lr], #4
 800bd9c:	1417      	asrs	r7, r2, #16
 800bd9e:	e7e0      	b.n	800bd62 <__mdiff+0xc6>
 800bda0:	3e01      	subs	r6, #1
 800bda2:	e7ea      	b.n	800bd7a <__mdiff+0xde>
 800bda4:	0800ca63 	.word	0x0800ca63
 800bda8:	0800cad4 	.word	0x0800cad4

0800bdac <__d2b>:
 800bdac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdb0:	4689      	mov	r9, r1
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	ec57 6b10 	vmov	r6, r7, d0
 800bdb8:	4690      	mov	r8, r2
 800bdba:	f7ff fcd5 	bl	800b768 <_Balloc>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	b930      	cbnz	r0, 800bdd0 <__d2b+0x24>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	4b25      	ldr	r3, [pc, #148]	; (800be5c <__d2b+0xb0>)
 800bdc6:	4826      	ldr	r0, [pc, #152]	; (800be60 <__d2b+0xb4>)
 800bdc8:	f240 310a 	movw	r1, #778	; 0x30a
 800bdcc:	f000 fb84 	bl	800c4d8 <__assert_func>
 800bdd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdd8:	bb35      	cbnz	r5, 800be28 <__d2b+0x7c>
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	d028      	beq.n	800be32 <__d2b+0x86>
 800bde0:	4668      	mov	r0, sp
 800bde2:	9600      	str	r6, [sp, #0]
 800bde4:	f7ff fd8c 	bl	800b900 <__lo0bits>
 800bde8:	9900      	ldr	r1, [sp, #0]
 800bdea:	b300      	cbz	r0, 800be2e <__d2b+0x82>
 800bdec:	9a01      	ldr	r2, [sp, #4]
 800bdee:	f1c0 0320 	rsb	r3, r0, #32
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	40c2      	lsrs	r2, r0
 800bdfa:	6163      	str	r3, [r4, #20]
 800bdfc:	9201      	str	r2, [sp, #4]
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	61a3      	str	r3, [r4, #24]
 800be02:	2b00      	cmp	r3, #0
 800be04:	bf14      	ite	ne
 800be06:	2202      	movne	r2, #2
 800be08:	2201      	moveq	r2, #1
 800be0a:	6122      	str	r2, [r4, #16]
 800be0c:	b1d5      	cbz	r5, 800be44 <__d2b+0x98>
 800be0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be12:	4405      	add	r5, r0
 800be14:	f8c9 5000 	str.w	r5, [r9]
 800be18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be1c:	f8c8 0000 	str.w	r0, [r8]
 800be20:	4620      	mov	r0, r4
 800be22:	b003      	add	sp, #12
 800be24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be2c:	e7d5      	b.n	800bdda <__d2b+0x2e>
 800be2e:	6161      	str	r1, [r4, #20]
 800be30:	e7e5      	b.n	800bdfe <__d2b+0x52>
 800be32:	a801      	add	r0, sp, #4
 800be34:	f7ff fd64 	bl	800b900 <__lo0bits>
 800be38:	9b01      	ldr	r3, [sp, #4]
 800be3a:	6163      	str	r3, [r4, #20]
 800be3c:	2201      	movs	r2, #1
 800be3e:	6122      	str	r2, [r4, #16]
 800be40:	3020      	adds	r0, #32
 800be42:	e7e3      	b.n	800be0c <__d2b+0x60>
 800be44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be4c:	f8c9 0000 	str.w	r0, [r9]
 800be50:	6918      	ldr	r0, [r3, #16]
 800be52:	f7ff fd35 	bl	800b8c0 <__hi0bits>
 800be56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be5a:	e7df      	b.n	800be1c <__d2b+0x70>
 800be5c:	0800ca63 	.word	0x0800ca63
 800be60:	0800cad4 	.word	0x0800cad4

0800be64 <_calloc_r>:
 800be64:	b513      	push	{r0, r1, r4, lr}
 800be66:	434a      	muls	r2, r1
 800be68:	4611      	mov	r1, r2
 800be6a:	9201      	str	r2, [sp, #4]
 800be6c:	f000 f85a 	bl	800bf24 <_malloc_r>
 800be70:	4604      	mov	r4, r0
 800be72:	b118      	cbz	r0, 800be7c <_calloc_r+0x18>
 800be74:	9a01      	ldr	r2, [sp, #4]
 800be76:	2100      	movs	r1, #0
 800be78:	f7fe f85e 	bl	8009f38 <memset>
 800be7c:	4620      	mov	r0, r4
 800be7e:	b002      	add	sp, #8
 800be80:	bd10      	pop	{r4, pc}
	...

0800be84 <_free_r>:
 800be84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be86:	2900      	cmp	r1, #0
 800be88:	d048      	beq.n	800bf1c <_free_r+0x98>
 800be8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be8e:	9001      	str	r0, [sp, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	f1a1 0404 	sub.w	r4, r1, #4
 800be96:	bfb8      	it	lt
 800be98:	18e4      	addlt	r4, r4, r3
 800be9a:	f000 fca7 	bl	800c7ec <__malloc_lock>
 800be9e:	4a20      	ldr	r2, [pc, #128]	; (800bf20 <_free_r+0x9c>)
 800bea0:	9801      	ldr	r0, [sp, #4]
 800bea2:	6813      	ldr	r3, [r2, #0]
 800bea4:	4615      	mov	r5, r2
 800bea6:	b933      	cbnz	r3, 800beb6 <_free_r+0x32>
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	6014      	str	r4, [r2, #0]
 800beac:	b003      	add	sp, #12
 800beae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800beb2:	f000 bca1 	b.w	800c7f8 <__malloc_unlock>
 800beb6:	42a3      	cmp	r3, r4
 800beb8:	d90b      	bls.n	800bed2 <_free_r+0x4e>
 800beba:	6821      	ldr	r1, [r4, #0]
 800bebc:	1862      	adds	r2, r4, r1
 800bebe:	4293      	cmp	r3, r2
 800bec0:	bf04      	itt	eq
 800bec2:	681a      	ldreq	r2, [r3, #0]
 800bec4:	685b      	ldreq	r3, [r3, #4]
 800bec6:	6063      	str	r3, [r4, #4]
 800bec8:	bf04      	itt	eq
 800beca:	1852      	addeq	r2, r2, r1
 800becc:	6022      	streq	r2, [r4, #0]
 800bece:	602c      	str	r4, [r5, #0]
 800bed0:	e7ec      	b.n	800beac <_free_r+0x28>
 800bed2:	461a      	mov	r2, r3
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	b10b      	cbz	r3, 800bedc <_free_r+0x58>
 800bed8:	42a3      	cmp	r3, r4
 800beda:	d9fa      	bls.n	800bed2 <_free_r+0x4e>
 800bedc:	6811      	ldr	r1, [r2, #0]
 800bede:	1855      	adds	r5, r2, r1
 800bee0:	42a5      	cmp	r5, r4
 800bee2:	d10b      	bne.n	800befc <_free_r+0x78>
 800bee4:	6824      	ldr	r4, [r4, #0]
 800bee6:	4421      	add	r1, r4
 800bee8:	1854      	adds	r4, r2, r1
 800beea:	42a3      	cmp	r3, r4
 800beec:	6011      	str	r1, [r2, #0]
 800beee:	d1dd      	bne.n	800beac <_free_r+0x28>
 800bef0:	681c      	ldr	r4, [r3, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	6053      	str	r3, [r2, #4]
 800bef6:	4421      	add	r1, r4
 800bef8:	6011      	str	r1, [r2, #0]
 800befa:	e7d7      	b.n	800beac <_free_r+0x28>
 800befc:	d902      	bls.n	800bf04 <_free_r+0x80>
 800befe:	230c      	movs	r3, #12
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	e7d3      	b.n	800beac <_free_r+0x28>
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	1961      	adds	r1, r4, r5
 800bf08:	428b      	cmp	r3, r1
 800bf0a:	bf04      	itt	eq
 800bf0c:	6819      	ldreq	r1, [r3, #0]
 800bf0e:	685b      	ldreq	r3, [r3, #4]
 800bf10:	6063      	str	r3, [r4, #4]
 800bf12:	bf04      	itt	eq
 800bf14:	1949      	addeq	r1, r1, r5
 800bf16:	6021      	streq	r1, [r4, #0]
 800bf18:	6054      	str	r4, [r2, #4]
 800bf1a:	e7c7      	b.n	800beac <_free_r+0x28>
 800bf1c:	b003      	add	sp, #12
 800bf1e:	bd30      	pop	{r4, r5, pc}
 800bf20:	20000258 	.word	0x20000258

0800bf24 <_malloc_r>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	1ccd      	adds	r5, r1, #3
 800bf28:	f025 0503 	bic.w	r5, r5, #3
 800bf2c:	3508      	adds	r5, #8
 800bf2e:	2d0c      	cmp	r5, #12
 800bf30:	bf38      	it	cc
 800bf32:	250c      	movcc	r5, #12
 800bf34:	2d00      	cmp	r5, #0
 800bf36:	4606      	mov	r6, r0
 800bf38:	db01      	blt.n	800bf3e <_malloc_r+0x1a>
 800bf3a:	42a9      	cmp	r1, r5
 800bf3c:	d903      	bls.n	800bf46 <_malloc_r+0x22>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	6033      	str	r3, [r6, #0]
 800bf42:	2000      	movs	r0, #0
 800bf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf46:	f000 fc51 	bl	800c7ec <__malloc_lock>
 800bf4a:	4921      	ldr	r1, [pc, #132]	; (800bfd0 <_malloc_r+0xac>)
 800bf4c:	680a      	ldr	r2, [r1, #0]
 800bf4e:	4614      	mov	r4, r2
 800bf50:	b99c      	cbnz	r4, 800bf7a <_malloc_r+0x56>
 800bf52:	4f20      	ldr	r7, [pc, #128]	; (800bfd4 <_malloc_r+0xb0>)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	b923      	cbnz	r3, 800bf62 <_malloc_r+0x3e>
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f000 f996 	bl	800c28c <_sbrk_r>
 800bf60:	6038      	str	r0, [r7, #0]
 800bf62:	4629      	mov	r1, r5
 800bf64:	4630      	mov	r0, r6
 800bf66:	f000 f991 	bl	800c28c <_sbrk_r>
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	d123      	bne.n	800bfb6 <_malloc_r+0x92>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	6033      	str	r3, [r6, #0]
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 fc40 	bl	800c7f8 <__malloc_unlock>
 800bf78:	e7e3      	b.n	800bf42 <_malloc_r+0x1e>
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	1b5b      	subs	r3, r3, r5
 800bf7e:	d417      	bmi.n	800bfb0 <_malloc_r+0x8c>
 800bf80:	2b0b      	cmp	r3, #11
 800bf82:	d903      	bls.n	800bf8c <_malloc_r+0x68>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	441c      	add	r4, r3
 800bf88:	6025      	str	r5, [r4, #0]
 800bf8a:	e004      	b.n	800bf96 <_malloc_r+0x72>
 800bf8c:	6863      	ldr	r3, [r4, #4]
 800bf8e:	42a2      	cmp	r2, r4
 800bf90:	bf0c      	ite	eq
 800bf92:	600b      	streq	r3, [r1, #0]
 800bf94:	6053      	strne	r3, [r2, #4]
 800bf96:	4630      	mov	r0, r6
 800bf98:	f000 fc2e 	bl	800c7f8 <__malloc_unlock>
 800bf9c:	f104 000b 	add.w	r0, r4, #11
 800bfa0:	1d23      	adds	r3, r4, #4
 800bfa2:	f020 0007 	bic.w	r0, r0, #7
 800bfa6:	1ac2      	subs	r2, r0, r3
 800bfa8:	d0cc      	beq.n	800bf44 <_malloc_r+0x20>
 800bfaa:	1a1b      	subs	r3, r3, r0
 800bfac:	50a3      	str	r3, [r4, r2]
 800bfae:	e7c9      	b.n	800bf44 <_malloc_r+0x20>
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	6864      	ldr	r4, [r4, #4]
 800bfb4:	e7cc      	b.n	800bf50 <_malloc_r+0x2c>
 800bfb6:	1cc4      	adds	r4, r0, #3
 800bfb8:	f024 0403 	bic.w	r4, r4, #3
 800bfbc:	42a0      	cmp	r0, r4
 800bfbe:	d0e3      	beq.n	800bf88 <_malloc_r+0x64>
 800bfc0:	1a21      	subs	r1, r4, r0
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f000 f962 	bl	800c28c <_sbrk_r>
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d1dd      	bne.n	800bf88 <_malloc_r+0x64>
 800bfcc:	e7cf      	b.n	800bf6e <_malloc_r+0x4a>
 800bfce:	bf00      	nop
 800bfd0:	20000258 	.word	0x20000258
 800bfd4:	2000025c 	.word	0x2000025c

0800bfd8 <__sfputc_r>:
 800bfd8:	6893      	ldr	r3, [r2, #8]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	b410      	push	{r4}
 800bfe0:	6093      	str	r3, [r2, #8]
 800bfe2:	da08      	bge.n	800bff6 <__sfputc_r+0x1e>
 800bfe4:	6994      	ldr	r4, [r2, #24]
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	db01      	blt.n	800bfee <__sfputc_r+0x16>
 800bfea:	290a      	cmp	r1, #10
 800bfec:	d103      	bne.n	800bff6 <__sfputc_r+0x1e>
 800bfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff2:	f000 b99f 	b.w	800c334 <__swbuf_r>
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	1c58      	adds	r0, r3, #1
 800bffa:	6010      	str	r0, [r2, #0]
 800bffc:	7019      	strb	r1, [r3, #0]
 800bffe:	4608      	mov	r0, r1
 800c000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <__sfputs_r>:
 800c006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c008:	4606      	mov	r6, r0
 800c00a:	460f      	mov	r7, r1
 800c00c:	4614      	mov	r4, r2
 800c00e:	18d5      	adds	r5, r2, r3
 800c010:	42ac      	cmp	r4, r5
 800c012:	d101      	bne.n	800c018 <__sfputs_r+0x12>
 800c014:	2000      	movs	r0, #0
 800c016:	e007      	b.n	800c028 <__sfputs_r+0x22>
 800c018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01c:	463a      	mov	r2, r7
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff ffda 	bl	800bfd8 <__sfputc_r>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d1f3      	bne.n	800c010 <__sfputs_r+0xa>
 800c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c02c <_vfiprintf_r>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	460d      	mov	r5, r1
 800c032:	b09d      	sub	sp, #116	; 0x74
 800c034:	4614      	mov	r4, r2
 800c036:	4698      	mov	r8, r3
 800c038:	4606      	mov	r6, r0
 800c03a:	b118      	cbz	r0, 800c044 <_vfiprintf_r+0x18>
 800c03c:	6983      	ldr	r3, [r0, #24]
 800c03e:	b90b      	cbnz	r3, 800c044 <_vfiprintf_r+0x18>
 800c040:	f7ff fad6 	bl	800b5f0 <__sinit>
 800c044:	4b89      	ldr	r3, [pc, #548]	; (800c26c <_vfiprintf_r+0x240>)
 800c046:	429d      	cmp	r5, r3
 800c048:	d11b      	bne.n	800c082 <_vfiprintf_r+0x56>
 800c04a:	6875      	ldr	r5, [r6, #4]
 800c04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c04e:	07d9      	lsls	r1, r3, #31
 800c050:	d405      	bmi.n	800c05e <_vfiprintf_r+0x32>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	059a      	lsls	r2, r3, #22
 800c056:	d402      	bmi.n	800c05e <_vfiprintf_r+0x32>
 800c058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05a:	f7ff fb6c 	bl	800b736 <__retarget_lock_acquire_recursive>
 800c05e:	89ab      	ldrh	r3, [r5, #12]
 800c060:	071b      	lsls	r3, r3, #28
 800c062:	d501      	bpl.n	800c068 <_vfiprintf_r+0x3c>
 800c064:	692b      	ldr	r3, [r5, #16]
 800c066:	b9eb      	cbnz	r3, 800c0a4 <_vfiprintf_r+0x78>
 800c068:	4629      	mov	r1, r5
 800c06a:	4630      	mov	r0, r6
 800c06c:	f000 f9c6 	bl	800c3fc <__swsetup_r>
 800c070:	b1c0      	cbz	r0, 800c0a4 <_vfiprintf_r+0x78>
 800c072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c074:	07dc      	lsls	r4, r3, #31
 800c076:	d50e      	bpl.n	800c096 <_vfiprintf_r+0x6a>
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	b01d      	add	sp, #116	; 0x74
 800c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c082:	4b7b      	ldr	r3, [pc, #492]	; (800c270 <_vfiprintf_r+0x244>)
 800c084:	429d      	cmp	r5, r3
 800c086:	d101      	bne.n	800c08c <_vfiprintf_r+0x60>
 800c088:	68b5      	ldr	r5, [r6, #8]
 800c08a:	e7df      	b.n	800c04c <_vfiprintf_r+0x20>
 800c08c:	4b79      	ldr	r3, [pc, #484]	; (800c274 <_vfiprintf_r+0x248>)
 800c08e:	429d      	cmp	r5, r3
 800c090:	bf08      	it	eq
 800c092:	68f5      	ldreq	r5, [r6, #12]
 800c094:	e7da      	b.n	800c04c <_vfiprintf_r+0x20>
 800c096:	89ab      	ldrh	r3, [r5, #12]
 800c098:	0598      	lsls	r0, r3, #22
 800c09a:	d4ed      	bmi.n	800c078 <_vfiprintf_r+0x4c>
 800c09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c09e:	f7ff fb4b 	bl	800b738 <__retarget_lock_release_recursive>
 800c0a2:	e7e9      	b.n	800c078 <_vfiprintf_r+0x4c>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a8:	2320      	movs	r3, #32
 800c0aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0b2:	2330      	movs	r3, #48	; 0x30
 800c0b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c278 <_vfiprintf_r+0x24c>
 800c0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0bc:	f04f 0901 	mov.w	r9, #1
 800c0c0:	4623      	mov	r3, r4
 800c0c2:	469a      	mov	sl, r3
 800c0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0c8:	b10a      	cbz	r2, 800c0ce <_vfiprintf_r+0xa2>
 800c0ca:	2a25      	cmp	r2, #37	; 0x25
 800c0cc:	d1f9      	bne.n	800c0c2 <_vfiprintf_r+0x96>
 800c0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c0d2:	d00b      	beq.n	800c0ec <_vfiprintf_r+0xc0>
 800c0d4:	465b      	mov	r3, fp
 800c0d6:	4622      	mov	r2, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7ff ff93 	bl	800c006 <__sfputs_r>
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	f000 80aa 	beq.w	800c23a <_vfiprintf_r+0x20e>
 800c0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0e8:	445a      	add	r2, fp
 800c0ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 80a2 	beq.w	800c23a <_vfiprintf_r+0x20e>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c100:	f10a 0a01 	add.w	sl, sl, #1
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	9307      	str	r3, [sp, #28]
 800c108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c10c:	931a      	str	r3, [sp, #104]	; 0x68
 800c10e:	4654      	mov	r4, sl
 800c110:	2205      	movs	r2, #5
 800c112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c116:	4858      	ldr	r0, [pc, #352]	; (800c278 <_vfiprintf_r+0x24c>)
 800c118:	f7f4 f892 	bl	8000240 <memchr>
 800c11c:	9a04      	ldr	r2, [sp, #16]
 800c11e:	b9d8      	cbnz	r0, 800c158 <_vfiprintf_r+0x12c>
 800c120:	06d1      	lsls	r1, r2, #27
 800c122:	bf44      	itt	mi
 800c124:	2320      	movmi	r3, #32
 800c126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c12a:	0713      	lsls	r3, r2, #28
 800c12c:	bf44      	itt	mi
 800c12e:	232b      	movmi	r3, #43	; 0x2b
 800c130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c134:	f89a 3000 	ldrb.w	r3, [sl]
 800c138:	2b2a      	cmp	r3, #42	; 0x2a
 800c13a:	d015      	beq.n	800c168 <_vfiprintf_r+0x13c>
 800c13c:	9a07      	ldr	r2, [sp, #28]
 800c13e:	4654      	mov	r4, sl
 800c140:	2000      	movs	r0, #0
 800c142:	f04f 0c0a 	mov.w	ip, #10
 800c146:	4621      	mov	r1, r4
 800c148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c14c:	3b30      	subs	r3, #48	; 0x30
 800c14e:	2b09      	cmp	r3, #9
 800c150:	d94e      	bls.n	800c1f0 <_vfiprintf_r+0x1c4>
 800c152:	b1b0      	cbz	r0, 800c182 <_vfiprintf_r+0x156>
 800c154:	9207      	str	r2, [sp, #28]
 800c156:	e014      	b.n	800c182 <_vfiprintf_r+0x156>
 800c158:	eba0 0308 	sub.w	r3, r0, r8
 800c15c:	fa09 f303 	lsl.w	r3, r9, r3
 800c160:	4313      	orrs	r3, r2
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	46a2      	mov	sl, r4
 800c166:	e7d2      	b.n	800c10e <_vfiprintf_r+0xe2>
 800c168:	9b03      	ldr	r3, [sp, #12]
 800c16a:	1d19      	adds	r1, r3, #4
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	9103      	str	r1, [sp, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	bfbb      	ittet	lt
 800c174:	425b      	neglt	r3, r3
 800c176:	f042 0202 	orrlt.w	r2, r2, #2
 800c17a:	9307      	strge	r3, [sp, #28]
 800c17c:	9307      	strlt	r3, [sp, #28]
 800c17e:	bfb8      	it	lt
 800c180:	9204      	strlt	r2, [sp, #16]
 800c182:	7823      	ldrb	r3, [r4, #0]
 800c184:	2b2e      	cmp	r3, #46	; 0x2e
 800c186:	d10c      	bne.n	800c1a2 <_vfiprintf_r+0x176>
 800c188:	7863      	ldrb	r3, [r4, #1]
 800c18a:	2b2a      	cmp	r3, #42	; 0x2a
 800c18c:	d135      	bne.n	800c1fa <_vfiprintf_r+0x1ce>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	1d1a      	adds	r2, r3, #4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	9203      	str	r2, [sp, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfb8      	it	lt
 800c19a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c19e:	3402      	adds	r4, #2
 800c1a0:	9305      	str	r3, [sp, #20]
 800c1a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c288 <_vfiprintf_r+0x25c>
 800c1a6:	7821      	ldrb	r1, [r4, #0]
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	4650      	mov	r0, sl
 800c1ac:	f7f4 f848 	bl	8000240 <memchr>
 800c1b0:	b140      	cbz	r0, 800c1c4 <_vfiprintf_r+0x198>
 800c1b2:	2340      	movs	r3, #64	; 0x40
 800c1b4:	eba0 000a 	sub.w	r0, r0, sl
 800c1b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	4303      	orrs	r3, r0
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c8:	482c      	ldr	r0, [pc, #176]	; (800c27c <_vfiprintf_r+0x250>)
 800c1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1ce:	2206      	movs	r2, #6
 800c1d0:	f7f4 f836 	bl	8000240 <memchr>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d03f      	beq.n	800c258 <_vfiprintf_r+0x22c>
 800c1d8:	4b29      	ldr	r3, [pc, #164]	; (800c280 <_vfiprintf_r+0x254>)
 800c1da:	bb1b      	cbnz	r3, 800c224 <_vfiprintf_r+0x1f8>
 800c1dc:	9b03      	ldr	r3, [sp, #12]
 800c1de:	3307      	adds	r3, #7
 800c1e0:	f023 0307 	bic.w	r3, r3, #7
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ea:	443b      	add	r3, r7
 800c1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ee:	e767      	b.n	800c0c0 <_vfiprintf_r+0x94>
 800c1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	e7a5      	b.n	800c146 <_vfiprintf_r+0x11a>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	3401      	adds	r4, #1
 800c1fe:	9305      	str	r3, [sp, #20]
 800c200:	4619      	mov	r1, r3
 800c202:	f04f 0c0a 	mov.w	ip, #10
 800c206:	4620      	mov	r0, r4
 800c208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c20c:	3a30      	subs	r2, #48	; 0x30
 800c20e:	2a09      	cmp	r2, #9
 800c210:	d903      	bls.n	800c21a <_vfiprintf_r+0x1ee>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0c5      	beq.n	800c1a2 <_vfiprintf_r+0x176>
 800c216:	9105      	str	r1, [sp, #20]
 800c218:	e7c3      	b.n	800c1a2 <_vfiprintf_r+0x176>
 800c21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c21e:	4604      	mov	r4, r0
 800c220:	2301      	movs	r3, #1
 800c222:	e7f0      	b.n	800c206 <_vfiprintf_r+0x1da>
 800c224:	ab03      	add	r3, sp, #12
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	462a      	mov	r2, r5
 800c22a:	4b16      	ldr	r3, [pc, #88]	; (800c284 <_vfiprintf_r+0x258>)
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	4630      	mov	r0, r6
 800c230:	f7fd ff2a 	bl	800a088 <_printf_float>
 800c234:	4607      	mov	r7, r0
 800c236:	1c78      	adds	r0, r7, #1
 800c238:	d1d6      	bne.n	800c1e8 <_vfiprintf_r+0x1bc>
 800c23a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c23c:	07d9      	lsls	r1, r3, #31
 800c23e:	d405      	bmi.n	800c24c <_vfiprintf_r+0x220>
 800c240:	89ab      	ldrh	r3, [r5, #12]
 800c242:	059a      	lsls	r2, r3, #22
 800c244:	d402      	bmi.n	800c24c <_vfiprintf_r+0x220>
 800c246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c248:	f7ff fa76 	bl	800b738 <__retarget_lock_release_recursive>
 800c24c:	89ab      	ldrh	r3, [r5, #12]
 800c24e:	065b      	lsls	r3, r3, #25
 800c250:	f53f af12 	bmi.w	800c078 <_vfiprintf_r+0x4c>
 800c254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c256:	e711      	b.n	800c07c <_vfiprintf_r+0x50>
 800c258:	ab03      	add	r3, sp, #12
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	462a      	mov	r2, r5
 800c25e:	4b09      	ldr	r3, [pc, #36]	; (800c284 <_vfiprintf_r+0x258>)
 800c260:	a904      	add	r1, sp, #16
 800c262:	4630      	mov	r0, r6
 800c264:	f7fe f9b4 	bl	800a5d0 <_printf_i>
 800c268:	e7e4      	b.n	800c234 <_vfiprintf_r+0x208>
 800c26a:	bf00      	nop
 800c26c:	0800ca94 	.word	0x0800ca94
 800c270:	0800cab4 	.word	0x0800cab4
 800c274:	0800ca74 	.word	0x0800ca74
 800c278:	0800cc34 	.word	0x0800cc34
 800c27c:	0800cc3e 	.word	0x0800cc3e
 800c280:	0800a089 	.word	0x0800a089
 800c284:	0800c007 	.word	0x0800c007
 800c288:	0800cc3a 	.word	0x0800cc3a

0800c28c <_sbrk_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d06      	ldr	r5, [pc, #24]	; (800c2a8 <_sbrk_r+0x1c>)
 800c290:	2300      	movs	r3, #0
 800c292:	4604      	mov	r4, r0
 800c294:	4608      	mov	r0, r1
 800c296:	602b      	str	r3, [r5, #0]
 800c298:	f7f5 ff8e 	bl	80021b8 <_sbrk>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_sbrk_r+0x1a>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_sbrk_r+0x1a>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	20000a68 	.word	0x20000a68

0800c2ac <__sread>:
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b4:	f000 faa6 	bl	800c804 <_read_r>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	bfab      	itete	ge
 800c2bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2be:	89a3      	ldrhlt	r3, [r4, #12]
 800c2c0:	181b      	addge	r3, r3, r0
 800c2c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2c6:	bfac      	ite	ge
 800c2c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2ca:	81a3      	strhlt	r3, [r4, #12]
 800c2cc:	bd10      	pop	{r4, pc}

0800c2ce <__swrite>:
 800c2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d2:	461f      	mov	r7, r3
 800c2d4:	898b      	ldrh	r3, [r1, #12]
 800c2d6:	05db      	lsls	r3, r3, #23
 800c2d8:	4605      	mov	r5, r0
 800c2da:	460c      	mov	r4, r1
 800c2dc:	4616      	mov	r6, r2
 800c2de:	d505      	bpl.n	800c2ec <__swrite+0x1e>
 800c2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f000 f9f8 	bl	800c6dc <_lseek_r>
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2f6:	81a3      	strh	r3, [r4, #12]
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	f000 b869 	b.w	800c3d8 <_write_r>

0800c306 <__sseek>:
 800c306:	b510      	push	{r4, lr}
 800c308:	460c      	mov	r4, r1
 800c30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30e:	f000 f9e5 	bl	800c6dc <_lseek_r>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	bf15      	itete	ne
 800c318:	6560      	strne	r0, [r4, #84]	; 0x54
 800c31a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c31e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c322:	81a3      	strheq	r3, [r4, #12]
 800c324:	bf18      	it	ne
 800c326:	81a3      	strhne	r3, [r4, #12]
 800c328:	bd10      	pop	{r4, pc}

0800c32a <__sclose>:
 800c32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32e:	f000 b8f1 	b.w	800c514 <_close_r>
	...

0800c334 <__swbuf_r>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	460e      	mov	r6, r1
 800c338:	4614      	mov	r4, r2
 800c33a:	4605      	mov	r5, r0
 800c33c:	b118      	cbz	r0, 800c346 <__swbuf_r+0x12>
 800c33e:	6983      	ldr	r3, [r0, #24]
 800c340:	b90b      	cbnz	r3, 800c346 <__swbuf_r+0x12>
 800c342:	f7ff f955 	bl	800b5f0 <__sinit>
 800c346:	4b21      	ldr	r3, [pc, #132]	; (800c3cc <__swbuf_r+0x98>)
 800c348:	429c      	cmp	r4, r3
 800c34a:	d12b      	bne.n	800c3a4 <__swbuf_r+0x70>
 800c34c:	686c      	ldr	r4, [r5, #4]
 800c34e:	69a3      	ldr	r3, [r4, #24]
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	071a      	lsls	r2, r3, #28
 800c356:	d52f      	bpl.n	800c3b8 <__swbuf_r+0x84>
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	b36b      	cbz	r3, 800c3b8 <__swbuf_r+0x84>
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	6820      	ldr	r0, [r4, #0]
 800c360:	1ac0      	subs	r0, r0, r3
 800c362:	6963      	ldr	r3, [r4, #20]
 800c364:	b2f6      	uxtb	r6, r6
 800c366:	4283      	cmp	r3, r0
 800c368:	4637      	mov	r7, r6
 800c36a:	dc04      	bgt.n	800c376 <__swbuf_r+0x42>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4628      	mov	r0, r5
 800c370:	f000 f966 	bl	800c640 <_fflush_r>
 800c374:	bb30      	cbnz	r0, 800c3c4 <__swbuf_r+0x90>
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	3b01      	subs	r3, #1
 800c37a:	60a3      	str	r3, [r4, #8]
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	6022      	str	r2, [r4, #0]
 800c382:	701e      	strb	r6, [r3, #0]
 800c384:	6963      	ldr	r3, [r4, #20]
 800c386:	3001      	adds	r0, #1
 800c388:	4283      	cmp	r3, r0
 800c38a:	d004      	beq.n	800c396 <__swbuf_r+0x62>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	07db      	lsls	r3, r3, #31
 800c390:	d506      	bpl.n	800c3a0 <__swbuf_r+0x6c>
 800c392:	2e0a      	cmp	r6, #10
 800c394:	d104      	bne.n	800c3a0 <__swbuf_r+0x6c>
 800c396:	4621      	mov	r1, r4
 800c398:	4628      	mov	r0, r5
 800c39a:	f000 f951 	bl	800c640 <_fflush_r>
 800c39e:	b988      	cbnz	r0, 800c3c4 <__swbuf_r+0x90>
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <__swbuf_r+0x9c>)
 800c3a6:	429c      	cmp	r4, r3
 800c3a8:	d101      	bne.n	800c3ae <__swbuf_r+0x7a>
 800c3aa:	68ac      	ldr	r4, [r5, #8]
 800c3ac:	e7cf      	b.n	800c34e <__swbuf_r+0x1a>
 800c3ae:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <__swbuf_r+0xa0>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	bf08      	it	eq
 800c3b4:	68ec      	ldreq	r4, [r5, #12]
 800c3b6:	e7ca      	b.n	800c34e <__swbuf_r+0x1a>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f81e 	bl	800c3fc <__swsetup_r>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d0cb      	beq.n	800c35c <__swbuf_r+0x28>
 800c3c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c3c8:	e7ea      	b.n	800c3a0 <__swbuf_r+0x6c>
 800c3ca:	bf00      	nop
 800c3cc:	0800ca94 	.word	0x0800ca94
 800c3d0:	0800cab4 	.word	0x0800cab4
 800c3d4:	0800ca74 	.word	0x0800ca74

0800c3d8 <_write_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d07      	ldr	r5, [pc, #28]	; (800c3f8 <_write_r+0x20>)
 800c3dc:	4604      	mov	r4, r0
 800c3de:	4608      	mov	r0, r1
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f7f5 fe95 	bl	8002116 <_write>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_write_r+0x1e>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_write_r+0x1e>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	20000a68 	.word	0x20000a68

0800c3fc <__swsetup_r>:
 800c3fc:	4b32      	ldr	r3, [pc, #200]	; (800c4c8 <__swsetup_r+0xcc>)
 800c3fe:	b570      	push	{r4, r5, r6, lr}
 800c400:	681d      	ldr	r5, [r3, #0]
 800c402:	4606      	mov	r6, r0
 800c404:	460c      	mov	r4, r1
 800c406:	b125      	cbz	r5, 800c412 <__swsetup_r+0x16>
 800c408:	69ab      	ldr	r3, [r5, #24]
 800c40a:	b913      	cbnz	r3, 800c412 <__swsetup_r+0x16>
 800c40c:	4628      	mov	r0, r5
 800c40e:	f7ff f8ef 	bl	800b5f0 <__sinit>
 800c412:	4b2e      	ldr	r3, [pc, #184]	; (800c4cc <__swsetup_r+0xd0>)
 800c414:	429c      	cmp	r4, r3
 800c416:	d10f      	bne.n	800c438 <__swsetup_r+0x3c>
 800c418:	686c      	ldr	r4, [r5, #4]
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c420:	0719      	lsls	r1, r3, #28
 800c422:	d42c      	bmi.n	800c47e <__swsetup_r+0x82>
 800c424:	06dd      	lsls	r5, r3, #27
 800c426:	d411      	bmi.n	800c44c <__swsetup_r+0x50>
 800c428:	2309      	movs	r3, #9
 800c42a:	6033      	str	r3, [r6, #0]
 800c42c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c430:	81a3      	strh	r3, [r4, #12]
 800c432:	f04f 30ff 	mov.w	r0, #4294967295
 800c436:	e03e      	b.n	800c4b6 <__swsetup_r+0xba>
 800c438:	4b25      	ldr	r3, [pc, #148]	; (800c4d0 <__swsetup_r+0xd4>)
 800c43a:	429c      	cmp	r4, r3
 800c43c:	d101      	bne.n	800c442 <__swsetup_r+0x46>
 800c43e:	68ac      	ldr	r4, [r5, #8]
 800c440:	e7eb      	b.n	800c41a <__swsetup_r+0x1e>
 800c442:	4b24      	ldr	r3, [pc, #144]	; (800c4d4 <__swsetup_r+0xd8>)
 800c444:	429c      	cmp	r4, r3
 800c446:	bf08      	it	eq
 800c448:	68ec      	ldreq	r4, [r5, #12]
 800c44a:	e7e6      	b.n	800c41a <__swsetup_r+0x1e>
 800c44c:	0758      	lsls	r0, r3, #29
 800c44e:	d512      	bpl.n	800c476 <__swsetup_r+0x7a>
 800c450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c452:	b141      	cbz	r1, 800c466 <__swsetup_r+0x6a>
 800c454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c458:	4299      	cmp	r1, r3
 800c45a:	d002      	beq.n	800c462 <__swsetup_r+0x66>
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff fd11 	bl	800be84 <_free_r>
 800c462:	2300      	movs	r3, #0
 800c464:	6363      	str	r3, [r4, #52]	; 0x34
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c46c:	81a3      	strh	r3, [r4, #12]
 800c46e:	2300      	movs	r3, #0
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f043 0308 	orr.w	r3, r3, #8
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	b94b      	cbnz	r3, 800c496 <__swsetup_r+0x9a>
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48c:	d003      	beq.n	800c496 <__swsetup_r+0x9a>
 800c48e:	4621      	mov	r1, r4
 800c490:	4630      	mov	r0, r6
 800c492:	f000 f959 	bl	800c748 <__smakebuf_r>
 800c496:	89a0      	ldrh	r0, [r4, #12]
 800c498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c49c:	f010 0301 	ands.w	r3, r0, #1
 800c4a0:	d00a      	beq.n	800c4b8 <__swsetup_r+0xbc>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60a3      	str	r3, [r4, #8]
 800c4a6:	6963      	ldr	r3, [r4, #20]
 800c4a8:	425b      	negs	r3, r3
 800c4aa:	61a3      	str	r3, [r4, #24]
 800c4ac:	6923      	ldr	r3, [r4, #16]
 800c4ae:	b943      	cbnz	r3, 800c4c2 <__swsetup_r+0xc6>
 800c4b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4b4:	d1ba      	bne.n	800c42c <__swsetup_r+0x30>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	0781      	lsls	r1, r0, #30
 800c4ba:	bf58      	it	pl
 800c4bc:	6963      	ldrpl	r3, [r4, #20]
 800c4be:	60a3      	str	r3, [r4, #8]
 800c4c0:	e7f4      	b.n	800c4ac <__swsetup_r+0xb0>
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	e7f7      	b.n	800c4b6 <__swsetup_r+0xba>
 800c4c6:	bf00      	nop
 800c4c8:	20000010 	.word	0x20000010
 800c4cc:	0800ca94 	.word	0x0800ca94
 800c4d0:	0800cab4 	.word	0x0800cab4
 800c4d4:	0800ca74 	.word	0x0800ca74

0800c4d8 <__assert_func>:
 800c4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4da:	4614      	mov	r4, r2
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4b09      	ldr	r3, [pc, #36]	; (800c504 <__assert_func+0x2c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	68d8      	ldr	r0, [r3, #12]
 800c4e6:	b14c      	cbz	r4, 800c4fc <__assert_func+0x24>
 800c4e8:	4b07      	ldr	r3, [pc, #28]	; (800c508 <__assert_func+0x30>)
 800c4ea:	9100      	str	r1, [sp, #0]
 800c4ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4f0:	4906      	ldr	r1, [pc, #24]	; (800c50c <__assert_func+0x34>)
 800c4f2:	462b      	mov	r3, r5
 800c4f4:	f000 f8e0 	bl	800c6b8 <fiprintf>
 800c4f8:	f000 f9a3 	bl	800c842 <abort>
 800c4fc:	4b04      	ldr	r3, [pc, #16]	; (800c510 <__assert_func+0x38>)
 800c4fe:	461c      	mov	r4, r3
 800c500:	e7f3      	b.n	800c4ea <__assert_func+0x12>
 800c502:	bf00      	nop
 800c504:	20000010 	.word	0x20000010
 800c508:	0800cc45 	.word	0x0800cc45
 800c50c:	0800cc52 	.word	0x0800cc52
 800c510:	0800cc80 	.word	0x0800cc80

0800c514 <_close_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_close_r+0x1c>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	f7f5 fe15 	bl	800214e <_close>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_close_r+0x1a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_close_r+0x1a>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20000a68 	.word	0x20000a68

0800c534 <__sflush_r>:
 800c534:	898a      	ldrh	r2, [r1, #12]
 800c536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53a:	4605      	mov	r5, r0
 800c53c:	0710      	lsls	r0, r2, #28
 800c53e:	460c      	mov	r4, r1
 800c540:	d458      	bmi.n	800c5f4 <__sflush_r+0xc0>
 800c542:	684b      	ldr	r3, [r1, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	dc05      	bgt.n	800c554 <__sflush_r+0x20>
 800c548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	dc02      	bgt.n	800c554 <__sflush_r+0x20>
 800c54e:	2000      	movs	r0, #0
 800c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c556:	2e00      	cmp	r6, #0
 800c558:	d0f9      	beq.n	800c54e <__sflush_r+0x1a>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c560:	682f      	ldr	r7, [r5, #0]
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	d032      	beq.n	800c5cc <__sflush_r+0x98>
 800c566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c568:	89a3      	ldrh	r3, [r4, #12]
 800c56a:	075a      	lsls	r2, r3, #29
 800c56c:	d505      	bpl.n	800c57a <__sflush_r+0x46>
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	1ac0      	subs	r0, r0, r3
 800c572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c574:	b10b      	cbz	r3, 800c57a <__sflush_r+0x46>
 800c576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c578:	1ac0      	subs	r0, r0, r3
 800c57a:	2300      	movs	r3, #0
 800c57c:	4602      	mov	r2, r0
 800c57e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c580:	6a21      	ldr	r1, [r4, #32]
 800c582:	4628      	mov	r0, r5
 800c584:	47b0      	blx	r6
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	89a3      	ldrh	r3, [r4, #12]
 800c58a:	d106      	bne.n	800c59a <__sflush_r+0x66>
 800c58c:	6829      	ldr	r1, [r5, #0]
 800c58e:	291d      	cmp	r1, #29
 800c590:	d82c      	bhi.n	800c5ec <__sflush_r+0xb8>
 800c592:	4a2a      	ldr	r2, [pc, #168]	; (800c63c <__sflush_r+0x108>)
 800c594:	40ca      	lsrs	r2, r1
 800c596:	07d6      	lsls	r6, r2, #31
 800c598:	d528      	bpl.n	800c5ec <__sflush_r+0xb8>
 800c59a:	2200      	movs	r2, #0
 800c59c:	6062      	str	r2, [r4, #4]
 800c59e:	04d9      	lsls	r1, r3, #19
 800c5a0:	6922      	ldr	r2, [r4, #16]
 800c5a2:	6022      	str	r2, [r4, #0]
 800c5a4:	d504      	bpl.n	800c5b0 <__sflush_r+0x7c>
 800c5a6:	1c42      	adds	r2, r0, #1
 800c5a8:	d101      	bne.n	800c5ae <__sflush_r+0x7a>
 800c5aa:	682b      	ldr	r3, [r5, #0]
 800c5ac:	b903      	cbnz	r3, 800c5b0 <__sflush_r+0x7c>
 800c5ae:	6560      	str	r0, [r4, #84]	; 0x54
 800c5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5b2:	602f      	str	r7, [r5, #0]
 800c5b4:	2900      	cmp	r1, #0
 800c5b6:	d0ca      	beq.n	800c54e <__sflush_r+0x1a>
 800c5b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5bc:	4299      	cmp	r1, r3
 800c5be:	d002      	beq.n	800c5c6 <__sflush_r+0x92>
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f7ff fc5f 	bl	800be84 <_free_r>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ca:	e7c1      	b.n	800c550 <__sflush_r+0x1c>
 800c5cc:	6a21      	ldr	r1, [r4, #32]
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b0      	blx	r6
 800c5d4:	1c41      	adds	r1, r0, #1
 800c5d6:	d1c7      	bne.n	800c568 <__sflush_r+0x34>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0c4      	beq.n	800c568 <__sflush_r+0x34>
 800c5de:	2b1d      	cmp	r3, #29
 800c5e0:	d001      	beq.n	800c5e6 <__sflush_r+0xb2>
 800c5e2:	2b16      	cmp	r3, #22
 800c5e4:	d101      	bne.n	800c5ea <__sflush_r+0xb6>
 800c5e6:	602f      	str	r7, [r5, #0]
 800c5e8:	e7b1      	b.n	800c54e <__sflush_r+0x1a>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	e7ad      	b.n	800c550 <__sflush_r+0x1c>
 800c5f4:	690f      	ldr	r7, [r1, #16]
 800c5f6:	2f00      	cmp	r7, #0
 800c5f8:	d0a9      	beq.n	800c54e <__sflush_r+0x1a>
 800c5fa:	0793      	lsls	r3, r2, #30
 800c5fc:	680e      	ldr	r6, [r1, #0]
 800c5fe:	bf08      	it	eq
 800c600:	694b      	ldreq	r3, [r1, #20]
 800c602:	600f      	str	r7, [r1, #0]
 800c604:	bf18      	it	ne
 800c606:	2300      	movne	r3, #0
 800c608:	eba6 0807 	sub.w	r8, r6, r7
 800c60c:	608b      	str	r3, [r1, #8]
 800c60e:	f1b8 0f00 	cmp.w	r8, #0
 800c612:	dd9c      	ble.n	800c54e <__sflush_r+0x1a>
 800c614:	6a21      	ldr	r1, [r4, #32]
 800c616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c618:	4643      	mov	r3, r8
 800c61a:	463a      	mov	r2, r7
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b0      	blx	r6
 800c620:	2800      	cmp	r0, #0
 800c622:	dc06      	bgt.n	800c632 <__sflush_r+0xfe>
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	e78e      	b.n	800c550 <__sflush_r+0x1c>
 800c632:	4407      	add	r7, r0
 800c634:	eba8 0800 	sub.w	r8, r8, r0
 800c638:	e7e9      	b.n	800c60e <__sflush_r+0xda>
 800c63a:	bf00      	nop
 800c63c:	20400001 	.word	0x20400001

0800c640 <_fflush_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	690b      	ldr	r3, [r1, #16]
 800c644:	4605      	mov	r5, r0
 800c646:	460c      	mov	r4, r1
 800c648:	b913      	cbnz	r3, 800c650 <_fflush_r+0x10>
 800c64a:	2500      	movs	r5, #0
 800c64c:	4628      	mov	r0, r5
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	b118      	cbz	r0, 800c65a <_fflush_r+0x1a>
 800c652:	6983      	ldr	r3, [r0, #24]
 800c654:	b90b      	cbnz	r3, 800c65a <_fflush_r+0x1a>
 800c656:	f7fe ffcb 	bl	800b5f0 <__sinit>
 800c65a:	4b14      	ldr	r3, [pc, #80]	; (800c6ac <_fflush_r+0x6c>)
 800c65c:	429c      	cmp	r4, r3
 800c65e:	d11b      	bne.n	800c698 <_fflush_r+0x58>
 800c660:	686c      	ldr	r4, [r5, #4]
 800c662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0ef      	beq.n	800c64a <_fflush_r+0xa>
 800c66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c66c:	07d0      	lsls	r0, r2, #31
 800c66e:	d404      	bmi.n	800c67a <_fflush_r+0x3a>
 800c670:	0599      	lsls	r1, r3, #22
 800c672:	d402      	bmi.n	800c67a <_fflush_r+0x3a>
 800c674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c676:	f7ff f85e 	bl	800b736 <__retarget_lock_acquire_recursive>
 800c67a:	4628      	mov	r0, r5
 800c67c:	4621      	mov	r1, r4
 800c67e:	f7ff ff59 	bl	800c534 <__sflush_r>
 800c682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c684:	07da      	lsls	r2, r3, #31
 800c686:	4605      	mov	r5, r0
 800c688:	d4e0      	bmi.n	800c64c <_fflush_r+0xc>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	059b      	lsls	r3, r3, #22
 800c68e:	d4dd      	bmi.n	800c64c <_fflush_r+0xc>
 800c690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c692:	f7ff f851 	bl	800b738 <__retarget_lock_release_recursive>
 800c696:	e7d9      	b.n	800c64c <_fflush_r+0xc>
 800c698:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <_fflush_r+0x70>)
 800c69a:	429c      	cmp	r4, r3
 800c69c:	d101      	bne.n	800c6a2 <_fflush_r+0x62>
 800c69e:	68ac      	ldr	r4, [r5, #8]
 800c6a0:	e7df      	b.n	800c662 <_fflush_r+0x22>
 800c6a2:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <_fflush_r+0x74>)
 800c6a4:	429c      	cmp	r4, r3
 800c6a6:	bf08      	it	eq
 800c6a8:	68ec      	ldreq	r4, [r5, #12]
 800c6aa:	e7da      	b.n	800c662 <_fflush_r+0x22>
 800c6ac:	0800ca94 	.word	0x0800ca94
 800c6b0:	0800cab4 	.word	0x0800cab4
 800c6b4:	0800ca74 	.word	0x0800ca74

0800c6b8 <fiprintf>:
 800c6b8:	b40e      	push	{r1, r2, r3}
 800c6ba:	b503      	push	{r0, r1, lr}
 800c6bc:	4601      	mov	r1, r0
 800c6be:	ab03      	add	r3, sp, #12
 800c6c0:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <fiprintf+0x20>)
 800c6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c6:	6800      	ldr	r0, [r0, #0]
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	f7ff fcaf 	bl	800c02c <_vfiprintf_r>
 800c6ce:	b002      	add	sp, #8
 800c6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d4:	b003      	add	sp, #12
 800c6d6:	4770      	bx	lr
 800c6d8:	20000010 	.word	0x20000010

0800c6dc <_lseek_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d07      	ldr	r5, [pc, #28]	; (800c6fc <_lseek_r+0x20>)
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f5 fd56 	bl	800219c <_lseek>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_lseek_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_lseek_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	20000a68 	.word	0x20000a68

0800c700 <__swhatbuf_r>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	460e      	mov	r6, r1
 800c704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c708:	2900      	cmp	r1, #0
 800c70a:	b096      	sub	sp, #88	; 0x58
 800c70c:	4614      	mov	r4, r2
 800c70e:	461d      	mov	r5, r3
 800c710:	da07      	bge.n	800c722 <__swhatbuf_r+0x22>
 800c712:	2300      	movs	r3, #0
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	89b3      	ldrh	r3, [r6, #12]
 800c718:	061a      	lsls	r2, r3, #24
 800c71a:	d410      	bmi.n	800c73e <__swhatbuf_r+0x3e>
 800c71c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c720:	e00e      	b.n	800c740 <__swhatbuf_r+0x40>
 800c722:	466a      	mov	r2, sp
 800c724:	f000 f894 	bl	800c850 <_fstat_r>
 800c728:	2800      	cmp	r0, #0
 800c72a:	dbf2      	blt.n	800c712 <__swhatbuf_r+0x12>
 800c72c:	9a01      	ldr	r2, [sp, #4]
 800c72e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c732:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c736:	425a      	negs	r2, r3
 800c738:	415a      	adcs	r2, r3
 800c73a:	602a      	str	r2, [r5, #0]
 800c73c:	e7ee      	b.n	800c71c <__swhatbuf_r+0x1c>
 800c73e:	2340      	movs	r3, #64	; 0x40
 800c740:	2000      	movs	r0, #0
 800c742:	6023      	str	r3, [r4, #0]
 800c744:	b016      	add	sp, #88	; 0x58
 800c746:	bd70      	pop	{r4, r5, r6, pc}

0800c748 <__smakebuf_r>:
 800c748:	898b      	ldrh	r3, [r1, #12]
 800c74a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c74c:	079d      	lsls	r5, r3, #30
 800c74e:	4606      	mov	r6, r0
 800c750:	460c      	mov	r4, r1
 800c752:	d507      	bpl.n	800c764 <__smakebuf_r+0x1c>
 800c754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	6123      	str	r3, [r4, #16]
 800c75c:	2301      	movs	r3, #1
 800c75e:	6163      	str	r3, [r4, #20]
 800c760:	b002      	add	sp, #8
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	ab01      	add	r3, sp, #4
 800c766:	466a      	mov	r2, sp
 800c768:	f7ff ffca 	bl	800c700 <__swhatbuf_r>
 800c76c:	9900      	ldr	r1, [sp, #0]
 800c76e:	4605      	mov	r5, r0
 800c770:	4630      	mov	r0, r6
 800c772:	f7ff fbd7 	bl	800bf24 <_malloc_r>
 800c776:	b948      	cbnz	r0, 800c78c <__smakebuf_r+0x44>
 800c778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c77c:	059a      	lsls	r2, r3, #22
 800c77e:	d4ef      	bmi.n	800c760 <__smakebuf_r+0x18>
 800c780:	f023 0303 	bic.w	r3, r3, #3
 800c784:	f043 0302 	orr.w	r3, r3, #2
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	e7e3      	b.n	800c754 <__smakebuf_r+0xc>
 800c78c:	4b0d      	ldr	r3, [pc, #52]	; (800c7c4 <__smakebuf_r+0x7c>)
 800c78e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	6020      	str	r0, [r4, #0]
 800c794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	9b00      	ldr	r3, [sp, #0]
 800c79c:	6163      	str	r3, [r4, #20]
 800c79e:	9b01      	ldr	r3, [sp, #4]
 800c7a0:	6120      	str	r0, [r4, #16]
 800c7a2:	b15b      	cbz	r3, 800c7bc <__smakebuf_r+0x74>
 800c7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f000 f863 	bl	800c874 <_isatty_r>
 800c7ae:	b128      	cbz	r0, 800c7bc <__smakebuf_r+0x74>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	f023 0303 	bic.w	r3, r3, #3
 800c7b6:	f043 0301 	orr.w	r3, r3, #1
 800c7ba:	81a3      	strh	r3, [r4, #12]
 800c7bc:	89a0      	ldrh	r0, [r4, #12]
 800c7be:	4305      	orrs	r5, r0
 800c7c0:	81a5      	strh	r5, [r4, #12]
 800c7c2:	e7cd      	b.n	800c760 <__smakebuf_r+0x18>
 800c7c4:	0800b589 	.word	0x0800b589

0800c7c8 <__ascii_mbtowc>:
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	b901      	cbnz	r1, 800c7ce <__ascii_mbtowc+0x6>
 800c7cc:	a901      	add	r1, sp, #4
 800c7ce:	b142      	cbz	r2, 800c7e2 <__ascii_mbtowc+0x1a>
 800c7d0:	b14b      	cbz	r3, 800c7e6 <__ascii_mbtowc+0x1e>
 800c7d2:	7813      	ldrb	r3, [r2, #0]
 800c7d4:	600b      	str	r3, [r1, #0]
 800c7d6:	7812      	ldrb	r2, [r2, #0]
 800c7d8:	1e10      	subs	r0, r2, #0
 800c7da:	bf18      	it	ne
 800c7dc:	2001      	movne	r0, #1
 800c7de:	b002      	add	sp, #8
 800c7e0:	4770      	bx	lr
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	e7fb      	b.n	800c7de <__ascii_mbtowc+0x16>
 800c7e6:	f06f 0001 	mvn.w	r0, #1
 800c7ea:	e7f8      	b.n	800c7de <__ascii_mbtowc+0x16>

0800c7ec <__malloc_lock>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	; (800c7f4 <__malloc_lock+0x8>)
 800c7ee:	f7fe bfa2 	b.w	800b736 <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20000a60 	.word	0x20000a60

0800c7f8 <__malloc_unlock>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	; (800c800 <__malloc_unlock+0x8>)
 800c7fa:	f7fe bf9d 	b.w	800b738 <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	20000a60 	.word	0x20000a60

0800c804 <_read_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	; (800c824 <_read_r+0x20>)
 800c808:	4604      	mov	r4, r0
 800c80a:	4608      	mov	r0, r1
 800c80c:	4611      	mov	r1, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	602a      	str	r2, [r5, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	f7f5 fc62 	bl	80020dc <_read>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_read_r+0x1e>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_read_r+0x1e>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	20000a68 	.word	0x20000a68

0800c828 <__ascii_wctomb>:
 800c828:	b149      	cbz	r1, 800c83e <__ascii_wctomb+0x16>
 800c82a:	2aff      	cmp	r2, #255	; 0xff
 800c82c:	bf85      	ittet	hi
 800c82e:	238a      	movhi	r3, #138	; 0x8a
 800c830:	6003      	strhi	r3, [r0, #0]
 800c832:	700a      	strbls	r2, [r1, #0]
 800c834:	f04f 30ff 	movhi.w	r0, #4294967295
 800c838:	bf98      	it	ls
 800c83a:	2001      	movls	r0, #1
 800c83c:	4770      	bx	lr
 800c83e:	4608      	mov	r0, r1
 800c840:	4770      	bx	lr

0800c842 <abort>:
 800c842:	b508      	push	{r3, lr}
 800c844:	2006      	movs	r0, #6
 800c846:	f000 f84d 	bl	800c8e4 <raise>
 800c84a:	2001      	movs	r0, #1
 800c84c:	f7f5 fc3c 	bl	80020c8 <_exit>

0800c850 <_fstat_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	; (800c870 <_fstat_r+0x20>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	f7f5 fc82 	bl	8002166 <_fstat>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d102      	bne.n	800c86c <_fstat_r+0x1c>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b103      	cbz	r3, 800c86c <_fstat_r+0x1c>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	20000a68 	.word	0x20000a68

0800c874 <_isatty_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d06      	ldr	r5, [pc, #24]	; (800c890 <_isatty_r+0x1c>)
 800c878:	2300      	movs	r3, #0
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	602b      	str	r3, [r5, #0]
 800c880:	f7f5 fc81 	bl	8002186 <_isatty>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_isatty_r+0x1a>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_isatty_r+0x1a>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20000a68 	.word	0x20000a68

0800c894 <_raise_r>:
 800c894:	291f      	cmp	r1, #31
 800c896:	b538      	push	{r3, r4, r5, lr}
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	d904      	bls.n	800c8a8 <_raise_r+0x14>
 800c89e:	2316      	movs	r3, #22
 800c8a0:	6003      	str	r3, [r0, #0]
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8aa:	b112      	cbz	r2, 800c8b2 <_raise_r+0x1e>
 800c8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8b0:	b94b      	cbnz	r3, 800c8c6 <_raise_r+0x32>
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f000 f830 	bl	800c918 <_getpid_r>
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c2:	f000 b817 	b.w	800c8f4 <_kill_r>
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d00a      	beq.n	800c8e0 <_raise_r+0x4c>
 800c8ca:	1c59      	adds	r1, r3, #1
 800c8cc:	d103      	bne.n	800c8d6 <_raise_r+0x42>
 800c8ce:	2316      	movs	r3, #22
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e7e7      	b.n	800c8a6 <_raise_r+0x12>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8dc:	4628      	mov	r0, r5
 800c8de:	4798      	blx	r3
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e7e0      	b.n	800c8a6 <_raise_r+0x12>

0800c8e4 <raise>:
 800c8e4:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <raise+0xc>)
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	f7ff bfd3 	b.w	800c894 <_raise_r>
 800c8ee:	bf00      	nop
 800c8f0:	20000010 	.word	0x20000010

0800c8f4 <_kill_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d07      	ldr	r5, [pc, #28]	; (800c914 <_kill_r+0x20>)
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	4611      	mov	r1, r2
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	f7f5 fbd1 	bl	80020a8 <_kill>
 800c906:	1c43      	adds	r3, r0, #1
 800c908:	d102      	bne.n	800c910 <_kill_r+0x1c>
 800c90a:	682b      	ldr	r3, [r5, #0]
 800c90c:	b103      	cbz	r3, 800c910 <_kill_r+0x1c>
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	bd38      	pop	{r3, r4, r5, pc}
 800c912:	bf00      	nop
 800c914:	20000a68 	.word	0x20000a68

0800c918 <_getpid_r>:
 800c918:	f7f5 bbbe 	b.w	8002098 <_getpid>

0800c91c <_init>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr

0800c928 <_fini>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr
