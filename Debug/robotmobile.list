
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008550  08008550  00018550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800899c  0800899c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a4  080089a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a8  080089a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080089ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08008b88  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008b88  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001313b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002727  00000000  00000000  00033347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00036970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d22  00000000  00000000  00037778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001206a  00000000  00000000  0005b49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7fc2  00000000  00000000  0006d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001454c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050bc  00000000  00000000  0014551c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008534 	.word	0x08008534

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008534 	.word	0x08008534

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__io_putchar>:
//	}
//	else return false;
//}

int __io_putchar(int sign)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d109      	bne.n	8000f22 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 8000f0e:	230d      	movs	r3, #13
 8000f10:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 8000f12:	f107 010f 	add.w	r1, r7, #15
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <__io_putchar+0x3c>)
 8000f1e:	f003 fcae 	bl	800487e <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 8000f22:	1d39      	adds	r1, r7, #4
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <__io_putchar+0x3c>)
 8000f2c:	f003 fca7 	bl	800487e <HAL_UART_Transmit>
	return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000260 	.word	0x20000260

08000f40 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b0d      	cmp	r3, #13
 8000f4e:	d002      	beq.n	8000f56 <line_append+0x16>
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b0a      	cmp	r3, #10
 8000f54:	d158      	bne.n	8001008 <line_append+0xc8>
	{
		if(line_length>0)
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <line_append+0xf0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d064      	beq.n	8001028 <line_append+0xe8>
		{
			line_buffer[line_length]='\0';
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <line_append+0xf0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a34      	ldr	r2, [pc, #208]	; (8001034 <line_append+0xf4>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	54d1      	strb	r1, [r2, r3]
			if (strcmp(line_buffer, "on")==0){
 8000f68:	4933      	ldr	r1, [pc, #204]	; (8001038 <line_append+0xf8>)
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <line_append+0xf4>)
 8000f6c:	f7ff f950 	bl	8000210 <strcmp>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <line_append+0x4a>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4830      	ldr	r0, [pc, #192]	; (800103c <line_append+0xfc>)
 8000f7c:	f001 f9c2 	bl	8002304 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <line_append+0xf4>)
 8000f82:	482f      	ldr	r0, [pc, #188]	; (8001040 <line_append+0x100>)
 8000f84:	f005 f892 	bl	80060ac <iprintf>
 8000f88:	e03a      	b.n	8001000 <line_append+0xc0>
			}
			else if(strcmp(line_buffer, "off")==0){
 8000f8a:	492e      	ldr	r1, [pc, #184]	; (8001044 <line_append+0x104>)
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <line_append+0xf4>)
 8000f8e:	f7ff f93f 	bl	8000210 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <line_append+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	4827      	ldr	r0, [pc, #156]	; (800103c <line_append+0xfc>)
 8000f9e:	f001 f9b1 	bl	8002304 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8000fa2:	4924      	ldr	r1, [pc, #144]	; (8001034 <line_append+0xf4>)
 8000fa4:	4826      	ldr	r0, [pc, #152]	; (8001040 <line_append+0x100>)
 8000fa6:	f005 f881 	bl	80060ac <iprintf>
 8000faa:	e029      	b.n	8001000 <line_append+0xc0>
			}
			else if(strcmp(line_buffer, "haha")==0){
 8000fac:	4926      	ldr	r1, [pc, #152]	; (8001048 <line_append+0x108>)
 8000fae:	4821      	ldr	r0, [pc, #132]	; (8001034 <line_append+0xf4>)
 8000fb0:	f7ff f92e 	bl	8000210 <strcmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <line_append+0x92>
				set_motorA_speed(95);
 8000fba:	205f      	movs	r0, #95	; 0x5f
 8000fbc:	f000 fd9e 	bl	8001afc <set_motorA_speed>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4822      	ldr	r0, [pc, #136]	; (800104c <line_append+0x10c>)
 8000fc4:	f002 fc9a 	bl	80038fc <HAL_TIM_PWM_Start>
				printf("Command: %s\n", line_buffer);
 8000fc8:	491a      	ldr	r1, [pc, #104]	; (8001034 <line_append+0xf4>)
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <line_append+0x100>)
 8000fcc:	f005 f86e 	bl	80060ac <iprintf>
 8000fd0:	e016      	b.n	8001000 <line_append+0xc0>
			}
			else if(strcmp(line_buffer, "nie")==0){
 8000fd2:	491f      	ldr	r1, [pc, #124]	; (8001050 <line_append+0x110>)
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <line_append+0xf4>)
 8000fd6:	f7ff f91b 	bl	8000210 <strcmp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <line_append+0xb8>
				set_motorA_speed(20);
 8000fe0:	2014      	movs	r0, #20
 8000fe2:	f000 fd8b 	bl	8001afc <set_motorA_speed>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <line_append+0x10c>)
 8000fea:	f002 fc87 	bl	80038fc <HAL_TIM_PWM_Start>
				printf("Command: %s\n", line_buffer);
 8000fee:	4911      	ldr	r1, [pc, #68]	; (8001034 <line_append+0xf4>)
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <line_append+0x100>)
 8000ff2:	f005 f85b 	bl	80060ac <iprintf>
 8000ff6:	e003      	b.n	8001000 <line_append+0xc0>
			}
			else printf("Unrecognized command: %s\n", line_buffer);
 8000ff8:	490e      	ldr	r1, [pc, #56]	; (8001034 <line_append+0xf4>)
 8000ffa:	4816      	ldr	r0, [pc, #88]	; (8001054 <line_append+0x114>)
 8000ffc:	f005 f856 	bl	80060ac <iprintf>
			line_length=0;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <line_append+0xf0>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8001006:	e00f      	b.n	8001028 <line_append+0xe8>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <line_append+0xf0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b4f      	cmp	r3, #79	; 0x4f
 800100e:	d902      	bls.n	8001016 <line_append+0xd6>
		{
			line_length=0;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <line_append+0xf0>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <line_append+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	4904      	ldr	r1, [pc, #16]	; (8001030 <line_append+0xf0>)
 800101e:	600a      	str	r2, [r1, #0]
 8001020:	4904      	ldr	r1, [pc, #16]	; (8001034 <line_append+0xf4>)
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	54ca      	strb	r2, [r1, r3]
	}
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000024c 	.word	0x2000024c
 8001034:	200001f8 	.word	0x200001f8
 8001038:	08008550 	.word	0x08008550
 800103c:	40020000 	.word	0x40020000
 8001040:	08008554 	.word	0x08008554
 8001044:	08008564 	.word	0x08008564
 8001048:	08008568 	.word	0x08008568
 800104c:	20000328 	.word	0x20000328
 8001050:	08008570 	.word	0x08008570
 8001054:	08008574 	.word	0x08008574

08001058 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_UART_RxCpltCallback+0x2c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d104      	bne.n	8001072 <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_UART_RxCpltCallback+0x30>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff67 	bl	8000f40 <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 8001072:	2201      	movs	r2, #1
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <HAL_UART_RxCpltCallback+0x30>)
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <HAL_UART_RxCpltCallback+0x2c>)
 8001078:	f003 fc93 	bl	80049a2 <HAL_UART_Receive_IT>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000260 	.word	0x20000260
 8001088:	200003b8 	.word	0x200003b8

0800108c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d11a      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		sprintf(buffer,"%i Welcome\r\n",i);
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4910      	ldr	r1, [pc, #64]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010a6:	f005 f819 	bl	80060dc <siprintf>
		i++;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010b2:	6013      	str	r3, [r2, #0]
		len=strlen(buffer);
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010b6:	f7ff f8b5 	bl	8000224 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010c0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,buffer,len,100);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	4907      	ldr	r1, [pc, #28]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80010ce:	f003 fbd6 	bl	800487e <HAL_UART_Transmit>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000370 	.word	0x20000370
 80010e0:	2000025c 	.word	0x2000025c
 80010e4:	08008590 	.word	0x08008590
 80010e8:	200002a4 	.word	0x200002a4
 80010ec:	200003bc 	.word	0x200003bc
 80010f0:	20000260 	.word	0x20000260

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fa:	f000 fd59 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fe:	f000 f81d 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001102:	f000 f9ef 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001106:	f000 f975 	bl	80013f4 <MX_TIM2_Init>
  MX_RTC_Init();
 800110a:	f000 f8ad 	bl	8001268 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800110e:	f000 f9bf 	bl	8001490 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001112:	f000 f8cf 	bl	80012b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  const char message[]="HEJA\n\r";
//  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 8001116:	2201      	movs	r2, #1
 8001118:	4905      	ldr	r1, [pc, #20]	; (8001130 <main+0x3c>)
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <main+0x40>)
 800111c:	f003 fc41 	bl	80049a2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <main+0x44>)
 8001122:	f002 fb21 	bl	8003768 <HAL_TIM_Base_Start_IT>

  tb6612_init();
 8001126:	f000 fd05 	bl	8001b34 <tb6612_init>
  int pwm=95;
 800112a:	235f      	movs	r3, #95	; 0x5f
 800112c:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112e:	e7fe      	b.n	800112e <main+0x3a>
 8001130:	200003b8 	.word	0x200003b8
 8001134:	20000260 	.word	0x20000260
 8001138:	20000370 	.word	0x20000370

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ac      	sub	sp, #176	; 0xb0
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001146:	2234      	movs	r2, #52	; 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fb3c 	bl	80057c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	225c      	movs	r2, #92	; 0x5c
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fb2d 	bl	80057c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <SystemClock_Config+0x124>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a3a      	ldr	r2, [pc, #232]	; (8001260 <SystemClock_Config+0x124>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <SystemClock_Config+0x124>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <SystemClock_Config+0x128>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a34      	ldr	r2, [pc, #208]	; (8001264 <SystemClock_Config+0x128>)
 8001194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <SystemClock_Config+0x128>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011a6:	2309      	movs	r3, #9
 80011a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011d2:	23b4      	movs	r3, #180	; 0xb4
 80011d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fee8 	bl	8002fc4 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011fa:	f000 f9f5 	bl	80015e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011fe:	f001 f89b 	bl	8002338 <HAL_PWREx_EnableOverDrive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001208:	f000 f9ee 	bl	80015e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001224:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001228:	2105      	movs	r1, #5
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f8d4 	bl	80023d8 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001236:	f000 f9d7 	bl	80015e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800123a:	2320      	movs	r3, #32
 800123c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800123e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f9df 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001254:	f000 f9c8 	bl	80015e8 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	37b0      	adds	r7, #176	; 0xb0
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_RTC_Init+0x44>)
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <MX_RTC_Init+0x48>)
 8001270:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_RTC_Init+0x44>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_RTC_Init+0x44>)
 800127a:	227f      	movs	r2, #127	; 0x7f
 800127c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_RTC_Init+0x44>)
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_RTC_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_RTC_Init+0x44>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_RTC_Init+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_RTC_Init+0x44>)
 8001298:	f002 f932 	bl	8003500 <HAL_RTC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80012a2:	f000 f9a1 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000308 	.word	0x20000308
 80012b0:	40002800 	.word	0x40002800

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fa6b 	bl	80057c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <MX_TIM1_Init+0x138>)
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <MX_TIM1_Init+0x13c>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_TIM1_Init+0x138>)
 80012fa:	222c      	movs	r2, #44	; 0x2c
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <MX_TIM1_Init+0x138>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_TIM1_Init+0x138>)
 8001306:	2263      	movs	r2, #99	; 0x63
 8001308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <MX_TIM1_Init+0x138>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_TIM1_Init+0x138>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_TIM1_Init+0x138>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131c:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_TIM1_Init+0x138>)
 800131e:	f002 f9d4 	bl	80036ca <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001328:	f000 f95e 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001336:	4619      	mov	r1, r3
 8001338:	482c      	ldr	r0, [pc, #176]	; (80013ec <MX_TIM1_Init+0x138>)
 800133a:	f002 fd71 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001344:	f000 f950 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001348:	4828      	ldr	r0, [pc, #160]	; (80013ec <MX_TIM1_Init+0x138>)
 800134a:	f002 fa7d 	bl	8003848 <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001354:	f000 f948 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001364:	4619      	mov	r1, r3
 8001366:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_TIM1_Init+0x138>)
 8001368:	f003 f95a 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001372:	f000 f939 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001376:	2360      	movs	r3, #96	; 0x60
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM1_Init+0x138>)
 800139c:	f002 fc7e 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013a6:	f000 f91f 	bl	80015e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x138>)
 80013ce:	f003 f9a3 	bl	8004718 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013d8:	f000 f906 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x138>)
 80013de:	f000 f98b 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3758      	adds	r7, #88	; 0x58
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000328 	.word	0x20000328
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_TIM2_Init+0x98>)
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_TIM2_Init+0x98>)
 800141a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM2_Init+0x98>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM2_Init+0x98>)
 8001428:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800142c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_TIM2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_TIM2_Init+0x98>)
 800143c:	f002 f945 	bl	80036ca <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001446:	f000 f8cf 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4619      	mov	r1, r3
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM2_Init+0x98>)
 8001458:	f002 fce2 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001462:	f000 f8c1 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001466:	2320      	movs	r3, #32
 8001468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_TIM2_Init+0x98>)
 8001474:	f003 f8d4 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147e:	f000 f8b3 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000370 	.word	0x20000370

08001490 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_USART1_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 800149c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c8:	f003 f98c 	bl	80047e4 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f000 f889 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000260 	.word	0x20000260
 80014e0:	40011000 	.word	0x40011000

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <MX_GPIO_Init+0xf4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_GPIO_Init+0xf4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <MX_GPIO_Init+0xf4>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2120      	movs	r1, #32
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001570:	f000 fec8 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_Pin|APHASE_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2130      	movs	r1, #48	; 0x30
 8001578:	4819      	ldr	r0, [pc, #100]	; (80015e0 <MX_GPIO_Init+0xfc>)
 800157a:	f000 fec3 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <MX_GPIO_Init+0x100>)
 8001594:	f000 fd22 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001598:	2320      	movs	r3, #32
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480b      	ldr	r0, [pc, #44]	; (80015dc <MX_GPIO_Init+0xf8>)
 80015b0:	f000 fd14 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin APHASE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|APHASE_Pin;
 80015b4:	2330      	movs	r3, #48	; 0x30
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_GPIO_Init+0xfc>)
 80015cc:	f000 fd06 	bl	8001fdc <HAL_GPIO_Init>

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_RTC_MspInit+0x24>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d102      	bne.n	800165c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RTC_MspInit+0x28>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40002800 	.word	0x40002800
 800166c:	42470e3c 	.word	0x42470e3c

08001670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_TIM_Base_MspInit+0x80>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d116      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2018      	movs	r0, #24
 80016a4:	f000 fbd1 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016a8:	2018      	movs	r0, #24
 80016aa:	f000 fbea 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ae:	e01a      	b.n	80016e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	d115      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_TIM_Base_MspInit+0x84>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201c      	movs	r0, #28
 80016dc:	f000 fbb5 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e0:	201c      	movs	r0, #28
 80016e2:	f000 fbce 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <HAL_TIM_MspPostInit+0x68>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d11e      	bne.n	8001758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_TIM_MspPostInit+0x6c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_TIM_MspPostInit+0x6c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_TIM_MspPostInit+0x6c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001748:	2301      	movs	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_TIM_MspPostInit+0x70>)
 8001754:	f000 fc42 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40010000 	.word	0x40010000
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <HAL_UART_MspInit+0xd0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d152      	bne.n	8001834 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_UART_MspInit+0xd4>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a2a      	ldr	r2, [pc, #168]	; (8001840 <HAL_UART_MspInit+0xd4>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_UART_MspInit+0xd4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f4:	2307      	movs	r3, #7
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <HAL_UART_MspInit+0xd8>)
 8001800:	f000 fbec 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001814:	2307      	movs	r3, #7
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <HAL_UART_MspInit+0xdc>)
 8001820:	f000 fbdc 	bl	8001fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2025      	movs	r0, #37	; 0x25
 800182a:	f000 fb0e 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800182e:	2025      	movs	r0, #37	; 0x25
 8001830:	f000 fb27 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40011000 	.word	0x40011000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f9dc 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018a6:	f002 f8f1 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000328 	.word	0x20000328

080018b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <TIM2_IRQHandler+0x10>)
 80018ba:	f002 f8e7 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000370 	.word	0x20000370

080018c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <USART1_IRQHandler+0x10>)
 80018ce:	f003 f899 	bl	8004a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000260 	.word	0x20000260

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_kill>:

int _kill(int pid, int sig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f6:	f003 ff3d 	bl	8005774 <__errno>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2216      	movs	r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_exit>:

void _exit (int status)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffe7 	bl	80018ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800191e:	e7fe      	b.n	800191e <_exit+0x12>

08001920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e00a      	b.n	8001948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001932:	f3af 8000 	nop.w
 8001936:	4601      	mov	r1, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf0      	blt.n	8001932 <_read+0x12>
	}

return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e009      	b.n	8001980 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fac3 	bl	8000f00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf1      	blt.n	800196c <_write+0x12>
	}
	return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_close>:

int _close(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return -1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ba:	605a      	str	r2, [r3, #4]
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_isatty>:

int _isatty(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return 1;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f003 fea2 	bl	8005774 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20020000 	.word	0x20020000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000250 	.word	0x20000250
 8001a64:	200003d8 	.word	0x200003d8

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <mode_control>:
#include "tb6612fng.h"
#include "main.h"


void mode_control(TB6612_Mode mode)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	if(mode==Phase_Enable_Mode)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <mode_control+0x34>)
 8001aa2:	f000 fc2f 	bl	8002304 <HAL_GPIO_WritePin>
	else if(mode==In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 8001aa6:	e007      	b.n	8001ab8 <mode_control+0x2c>
	else if(mode==In_In_Mode)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d104      	bne.n	8001ab8 <mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <mode_control+0x34>)
 8001ab4:	f000 fc26 	bl	8002304 <HAL_GPIO_WritePin>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <set_motorA_direction>:


void set_motorA_direction(TB6612_Direction dir)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	if (dir==CW)
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <set_motorA_direction+0x1c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <set_motorA_direction+0x34>)
 8001ada:	f000 fc13 	bl	8002304 <HAL_GPIO_WritePin>
	else if (dir==CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 8001ade:	e007      	b.n	8001af0 <set_motorA_direction+0x2c>
	else if (dir==CCW)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d104      	bne.n	8001af0 <set_motorA_direction+0x2c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2120      	movs	r1, #32
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <set_motorA_direction+0x34>)
 8001aec:	f000 fc0a 	bl	8002304 <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40020400 	.word	0x40020400

08001afc <set_motorA_speed>:

void set_motorA_speed(uint8_t speed)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	if(speed>=htim1.Instance->ARR)
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <set_motorA_speed+0x34>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d303      	bcc.n	8001b1a <set_motorA_speed+0x1e>
		speed=htim1.Instance->ARR;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <set_motorA_speed+0x34>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <set_motorA_speed+0x34>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000328 	.word	0x20000328

08001b34 <tb6612_init>:


void tb6612_init()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	mode_control(Phase_Enable_Mode);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff ffa7 	bl	8001a8c <mode_control>
	set_motorA_direction(CCW);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff ffc0 	bl	8001ac4 <set_motorA_direction>
	set_motorA_speed(0);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ffd9 	bl	8001afc <set_motorA_speed>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <tb6612_init+0x24>)
 8001b4e:	f001 fed5 	bl	80038fc <HAL_TIM_PWM_Start>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000328 	.word	0x20000328

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b62:	490e      	ldr	r1, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b78:	4c0b      	ldr	r4, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b86:	f7ff ff6f 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f003 fdf9 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fab1 	bl	80010f4 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ba0:	080089ac 	.word	0x080089ac
  ldr r2, =_sbss
 8001ba4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ba8:	200003d4 	.word	0x200003d4

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f92b 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fd06 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f943 	bl	8001e9e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f90b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	200003c0 	.word	0x200003c0

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200003c0 	.word	0x200003c0

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff feda 	bl	8001c7c <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d008      	beq.n	8001ee8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e052      	b.n	8001f8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0216 	bic.w	r2, r2, #22
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <HAL_DMA_Abort+0x62>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0208 	bic.w	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	e013      	b.n	8001f62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3a:	f7ff fe9f 	bl	8001c7c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d90c      	bls.n	8001f62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e015      	b.n	8001f8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e4      	bne.n	8001f3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e00c      	b.n	8001fce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e165      	b.n	80022c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8154 	bne.w	80022be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80ae 	beq.w	80022be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_GPIO_Init+0x300>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a5c      	ldr	r2, [pc, #368]	; (80022dc <HAL_GPIO_Init+0x300>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <HAL_GPIO_Init+0x300>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_GPIO_Init+0x304>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x308>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x21a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <HAL_GPIO_Init+0x30c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x216>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_GPIO_Init+0x310>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x212>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_GPIO_Init+0x314>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x20e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4b      	ldr	r2, [pc, #300]	; (80022f4 <HAL_GPIO_Init+0x318>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x20a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4a      	ldr	r2, [pc, #296]	; (80022f8 <HAL_GPIO_Init+0x31c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x206>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_GPIO_Init+0x320>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x202>
 80021da:	2306      	movs	r3, #6
 80021dc:	e00c      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021de:	2307      	movs	r3, #7
 80021e0:	e00a      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x21c>
 80021f6:	2300      	movs	r3, #0
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002208:	4935      	ldr	r1, [pc, #212]	; (80022e0 <HAL_GPIO_Init+0x304>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800223a:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_GPIO_Init+0x324>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_GPIO_Init+0x324>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228e:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_GPIO_Init+0x324>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <HAL_GPIO_Init+0x324>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	f67f ae96 	bls.w	8001ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40021400 	.word	0x40021400
 80022fc:	40021800 	.word	0x40021800
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_PWREx_EnableOverDrive+0x94>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002364:	f7ff fc8a 	bl	8001c7c <HAL_GetTick>
 8002368:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800236a:	e009      	b.n	8002380 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800236c:	f7ff fc86 	bl	8001c7c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237a:	d901      	bls.n	8002380 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e01f      	b.n	80023c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d1ee      	bne.n	800236c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002394:	f7ff fc72 	bl	8001c7c <HAL_GetTick>
 8002398:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800239a:	e009      	b.n	80023b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800239c:	f7ff fc6e 	bl	8001c7c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023aa:	d901      	bls.n	80023b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e007      	b.n	80023c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023bc:	d1ee      	bne.n	800239c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	420e0040 	.word	0x420e0040
 80023d0:	40007000 	.word	0x40007000
 80023d4:	420e0044 	.word	0x420e0044

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0cc      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d90c      	bls.n	8002414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d044      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e067      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4934      	ldr	r1, [pc, #208]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7ff fbd8 	bl	8001c7c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7ff fbd4 	bl	8001c7c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d20c      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255e:	f000 fb7f 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fb38 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	080085a0 	.word	0x080085a0
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080085b0 	.word	0x080085b0

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e8:	f7ff ffdc 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0b5b      	lsrs	r3, r3, #13
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	080085b0 	.word	0x080085b0

0800260c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	496c      	ldr	r1, [pc, #432]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002662:	2301      	movs	r3, #1
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d010      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002678:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	4960      	ldr	r1, [pc, #384]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a0:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4955      	ldr	r1, [pc, #340]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026be:	d101      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80026c0:	2301      	movs	r3, #1
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026dc:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	4946      	ldr	r1, [pc, #280]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d101      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80026fc:	2301      	movs	r3, #1
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002708:	2301      	movs	r3, #1
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 808a 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a33      	ldr	r2, [pc, #204]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002742:	f7ff fa9b 	bl	8001c7c <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff fa97 	bl	8001c7c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e278      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002770:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02f      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	429a      	cmp	r2, r3
 8002784:	d028      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d114      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fa65 	bl	8001c7c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7ff fa61 	bl	8001c7c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e240      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ee      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027e4:	d114      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fa:	4902      	ldr	r1, [pc, #8]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
 8002800:	e00c      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000
 800280c:	42470e40 	.word	0x42470e40
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002816:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800281a:	6093      	str	r3, [r2, #8]
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800281e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	4944      	ldr	r1, [pc, #272]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800282a:	4313      	orrs	r3, r2
 800282c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002842:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002878:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002880:	492e      	ldr	r1, [pc, #184]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	4926      	ldr	r1, [pc, #152]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b2:	d101      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	491a      	ldr	r1, [pc, #104]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d011      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	4911      	ldr	r1, [pc, #68]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002906:	2301      	movs	r3, #1
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d005      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002918:	f040 80ff 	bne.w	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002922:	f7ff f9ab 	bl	8001c7c <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002928:	e00e      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800292a:	f7ff f9a7 	bl	8001c7c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d907      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e188      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800293c:	40023800 	.word	0x40023800
 8002940:	424711e0 	.word	0x424711e0
 8002944:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002948:	4b7e      	ldr	r3, [pc, #504]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ea      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002970:	2b00      	cmp	r3, #0
 8002972:	d028      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d124      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800297c:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	3301      	adds	r3, #1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800298e:	4b6d      	ldr	r3, [pc, #436]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	0e1b      	lsrs	r3, r3, #24
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	431a      	orrs	r2, r3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	4961      	ldr	r1, [pc, #388]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d035      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f0:	d130      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029f2:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0a:	0f1b      	lsrs	r3, r3, #28
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	071b      	lsls	r3, r3, #28
 8002a34:	4943      	ldr	r1, [pc, #268]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a3c:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a42:	f023 021f 	bic.w	r2, r3, #31
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	493d      	ldr	r1, [pc, #244]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d029      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a68:	d124      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a82:	0f1b      	lsrs	r3, r3, #28
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	071b      	lsls	r3, r3, #28
 8002aac:	4925      	ldr	r1, [pc, #148]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d016      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	071b      	lsls	r3, r3, #28
 8002ae6:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af4:	f7ff f8c2 	bl	8001c7c <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002afc:	f7ff f8be 	bl	8001c7c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e09f      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 8095 	bne.w	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b28:	f7ff f8a8 	bl	8001c7c <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b30:	f7ff f8a4 	bl	8001c7c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d908      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e085      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470068 	.word	0x42470068
 8002b4c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5c:	d0e8      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d127      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	4928      	ldr	r1, [pc, #160]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4922      	ldr	r1, [pc, #136]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01d      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bea:	d118      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	019b      	lsls	r3, r3, #6
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4910      	ldr	r1, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c24:	f7ff f82a 	bl	8001c7c <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c2c:	f7ff f826 	bl	8001c7c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e007      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4a:	d1ef      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3730      	adds	r7, #48	; 0x30
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	42470070 	.word	0x42470070

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b088      	sub	sp, #32
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7c:	4bce      	ldr	r3, [pc, #824]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	f200 818d 	bhi.w	8002fa4 <HAL_RCC_GetSysClockFreq+0x344>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <HAL_RCC_GetSysClockFreq+0x30>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002fa5 	.word	0x08002fa5
 8002c98:	08002fa5 	.word	0x08002fa5
 8002c9c:	08002fa5 	.word	0x08002fa5
 8002ca0:	08002ccb 	.word	0x08002ccb
 8002ca4:	08002fa5 	.word	0x08002fa5
 8002ca8:	08002fa5 	.word	0x08002fa5
 8002cac:	08002fa5 	.word	0x08002fa5
 8002cb0:	08002cd1 	.word	0x08002cd1
 8002cb4:	08002fa5 	.word	0x08002fa5
 8002cb8:	08002fa5 	.word	0x08002fa5
 8002cbc:	08002fa5 	.word	0x08002fa5
 8002cc0:	08002e45 	.word	0x08002e45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4bbd      	ldr	r3, [pc, #756]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cc6:	61bb      	str	r3, [r7, #24]
       break;
 8002cc8:	e16f      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cca:	4bbd      	ldr	r3, [pc, #756]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x360>)
 8002ccc:	61bb      	str	r3, [r7, #24]
      break;
 8002cce:	e16c      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd0:	4bb9      	ldr	r3, [pc, #740]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	4bb7      	ldr	r3, [pc, #732]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d053      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4bb4      	ldr	r3, [pc, #720]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	461a      	mov	r2, r3
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	ea02 0400 	and.w	r4, r2, r0
 8002cfe:	603c      	str	r4, [r7, #0]
 8002d00:	400b      	ands	r3, r1
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	014b      	lsls	r3, r1, #5
 8002d16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d1a:	0142      	lsls	r2, r0, #5
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4623      	mov	r3, r4
 8002d22:	1ac0      	subs	r0, r0, r3
 8002d24:	462b      	mov	r3, r5
 8002d26:	eb61 0103 	sbc.w	r1, r1, r3
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d38:	0182      	lsls	r2, r0, #6
 8002d3a:	1a12      	subs	r2, r2, r0
 8002d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	00d9      	lsls	r1, r3, #3
 8002d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d4e:	00d0      	lsls	r0, r2, #3
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4621      	mov	r1, r4
 8002d56:	1852      	adds	r2, r2, r1
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb43 0101 	adc.w	r1, r3, r1
 8002d5e:	460b      	mov	r3, r1
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0259      	lsls	r1, r3, #9
 8002d6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d6e:	0250      	lsls	r0, r2, #9
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	f7fd ff42 	bl	8000c08 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e04c      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8e:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	461a      	mov	r2, r3
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	ea02 0a00 	and.w	sl, r2, r0
 8002da6:	ea03 0b01 	and.w	fp, r3, r1
 8002daa:	4650      	mov	r0, sl
 8002dac:	4659      	mov	r1, fp
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	014b      	lsls	r3, r1, #5
 8002db8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dbc:	0142      	lsls	r2, r0, #5
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	ebb0 000a 	subs.w	r0, r0, sl
 8002dc6:	eb61 010b 	sbc.w	r1, r1, fp
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	018b      	lsls	r3, r1, #6
 8002dd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dd8:	0182      	lsls	r2, r0, #6
 8002dda:	1a12      	subs	r2, r2, r0
 8002ddc:	eb63 0301 	sbc.w	r3, r3, r1
 8002de0:	f04f 0000 	mov.w	r0, #0
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	00d9      	lsls	r1, r3, #3
 8002dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dee:	00d0      	lsls	r0, r2, #3
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	eb12 020a 	adds.w	r2, r2, sl
 8002df8:	eb43 030b 	adc.w	r3, r3, fp
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0299      	lsls	r1, r3, #10
 8002e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e0a:	0290      	lsls	r0, r2, #10
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f7fd fef4 	bl	8000c08 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	61bb      	str	r3, [r7, #24]
      break;
 8002e42:	e0b2      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e44:	4b5c      	ldr	r3, [pc, #368]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d04d      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	461a      	mov	r2, r3
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	ea02 0800 	and.w	r8, r2, r0
 8002e72:	ea03 0901 	and.w	r9, r3, r1
 8002e76:	4640      	mov	r0, r8
 8002e78:	4649      	mov	r1, r9
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	014b      	lsls	r3, r1, #5
 8002e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e88:	0142      	lsls	r2, r0, #5
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e92:	eb61 0109 	sbc.w	r1, r1, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	018b      	lsls	r3, r1, #6
 8002ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ea4:	0182      	lsls	r2, r0, #6
 8002ea6:	1a12      	subs	r2, r2, r0
 8002ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	00d9      	lsls	r1, r3, #3
 8002eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eba:	00d0      	lsls	r0, r2, #3
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	eb12 0208 	adds.w	r2, r2, r8
 8002ec4:	eb43 0309 	adc.w	r3, r3, r9
 8002ec8:	f04f 0000 	mov.w	r0, #0
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	0259      	lsls	r1, r3, #9
 8002ed2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ed6:	0250      	lsls	r0, r2, #9
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f7fd fe8e 	bl	8000c08 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e04a      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	461a      	mov	r2, r3
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	ea02 0400 	and.w	r4, r2, r0
 8002f0e:	ea03 0501 	and.w	r5, r3, r1
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	014b      	lsls	r3, r1, #5
 8002f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f24:	0142      	lsls	r2, r0, #5
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	1b00      	subs	r0, r0, r4
 8002f2c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	018b      	lsls	r3, r1, #6
 8002f3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f3e:	0182      	lsls	r2, r0, #6
 8002f40:	1a12      	subs	r2, r2, r0
 8002f42:	eb63 0301 	sbc.w	r3, r3, r1
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	00d9      	lsls	r1, r3, #3
 8002f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f54:	00d0      	lsls	r0, r2, #3
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	1912      	adds	r2, r2, r4
 8002f5c:	eb45 0303 	adc.w	r3, r5, r3
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0299      	lsls	r1, r3, #10
 8002f6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f6e:	0290      	lsls	r0, r2, #10
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f7fd fe42 	bl	8000c08 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0f1b      	lsrs	r3, r3, #28
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	61bb      	str	r3, [r7, #24]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002fa6:	61bb      	str	r3, [r7, #24]
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	69bb      	ldr	r3, [r7, #24]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e28d      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8083 	beq.w	80030ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe4:	4b94      	ldr	r3, [pc, #592]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d019      	beq.n	8003024 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ff0:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ffc:	4b8e      	ldr	r3, [pc, #568]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x124>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e25a      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x90>
 8003046:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xcc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0xb4>
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a72      	ldr	r2, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xcc>
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6b      	ldr	r2, [pc, #428]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fdf0 	bl	8001c7c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fdec 	bl	8001c7c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e21f      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xdc>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fddc 	bl	8001c7c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fdd8 	bl	8001c7c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e20b      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x104>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d06f      	beq.n	80031d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d017      	beq.n	8003132 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003102:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x186>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1d3      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4937      	ldr	r1, [pc, #220]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_OscConfig+0x278>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe fd85 	bl	8001c7c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe fd81 	bl	8001c7c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1b4      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4925      	ldr	r1, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x278>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fd64 	bl	8001c7c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b8:	f7fe fd60 	bl	8001c7c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e193      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d036      	beq.n	8003250 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fd44 	bl	8001c7c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe fd40 	bl	8001c7c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e173      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x234>
 8003216:	e01b      	b.n	8003250 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0x27c>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fd2d 	bl	8001c7c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e00e      	b.n	8003244 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fd29 	bl	8001c7c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d907      	bls.n	8003244 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e15c      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ea      	bne.n	8003226 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8097 	beq.w	800338c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b83      	ldr	r3, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a7e      	ldr	r2, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b79      	ldr	r3, [pc, #484]	; (8003474 <HAL_RCC_OscConfig+0x4b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x4b0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4b0>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fce9 	bl	8001c7c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe fce5 	bl	8001c7c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e118      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x4b0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x31e>
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a65      	ldr	r2, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e01c      	b.n	800331c <HAL_RCC_OscConfig+0x358>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x340>
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a60      	ldr	r2, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x358>
 8003304:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a59      	ldr	r2, [pc, #356]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a56      	ldr	r2, [pc, #344]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fcaa 	bl	8001c7c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fca6 	bl	8001c7c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0d7      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCC_OscConfig+0x368>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fe fc94 	bl	8001c7c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe fc90 	bl	8001c7c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0c1      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80ad 	beq.w	80034f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d060      	beq.n	8003464 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d145      	bne.n	8003436 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4b4>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fc64 	bl	8001c7c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fc60 	bl	8001c7c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e093      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x4b4>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fe fc35 	bl	8001c7c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe fc31 	bl	8001c7c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e064      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x452>
 8003434:	e05c      	b.n	80034f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x4b4>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fc1e 	bl	8001c7c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fc1a 	bl	8001c7c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04d      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x480>
 8003462:	e045      	b.n	80034f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e040      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000
 8003478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCC_OscConfig+0x538>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d030      	beq.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d129      	bne.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d122      	bne.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d119      	bne.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	3b01      	subs	r3, #1
 80034c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d10f      	bne.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800

08003500 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e083      	b.n	800361a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7f5b      	ldrb	r3, [r3, #29]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f88e 	bl	8001644 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	22ca      	movs	r2, #202	; 0xca
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2253      	movs	r2, #83	; 0x53
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f897 	bl	8003672 <RTC_EnterInitMode>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e05e      	b.n	800361a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800356a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	041a      	lsls	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10e      	bne.n	80035e8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f829 	bl	8003622 <HAL_RTC_WaitForSynchro>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e018      	b.n	800361a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800363e:	f7fe fb1d 	bl	8001c7c <HAL_GetTick>
 8003642:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003644:	e009      	b.n	800365a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003646:	f7fe fb19 	bl	8001c7c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003654:	d901      	bls.n	800365a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e007      	b.n	800366a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d119      	bne.n	80036c0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003696:	f7fe faf1 	bl	8001c7c <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800369c:	e009      	b.n	80036b2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800369e:	f7fe faed 	bl	8001c7c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e007      	b.n	80036c2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e041      	b.n	8003760 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7fd ffbd 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 fc79 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e04e      	b.n	800381e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_TIM_Base_Start_IT+0xc4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037aa:	d01d      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_TIM_Base_Start_IT+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_TIM_Base_Start_IT+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_TIM_Base_Start_IT+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_TIM_Base_Start_IT+0xd8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d111      	bne.n	800380c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d010      	beq.n	800381c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	e007      	b.n	800381c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40010400 	.word	0x40010400
 8003840:	40014000 	.word	0x40014000
 8003844:	40001800 	.word	0x40001800

08003848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e041      	b.n	80038de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f839 	bl	80038e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fbba 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_TIM_PWM_Start+0x24>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e022      	b.n	8003966 <HAL_TIM_PWM_Start+0x6a>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d109      	bne.n	800393a <HAL_TIM_PWM_Start+0x3e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	e015      	b.n	8003966 <HAL_TIM_PWM_Start+0x6a>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d109      	bne.n	8003954 <HAL_TIM_PWM_Start+0x58>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e008      	b.n	8003966 <HAL_TIM_PWM_Start+0x6a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07c      	b.n	8003a68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start+0x82>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800397c:	e013      	b.n	80039a6 <HAL_TIM_PWM_Start+0xaa>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0x92>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	e00b      	b.n	80039a6 <HAL_TIM_PWM_Start+0xaa>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	e003      	b.n	80039a6 <HAL_TIM_PWM_Start+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	6839      	ldr	r1, [r7, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe10 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HAL_TIM_PWM_Start+0x174>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_TIM_PWM_Start+0xcc>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <HAL_TIM_PWM_Start+0x178>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_PWM_Start+0xd0>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_TIM_PWM_Start+0xd2>
 80039cc:	2300      	movs	r3, #0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_TIM_PWM_Start+0x174>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d01d      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <HAL_TIM_PWM_Start+0x17c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <HAL_TIM_PWM_Start+0x180>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <HAL_TIM_PWM_Start+0x184>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <HAL_TIM_PWM_Start+0x178>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_TIM_PWM_Start+0x188>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x136>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_TIM_PWM_Start+0x18c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d010      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	e007      	b.n	8003a66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40001800 	.word	0x40001800

08003a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa77 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa69 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fa7a 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0204 	mvn.w	r2, #4
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa4d 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa3f 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fa50 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0208 	mvn.w	r2, #8
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa23 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa15 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa26 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0210 	mvn.w	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9f9 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9eb 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f9fc 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fa3e 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fdca 	bl	80047d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9c1 	bl	8003fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0220 	mvn.w	r2, #32
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fd94 	bl	80047bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0ae      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	f200 809f 	bhi.w	8003e08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003e09 	.word	0x08003e09
 8003cd8:	08003e09 	.word	0x08003e09
 8003cdc:	08003e09 	.word	0x08003e09
 8003ce0:	08003d45 	.word	0x08003d45
 8003ce4:	08003e09 	.word	0x08003e09
 8003ce8:	08003e09 	.word	0x08003e09
 8003cec:	08003e09 	.word	0x08003e09
 8003cf0:	08003d87 	.word	0x08003d87
 8003cf4:	08003e09 	.word	0x08003e09
 8003cf8:	08003e09 	.word	0x08003e09
 8003cfc:	08003e09 	.word	0x08003e09
 8003d00:	08003dc7 	.word	0x08003dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa18 	bl	8004140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	619a      	str	r2, [r3, #24]
      break;
 8003d42:	e064      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fa68 	bl	8004220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      break;
 8003d84:	e043      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fabd 	bl	800430c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0208 	orr.w	r2, r2, #8
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
      break;
 8003dc4:	e023      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fb11 	bl	80043f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	021a      	lsls	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	61da      	str	r2, [r3, #28]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIM_ConfigClockSource+0x1c>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0b4      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x186>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e74:	d03e      	beq.n	8003ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7a:	f200 8087 	bhi.w	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e82:	f000 8086 	beq.w	8003f92 <HAL_TIM_ConfigClockSource+0x172>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d87f      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b70      	cmp	r3, #112	; 0x70
 8003e8e:	d01a      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e90:	2b70      	cmp	r3, #112	; 0x70
 8003e92:	d87b      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d050      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x11a>
 8003e98:	2b60      	cmp	r3, #96	; 0x60
 8003e9a:	d877      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d03c      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0xfa>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d873      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d058      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x13a>
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d86f      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d064      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b30      	cmp	r3, #48	; 0x30
 8003eb2:	d86b      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d060      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d867      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05c      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d05a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	e062      	b.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f000 fb5d 	bl	8004594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]
      break;
 8003ef2:	e04f      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6899      	ldr	r1, [r3, #8]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f000 fb46 	bl	8004594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f16:	609a      	str	r2, [r3, #8]
      break;
 8003f18:	e03c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 faba 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2150      	movs	r1, #80	; 0x50
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fb13 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003f38:	e02c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fad9 	bl	80044fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2160      	movs	r1, #96	; 0x60
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb03 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003f58:	e01c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fa9a 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 faf3 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003f78:	e00c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f000 faea 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003f8a:	e003      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a40      	ldr	r2, [pc, #256]	; (8004114 <TIM_Base_SetConfig+0x114>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3d      	ldr	r2, [pc, #244]	; (8004118 <TIM_Base_SetConfig+0x118>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3c      	ldr	r2, [pc, #240]	; (800411c <TIM_Base_SetConfig+0x11c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <TIM_Base_SetConfig+0x120>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <TIM_Base_SetConfig+0x124>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2f      	ldr	r2, [pc, #188]	; (8004114 <TIM_Base_SetConfig+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d027      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <TIM_Base_SetConfig+0x118>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d023      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2b      	ldr	r2, [pc, #172]	; (800411c <TIM_Base_SetConfig+0x11c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <TIM_Base_SetConfig+0x120>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <TIM_Base_SetConfig+0x124>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a28      	ldr	r2, [pc, #160]	; (8004128 <TIM_Base_SetConfig+0x128>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <TIM_Base_SetConfig+0x12c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a26      	ldr	r2, [pc, #152]	; (8004130 <TIM_Base_SetConfig+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a25      	ldr	r2, [pc, #148]	; (8004134 <TIM_Base_SetConfig+0x134>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a24      	ldr	r2, [pc, #144]	; (8004138 <TIM_Base_SetConfig+0x138>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <TIM_Base_SetConfig+0x13c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <TIM_Base_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0xf8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <TIM_Base_SetConfig+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40010400 	.word	0x40010400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800
 8004134:	40001800 	.word	0x40001800
 8004138:	40001c00 	.word	0x40001c00
 800413c:	40002000 	.word	0x40002000

08004140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0302 	bic.w	r3, r3, #2
 8004188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a20      	ldr	r2, [pc, #128]	; (8004218 <TIM_OC1_SetConfig+0xd8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_OC1_SetConfig+0x64>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <TIM_OC1_SetConfig+0xdc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0308 	bic.w	r3, r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <TIM_OC1_SetConfig+0xd8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_OC1_SetConfig+0x8e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <TIM_OC1_SetConfig+0xdc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d111      	bne.n	80041f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40010000 	.word	0x40010000
 800421c:	40010400 	.word	0x40010400

08004220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0320 	bic.w	r3, r3, #32
 800426a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a22      	ldr	r2, [pc, #136]	; (8004304 <TIM_OC2_SetConfig+0xe4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_OC2_SetConfig+0x68>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <TIM_OC2_SetConfig+0xe8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10d      	bne.n	80042a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC2_SetConfig+0xe4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC2_SetConfig+0x94>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC2_SetConfig+0xe8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d113      	bne.n	80042dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a21      	ldr	r2, [pc, #132]	; (80043ec <TIM_OC3_SetConfig+0xe0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x66>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <TIM_OC3_SetConfig+0xe4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10d      	bne.n	800438e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <TIM_OC3_SetConfig+0xe0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_OC3_SetConfig+0x92>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <TIM_OC3_SetConfig+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40010400 	.word	0x40010400

080043f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a12      	ldr	r2, [pc, #72]	; (8004498 <TIM_OC4_SetConfig+0xa4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_OC4_SetConfig+0x68>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a11      	ldr	r2, [pc, #68]	; (800449c <TIM_OC4_SetConfig+0xa8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40010400 	.word	0x40010400

080044a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0210 	bic.w	r2, r3, #16
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800453a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	f043 0307 	orr.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2201      	movs	r2, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e05a      	b.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a21      	ldr	r2, [pc, #132]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d01d      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10c      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40010400 	.word	0x40010400
 8004710:	40014000 	.word	0x40014000
 8004714:	40001800 	.word	0x40001800

08004718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004730:	2302      	movs	r3, #2
 8004732:	e03d      	b.n	80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e03f      	b.n	8004876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc ffae 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fddb 	bl	80053e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	; 0x28
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b20      	cmp	r3, #32
 800489c:	d17c      	bne.n	8004998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_Transmit+0x2c>
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e075      	b.n	800499a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Transmit+0x3e>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e06e      	b.n	800499a <HAL_UART_Transmit+0x11c>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	; 0x21
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fd f9d3 	bl	8001c7c <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d108      	bne.n	8004900 <HAL_UART_Transmit+0x82>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004910:	e02a      	b.n	8004968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fb1f 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e036      	b.n	800499a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3302      	adds	r3, #2
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e007      	b.n	800495a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1cf      	bne.n	8004912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 faef 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e006      	b.n	800499a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d11d      	bne.n	80049f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Receive_IT+0x26>
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e016      	b.n	80049fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_UART_Receive_IT+0x38>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e00f      	b.n	80049fa <HAL_UART_Receive_IT+0x58>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	461a      	mov	r2, r3
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fb24 	bl	800503c <UART_Start_Receive_IT>
 80049f4:	4603      	mov	r3, r0
 80049f6:	e000      	b.n	80049fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b0ba      	sub	sp, #232	; 0xe8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_UART_IRQHandler+0x66>
 8004a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fc03 	bl	800526e <UART_Receive_IT>
      return;
 8004a68:	e256      	b.n	8004f18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80de 	beq.w	8004c30 <HAL_UART_IRQHandler+0x22c>
 8004a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80d1 	beq.w	8004c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xae>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f043 0201 	orr.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xd2>
 8004abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0202 	orr.w	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xf6>
 8004ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d011      	beq.n	8004b2a <HAL_UART_IRQHandler+0x126>
 8004b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f043 0208 	orr.w	r2, r3, #8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 81ed 	beq.w	8004f0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_UART_IRQHandler+0x14e>
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb8e 	bl	800526e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_UART_IRQHandler+0x17a>
 8004b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d04f      	beq.n	8004c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa96 	bl	80050b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d141      	bne.n	8004c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1d9      	bne.n	8004b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	4a7d      	ldr	r2, [pc, #500]	; (8004de0 <HAL_UART_IRQHandler+0x3dc>)
 8004bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fd f9cf 	bl	8001f96 <HAL_DMA_Abort_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e00e      	b.n	8004c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f990 	bl	8004f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e00a      	b.n	8004c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f98c 	bl	8004f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e006      	b.n	8004c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f988 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c2a:	e170      	b.n	8004f0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	bf00      	nop
    return;
 8004c2e:	e16e      	b.n	8004f0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 814a 	bne.w	8004ece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8143 	beq.w	8004ece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 813c 	beq.w	8004ece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	f040 80b4 	bne.w	8004de4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8140 	beq.w	8004f12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	f080 8139 	bcs.w	8004f12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb2:	f000 8088 	beq.w	8004dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1d9      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3314      	adds	r3, #20
 8004d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e1      	bne.n	8004d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3314      	adds	r3, #20
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e3      	bne.n	8004d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	f023 0310 	bic.w	r3, r3, #16
 8004d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e3      	bne.n	8004d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fd f878 	bl	8001eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f8b6 	bl	8004f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ddc:	e099      	b.n	8004f12 <HAL_UART_IRQHandler+0x50e>
 8004dde:	bf00      	nop
 8004de0:	08005177 	.word	0x08005177
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 808b 	beq.w	8004f16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8086 	beq.w	8004f16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e3      	bne.n	8004e0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	623b      	str	r3, [r7, #32]
   return(result);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e66:	633a      	str	r2, [r7, #48]	; 0x30
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004eac:	61fa      	str	r2, [r7, #28]
 8004eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e3      	bne.n	8004e88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f83e 	bl	8004f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ecc:	e023      	b.n	8004f16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_UART_IRQHandler+0x4ea>
 8004eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f959 	bl	800519e <UART_Transmit_IT>
    return;
 8004eec:	e014      	b.n	8004f18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <HAL_UART_IRQHandler+0x514>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f999 	bl	800523e <UART_EndTransmit_IT>
    return;
 8004f0c:	e004      	b.n	8004f18 <HAL_UART_IRQHandler+0x514>
    return;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <HAL_UART_IRQHandler+0x514>
      return;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_UART_IRQHandler+0x514>
      return;
 8004f16:	bf00      	nop
  }
}
 8004f18:	37e8      	adds	r7, #232	; 0xe8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop

08004f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b090      	sub	sp, #64	; 0x40
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	e050      	b.n	8005014 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d04c      	beq.n	8005014 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f80:	f7fc fe7c 	bl	8001c7c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d241      	bcs.n	8005014 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb0:	637a      	str	r2, [r7, #52]	; 0x34
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3314      	adds	r3, #20
 8004fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe4:	623a      	str	r2, [r7, #32]
 8004fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	6a3a      	ldr	r2, [r7, #32]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e00f      	b.n	8005034 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	429a      	cmp	r2, r3
 8005030:	d09f      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3740      	adds	r7, #64	; 0x40
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2222      	movs	r2, #34	; 0x22
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005080:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0220 	orr.w	r2, r2, #32
 80050a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b095      	sub	sp, #84	; 0x54
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050d8:	643a      	str	r2, [r7, #64]	; 0x40
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	2b01      	cmp	r3, #1
 8005126:	d119      	bne.n	800515c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	60bb      	str	r3, [r7, #8]
   return(result);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	647b      	str	r3, [r7, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005148:	61ba      	str	r2, [r7, #24]
 800514a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	613b      	str	r3, [r7, #16]
   return(result);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
}
 800516a:	bf00      	nop
 800516c:	3754      	adds	r7, #84	; 0x54
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fecf 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b21      	cmp	r3, #33	; 0x21
 80051b0:	d13e      	bne.n	8005230 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d114      	bne.n	80051e6 <UART_Transmit_IT+0x48>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d110      	bne.n	80051e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	1c9a      	adds	r2, r3, #2
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]
 80051e4:	e008      	b.n	80051f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6211      	str	r1, [r2, #32]
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4619      	mov	r1, r3
 8005206:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800521a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fe5e 	bl	8004f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b22      	cmp	r3, #34	; 0x22
 8005280:	f040 80ab 	bne.w	80053da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d117      	bne.n	80052be <UART_Receive_IT+0x50>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d113      	bne.n	80052be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	1c9a      	adds	r2, r3, #2
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
 80052bc:	e026      	b.n	800530c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d007      	beq.n	80052e2 <UART_Receive_IT+0x74>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <UART_Receive_IT+0x82>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e008      	b.n	8005302 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29b      	uxth	r3, r3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4619      	mov	r1, r3
 800531a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800531c:	2b00      	cmp	r3, #0
 800531e:	d15a      	bne.n	80053d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0220 	bic.w	r2, r2, #32
 800532e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800533e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	2b01      	cmp	r3, #1
 800535e:	d135      	bne.n	80053cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	330c      	adds	r3, #12
 800536c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f023 0310 	bic.w	r3, r3, #16
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005386:	623a      	str	r2, [r7, #32]
 8005388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	69f9      	ldr	r1, [r7, #28]
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	61bb      	str	r3, [r7, #24]
   return(result);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e5      	bne.n	8005366 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d10a      	bne.n	80053be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fdbf 	bl	8004f48 <HAL_UARTEx_RxEventCallback>
 80053ca:	e002      	b.n	80053d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fb fe43 	bl	8001058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e002      	b.n	80053dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3730      	adds	r7, #48	; 0x30
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	b09f      	sub	sp, #124	; 0x7c
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	68d9      	ldr	r1, [r3, #12]
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	ea40 0301 	orr.w	r3, r0, r1
 8005404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	431a      	orrs	r2, r3
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	431a      	orrs	r2, r3
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4313      	orrs	r3, r2
 800541c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005428:	f021 010c 	bic.w	r1, r1, #12
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005432:	430b      	orrs	r3, r1
 8005434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005442:	6999      	ldr	r1, [r3, #24]
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	ea40 0301 	orr.w	r3, r0, r1
 800544c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4bc5      	ldr	r3, [pc, #788]	; (8005768 <UART_SetConfig+0x384>)
 8005454:	429a      	cmp	r2, r3
 8005456:	d004      	beq.n	8005462 <UART_SetConfig+0x7e>
 8005458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4bc3      	ldr	r3, [pc, #780]	; (800576c <UART_SetConfig+0x388>)
 800545e:	429a      	cmp	r2, r3
 8005460:	d103      	bne.n	800546a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005462:	f7fd f8bf 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8005466:	6778      	str	r0, [r7, #116]	; 0x74
 8005468:	e002      	b.n	8005470 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800546a:	f7fd f8a7 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 800546e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005478:	f040 80b6 	bne.w	80055e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800547c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547e:	461c      	mov	r4, r3
 8005480:	f04f 0500 	mov.w	r5, #0
 8005484:	4622      	mov	r2, r4
 8005486:	462b      	mov	r3, r5
 8005488:	1891      	adds	r1, r2, r2
 800548a:	6439      	str	r1, [r7, #64]	; 0x40
 800548c:	415b      	adcs	r3, r3
 800548e:	647b      	str	r3, [r7, #68]	; 0x44
 8005490:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005494:	1912      	adds	r2, r2, r4
 8005496:	eb45 0303 	adc.w	r3, r5, r3
 800549a:	f04f 0000 	mov.w	r0, #0
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	00d9      	lsls	r1, r3, #3
 80054a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a8:	00d0      	lsls	r0, r2, #3
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	1911      	adds	r1, r2, r4
 80054b0:	6639      	str	r1, [r7, #96]	; 0x60
 80054b2:	416b      	adcs	r3, r5
 80054b4:	667b      	str	r3, [r7, #100]	; 0x64
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	1891      	adds	r1, r2, r2
 80054c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054c4:	415b      	adcs	r3, r3
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054d0:	f7fb fb9a 	bl	8000c08 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4ba5      	ldr	r3, [pc, #660]	; (8005770 <UART_SetConfig+0x38c>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011e      	lsls	r6, r3, #4
 80054e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e4:	461c      	mov	r4, r3
 80054e6:	f04f 0500 	mov.w	r5, #0
 80054ea:	4622      	mov	r2, r4
 80054ec:	462b      	mov	r3, r5
 80054ee:	1891      	adds	r1, r2, r2
 80054f0:	6339      	str	r1, [r7, #48]	; 0x30
 80054f2:	415b      	adcs	r3, r3
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054fa:	1912      	adds	r2, r2, r4
 80054fc:	eb45 0303 	adc.w	r3, r5, r3
 8005500:	f04f 0000 	mov.w	r0, #0
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	00d9      	lsls	r1, r3, #3
 800550a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800550e:	00d0      	lsls	r0, r2, #3
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	1911      	adds	r1, r2, r4
 8005516:	65b9      	str	r1, [r7, #88]	; 0x58
 8005518:	416b      	adcs	r3, r5
 800551a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800551c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	461a      	mov	r2, r3
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	1891      	adds	r1, r2, r2
 8005528:	62b9      	str	r1, [r7, #40]	; 0x28
 800552a:	415b      	adcs	r3, r3
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005532:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005536:	f7fb fb67 	bl	8000c08 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4b8c      	ldr	r3, [pc, #560]	; (8005770 <UART_SetConfig+0x38c>)
 8005540:	fba3 1302 	umull	r1, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	2164      	movs	r1, #100	; 0x64
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	3332      	adds	r3, #50	; 0x32
 8005552:	4a87      	ldr	r2, [pc, #540]	; (8005770 <UART_SetConfig+0x38c>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005560:	441e      	add	r6, r3
 8005562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005564:	4618      	mov	r0, r3
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	1894      	adds	r4, r2, r2
 8005570:	623c      	str	r4, [r7, #32]
 8005572:	415b      	adcs	r3, r3
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557a:	1812      	adds	r2, r2, r0
 800557c:	eb41 0303 	adc.w	r3, r1, r3
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	f04f 0500 	mov.w	r5, #0
 8005588:	00dd      	lsls	r5, r3, #3
 800558a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800558e:	00d4      	lsls	r4, r2, #3
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	1814      	adds	r4, r2, r0
 8005596:	653c      	str	r4, [r7, #80]	; 0x50
 8005598:	414b      	adcs	r3, r1
 800559a:	657b      	str	r3, [r7, #84]	; 0x54
 800559c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	1891      	adds	r1, r2, r2
 80055a8:	61b9      	str	r1, [r7, #24]
 80055aa:	415b      	adcs	r3, r3
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055b6:	f7fb fb27 	bl	8000c08 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4b6c      	ldr	r3, [pc, #432]	; (8005770 <UART_SetConfig+0x38c>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3332      	adds	r3, #50	; 0x32
 80055d2:	4a67      	ldr	r2, [pc, #412]	; (8005770 <UART_SetConfig+0x38c>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4432      	add	r2, r6
 80055e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e6:	e0b9      	b.n	800575c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ea:	461c      	mov	r4, r3
 80055ec:	f04f 0500 	mov.w	r5, #0
 80055f0:	4622      	mov	r2, r4
 80055f2:	462b      	mov	r3, r5
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	6139      	str	r1, [r7, #16]
 80055f8:	415b      	adcs	r3, r3
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005600:	1912      	adds	r2, r2, r4
 8005602:	eb45 0303 	adc.w	r3, r5, r3
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	00d9      	lsls	r1, r3, #3
 8005610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005614:	00d0      	lsls	r0, r2, #3
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	eb12 0804 	adds.w	r8, r2, r4
 800561e:	eb43 0905 	adc.w	r9, r3, r5
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	008b      	lsls	r3, r1, #2
 8005636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800563a:	0082      	lsls	r2, r0, #2
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fb fae2 	bl	8000c08 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4b49      	ldr	r3, [pc, #292]	; (8005770 <UART_SetConfig+0x38c>)
 800564a:	fba3 2302 	umull	r2, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	011e      	lsls	r6, r3, #4
 8005652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005654:	4618      	mov	r0, r3
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	1894      	adds	r4, r2, r2
 8005660:	60bc      	str	r4, [r7, #8]
 8005662:	415b      	adcs	r3, r3
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800566a:	1812      	adds	r2, r2, r0
 800566c:	eb41 0303 	adc.w	r3, r1, r3
 8005670:	f04f 0400 	mov.w	r4, #0
 8005674:	f04f 0500 	mov.w	r5, #0
 8005678:	00dd      	lsls	r5, r3, #3
 800567a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800567e:	00d4      	lsls	r4, r2, #3
 8005680:	4622      	mov	r2, r4
 8005682:	462b      	mov	r3, r5
 8005684:	1814      	adds	r4, r2, r0
 8005686:	64bc      	str	r4, [r7, #72]	; 0x48
 8005688:	414b      	adcs	r3, r1
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	f04f 0100 	mov.w	r1, #0
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	008b      	lsls	r3, r1, #2
 80056a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056a4:	0082      	lsls	r2, r0, #2
 80056a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056aa:	f7fb faad 	bl	8000c08 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <UART_SetConfig+0x38c>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <UART_SetConfig+0x38c>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d2:	441e      	add	r6, r3
 80056d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d6:	4618      	mov	r0, r3
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	1894      	adds	r4, r2, r2
 80056e2:	603c      	str	r4, [r7, #0]
 80056e4:	415b      	adcs	r3, r3
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ec:	1812      	adds	r2, r2, r0
 80056ee:	eb41 0303 	adc.w	r3, r1, r3
 80056f2:	f04f 0400 	mov.w	r4, #0
 80056f6:	f04f 0500 	mov.w	r5, #0
 80056fa:	00dd      	lsls	r5, r3, #3
 80056fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005700:	00d4      	lsls	r4, r2, #3
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	eb12 0a00 	adds.w	sl, r2, r0
 800570a:	eb43 0b01 	adc.w	fp, r3, r1
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	008b      	lsls	r3, r1, #2
 8005722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005726:	0082      	lsls	r2, r0, #2
 8005728:	4650      	mov	r0, sl
 800572a:	4659      	mov	r1, fp
 800572c:	f7fb fa6c 	bl	8000c08 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <UART_SetConfig+0x38c>)
 8005736:	fba3 1302 	umull	r1, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2164      	movs	r1, #100	; 0x64
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	3332      	adds	r3, #50	; 0x32
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <UART_SetConfig+0x38c>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4432      	add	r2, r6
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	377c      	adds	r7, #124	; 0x7c
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	40011000 	.word	0x40011000
 800576c:	40011400 	.word	0x40011400
 8005770:	51eb851f 	.word	0x51eb851f

08005774 <__errno>:
 8005774:	4b01      	ldr	r3, [pc, #4]	; (800577c <__errno+0x8>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	2000000c 	.word	0x2000000c

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4d0d      	ldr	r5, [pc, #52]	; (80057b8 <__libc_init_array+0x38>)
 8005784:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005786:	1b64      	subs	r4, r4, r5
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	2600      	movs	r6, #0
 800578c:	42a6      	cmp	r6, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	4d0b      	ldr	r5, [pc, #44]	; (80057c0 <__libc_init_array+0x40>)
 8005792:	4c0c      	ldr	r4, [pc, #48]	; (80057c4 <__libc_init_array+0x44>)
 8005794:	f002 fece 	bl	8008534 <_init>
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	2600      	movs	r6, #0
 800579e:	42a6      	cmp	r6, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a8:	4798      	blx	r3
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b2:	4798      	blx	r3
 80057b4:	3601      	adds	r6, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	080089a4 	.word	0x080089a4
 80057bc:	080089a4 	.word	0x080089a4
 80057c0:	080089a4 	.word	0x080089a4
 80057c4:	080089a8 	.word	0x080089a8

080057c8 <memset>:
 80057c8:	4402      	add	r2, r0
 80057ca:	4603      	mov	r3, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <__cvt>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	ec55 4b10 	vmov	r4, r5, d0
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	460e      	mov	r6, r1
 80057e4:	4619      	mov	r1, r3
 80057e6:	462b      	mov	r3, r5
 80057e8:	bfbb      	ittet	lt
 80057ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057ee:	461d      	movlt	r5, r3
 80057f0:	2300      	movge	r3, #0
 80057f2:	232d      	movlt	r3, #45	; 0x2d
 80057f4:	700b      	strb	r3, [r1, #0]
 80057f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057fc:	4691      	mov	r9, r2
 80057fe:	f023 0820 	bic.w	r8, r3, #32
 8005802:	bfbc      	itt	lt
 8005804:	4622      	movlt	r2, r4
 8005806:	4614      	movlt	r4, r2
 8005808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800580c:	d005      	beq.n	800581a <__cvt+0x42>
 800580e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005812:	d100      	bne.n	8005816 <__cvt+0x3e>
 8005814:	3601      	adds	r6, #1
 8005816:	2102      	movs	r1, #2
 8005818:	e000      	b.n	800581c <__cvt+0x44>
 800581a:	2103      	movs	r1, #3
 800581c:	ab03      	add	r3, sp, #12
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	ab02      	add	r3, sp, #8
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	ec45 4b10 	vmov	d0, r4, r5
 8005828:	4653      	mov	r3, sl
 800582a:	4632      	mov	r2, r6
 800582c:	f000 fd04 	bl	8006238 <_dtoa_r>
 8005830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005834:	4607      	mov	r7, r0
 8005836:	d102      	bne.n	800583e <__cvt+0x66>
 8005838:	f019 0f01 	tst.w	r9, #1
 800583c:	d022      	beq.n	8005884 <__cvt+0xac>
 800583e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005842:	eb07 0906 	add.w	r9, r7, r6
 8005846:	d110      	bne.n	800586a <__cvt+0x92>
 8005848:	783b      	ldrb	r3, [r7, #0]
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d10a      	bne.n	8005864 <__cvt+0x8c>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fb f967 	bl	8000b28 <__aeabi_dcmpeq>
 800585a:	b918      	cbnz	r0, 8005864 <__cvt+0x8c>
 800585c:	f1c6 0601 	rsb	r6, r6, #1
 8005860:	f8ca 6000 	str.w	r6, [sl]
 8005864:	f8da 3000 	ldr.w	r3, [sl]
 8005868:	4499      	add	r9, r3
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f959 	bl	8000b28 <__aeabi_dcmpeq>
 8005876:	b108      	cbz	r0, 800587c <__cvt+0xa4>
 8005878:	f8cd 900c 	str.w	r9, [sp, #12]
 800587c:	2230      	movs	r2, #48	; 0x30
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	454b      	cmp	r3, r9
 8005882:	d307      	bcc.n	8005894 <__cvt+0xbc>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005888:	1bdb      	subs	r3, r3, r7
 800588a:	4638      	mov	r0, r7
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	b004      	add	sp, #16
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	9103      	str	r1, [sp, #12]
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e7f0      	b.n	800587e <__cvt+0xa6>

0800589c <__exponent>:
 800589c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589e:	4603      	mov	r3, r0
 80058a0:	2900      	cmp	r1, #0
 80058a2:	bfb8      	it	lt
 80058a4:	4249      	neglt	r1, r1
 80058a6:	f803 2b02 	strb.w	r2, [r3], #2
 80058aa:	bfb4      	ite	lt
 80058ac:	222d      	movlt	r2, #45	; 0x2d
 80058ae:	222b      	movge	r2, #43	; 0x2b
 80058b0:	2909      	cmp	r1, #9
 80058b2:	7042      	strb	r2, [r0, #1]
 80058b4:	dd2a      	ble.n	800590c <__exponent+0x70>
 80058b6:	f10d 0407 	add.w	r4, sp, #7
 80058ba:	46a4      	mov	ip, r4
 80058bc:	270a      	movs	r7, #10
 80058be:	46a6      	mov	lr, r4
 80058c0:	460a      	mov	r2, r1
 80058c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80058c6:	fb07 1516 	mls	r5, r7, r6, r1
 80058ca:	3530      	adds	r5, #48	; 0x30
 80058cc:	2a63      	cmp	r2, #99	; 0x63
 80058ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80058d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058d6:	4631      	mov	r1, r6
 80058d8:	dcf1      	bgt.n	80058be <__exponent+0x22>
 80058da:	3130      	adds	r1, #48	; 0x30
 80058dc:	f1ae 0502 	sub.w	r5, lr, #2
 80058e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058e4:	1c44      	adds	r4, r0, #1
 80058e6:	4629      	mov	r1, r5
 80058e8:	4561      	cmp	r1, ip
 80058ea:	d30a      	bcc.n	8005902 <__exponent+0x66>
 80058ec:	f10d 0209 	add.w	r2, sp, #9
 80058f0:	eba2 020e 	sub.w	r2, r2, lr
 80058f4:	4565      	cmp	r5, ip
 80058f6:	bf88      	it	hi
 80058f8:	2200      	movhi	r2, #0
 80058fa:	4413      	add	r3, r2
 80058fc:	1a18      	subs	r0, r3, r0
 80058fe:	b003      	add	sp, #12
 8005900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800590a:	e7ed      	b.n	80058e8 <__exponent+0x4c>
 800590c:	2330      	movs	r3, #48	; 0x30
 800590e:	3130      	adds	r1, #48	; 0x30
 8005910:	7083      	strb	r3, [r0, #2]
 8005912:	70c1      	strb	r1, [r0, #3]
 8005914:	1d03      	adds	r3, r0, #4
 8005916:	e7f1      	b.n	80058fc <__exponent+0x60>

08005918 <_printf_float>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ed2d 8b02 	vpush	{d8}
 8005920:	b08d      	sub	sp, #52	; 0x34
 8005922:	460c      	mov	r4, r1
 8005924:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005928:	4616      	mov	r6, r2
 800592a:	461f      	mov	r7, r3
 800592c:	4605      	mov	r5, r0
 800592e:	f001 fb65 	bl	8006ffc <_localeconv_r>
 8005932:	f8d0 a000 	ldr.w	sl, [r0]
 8005936:	4650      	mov	r0, sl
 8005938:	f7fa fc74 	bl	8000224 <strlen>
 800593c:	2300      	movs	r3, #0
 800593e:	930a      	str	r3, [sp, #40]	; 0x28
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	f8d8 3000 	ldr.w	r3, [r8]
 8005948:	f894 b018 	ldrb.w	fp, [r4, #24]
 800594c:	3307      	adds	r3, #7
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	f103 0208 	add.w	r2, r3, #8
 8005956:	f8c8 2000 	str.w	r2, [r8]
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005962:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005970:	ee08 0a10 	vmov	s16, r0
 8005974:	4b9f      	ldr	r3, [pc, #636]	; (8005bf4 <_printf_float+0x2dc>)
 8005976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	f7fb f905 	bl	8000b8c <__aeabi_dcmpun>
 8005982:	bb88      	cbnz	r0, 80059e8 <_printf_float+0xd0>
 8005984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005988:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <_printf_float+0x2dc>)
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	f7fb f8df 	bl	8000b50 <__aeabi_dcmple>
 8005992:	bb48      	cbnz	r0, 80059e8 <_printf_float+0xd0>
 8005994:	2200      	movs	r2, #0
 8005996:	2300      	movs	r3, #0
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	f7fb f8ce 	bl	8000b3c <__aeabi_dcmplt>
 80059a0:	b110      	cbz	r0, 80059a8 <_printf_float+0x90>
 80059a2:	232d      	movs	r3, #45	; 0x2d
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	4b93      	ldr	r3, [pc, #588]	; (8005bf8 <_printf_float+0x2e0>)
 80059aa:	4894      	ldr	r0, [pc, #592]	; (8005bfc <_printf_float+0x2e4>)
 80059ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059b0:	bf94      	ite	ls
 80059b2:	4698      	movls	r8, r3
 80059b4:	4680      	movhi	r8, r0
 80059b6:	2303      	movs	r3, #3
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	9b05      	ldr	r3, [sp, #20]
 80059bc:	f023 0204 	bic.w	r2, r3, #4
 80059c0:	6022      	str	r2, [r4, #0]
 80059c2:	f04f 0900 	mov.w	r9, #0
 80059c6:	9700      	str	r7, [sp, #0]
 80059c8:	4633      	mov	r3, r6
 80059ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f9d8 	bl	8005d84 <_printf_common>
 80059d4:	3001      	adds	r0, #1
 80059d6:	f040 8090 	bne.w	8005afa <_printf_float+0x1e2>
 80059da:	f04f 30ff 	mov.w	r0, #4294967295
 80059de:	b00d      	add	sp, #52	; 0x34
 80059e0:	ecbd 8b02 	vpop	{d8}
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	4640      	mov	r0, r8
 80059ee:	4649      	mov	r1, r9
 80059f0:	f7fb f8cc 	bl	8000b8c <__aeabi_dcmpun>
 80059f4:	b140      	cbz	r0, 8005a08 <_printf_float+0xf0>
 80059f6:	464b      	mov	r3, r9
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfbc      	itt	lt
 80059fc:	232d      	movlt	r3, #45	; 0x2d
 80059fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a02:	487f      	ldr	r0, [pc, #508]	; (8005c00 <_printf_float+0x2e8>)
 8005a04:	4b7f      	ldr	r3, [pc, #508]	; (8005c04 <_printf_float+0x2ec>)
 8005a06:	e7d1      	b.n	80059ac <_printf_float+0x94>
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a0e:	9206      	str	r2, [sp, #24]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	d13f      	bne.n	8005a94 <_printf_float+0x17c>
 8005a14:	2306      	movs	r3, #6
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	6861      	ldr	r1, [r4, #4]
 8005a1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a20:	2300      	movs	r3, #0
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	ab0a      	add	r3, sp, #40	; 0x28
 8005a26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a2a:	ab09      	add	r3, sp, #36	; 0x24
 8005a2c:	ec49 8b10 	vmov	d0, r8, r9
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6022      	str	r2, [r4, #0]
 8005a34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fecd 	bl	80057d8 <__cvt>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a42:	2b47      	cmp	r3, #71	; 0x47
 8005a44:	4680      	mov	r8, r0
 8005a46:	d108      	bne.n	8005a5a <_printf_float+0x142>
 8005a48:	1cc8      	adds	r0, r1, #3
 8005a4a:	db02      	blt.n	8005a52 <_printf_float+0x13a>
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	dd41      	ble.n	8005ad6 <_printf_float+0x1be>
 8005a52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a56:	fa5f fb8b 	uxtb.w	fp, fp
 8005a5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a5e:	d820      	bhi.n	8005aa2 <_printf_float+0x18a>
 8005a60:	3901      	subs	r1, #1
 8005a62:	465a      	mov	r2, fp
 8005a64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a68:	9109      	str	r1, [sp, #36]	; 0x24
 8005a6a:	f7ff ff17 	bl	800589c <__exponent>
 8005a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a70:	1813      	adds	r3, r2, r0
 8005a72:	2a01      	cmp	r2, #1
 8005a74:	4681      	mov	r9, r0
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	dc02      	bgt.n	8005a80 <_printf_float+0x168>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	07d2      	lsls	r2, r2, #31
 8005a7e:	d501      	bpl.n	8005a84 <_printf_float+0x16c>
 8005a80:	3301      	adds	r3, #1
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d09c      	beq.n	80059c6 <_printf_float+0xae>
 8005a8c:	232d      	movs	r3, #45	; 0x2d
 8005a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a92:	e798      	b.n	80059c6 <_printf_float+0xae>
 8005a94:	9a06      	ldr	r2, [sp, #24]
 8005a96:	2a47      	cmp	r2, #71	; 0x47
 8005a98:	d1be      	bne.n	8005a18 <_printf_float+0x100>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1bc      	bne.n	8005a18 <_printf_float+0x100>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e7b9      	b.n	8005a16 <_printf_float+0xfe>
 8005aa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aa6:	d118      	bne.n	8005ada <_printf_float+0x1c2>
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	dd0b      	ble.n	8005ac6 <_printf_float+0x1ae>
 8005aae:	6121      	str	r1, [r4, #16]
 8005ab0:	b913      	cbnz	r3, 8005ab8 <_printf_float+0x1a0>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	07d0      	lsls	r0, r2, #31
 8005ab6:	d502      	bpl.n	8005abe <_printf_float+0x1a6>
 8005ab8:	3301      	adds	r3, #1
 8005aba:	440b      	add	r3, r1
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	e7de      	b.n	8005a84 <_printf_float+0x16c>
 8005ac6:	b913      	cbnz	r3, 8005ace <_printf_float+0x1b6>
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	07d2      	lsls	r2, r2, #31
 8005acc:	d501      	bpl.n	8005ad2 <_printf_float+0x1ba>
 8005ace:	3302      	adds	r3, #2
 8005ad0:	e7f4      	b.n	8005abc <_printf_float+0x1a4>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f2      	b.n	8005abc <_printf_float+0x1a4>
 8005ad6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005adc:	4299      	cmp	r1, r3
 8005ade:	db05      	blt.n	8005aec <_printf_float+0x1d4>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	6121      	str	r1, [r4, #16]
 8005ae4:	07d8      	lsls	r0, r3, #31
 8005ae6:	d5ea      	bpl.n	8005abe <_printf_float+0x1a6>
 8005ae8:	1c4b      	adds	r3, r1, #1
 8005aea:	e7e7      	b.n	8005abc <_printf_float+0x1a4>
 8005aec:	2900      	cmp	r1, #0
 8005aee:	bfd4      	ite	le
 8005af0:	f1c1 0202 	rsble	r2, r1, #2
 8005af4:	2201      	movgt	r2, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	e7e0      	b.n	8005abc <_printf_float+0x1a4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	055a      	lsls	r2, r3, #21
 8005afe:	d407      	bmi.n	8005b10 <_printf_float+0x1f8>
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	4642      	mov	r2, r8
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d12c      	bne.n	8005b68 <_printf_float+0x250>
 8005b0e:	e764      	b.n	80059da <_printf_float+0xc2>
 8005b10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b14:	f240 80e0 	bls.w	8005cd8 <_printf_float+0x3c0>
 8005b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f7fb f802 	bl	8000b28 <__aeabi_dcmpeq>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d034      	beq.n	8005b92 <_printf_float+0x27a>
 8005b28:	4a37      	ldr	r2, [pc, #220]	; (8005c08 <_printf_float+0x2f0>)
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af51 	beq.w	80059da <_printf_float+0xc2>
 8005b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	db02      	blt.n	8005b46 <_printf_float+0x22e>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	07d8      	lsls	r0, r3, #31
 8005b44:	d510      	bpl.n	8005b68 <_printf_float+0x250>
 8005b46:	ee18 3a10 	vmov	r3, s16
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af41 	beq.w	80059da <_printf_float+0xc2>
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	f104 091a 	add.w	r9, r4, #26
 8005b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4543      	cmp	r3, r8
 8005b66:	dc09      	bgt.n	8005b7c <_printf_float+0x264>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	079b      	lsls	r3, r3, #30
 8005b6c:	f100 8105 	bmi.w	8005d7a <_printf_float+0x462>
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bfb8      	it	lt
 8005b78:	4618      	movlt	r0, r3
 8005b7a:	e730      	b.n	80059de <_printf_float+0xc6>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	464a      	mov	r2, r9
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af27 	beq.w	80059da <_printf_float+0xc2>
 8005b8c:	f108 0801 	add.w	r8, r8, #1
 8005b90:	e7e6      	b.n	8005b60 <_printf_float+0x248>
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dc39      	bgt.n	8005c0c <_printf_float+0x2f4>
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <_printf_float+0x2f0>)
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af19 	beq.w	80059da <_printf_float+0xc2>
 8005ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bac:	4313      	orrs	r3, r2
 8005bae:	d102      	bne.n	8005bb6 <_printf_float+0x29e>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	d5d8      	bpl.n	8005b68 <_printf_float+0x250>
 8005bb6:	ee18 3a10 	vmov	r3, s16
 8005bba:	4652      	mov	r2, sl
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f af09 	beq.w	80059da <_printf_float+0xc2>
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	f104 0a1a 	add.w	sl, r4, #26
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	425b      	negs	r3, r3
 8005bd4:	454b      	cmp	r3, r9
 8005bd6:	dc01      	bgt.n	8005bdc <_printf_float+0x2c4>
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bda:	e792      	b.n	8005b02 <_printf_float+0x1ea>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4652      	mov	r2, sl
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f aef7 	beq.w	80059da <_printf_float+0xc2>
 8005bec:	f109 0901 	add.w	r9, r9, #1
 8005bf0:	e7ee      	b.n	8005bd0 <_printf_float+0x2b8>
 8005bf2:	bf00      	nop
 8005bf4:	7fefffff 	.word	0x7fefffff
 8005bf8:	080085bc 	.word	0x080085bc
 8005bfc:	080085c0 	.word	0x080085c0
 8005c00:	080085c8 	.word	0x080085c8
 8005c04:	080085c4 	.word	0x080085c4
 8005c08:	080085cc 	.word	0x080085cc
 8005c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c10:	429a      	cmp	r2, r3
 8005c12:	bfa8      	it	ge
 8005c14:	461a      	movge	r2, r3
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	4691      	mov	r9, r2
 8005c1a:	dc37      	bgt.n	8005c8c <_printf_float+0x374>
 8005c1c:	f04f 0b00 	mov.w	fp, #0
 8005c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c24:	f104 021a 	add.w	r2, r4, #26
 8005c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	eba3 0309 	sub.w	r3, r3, r9
 8005c30:	455b      	cmp	r3, fp
 8005c32:	dc33      	bgt.n	8005c9c <_printf_float+0x384>
 8005c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	db3b      	blt.n	8005cb4 <_printf_float+0x39c>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	07da      	lsls	r2, r3, #31
 8005c40:	d438      	bmi.n	8005cb4 <_printf_float+0x39c>
 8005c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c44:	9b05      	ldr	r3, [sp, #20]
 8005c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	eba2 0901 	sub.w	r9, r2, r1
 8005c4e:	4599      	cmp	r9, r3
 8005c50:	bfa8      	it	ge
 8005c52:	4699      	movge	r9, r3
 8005c54:	f1b9 0f00 	cmp.w	r9, #0
 8005c58:	dc35      	bgt.n	8005cc6 <_printf_float+0x3ae>
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c62:	f104 0a1a 	add.w	sl, r4, #26
 8005c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	eba3 0309 	sub.w	r3, r3, r9
 8005c70:	4543      	cmp	r3, r8
 8005c72:	f77f af79 	ble.w	8005b68 <_printf_float+0x250>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4652      	mov	r2, sl
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f aeaa 	beq.w	80059da <_printf_float+0xc2>
 8005c86:	f108 0801 	add.w	r8, r8, #1
 8005c8a:	e7ec      	b.n	8005c66 <_printf_float+0x34e>
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4642      	mov	r2, r8
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d1c0      	bne.n	8005c1c <_printf_float+0x304>
 8005c9a:	e69e      	b.n	80059da <_printf_float+0xc2>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	9205      	str	r2, [sp, #20]
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f ae97 	beq.w	80059da <_printf_float+0xc2>
 8005cac:	9a05      	ldr	r2, [sp, #20]
 8005cae:	f10b 0b01 	add.w	fp, fp, #1
 8005cb2:	e7b9      	b.n	8005c28 <_printf_float+0x310>
 8005cb4:	ee18 3a10 	vmov	r3, s16
 8005cb8:	4652      	mov	r2, sl
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1be      	bne.n	8005c42 <_printf_float+0x32a>
 8005cc4:	e689      	b.n	80059da <_printf_float+0xc2>
 8005cc6:	9a05      	ldr	r2, [sp, #20]
 8005cc8:	464b      	mov	r3, r9
 8005cca:	4442      	add	r2, r8
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d1c1      	bne.n	8005c5a <_printf_float+0x342>
 8005cd6:	e680      	b.n	80059da <_printf_float+0xc2>
 8005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	dc01      	bgt.n	8005ce2 <_printf_float+0x3ca>
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d538      	bpl.n	8005d54 <_printf_float+0x43c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae74 	beq.w	80059da <_printf_float+0xc2>
 8005cf2:	ee18 3a10 	vmov	r3, s16
 8005cf6:	4652      	mov	r2, sl
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f ae6b 	beq.w	80059da <_printf_float+0xc2>
 8005d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7fa ff0c 	bl	8000b28 <__aeabi_dcmpeq>
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_printf_float+0x432>
 8005d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d14:	f108 0201 	add.w	r2, r8, #1
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	d10e      	bne.n	8005d42 <_printf_float+0x42a>
 8005d24:	e659      	b.n	80059da <_printf_float+0xc2>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	f43f ae52 	beq.w	80059da <_printf_float+0xc2>
 8005d36:	f108 0801 	add.w	r8, r8, #1
 8005d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4543      	cmp	r3, r8
 8005d40:	dcf1      	bgt.n	8005d26 <_printf_float+0x40e>
 8005d42:	464b      	mov	r3, r9
 8005d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d48:	e6dc      	b.n	8005b04 <_printf_float+0x1ec>
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	f104 0a1a 	add.w	sl, r4, #26
 8005d52:	e7f2      	b.n	8005d3a <_printf_float+0x422>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4642      	mov	r2, r8
 8005d58:	e7df      	b.n	8005d1a <_printf_float+0x402>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	464a      	mov	r2, r9
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae38 	beq.w	80059da <_printf_float+0xc2>
 8005d6a:	f108 0801 	add.w	r8, r8, #1
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	4543      	cmp	r3, r8
 8005d76:	dcf0      	bgt.n	8005d5a <_printf_float+0x442>
 8005d78:	e6fa      	b.n	8005b70 <_printf_float+0x258>
 8005d7a:	f04f 0800 	mov.w	r8, #0
 8005d7e:	f104 0919 	add.w	r9, r4, #25
 8005d82:	e7f4      	b.n	8005d6e <_printf_float+0x456>

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4616      	mov	r6, r2
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfb8      	it	lt
 8005d98:	4613      	movlt	r3, r2
 8005d9a:	6033      	str	r3, [r6, #0]
 8005d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da0:	4607      	mov	r7, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	b10a      	cbz	r2, 8005daa <_printf_common+0x26>
 8005da6:	3301      	adds	r3, #1
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	0699      	lsls	r1, r3, #26
 8005dae:	bf42      	ittt	mi
 8005db0:	6833      	ldrmi	r3, [r6, #0]
 8005db2:	3302      	addmi	r3, #2
 8005db4:	6033      	strmi	r3, [r6, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	f015 0506 	ands.w	r5, r5, #6
 8005dbc:	d106      	bne.n	8005dcc <_printf_common+0x48>
 8005dbe:	f104 0a19 	add.w	sl, r4, #25
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	6832      	ldr	r2, [r6, #0]
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dc26      	bgt.n	8005e1a <_printf_common+0x96>
 8005dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd0:	1e13      	subs	r3, r2, #0
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	0692      	lsls	r2, r2, #26
 8005dda:	d42b      	bmi.n	8005e34 <_printf_common+0xb0>
 8005ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de0:	4649      	mov	r1, r9
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d01e      	beq.n	8005e28 <_printf_common+0xa4>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	68e5      	ldr	r5, [r4, #12]
 8005dee:	6832      	ldr	r2, [r6, #0]
 8005df0:	f003 0306 	and.w	r3, r3, #6
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	bf08      	it	eq
 8005df8:	1aad      	subeq	r5, r5, r2
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	bf0c      	ite	eq
 8005e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e04:	2500      	movne	r5, #0
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bfc4      	itt	gt
 8005e0a:	1a9b      	subgt	r3, r3, r2
 8005e0c:	18ed      	addgt	r5, r5, r3
 8005e0e:	2600      	movs	r6, #0
 8005e10:	341a      	adds	r4, #26
 8005e12:	42b5      	cmp	r5, r6
 8005e14:	d11a      	bne.n	8005e4c <_printf_common+0xc8>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e008      	b.n	8005e2c <_printf_common+0xa8>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4638      	mov	r0, r7
 8005e22:	47c0      	blx	r8
 8005e24:	3001      	adds	r0, #1
 8005e26:	d103      	bne.n	8005e30 <_printf_common+0xac>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7c6      	b.n	8005dc2 <_printf_common+0x3e>
 8005e34:	18e1      	adds	r1, r4, r3
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	2030      	movs	r0, #48	; 0x30
 8005e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3e:	4422      	add	r2, r4
 8005e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e48:	3302      	adds	r3, #2
 8005e4a:	e7c7      	b.n	8005ddc <_printf_common+0x58>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4649      	mov	r1, r9
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d0e6      	beq.n	8005e28 <_printf_common+0xa4>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7d9      	b.n	8005e12 <_printf_common+0x8e>
	...

08005e60 <_printf_i>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	460c      	mov	r4, r1
 8005e66:	4691      	mov	r9, r2
 8005e68:	7e27      	ldrb	r7, [r4, #24]
 8005e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e6c:	2f78      	cmp	r7, #120	; 0x78
 8005e6e:	4680      	mov	r8, r0
 8005e70:	469a      	mov	sl, r3
 8005e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e76:	d807      	bhi.n	8005e88 <_printf_i+0x28>
 8005e78:	2f62      	cmp	r7, #98	; 0x62
 8005e7a:	d80a      	bhi.n	8005e92 <_printf_i+0x32>
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	f000 80d8 	beq.w	8006032 <_printf_i+0x1d2>
 8005e82:	2f58      	cmp	r7, #88	; 0x58
 8005e84:	f000 80a3 	beq.w	8005fce <_printf_i+0x16e>
 8005e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e90:	e03a      	b.n	8005f08 <_printf_i+0xa8>
 8005e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d8f6      	bhi.n	8005e88 <_printf_i+0x28>
 8005e9a:	a001      	add	r0, pc, #4	; (adr r0, 8005ea0 <_printf_i+0x40>)
 8005e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e89 	.word	0x08005e89
 8005eb0:	08005e89 	.word	0x08005e89
 8005eb4:	08005e89 	.word	0x08005e89
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005e89 	.word	0x08005e89
 8005ec0:	08005e89 	.word	0x08005e89
 8005ec4:	08005e89 	.word	0x08005e89
 8005ec8:	08005e89 	.word	0x08005e89
 8005ecc:	08006019 	.word	0x08006019
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005ffb 	.word	0x08005ffb
 8005ed8:	08005e89 	.word	0x08005e89
 8005edc:	08005e89 	.word	0x08005e89
 8005ee0:	0800603b 	.word	0x0800603b
 8005ee4:	08005e89 	.word	0x08005e89
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005e89 	.word	0x08005e89
 8005ef0:	08005e89 	.word	0x08005e89
 8005ef4:	08006003 	.word	0x08006003
 8005ef8:	680b      	ldr	r3, [r1, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	600a      	str	r2, [r1, #0]
 8005f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a3      	b.n	8006054 <_printf_i+0x1f4>
 8005f0c:	6825      	ldr	r5, [r4, #0]
 8005f0e:	6808      	ldr	r0, [r1, #0]
 8005f10:	062e      	lsls	r6, r5, #24
 8005f12:	f100 0304 	add.w	r3, r0, #4
 8005f16:	d50a      	bpl.n	8005f2e <_printf_i+0xce>
 8005f18:	6805      	ldr	r5, [r0, #0]
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xc8>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	426d      	negs	r5, r5
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	485e      	ldr	r0, [pc, #376]	; (80060a4 <_printf_i+0x244>)
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e019      	b.n	8005f62 <_printf_i+0x102>
 8005f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f32:	6805      	ldr	r5, [r0, #0]
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	bf18      	it	ne
 8005f38:	b22d      	sxthne	r5, r5
 8005f3a:	e7ef      	b.n	8005f1c <_printf_i+0xbc>
 8005f3c:	680b      	ldr	r3, [r1, #0]
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	1d18      	adds	r0, r3, #4
 8005f42:	6008      	str	r0, [r1, #0]
 8005f44:	0628      	lsls	r0, r5, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0xec>
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0xf2>
 8005f4c:	0669      	lsls	r1, r5, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0xe8>
 8005f50:	881d      	ldrh	r5, [r3, #0]
 8005f52:	4854      	ldr	r0, [pc, #336]	; (80060a4 <_printf_i+0x244>)
 8005f54:	2f6f      	cmp	r7, #111	; 0x6f
 8005f56:	bf0c      	ite	eq
 8005f58:	2308      	moveq	r3, #8
 8005f5a:	230a      	movne	r3, #10
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f62:	6866      	ldr	r6, [r4, #4]
 8005f64:	60a6      	str	r6, [r4, #8]
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	bfa2      	ittt	ge
 8005f6a:	6821      	ldrge	r1, [r4, #0]
 8005f6c:	f021 0104 	bicge.w	r1, r1, #4
 8005f70:	6021      	strge	r1, [r4, #0]
 8005f72:	b90d      	cbnz	r5, 8005f78 <_printf_i+0x118>
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	d04d      	beq.n	8006014 <_printf_i+0x1b4>
 8005f78:	4616      	mov	r6, r2
 8005f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f82:	5dc7      	ldrb	r7, [r0, r7]
 8005f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f88:	462f      	mov	r7, r5
 8005f8a:	42bb      	cmp	r3, r7
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	d9f4      	bls.n	8005f7a <_printf_i+0x11a>
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10b      	bne.n	8005fac <_printf_i+0x14c>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	07df      	lsls	r7, r3, #31
 8005f98:	d508      	bpl.n	8005fac <_printf_i+0x14c>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	6861      	ldr	r1, [r4, #4]
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	bfde      	ittt	le
 8005fa2:	2330      	movle	r3, #48	; 0x30
 8005fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fac:	1b92      	subs	r2, r2, r6
 8005fae:	6122      	str	r2, [r4, #16]
 8005fb0:	f8cd a000 	str.w	sl, [sp]
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	aa03      	add	r2, sp, #12
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f7ff fee2 	bl	8005d84 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d14c      	bne.n	800605e <_printf_i+0x1fe>
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	b004      	add	sp, #16
 8005fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fce:	4835      	ldr	r0, [pc, #212]	; (80060a4 <_printf_i+0x244>)
 8005fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	680e      	ldr	r6, [r1, #0]
 8005fd8:	061f      	lsls	r7, r3, #24
 8005fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fde:	600e      	str	r6, [r1, #0]
 8005fe0:	d514      	bpl.n	800600c <_printf_i+0x1ac>
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	bf44      	itt	mi
 8005fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fea:	6023      	strmi	r3, [r4, #0]
 8005fec:	b91d      	cbnz	r5, 8005ff6 <_printf_i+0x196>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	f023 0320 	bic.w	r3, r3, #32
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	e7b0      	b.n	8005f5c <_printf_i+0xfc>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f043 0320 	orr.w	r3, r3, #32
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	2378      	movs	r3, #120	; 0x78
 8006004:	4828      	ldr	r0, [pc, #160]	; (80060a8 <_printf_i+0x248>)
 8006006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600a:	e7e3      	b.n	8005fd4 <_printf_i+0x174>
 800600c:	065e      	lsls	r6, r3, #25
 800600e:	bf48      	it	mi
 8006010:	b2ad      	uxthmi	r5, r5
 8006012:	e7e6      	b.n	8005fe2 <_printf_i+0x182>
 8006014:	4616      	mov	r6, r2
 8006016:	e7bb      	b.n	8005f90 <_printf_i+0x130>
 8006018:	680b      	ldr	r3, [r1, #0]
 800601a:	6826      	ldr	r6, [r4, #0]
 800601c:	6960      	ldr	r0, [r4, #20]
 800601e:	1d1d      	adds	r5, r3, #4
 8006020:	600d      	str	r5, [r1, #0]
 8006022:	0635      	lsls	r5, r6, #24
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	d501      	bpl.n	800602c <_printf_i+0x1cc>
 8006028:	6018      	str	r0, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0x1d2>
 800602c:	0671      	lsls	r1, r6, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0x1c8>
 8006030:	8018      	strh	r0, [r3, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	4616      	mov	r6, r2
 8006038:	e7ba      	b.n	8005fb0 <_printf_i+0x150>
 800603a:	680b      	ldr	r3, [r1, #0]
 800603c:	1d1a      	adds	r2, r3, #4
 800603e:	600a      	str	r2, [r1, #0]
 8006040:	681e      	ldr	r6, [r3, #0]
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	2100      	movs	r1, #0
 8006046:	4630      	mov	r0, r6
 8006048:	f7fa f8fa 	bl	8000240 <memchr>
 800604c:	b108      	cbz	r0, 8006052 <_printf_i+0x1f2>
 800604e:	1b80      	subs	r0, r0, r6
 8006050:	6060      	str	r0, [r4, #4]
 8006052:	6863      	ldr	r3, [r4, #4]
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	2300      	movs	r3, #0
 8006058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605c:	e7a8      	b.n	8005fb0 <_printf_i+0x150>
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	4632      	mov	r2, r6
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	47d0      	blx	sl
 8006068:	3001      	adds	r0, #1
 800606a:	d0ab      	beq.n	8005fc4 <_printf_i+0x164>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	d413      	bmi.n	800609a <_printf_i+0x23a>
 8006072:	68e0      	ldr	r0, [r4, #12]
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	4298      	cmp	r0, r3
 8006078:	bfb8      	it	lt
 800607a:	4618      	movlt	r0, r3
 800607c:	e7a4      	b.n	8005fc8 <_printf_i+0x168>
 800607e:	2301      	movs	r3, #1
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d09b      	beq.n	8005fc4 <_printf_i+0x164>
 800608c:	3501      	adds	r5, #1
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	9903      	ldr	r1, [sp, #12]
 8006092:	1a5b      	subs	r3, r3, r1
 8006094:	42ab      	cmp	r3, r5
 8006096:	dcf2      	bgt.n	800607e <_printf_i+0x21e>
 8006098:	e7eb      	b.n	8006072 <_printf_i+0x212>
 800609a:	2500      	movs	r5, #0
 800609c:	f104 0619 	add.w	r6, r4, #25
 80060a0:	e7f5      	b.n	800608e <_printf_i+0x22e>
 80060a2:	bf00      	nop
 80060a4:	080085ce 	.word	0x080085ce
 80060a8:	080085df 	.word	0x080085df

080060ac <iprintf>:
 80060ac:	b40f      	push	{r0, r1, r2, r3}
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <iprintf+0x2c>)
 80060b0:	b513      	push	{r0, r1, r4, lr}
 80060b2:	681c      	ldr	r4, [r3, #0]
 80060b4:	b124      	cbz	r4, 80060c0 <iprintf+0x14>
 80060b6:	69a3      	ldr	r3, [r4, #24]
 80060b8:	b913      	cbnz	r3, 80060c0 <iprintf+0x14>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 ff00 	bl	8006ec0 <__sinit>
 80060c0:	ab05      	add	r3, sp, #20
 80060c2:	9a04      	ldr	r2, [sp, #16]
 80060c4:	68a1      	ldr	r1, [r4, #8]
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 fd73 	bl	8007bb4 <_vfiprintf_r>
 80060ce:	b002      	add	sp, #8
 80060d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d4:	b004      	add	sp, #16
 80060d6:	4770      	bx	lr
 80060d8:	2000000c 	.word	0x2000000c

080060dc <siprintf>:
 80060dc:	b40e      	push	{r1, r2, r3}
 80060de:	b500      	push	{lr}
 80060e0:	b09c      	sub	sp, #112	; 0x70
 80060e2:	ab1d      	add	r3, sp, #116	; 0x74
 80060e4:	9002      	str	r0, [sp, #8]
 80060e6:	9006      	str	r0, [sp, #24]
 80060e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060ec:	4809      	ldr	r0, [pc, #36]	; (8006114 <siprintf+0x38>)
 80060ee:	9107      	str	r1, [sp, #28]
 80060f0:	9104      	str	r1, [sp, #16]
 80060f2:	4909      	ldr	r1, [pc, #36]	; (8006118 <siprintf+0x3c>)
 80060f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f8:	9105      	str	r1, [sp, #20]
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	a902      	add	r1, sp, #8
 8006100:	f001 fc2e 	bl	8007960 <_svfiprintf_r>
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	b01c      	add	sp, #112	; 0x70
 800610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006110:	b003      	add	sp, #12
 8006112:	4770      	bx	lr
 8006114:	2000000c 	.word	0x2000000c
 8006118:	ffff0208 	.word	0xffff0208

0800611c <quorem>:
 800611c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	6903      	ldr	r3, [r0, #16]
 8006122:	690c      	ldr	r4, [r1, #16]
 8006124:	42a3      	cmp	r3, r4
 8006126:	4607      	mov	r7, r0
 8006128:	f2c0 8081 	blt.w	800622e <quorem+0x112>
 800612c:	3c01      	subs	r4, #1
 800612e:	f101 0814 	add.w	r8, r1, #20
 8006132:	f100 0514 	add.w	r5, r0, #20
 8006136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006144:	3301      	adds	r3, #1
 8006146:	429a      	cmp	r2, r3
 8006148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800614c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006150:	fbb2 f6f3 	udiv	r6, r2, r3
 8006154:	d331      	bcc.n	80061ba <quorem+0x9e>
 8006156:	f04f 0e00 	mov.w	lr, #0
 800615a:	4640      	mov	r0, r8
 800615c:	46ac      	mov	ip, r5
 800615e:	46f2      	mov	sl, lr
 8006160:	f850 2b04 	ldr.w	r2, [r0], #4
 8006164:	b293      	uxth	r3, r2
 8006166:	fb06 e303 	mla	r3, r6, r3, lr
 800616a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800616e:	b29b      	uxth	r3, r3
 8006170:	ebaa 0303 	sub.w	r3, sl, r3
 8006174:	0c12      	lsrs	r2, r2, #16
 8006176:	f8dc a000 	ldr.w	sl, [ip]
 800617a:	fb06 e202 	mla	r2, r6, r2, lr
 800617e:	fa13 f38a 	uxtah	r3, r3, sl
 8006182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006186:	fa1f fa82 	uxth.w	sl, r2
 800618a:	f8dc 2000 	ldr.w	r2, [ip]
 800618e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619c:	4581      	cmp	r9, r0
 800619e:	f84c 3b04 	str.w	r3, [ip], #4
 80061a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061a6:	d2db      	bcs.n	8006160 <quorem+0x44>
 80061a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80061ac:	b92b      	cbnz	r3, 80061ba <quorem+0x9e>
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	429d      	cmp	r5, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	d32e      	bcc.n	8006216 <quorem+0xfa>
 80061b8:	613c      	str	r4, [r7, #16]
 80061ba:	4638      	mov	r0, r7
 80061bc:	f001 f9ba 	bl	8007534 <__mcmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	db24      	blt.n	800620e <quorem+0xf2>
 80061c4:	3601      	adds	r6, #1
 80061c6:	4628      	mov	r0, r5
 80061c8:	f04f 0c00 	mov.w	ip, #0
 80061cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80061d0:	f8d0 e000 	ldr.w	lr, [r0]
 80061d4:	b293      	uxth	r3, r2
 80061d6:	ebac 0303 	sub.w	r3, ip, r3
 80061da:	0c12      	lsrs	r2, r2, #16
 80061dc:	fa13 f38e 	uxtah	r3, r3, lr
 80061e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ee:	45c1      	cmp	r9, r8
 80061f0:	f840 3b04 	str.w	r3, [r0], #4
 80061f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061f8:	d2e8      	bcs.n	80061cc <quorem+0xb0>
 80061fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006202:	b922      	cbnz	r2, 800620e <quorem+0xf2>
 8006204:	3b04      	subs	r3, #4
 8006206:	429d      	cmp	r5, r3
 8006208:	461a      	mov	r2, r3
 800620a:	d30a      	bcc.n	8006222 <quorem+0x106>
 800620c:	613c      	str	r4, [r7, #16]
 800620e:	4630      	mov	r0, r6
 8006210:	b003      	add	sp, #12
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	3b04      	subs	r3, #4
 800621a:	2a00      	cmp	r2, #0
 800621c:	d1cc      	bne.n	80061b8 <quorem+0x9c>
 800621e:	3c01      	subs	r4, #1
 8006220:	e7c7      	b.n	80061b2 <quorem+0x96>
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	3b04      	subs	r3, #4
 8006226:	2a00      	cmp	r2, #0
 8006228:	d1f0      	bne.n	800620c <quorem+0xf0>
 800622a:	3c01      	subs	r4, #1
 800622c:	e7eb      	b.n	8006206 <quorem+0xea>
 800622e:	2000      	movs	r0, #0
 8006230:	e7ee      	b.n	8006210 <quorem+0xf4>
 8006232:	0000      	movs	r0, r0
 8006234:	0000      	movs	r0, r0
	...

08006238 <_dtoa_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	ed2d 8b02 	vpush	{d8}
 8006240:	ec57 6b10 	vmov	r6, r7, d0
 8006244:	b095      	sub	sp, #84	; 0x54
 8006246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800624c:	9105      	str	r1, [sp, #20]
 800624e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006252:	4604      	mov	r4, r0
 8006254:	9209      	str	r2, [sp, #36]	; 0x24
 8006256:	930f      	str	r3, [sp, #60]	; 0x3c
 8006258:	b975      	cbnz	r5, 8006278 <_dtoa_r+0x40>
 800625a:	2010      	movs	r0, #16
 800625c:	f000 fed6 	bl	800700c <malloc>
 8006260:	4602      	mov	r2, r0
 8006262:	6260      	str	r0, [r4, #36]	; 0x24
 8006264:	b920      	cbnz	r0, 8006270 <_dtoa_r+0x38>
 8006266:	4bb2      	ldr	r3, [pc, #712]	; (8006530 <_dtoa_r+0x2f8>)
 8006268:	21ea      	movs	r1, #234	; 0xea
 800626a:	48b2      	ldr	r0, [pc, #712]	; (8006534 <_dtoa_r+0x2fc>)
 800626c:	f001 fef8 	bl	8008060 <__assert_func>
 8006270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006274:	6005      	str	r5, [r0, #0]
 8006276:	60c5      	str	r5, [r0, #12]
 8006278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800627a:	6819      	ldr	r1, [r3, #0]
 800627c:	b151      	cbz	r1, 8006294 <_dtoa_r+0x5c>
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	604a      	str	r2, [r1, #4]
 8006282:	2301      	movs	r3, #1
 8006284:	4093      	lsls	r3, r2
 8006286:	608b      	str	r3, [r1, #8]
 8006288:	4620      	mov	r0, r4
 800628a:	f000 ff15 	bl	80070b8 <_Bfree>
 800628e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	1e3b      	subs	r3, r7, #0
 8006296:	bfb9      	ittee	lt
 8006298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800629c:	9303      	strlt	r3, [sp, #12]
 800629e:	2300      	movge	r3, #0
 80062a0:	f8c8 3000 	strge.w	r3, [r8]
 80062a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80062a8:	4ba3      	ldr	r3, [pc, #652]	; (8006538 <_dtoa_r+0x300>)
 80062aa:	bfbc      	itt	lt
 80062ac:	2201      	movlt	r2, #1
 80062ae:	f8c8 2000 	strlt.w	r2, [r8]
 80062b2:	ea33 0309 	bics.w	r3, r3, r9
 80062b6:	d11b      	bne.n	80062f0 <_dtoa_r+0xb8>
 80062b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062c4:	4333      	orrs	r3, r6
 80062c6:	f000 857a 	beq.w	8006dbe <_dtoa_r+0xb86>
 80062ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062cc:	b963      	cbnz	r3, 80062e8 <_dtoa_r+0xb0>
 80062ce:	4b9b      	ldr	r3, [pc, #620]	; (800653c <_dtoa_r+0x304>)
 80062d0:	e024      	b.n	800631c <_dtoa_r+0xe4>
 80062d2:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <_dtoa_r+0x308>)
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	9800      	ldr	r0, [sp, #0]
 80062de:	b015      	add	sp, #84	; 0x54
 80062e0:	ecbd 8b02 	vpop	{d8}
 80062e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e8:	4b94      	ldr	r3, [pc, #592]	; (800653c <_dtoa_r+0x304>)
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	3303      	adds	r3, #3
 80062ee:	e7f3      	b.n	80062d8 <_dtoa_r+0xa0>
 80062f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	ec51 0b17 	vmov	r0, r1, d7
 80062fa:	2300      	movs	r3, #0
 80062fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006300:	f7fa fc12 	bl	8000b28 <__aeabi_dcmpeq>
 8006304:	4680      	mov	r8, r0
 8006306:	b158      	cbz	r0, 8006320 <_dtoa_r+0xe8>
 8006308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800630a:	2301      	movs	r3, #1
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8551 	beq.w	8006db8 <_dtoa_r+0xb80>
 8006316:	488b      	ldr	r0, [pc, #556]	; (8006544 <_dtoa_r+0x30c>)
 8006318:	6018      	str	r0, [r3, #0]
 800631a:	1e43      	subs	r3, r0, #1
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	e7dd      	b.n	80062dc <_dtoa_r+0xa4>
 8006320:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006324:	aa12      	add	r2, sp, #72	; 0x48
 8006326:	a913      	add	r1, sp, #76	; 0x4c
 8006328:	4620      	mov	r0, r4
 800632a:	f001 f9a7 	bl	800767c <__d2b>
 800632e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006332:	4683      	mov	fp, r0
 8006334:	2d00      	cmp	r5, #0
 8006336:	d07c      	beq.n	8006432 <_dtoa_r+0x1fa>
 8006338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800633a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800633e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006342:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006346:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800634a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800634e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006352:	4b7d      	ldr	r3, [pc, #500]	; (8006548 <_dtoa_r+0x310>)
 8006354:	2200      	movs	r2, #0
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7f9 ffc5 	bl	80002e8 <__aeabi_dsub>
 800635e:	a36e      	add	r3, pc, #440	; (adr r3, 8006518 <_dtoa_r+0x2e0>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa f978 	bl	8000658 <__aeabi_dmul>
 8006368:	a36d      	add	r3, pc, #436	; (adr r3, 8006520 <_dtoa_r+0x2e8>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7f9 ffbd 	bl	80002ec <__adddf3>
 8006372:	4606      	mov	r6, r0
 8006374:	4628      	mov	r0, r5
 8006376:	460f      	mov	r7, r1
 8006378:	f7fa f904 	bl	8000584 <__aeabi_i2d>
 800637c:	a36a      	add	r3, pc, #424	; (adr r3, 8006528 <_dtoa_r+0x2f0>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7fa f969 	bl	8000658 <__aeabi_dmul>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7f9 ffad 	bl	80002ec <__adddf3>
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	f7fa fc0f 	bl	8000bb8 <__aeabi_d2iz>
 800639a:	2200      	movs	r2, #0
 800639c:	4682      	mov	sl, r0
 800639e:	2300      	movs	r3, #0
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa fbca 	bl	8000b3c <__aeabi_dcmplt>
 80063a8:	b148      	cbz	r0, 80063be <_dtoa_r+0x186>
 80063aa:	4650      	mov	r0, sl
 80063ac:	f7fa f8ea 	bl	8000584 <__aeabi_i2d>
 80063b0:	4632      	mov	r2, r6
 80063b2:	463b      	mov	r3, r7
 80063b4:	f7fa fbb8 	bl	8000b28 <__aeabi_dcmpeq>
 80063b8:	b908      	cbnz	r0, 80063be <_dtoa_r+0x186>
 80063ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063be:	f1ba 0f16 	cmp.w	sl, #22
 80063c2:	d854      	bhi.n	800646e <_dtoa_r+0x236>
 80063c4:	4b61      	ldr	r3, [pc, #388]	; (800654c <_dtoa_r+0x314>)
 80063c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063d2:	f7fa fbb3 	bl	8000b3c <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d04b      	beq.n	8006472 <_dtoa_r+0x23a>
 80063da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063de:	2300      	movs	r3, #0
 80063e0:	930e      	str	r3, [sp, #56]	; 0x38
 80063e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063e4:	1b5d      	subs	r5, r3, r5
 80063e6:	1e6b      	subs	r3, r5, #1
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	bf43      	ittte	mi
 80063ec:	2300      	movmi	r3, #0
 80063ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80063f2:	9304      	strmi	r3, [sp, #16]
 80063f4:	f04f 0800 	movpl.w	r8, #0
 80063f8:	f1ba 0f00 	cmp.w	sl, #0
 80063fc:	db3b      	blt.n	8006476 <_dtoa_r+0x23e>
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006404:	4453      	add	r3, sl
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	2300      	movs	r3, #0
 800640a:	9306      	str	r3, [sp, #24]
 800640c:	9b05      	ldr	r3, [sp, #20]
 800640e:	2b09      	cmp	r3, #9
 8006410:	d869      	bhi.n	80064e6 <_dtoa_r+0x2ae>
 8006412:	2b05      	cmp	r3, #5
 8006414:	bfc4      	itt	gt
 8006416:	3b04      	subgt	r3, #4
 8006418:	9305      	strgt	r3, [sp, #20]
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	f1a3 0302 	sub.w	r3, r3, #2
 8006420:	bfcc      	ite	gt
 8006422:	2500      	movgt	r5, #0
 8006424:	2501      	movle	r5, #1
 8006426:	2b03      	cmp	r3, #3
 8006428:	d869      	bhi.n	80064fe <_dtoa_r+0x2c6>
 800642a:	e8df f003 	tbb	[pc, r3]
 800642e:	4e2c      	.short	0x4e2c
 8006430:	5a4c      	.short	0x5a4c
 8006432:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006436:	441d      	add	r5, r3
 8006438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800643c:	2b20      	cmp	r3, #32
 800643e:	bfc1      	itttt	gt
 8006440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006444:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006448:	fa09 f303 	lslgt.w	r3, r9, r3
 800644c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006450:	bfda      	itte	le
 8006452:	f1c3 0320 	rsble	r3, r3, #32
 8006456:	fa06 f003 	lslle.w	r0, r6, r3
 800645a:	4318      	orrgt	r0, r3
 800645c:	f7fa f882 	bl	8000564 <__aeabi_ui2d>
 8006460:	2301      	movs	r3, #1
 8006462:	4606      	mov	r6, r0
 8006464:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006468:	3d01      	subs	r5, #1
 800646a:	9310      	str	r3, [sp, #64]	; 0x40
 800646c:	e771      	b.n	8006352 <_dtoa_r+0x11a>
 800646e:	2301      	movs	r3, #1
 8006470:	e7b6      	b.n	80063e0 <_dtoa_r+0x1a8>
 8006472:	900e      	str	r0, [sp, #56]	; 0x38
 8006474:	e7b5      	b.n	80063e2 <_dtoa_r+0x1aa>
 8006476:	f1ca 0300 	rsb	r3, sl, #0
 800647a:	9306      	str	r3, [sp, #24]
 800647c:	2300      	movs	r3, #0
 800647e:	eba8 080a 	sub.w	r8, r8, sl
 8006482:	930d      	str	r3, [sp, #52]	; 0x34
 8006484:	e7c2      	b.n	800640c <_dtoa_r+0x1d4>
 8006486:	2300      	movs	r3, #0
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	dc39      	bgt.n	8006504 <_dtoa_r+0x2cc>
 8006490:	f04f 0901 	mov.w	r9, #1
 8006494:	f8cd 9004 	str.w	r9, [sp, #4]
 8006498:	464b      	mov	r3, r9
 800649a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800649e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064a0:	2200      	movs	r2, #0
 80064a2:	6042      	str	r2, [r0, #4]
 80064a4:	2204      	movs	r2, #4
 80064a6:	f102 0614 	add.w	r6, r2, #20
 80064aa:	429e      	cmp	r6, r3
 80064ac:	6841      	ldr	r1, [r0, #4]
 80064ae:	d92f      	bls.n	8006510 <_dtoa_r+0x2d8>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fdc1 	bl	8007038 <_Balloc>
 80064b6:	9000      	str	r0, [sp, #0]
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d14b      	bne.n	8006554 <_dtoa_r+0x31c>
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <_dtoa_r+0x318>)
 80064be:	4602      	mov	r2, r0
 80064c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064c4:	e6d1      	b.n	800626a <_dtoa_r+0x32>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e7de      	b.n	8006488 <_dtoa_r+0x250>
 80064ca:	2300      	movs	r3, #0
 80064cc:	9308      	str	r3, [sp, #32]
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	eb0a 0903 	add.w	r9, sl, r3
 80064d4:	f109 0301 	add.w	r3, r9, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	bfb8      	it	lt
 80064de:	2301      	movlt	r3, #1
 80064e0:	e7dd      	b.n	800649e <_dtoa_r+0x266>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f2      	b.n	80064cc <_dtoa_r+0x294>
 80064e6:	2501      	movs	r5, #1
 80064e8:	2300      	movs	r3, #0
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	9508      	str	r5, [sp, #32]
 80064ee:	f04f 39ff 	mov.w	r9, #4294967295
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064f8:	2312      	movs	r3, #18
 80064fa:	9209      	str	r2, [sp, #36]	; 0x24
 80064fc:	e7cf      	b.n	800649e <_dtoa_r+0x266>
 80064fe:	2301      	movs	r3, #1
 8006500:	9308      	str	r3, [sp, #32]
 8006502:	e7f4      	b.n	80064ee <_dtoa_r+0x2b6>
 8006504:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006508:	f8cd 9004 	str.w	r9, [sp, #4]
 800650c:	464b      	mov	r3, r9
 800650e:	e7c6      	b.n	800649e <_dtoa_r+0x266>
 8006510:	3101      	adds	r1, #1
 8006512:	6041      	str	r1, [r0, #4]
 8006514:	0052      	lsls	r2, r2, #1
 8006516:	e7c6      	b.n	80064a6 <_dtoa_r+0x26e>
 8006518:	636f4361 	.word	0x636f4361
 800651c:	3fd287a7 	.word	0x3fd287a7
 8006520:	8b60c8b3 	.word	0x8b60c8b3
 8006524:	3fc68a28 	.word	0x3fc68a28
 8006528:	509f79fb 	.word	0x509f79fb
 800652c:	3fd34413 	.word	0x3fd34413
 8006530:	080085fd 	.word	0x080085fd
 8006534:	08008614 	.word	0x08008614
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	080085f9 	.word	0x080085f9
 8006540:	080085f0 	.word	0x080085f0
 8006544:	080085cd 	.word	0x080085cd
 8006548:	3ff80000 	.word	0x3ff80000
 800654c:	08008770 	.word	0x08008770
 8006550:	08008673 	.word	0x08008673
 8006554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006556:	9a00      	ldr	r2, [sp, #0]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	2b0e      	cmp	r3, #14
 800655e:	f200 80ad 	bhi.w	80066bc <_dtoa_r+0x484>
 8006562:	2d00      	cmp	r5, #0
 8006564:	f000 80aa 	beq.w	80066bc <_dtoa_r+0x484>
 8006568:	f1ba 0f00 	cmp.w	sl, #0
 800656c:	dd36      	ble.n	80065dc <_dtoa_r+0x3a4>
 800656e:	4ac3      	ldr	r2, [pc, #780]	; (800687c <_dtoa_r+0x644>)
 8006570:	f00a 030f 	and.w	r3, sl, #15
 8006574:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006578:	ed93 7b00 	vldr	d7, [r3]
 800657c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006580:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006584:	eeb0 8a47 	vmov.f32	s16, s14
 8006588:	eef0 8a67 	vmov.f32	s17, s15
 800658c:	d016      	beq.n	80065bc <_dtoa_r+0x384>
 800658e:	4bbc      	ldr	r3, [pc, #752]	; (8006880 <_dtoa_r+0x648>)
 8006590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006598:	f7fa f988 	bl	80008ac <__aeabi_ddiv>
 800659c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a0:	f007 070f 	and.w	r7, r7, #15
 80065a4:	2503      	movs	r5, #3
 80065a6:	4eb6      	ldr	r6, [pc, #728]	; (8006880 <_dtoa_r+0x648>)
 80065a8:	b957      	cbnz	r7, 80065c0 <_dtoa_r+0x388>
 80065aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ae:	ec53 2b18 	vmov	r2, r3, d8
 80065b2:	f7fa f97b 	bl	80008ac <__aeabi_ddiv>
 80065b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ba:	e029      	b.n	8006610 <_dtoa_r+0x3d8>
 80065bc:	2502      	movs	r5, #2
 80065be:	e7f2      	b.n	80065a6 <_dtoa_r+0x36e>
 80065c0:	07f9      	lsls	r1, r7, #31
 80065c2:	d508      	bpl.n	80065d6 <_dtoa_r+0x39e>
 80065c4:	ec51 0b18 	vmov	r0, r1, d8
 80065c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065cc:	f7fa f844 	bl	8000658 <__aeabi_dmul>
 80065d0:	ec41 0b18 	vmov	d8, r0, r1
 80065d4:	3501      	adds	r5, #1
 80065d6:	107f      	asrs	r7, r7, #1
 80065d8:	3608      	adds	r6, #8
 80065da:	e7e5      	b.n	80065a8 <_dtoa_r+0x370>
 80065dc:	f000 80a6 	beq.w	800672c <_dtoa_r+0x4f4>
 80065e0:	f1ca 0600 	rsb	r6, sl, #0
 80065e4:	4ba5      	ldr	r3, [pc, #660]	; (800687c <_dtoa_r+0x644>)
 80065e6:	4fa6      	ldr	r7, [pc, #664]	; (8006880 <_dtoa_r+0x648>)
 80065e8:	f006 020f 	and.w	r2, r6, #15
 80065ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065f8:	f7fa f82e 	bl	8000658 <__aeabi_dmul>
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	1136      	asrs	r6, r6, #4
 8006602:	2300      	movs	r3, #0
 8006604:	2502      	movs	r5, #2
 8006606:	2e00      	cmp	r6, #0
 8006608:	f040 8085 	bne.w	8006716 <_dtoa_r+0x4de>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1d2      	bne.n	80065b6 <_dtoa_r+0x37e>
 8006610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808c 	beq.w	8006730 <_dtoa_r+0x4f8>
 8006618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800661c:	4b99      	ldr	r3, [pc, #612]	; (8006884 <_dtoa_r+0x64c>)
 800661e:	2200      	movs	r2, #0
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7fa fa8a 	bl	8000b3c <__aeabi_dcmplt>
 8006628:	2800      	cmp	r0, #0
 800662a:	f000 8081 	beq.w	8006730 <_dtoa_r+0x4f8>
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d07d      	beq.n	8006730 <_dtoa_r+0x4f8>
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	dd3c      	ble.n	80066b4 <_dtoa_r+0x47c>
 800663a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	2200      	movs	r2, #0
 8006642:	4b91      	ldr	r3, [pc, #580]	; (8006888 <_dtoa_r+0x650>)
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7fa f806 	bl	8000658 <__aeabi_dmul>
 800664c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006650:	3501      	adds	r5, #1
 8006652:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006656:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800665a:	4628      	mov	r0, r5
 800665c:	f7f9 ff92 	bl	8000584 <__aeabi_i2d>
 8006660:	4632      	mov	r2, r6
 8006662:	463b      	mov	r3, r7
 8006664:	f7f9 fff8 	bl	8000658 <__aeabi_dmul>
 8006668:	4b88      	ldr	r3, [pc, #544]	; (800688c <_dtoa_r+0x654>)
 800666a:	2200      	movs	r2, #0
 800666c:	f7f9 fe3e 	bl	80002ec <__adddf3>
 8006670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15c      	bne.n	800673a <_dtoa_r+0x502>
 8006680:	4b83      	ldr	r3, [pc, #524]	; (8006890 <_dtoa_r+0x658>)
 8006682:	2200      	movs	r2, #0
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f7f9 fe2e 	bl	80002e8 <__aeabi_dsub>
 800668c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006690:	4606      	mov	r6, r0
 8006692:	460f      	mov	r7, r1
 8006694:	f7fa fa70 	bl	8000b78 <__aeabi_dcmpgt>
 8006698:	2800      	cmp	r0, #0
 800669a:	f040 8296 	bne.w	8006bca <_dtoa_r+0x992>
 800669e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066a2:	4630      	mov	r0, r6
 80066a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7fa fa47 	bl	8000b3c <__aeabi_dcmplt>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f040 8288 	bne.w	8006bc4 <_dtoa_r+0x98c>
 80066b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f2c0 8158 	blt.w	8006974 <_dtoa_r+0x73c>
 80066c4:	f1ba 0f0e 	cmp.w	sl, #14
 80066c8:	f300 8154 	bgt.w	8006974 <_dtoa_r+0x73c>
 80066cc:	4b6b      	ldr	r3, [pc, #428]	; (800687c <_dtoa_r+0x644>)
 80066ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f280 80e3 	bge.w	80068a4 <_dtoa_r+0x66c>
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f300 80df 	bgt.w	80068a4 <_dtoa_r+0x66c>
 80066e6:	f040 826d 	bne.w	8006bc4 <_dtoa_r+0x98c>
 80066ea:	4b69      	ldr	r3, [pc, #420]	; (8006890 <_dtoa_r+0x658>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	4640      	mov	r0, r8
 80066f0:	4649      	mov	r1, r9
 80066f2:	f7f9 ffb1 	bl	8000658 <__aeabi_dmul>
 80066f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066fa:	f7fa fa33 	bl	8000b64 <__aeabi_dcmpge>
 80066fe:	9e01      	ldr	r6, [sp, #4]
 8006700:	4637      	mov	r7, r6
 8006702:	2800      	cmp	r0, #0
 8006704:	f040 8243 	bne.w	8006b8e <_dtoa_r+0x956>
 8006708:	9d00      	ldr	r5, [sp, #0]
 800670a:	2331      	movs	r3, #49	; 0x31
 800670c:	f805 3b01 	strb.w	r3, [r5], #1
 8006710:	f10a 0a01 	add.w	sl, sl, #1
 8006714:	e23f      	b.n	8006b96 <_dtoa_r+0x95e>
 8006716:	07f2      	lsls	r2, r6, #31
 8006718:	d505      	bpl.n	8006726 <_dtoa_r+0x4ee>
 800671a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671e:	f7f9 ff9b 	bl	8000658 <__aeabi_dmul>
 8006722:	3501      	adds	r5, #1
 8006724:	2301      	movs	r3, #1
 8006726:	1076      	asrs	r6, r6, #1
 8006728:	3708      	adds	r7, #8
 800672a:	e76c      	b.n	8006606 <_dtoa_r+0x3ce>
 800672c:	2502      	movs	r5, #2
 800672e:	e76f      	b.n	8006610 <_dtoa_r+0x3d8>
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	f8cd a01c 	str.w	sl, [sp, #28]
 8006736:	930c      	str	r3, [sp, #48]	; 0x30
 8006738:	e78d      	b.n	8006656 <_dtoa_r+0x41e>
 800673a:	9900      	ldr	r1, [sp, #0]
 800673c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800673e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006740:	4b4e      	ldr	r3, [pc, #312]	; (800687c <_dtoa_r+0x644>)
 8006742:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006746:	4401      	add	r1, r0
 8006748:	9102      	str	r1, [sp, #8]
 800674a:	9908      	ldr	r1, [sp, #32]
 800674c:	eeb0 8a47 	vmov.f32	s16, s14
 8006750:	eef0 8a67 	vmov.f32	s17, s15
 8006754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800675c:	2900      	cmp	r1, #0
 800675e:	d045      	beq.n	80067ec <_dtoa_r+0x5b4>
 8006760:	494c      	ldr	r1, [pc, #304]	; (8006894 <_dtoa_r+0x65c>)
 8006762:	2000      	movs	r0, #0
 8006764:	f7fa f8a2 	bl	80008ac <__aeabi_ddiv>
 8006768:	ec53 2b18 	vmov	r2, r3, d8
 800676c:	f7f9 fdbc 	bl	80002e8 <__aeabi_dsub>
 8006770:	9d00      	ldr	r5, [sp, #0]
 8006772:	ec41 0b18 	vmov	d8, r0, r1
 8006776:	4639      	mov	r1, r7
 8006778:	4630      	mov	r0, r6
 800677a:	f7fa fa1d 	bl	8000bb8 <__aeabi_d2iz>
 800677e:	900c      	str	r0, [sp, #48]	; 0x30
 8006780:	f7f9 ff00 	bl	8000584 <__aeabi_i2d>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 fdac 	bl	80002e8 <__aeabi_dsub>
 8006790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006792:	3330      	adds	r3, #48	; 0x30
 8006794:	f805 3b01 	strb.w	r3, [r5], #1
 8006798:	ec53 2b18 	vmov	r2, r3, d8
 800679c:	4606      	mov	r6, r0
 800679e:	460f      	mov	r7, r1
 80067a0:	f7fa f9cc 	bl	8000b3c <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d165      	bne.n	8006874 <_dtoa_r+0x63c>
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	4935      	ldr	r1, [pc, #212]	; (8006884 <_dtoa_r+0x64c>)
 80067ae:	2000      	movs	r0, #0
 80067b0:	f7f9 fd9a 	bl	80002e8 <__aeabi_dsub>
 80067b4:	ec53 2b18 	vmov	r2, r3, d8
 80067b8:	f7fa f9c0 	bl	8000b3c <__aeabi_dcmplt>
 80067bc:	2800      	cmp	r0, #0
 80067be:	f040 80b9 	bne.w	8006934 <_dtoa_r+0x6fc>
 80067c2:	9b02      	ldr	r3, [sp, #8]
 80067c4:	429d      	cmp	r5, r3
 80067c6:	f43f af75 	beq.w	80066b4 <_dtoa_r+0x47c>
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <_dtoa_r+0x650>)
 80067cc:	ec51 0b18 	vmov	r0, r1, d8
 80067d0:	2200      	movs	r2, #0
 80067d2:	f7f9 ff41 	bl	8000658 <__aeabi_dmul>
 80067d6:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <_dtoa_r+0x650>)
 80067d8:	ec41 0b18 	vmov	d8, r0, r1
 80067dc:	2200      	movs	r2, #0
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 ff39 	bl	8000658 <__aeabi_dmul>
 80067e6:	4606      	mov	r6, r0
 80067e8:	460f      	mov	r7, r1
 80067ea:	e7c4      	b.n	8006776 <_dtoa_r+0x53e>
 80067ec:	ec51 0b17 	vmov	r0, r1, d7
 80067f0:	f7f9 ff32 	bl	8000658 <__aeabi_dmul>
 80067f4:	9b02      	ldr	r3, [sp, #8]
 80067f6:	9d00      	ldr	r5, [sp, #0]
 80067f8:	930c      	str	r3, [sp, #48]	; 0x30
 80067fa:	ec41 0b18 	vmov	d8, r0, r1
 80067fe:	4639      	mov	r1, r7
 8006800:	4630      	mov	r0, r6
 8006802:	f7fa f9d9 	bl	8000bb8 <__aeabi_d2iz>
 8006806:	9011      	str	r0, [sp, #68]	; 0x44
 8006808:	f7f9 febc 	bl	8000584 <__aeabi_i2d>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7f9 fd68 	bl	80002e8 <__aeabi_dsub>
 8006818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800681a:	3330      	adds	r3, #48	; 0x30
 800681c:	f805 3b01 	strb.w	r3, [r5], #1
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	429d      	cmp	r5, r3
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	d134      	bne.n	8006898 <_dtoa_r+0x660>
 800682e:	4b19      	ldr	r3, [pc, #100]	; (8006894 <_dtoa_r+0x65c>)
 8006830:	ec51 0b18 	vmov	r0, r1, d8
 8006834:	f7f9 fd5a 	bl	80002ec <__adddf3>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f99a 	bl	8000b78 <__aeabi_dcmpgt>
 8006844:	2800      	cmp	r0, #0
 8006846:	d175      	bne.n	8006934 <_dtoa_r+0x6fc>
 8006848:	ec53 2b18 	vmov	r2, r3, d8
 800684c:	4911      	ldr	r1, [pc, #68]	; (8006894 <_dtoa_r+0x65c>)
 800684e:	2000      	movs	r0, #0
 8006850:	f7f9 fd4a 	bl	80002e8 <__aeabi_dsub>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4630      	mov	r0, r6
 800685a:	4639      	mov	r1, r7
 800685c:	f7fa f96e 	bl	8000b3c <__aeabi_dcmplt>
 8006860:	2800      	cmp	r0, #0
 8006862:	f43f af27 	beq.w	80066b4 <_dtoa_r+0x47c>
 8006866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006868:	1e6b      	subs	r3, r5, #1
 800686a:	930c      	str	r3, [sp, #48]	; 0x30
 800686c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d0f8      	beq.n	8006866 <_dtoa_r+0x62e>
 8006874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006878:	e04a      	b.n	8006910 <_dtoa_r+0x6d8>
 800687a:	bf00      	nop
 800687c:	08008770 	.word	0x08008770
 8006880:	08008748 	.word	0x08008748
 8006884:	3ff00000 	.word	0x3ff00000
 8006888:	40240000 	.word	0x40240000
 800688c:	401c0000 	.word	0x401c0000
 8006890:	40140000 	.word	0x40140000
 8006894:	3fe00000 	.word	0x3fe00000
 8006898:	4baf      	ldr	r3, [pc, #700]	; (8006b58 <_dtoa_r+0x920>)
 800689a:	f7f9 fedd 	bl	8000658 <__aeabi_dmul>
 800689e:	4606      	mov	r6, r0
 80068a0:	460f      	mov	r7, r1
 80068a2:	e7ac      	b.n	80067fe <_dtoa_r+0x5c6>
 80068a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068a8:	9d00      	ldr	r5, [sp, #0]
 80068aa:	4642      	mov	r2, r8
 80068ac:	464b      	mov	r3, r9
 80068ae:	4630      	mov	r0, r6
 80068b0:	4639      	mov	r1, r7
 80068b2:	f7f9 fffb 	bl	80008ac <__aeabi_ddiv>
 80068b6:	f7fa f97f 	bl	8000bb8 <__aeabi_d2iz>
 80068ba:	9002      	str	r0, [sp, #8]
 80068bc:	f7f9 fe62 	bl	8000584 <__aeabi_i2d>
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	f7f9 fec8 	bl	8000658 <__aeabi_dmul>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7f9 fd0a 	bl	80002e8 <__aeabi_dsub>
 80068d4:	9e02      	ldr	r6, [sp, #8]
 80068d6:	9f01      	ldr	r7, [sp, #4]
 80068d8:	3630      	adds	r6, #48	; 0x30
 80068da:	f805 6b01 	strb.w	r6, [r5], #1
 80068de:	9e00      	ldr	r6, [sp, #0]
 80068e0:	1bae      	subs	r6, r5, r6
 80068e2:	42b7      	cmp	r7, r6
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	d137      	bne.n	800695a <_dtoa_r+0x722>
 80068ea:	f7f9 fcff 	bl	80002ec <__adddf3>
 80068ee:	4642      	mov	r2, r8
 80068f0:	464b      	mov	r3, r9
 80068f2:	4606      	mov	r6, r0
 80068f4:	460f      	mov	r7, r1
 80068f6:	f7fa f93f 	bl	8000b78 <__aeabi_dcmpgt>
 80068fa:	b9c8      	cbnz	r0, 8006930 <_dtoa_r+0x6f8>
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f910 	bl	8000b28 <__aeabi_dcmpeq>
 8006908:	b110      	cbz	r0, 8006910 <_dtoa_r+0x6d8>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	07d9      	lsls	r1, r3, #31
 800690e:	d40f      	bmi.n	8006930 <_dtoa_r+0x6f8>
 8006910:	4620      	mov	r0, r4
 8006912:	4659      	mov	r1, fp
 8006914:	f000 fbd0 	bl	80070b8 <_Bfree>
 8006918:	2300      	movs	r3, #0
 800691a:	702b      	strb	r3, [r5, #0]
 800691c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800691e:	f10a 0001 	add.w	r0, sl, #1
 8006922:	6018      	str	r0, [r3, #0]
 8006924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006926:	2b00      	cmp	r3, #0
 8006928:	f43f acd8 	beq.w	80062dc <_dtoa_r+0xa4>
 800692c:	601d      	str	r5, [r3, #0]
 800692e:	e4d5      	b.n	80062dc <_dtoa_r+0xa4>
 8006930:	f8cd a01c 	str.w	sl, [sp, #28]
 8006934:	462b      	mov	r3, r5
 8006936:	461d      	mov	r5, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a39      	cmp	r2, #57	; 0x39
 800693e:	d108      	bne.n	8006952 <_dtoa_r+0x71a>
 8006940:	9a00      	ldr	r2, [sp, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d1f7      	bne.n	8006936 <_dtoa_r+0x6fe>
 8006946:	9a07      	ldr	r2, [sp, #28]
 8006948:	9900      	ldr	r1, [sp, #0]
 800694a:	3201      	adds	r2, #1
 800694c:	9207      	str	r2, [sp, #28]
 800694e:	2230      	movs	r2, #48	; 0x30
 8006950:	700a      	strb	r2, [r1, #0]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	3201      	adds	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	e78c      	b.n	8006874 <_dtoa_r+0x63c>
 800695a:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <_dtoa_r+0x920>)
 800695c:	2200      	movs	r2, #0
 800695e:	f7f9 fe7b 	bl	8000658 <__aeabi_dmul>
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	4606      	mov	r6, r0
 8006968:	460f      	mov	r7, r1
 800696a:	f7fa f8dd 	bl	8000b28 <__aeabi_dcmpeq>
 800696e:	2800      	cmp	r0, #0
 8006970:	d09b      	beq.n	80068aa <_dtoa_r+0x672>
 8006972:	e7cd      	b.n	8006910 <_dtoa_r+0x6d8>
 8006974:	9a08      	ldr	r2, [sp, #32]
 8006976:	2a00      	cmp	r2, #0
 8006978:	f000 80c4 	beq.w	8006b04 <_dtoa_r+0x8cc>
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	2a01      	cmp	r2, #1
 8006980:	f300 80a8 	bgt.w	8006ad4 <_dtoa_r+0x89c>
 8006984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006986:	2a00      	cmp	r2, #0
 8006988:	f000 80a0 	beq.w	8006acc <_dtoa_r+0x894>
 800698c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006990:	9e06      	ldr	r6, [sp, #24]
 8006992:	4645      	mov	r5, r8
 8006994:	9a04      	ldr	r2, [sp, #16]
 8006996:	2101      	movs	r1, #1
 8006998:	441a      	add	r2, r3
 800699a:	4620      	mov	r0, r4
 800699c:	4498      	add	r8, r3
 800699e:	9204      	str	r2, [sp, #16]
 80069a0:	f000 fc46 	bl	8007230 <__i2b>
 80069a4:	4607      	mov	r7, r0
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	dd0b      	ble.n	80069c2 <_dtoa_r+0x78a>
 80069aa:	9b04      	ldr	r3, [sp, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dd08      	ble.n	80069c2 <_dtoa_r+0x78a>
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	bfa8      	it	ge
 80069b6:	462b      	movge	r3, r5
 80069b8:	eba8 0803 	sub.w	r8, r8, r3
 80069bc:	1aed      	subs	r5, r5, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	9304      	str	r3, [sp, #16]
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	b1fb      	cbz	r3, 8006a06 <_dtoa_r+0x7ce>
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 809f 	beq.w	8006b0c <_dtoa_r+0x8d4>
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	dd11      	ble.n	80069f6 <_dtoa_r+0x7be>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4632      	mov	r2, r6
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fce6 	bl	80073a8 <__pow5mult>
 80069dc:	465a      	mov	r2, fp
 80069de:	4601      	mov	r1, r0
 80069e0:	4607      	mov	r7, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fc3a 	bl	800725c <__multiply>
 80069e8:	4659      	mov	r1, fp
 80069ea:	9007      	str	r0, [sp, #28]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fb63 	bl	80070b8 <_Bfree>
 80069f2:	9b07      	ldr	r3, [sp, #28]
 80069f4:	469b      	mov	fp, r3
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	1b9a      	subs	r2, r3, r6
 80069fa:	d004      	beq.n	8006a06 <_dtoa_r+0x7ce>
 80069fc:	4659      	mov	r1, fp
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fcd2 	bl	80073a8 <__pow5mult>
 8006a04:	4683      	mov	fp, r0
 8006a06:	2101      	movs	r1, #1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fc11 	bl	8007230 <__i2b>
 8006a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	4606      	mov	r6, r0
 8006a14:	dd7c      	ble.n	8006b10 <_dtoa_r+0x8d8>
 8006a16:	461a      	mov	r2, r3
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 fcc4 	bl	80073a8 <__pow5mult>
 8006a20:	9b05      	ldr	r3, [sp, #20]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	4606      	mov	r6, r0
 8006a26:	dd76      	ble.n	8006b16 <_dtoa_r+0x8de>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9306      	str	r3, [sp, #24]
 8006a2c:	6933      	ldr	r3, [r6, #16]
 8006a2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a32:	6918      	ldr	r0, [r3, #16]
 8006a34:	f000 fbac 	bl	8007190 <__hi0bits>
 8006a38:	f1c0 0020 	rsb	r0, r0, #32
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	4418      	add	r0, r3
 8006a40:	f010 001f 	ands.w	r0, r0, #31
 8006a44:	f000 8086 	beq.w	8006b54 <_dtoa_r+0x91c>
 8006a48:	f1c0 0320 	rsb	r3, r0, #32
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	dd7f      	ble.n	8006b50 <_dtoa_r+0x918>
 8006a50:	f1c0 001c 	rsb	r0, r0, #28
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4403      	add	r3, r0
 8006a58:	4480      	add	r8, r0
 8006a5a:	4405      	add	r5, r0
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	dd05      	ble.n	8006a70 <_dtoa_r+0x838>
 8006a64:	4659      	mov	r1, fp
 8006a66:	4642      	mov	r2, r8
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fcf7 	bl	800745c <__lshift>
 8006a6e:	4683      	mov	fp, r0
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd05      	ble.n	8006a82 <_dtoa_r+0x84a>
 8006a76:	4631      	mov	r1, r6
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 fcee 	bl	800745c <__lshift>
 8006a80:	4606      	mov	r6, r0
 8006a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d069      	beq.n	8006b5c <_dtoa_r+0x924>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 fd52 	bl	8007534 <__mcmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	da63      	bge.n	8006b5c <_dtoa_r+0x924>
 8006a94:	2300      	movs	r3, #0
 8006a96:	4659      	mov	r1, fp
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fb2e 	bl	80070fc <__multadd>
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	4683      	mov	fp, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 818f 	beq.w	8006dcc <_dtoa_r+0xb94>
 8006aae:	4639      	mov	r1, r7
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	220a      	movs	r2, #10
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fb21 	bl	80070fc <__multadd>
 8006aba:	f1b9 0f00 	cmp.w	r9, #0
 8006abe:	4607      	mov	r7, r0
 8006ac0:	f300 808e 	bgt.w	8006be0 <_dtoa_r+0x9a8>
 8006ac4:	9b05      	ldr	r3, [sp, #20]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	dc50      	bgt.n	8006b6c <_dtoa_r+0x934>
 8006aca:	e089      	b.n	8006be0 <_dtoa_r+0x9a8>
 8006acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ad2:	e75d      	b.n	8006990 <_dtoa_r+0x758>
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	1e5e      	subs	r6, r3, #1
 8006ad8:	9b06      	ldr	r3, [sp, #24]
 8006ada:	42b3      	cmp	r3, r6
 8006adc:	bfbf      	itttt	lt
 8006ade:	9b06      	ldrlt	r3, [sp, #24]
 8006ae0:	9606      	strlt	r6, [sp, #24]
 8006ae2:	1af2      	sublt	r2, r6, r3
 8006ae4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ae6:	bfb6      	itet	lt
 8006ae8:	189b      	addlt	r3, r3, r2
 8006aea:	1b9e      	subge	r6, r3, r6
 8006aec:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	bfb8      	it	lt
 8006af2:	2600      	movlt	r6, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bfb5      	itete	lt
 8006af8:	eba8 0503 	sublt.w	r5, r8, r3
 8006afc:	9b01      	ldrge	r3, [sp, #4]
 8006afe:	2300      	movlt	r3, #0
 8006b00:	4645      	movge	r5, r8
 8006b02:	e747      	b.n	8006994 <_dtoa_r+0x75c>
 8006b04:	9e06      	ldr	r6, [sp, #24]
 8006b06:	9f08      	ldr	r7, [sp, #32]
 8006b08:	4645      	mov	r5, r8
 8006b0a:	e74c      	b.n	80069a6 <_dtoa_r+0x76e>
 8006b0c:	9a06      	ldr	r2, [sp, #24]
 8006b0e:	e775      	b.n	80069fc <_dtoa_r+0x7c4>
 8006b10:	9b05      	ldr	r3, [sp, #20]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	dc18      	bgt.n	8006b48 <_dtoa_r+0x910>
 8006b16:	9b02      	ldr	r3, [sp, #8]
 8006b18:	b9b3      	cbnz	r3, 8006b48 <_dtoa_r+0x910>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b20:	b9a3      	cbnz	r3, 8006b4c <_dtoa_r+0x914>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b28:	0d1b      	lsrs	r3, r3, #20
 8006b2a:	051b      	lsls	r3, r3, #20
 8006b2c:	b12b      	cbz	r3, 8006b3a <_dtoa_r+0x902>
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	3301      	adds	r3, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f108 0801 	add.w	r8, r8, #1
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9306      	str	r3, [sp, #24]
 8006b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f47f af74 	bne.w	8006a2c <_dtoa_r+0x7f4>
 8006b44:	2001      	movs	r0, #1
 8006b46:	e779      	b.n	8006a3c <_dtoa_r+0x804>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e7f6      	b.n	8006b3a <_dtoa_r+0x902>
 8006b4c:	9b02      	ldr	r3, [sp, #8]
 8006b4e:	e7f4      	b.n	8006b3a <_dtoa_r+0x902>
 8006b50:	d085      	beq.n	8006a5e <_dtoa_r+0x826>
 8006b52:	4618      	mov	r0, r3
 8006b54:	301c      	adds	r0, #28
 8006b56:	e77d      	b.n	8006a54 <_dtoa_r+0x81c>
 8006b58:	40240000 	.word	0x40240000
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dc38      	bgt.n	8006bd4 <_dtoa_r+0x99c>
 8006b62:	9b05      	ldr	r3, [sp, #20]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	dd35      	ble.n	8006bd4 <_dtoa_r+0x99c>
 8006b68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b6c:	f1b9 0f00 	cmp.w	r9, #0
 8006b70:	d10d      	bne.n	8006b8e <_dtoa_r+0x956>
 8006b72:	4631      	mov	r1, r6
 8006b74:	464b      	mov	r3, r9
 8006b76:	2205      	movs	r2, #5
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fabf 	bl	80070fc <__multadd>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	4606      	mov	r6, r0
 8006b82:	4658      	mov	r0, fp
 8006b84:	f000 fcd6 	bl	8007534 <__mcmp>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f73f adbd 	bgt.w	8006708 <_dtoa_r+0x4d0>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	9d00      	ldr	r5, [sp, #0]
 8006b92:	ea6f 0a03 	mvn.w	sl, r3
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fa8b 	bl	80070b8 <_Bfree>
 8006ba2:	2f00      	cmp	r7, #0
 8006ba4:	f43f aeb4 	beq.w	8006910 <_dtoa_r+0x6d8>
 8006ba8:	f1b8 0f00 	cmp.w	r8, #0
 8006bac:	d005      	beq.n	8006bba <_dtoa_r+0x982>
 8006bae:	45b8      	cmp	r8, r7
 8006bb0:	d003      	beq.n	8006bba <_dtoa_r+0x982>
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 fa7f 	bl	80070b8 <_Bfree>
 8006bba:	4639      	mov	r1, r7
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fa7b 	bl	80070b8 <_Bfree>
 8006bc2:	e6a5      	b.n	8006910 <_dtoa_r+0x6d8>
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	4637      	mov	r7, r6
 8006bc8:	e7e1      	b.n	8006b8e <_dtoa_r+0x956>
 8006bca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006bd0:	4637      	mov	r7, r6
 8006bd2:	e599      	b.n	8006708 <_dtoa_r+0x4d0>
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80fd 	beq.w	8006dda <_dtoa_r+0xba2>
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	dd05      	ble.n	8006bf0 <_dtoa_r+0x9b8>
 8006be4:	4639      	mov	r1, r7
 8006be6:	462a      	mov	r2, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fc37 	bl	800745c <__lshift>
 8006bee:	4607      	mov	r7, r0
 8006bf0:	9b06      	ldr	r3, [sp, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d05c      	beq.n	8006cb0 <_dtoa_r+0xa78>
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fa1d 	bl	8007038 <_Balloc>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b928      	cbnz	r0, 8006c0e <_dtoa_r+0x9d6>
 8006c02:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <_dtoa_r+0xbcc>)
 8006c04:	4602      	mov	r2, r0
 8006c06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c0a:	f7ff bb2e 	b.w	800626a <_dtoa_r+0x32>
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	3202      	adds	r2, #2
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	f107 010c 	add.w	r1, r7, #12
 8006c18:	300c      	adds	r0, #12
 8006c1a:	f000 f9ff 	bl	800701c <memcpy>
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4629      	mov	r1, r5
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fc1a 	bl	800745c <__lshift>
 8006c28:	9b00      	ldr	r3, [sp, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	444b      	add	r3, r9
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	46b8      	mov	r8, r7
 8006c3c:	9306      	str	r3, [sp, #24]
 8006c3e:	4607      	mov	r7, r0
 8006c40:	9b01      	ldr	r3, [sp, #4]
 8006c42:	4631      	mov	r1, r6
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4658      	mov	r0, fp
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	f7ff fa67 	bl	800611c <quorem>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	3330      	adds	r3, #48	; 0x30
 8006c52:	9004      	str	r0, [sp, #16]
 8006c54:	4641      	mov	r1, r8
 8006c56:	4658      	mov	r0, fp
 8006c58:	9308      	str	r3, [sp, #32]
 8006c5a:	f000 fc6b 	bl	8007534 <__mcmp>
 8006c5e:	463a      	mov	r2, r7
 8006c60:	4681      	mov	r9, r0
 8006c62:	4631      	mov	r1, r6
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 fc81 	bl	800756c <__mdiff>
 8006c6a:	68c2      	ldr	r2, [r0, #12]
 8006c6c:	9b08      	ldr	r3, [sp, #32]
 8006c6e:	4605      	mov	r5, r0
 8006c70:	bb02      	cbnz	r2, 8006cb4 <_dtoa_r+0xa7c>
 8006c72:	4601      	mov	r1, r0
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fc5d 	bl	8007534 <__mcmp>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4620      	mov	r0, r4
 8006c82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006c86:	f000 fa17 	bl	80070b8 <_Bfree>
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c8e:	9d01      	ldr	r5, [sp, #4]
 8006c90:	ea43 0102 	orr.w	r1, r3, r2
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	430b      	orrs	r3, r1
 8006c98:	9b08      	ldr	r3, [sp, #32]
 8006c9a:	d10d      	bne.n	8006cb8 <_dtoa_r+0xa80>
 8006c9c:	2b39      	cmp	r3, #57	; 0x39
 8006c9e:	d029      	beq.n	8006cf4 <_dtoa_r+0xabc>
 8006ca0:	f1b9 0f00 	cmp.w	r9, #0
 8006ca4:	dd01      	ble.n	8006caa <_dtoa_r+0xa72>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	3331      	adds	r3, #49	; 0x31
 8006caa:	9a02      	ldr	r2, [sp, #8]
 8006cac:	7013      	strb	r3, [r2, #0]
 8006cae:	e774      	b.n	8006b9a <_dtoa_r+0x962>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	e7b9      	b.n	8006c28 <_dtoa_r+0x9f0>
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	e7e2      	b.n	8006c7e <_dtoa_r+0xa46>
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	db06      	blt.n	8006ccc <_dtoa_r+0xa94>
 8006cbe:	9905      	ldr	r1, [sp, #20]
 8006cc0:	ea41 0909 	orr.w	r9, r1, r9
 8006cc4:	9906      	ldr	r1, [sp, #24]
 8006cc6:	ea59 0101 	orrs.w	r1, r9, r1
 8006cca:	d120      	bne.n	8006d0e <_dtoa_r+0xad6>
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	ddec      	ble.n	8006caa <_dtoa_r+0xa72>
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	f000 fbc0 	bl	800745c <__lshift>
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4683      	mov	fp, r0
 8006ce0:	f000 fc28 	bl	8007534 <__mcmp>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	dc02      	bgt.n	8006cf0 <_dtoa_r+0xab8>
 8006cea:	d1de      	bne.n	8006caa <_dtoa_r+0xa72>
 8006cec:	07da      	lsls	r2, r3, #31
 8006cee:	d5dc      	bpl.n	8006caa <_dtoa_r+0xa72>
 8006cf0:	2b39      	cmp	r3, #57	; 0x39
 8006cf2:	d1d8      	bne.n	8006ca6 <_dtoa_r+0xa6e>
 8006cf4:	9a02      	ldr	r2, [sp, #8]
 8006cf6:	2339      	movs	r3, #57	; 0x39
 8006cf8:	7013      	strb	r3, [r2, #0]
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	461d      	mov	r5, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d04:	2a39      	cmp	r2, #57	; 0x39
 8006d06:	d050      	beq.n	8006daa <_dtoa_r+0xb72>
 8006d08:	3201      	adds	r2, #1
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e745      	b.n	8006b9a <_dtoa_r+0x962>
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	dd03      	ble.n	8006d1a <_dtoa_r+0xae2>
 8006d12:	2b39      	cmp	r3, #57	; 0x39
 8006d14:	d0ee      	beq.n	8006cf4 <_dtoa_r+0xabc>
 8006d16:	3301      	adds	r3, #1
 8006d18:	e7c7      	b.n	8006caa <_dtoa_r+0xa72>
 8006d1a:	9a01      	ldr	r2, [sp, #4]
 8006d1c:	9907      	ldr	r1, [sp, #28]
 8006d1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d22:	428a      	cmp	r2, r1
 8006d24:	d02a      	beq.n	8006d7c <_dtoa_r+0xb44>
 8006d26:	4659      	mov	r1, fp
 8006d28:	2300      	movs	r3, #0
 8006d2a:	220a      	movs	r2, #10
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f9e5 	bl	80070fc <__multadd>
 8006d32:	45b8      	cmp	r8, r7
 8006d34:	4683      	mov	fp, r0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	f04f 020a 	mov.w	r2, #10
 8006d3e:	4641      	mov	r1, r8
 8006d40:	4620      	mov	r0, r4
 8006d42:	d107      	bne.n	8006d54 <_dtoa_r+0xb1c>
 8006d44:	f000 f9da 	bl	80070fc <__multadd>
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	e775      	b.n	8006c40 <_dtoa_r+0xa08>
 8006d54:	f000 f9d2 	bl	80070fc <__multadd>
 8006d58:	4639      	mov	r1, r7
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	220a      	movs	r2, #10
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 f9cb 	bl	80070fc <__multadd>
 8006d66:	4607      	mov	r7, r0
 8006d68:	e7f0      	b.n	8006d4c <_dtoa_r+0xb14>
 8006d6a:	f1b9 0f00 	cmp.w	r9, #0
 8006d6e:	9a00      	ldr	r2, [sp, #0]
 8006d70:	bfcc      	ite	gt
 8006d72:	464d      	movgt	r5, r9
 8006d74:	2501      	movle	r5, #1
 8006d76:	4415      	add	r5, r2
 8006d78:	f04f 0800 	mov.w	r8, #0
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4620      	mov	r0, r4
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	f000 fb6a 	bl	800745c <__lshift>
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4683      	mov	fp, r0
 8006d8c:	f000 fbd2 	bl	8007534 <__mcmp>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dcb2      	bgt.n	8006cfa <_dtoa_r+0xac2>
 8006d94:	d102      	bne.n	8006d9c <_dtoa_r+0xb64>
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	07db      	lsls	r3, r3, #31
 8006d9a:	d4ae      	bmi.n	8006cfa <_dtoa_r+0xac2>
 8006d9c:	462b      	mov	r3, r5
 8006d9e:	461d      	mov	r5, r3
 8006da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006da4:	2a30      	cmp	r2, #48	; 0x30
 8006da6:	d0fa      	beq.n	8006d9e <_dtoa_r+0xb66>
 8006da8:	e6f7      	b.n	8006b9a <_dtoa_r+0x962>
 8006daa:	9a00      	ldr	r2, [sp, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d1a5      	bne.n	8006cfc <_dtoa_r+0xac4>
 8006db0:	f10a 0a01 	add.w	sl, sl, #1
 8006db4:	2331      	movs	r3, #49	; 0x31
 8006db6:	e779      	b.n	8006cac <_dtoa_r+0xa74>
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <_dtoa_r+0xbd0>)
 8006dba:	f7ff baaf 	b.w	800631c <_dtoa_r+0xe4>
 8006dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f47f aa86 	bne.w	80062d2 <_dtoa_r+0x9a>
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <_dtoa_r+0xbd4>)
 8006dc8:	f7ff baa8 	b.w	800631c <_dtoa_r+0xe4>
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	dc03      	bgt.n	8006dda <_dtoa_r+0xba2>
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	f73f aec9 	bgt.w	8006b6c <_dtoa_r+0x934>
 8006dda:	9d00      	ldr	r5, [sp, #0]
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4658      	mov	r0, fp
 8006de0:	f7ff f99c 	bl	800611c <quorem>
 8006de4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006de8:	f805 3b01 	strb.w	r3, [r5], #1
 8006dec:	9a00      	ldr	r2, [sp, #0]
 8006dee:	1aaa      	subs	r2, r5, r2
 8006df0:	4591      	cmp	r9, r2
 8006df2:	ddba      	ble.n	8006d6a <_dtoa_r+0xb32>
 8006df4:	4659      	mov	r1, fp
 8006df6:	2300      	movs	r3, #0
 8006df8:	220a      	movs	r2, #10
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 f97e 	bl	80070fc <__multadd>
 8006e00:	4683      	mov	fp, r0
 8006e02:	e7eb      	b.n	8006ddc <_dtoa_r+0xba4>
 8006e04:	08008673 	.word	0x08008673
 8006e08:	080085cc 	.word	0x080085cc
 8006e0c:	080085f0 	.word	0x080085f0

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	; 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	; 0x5c
 8006e2e:	f7fe fccb 	bl	80057c8 <memset>
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x38>)
 8006e34:	6263      	str	r3, [r4, #36]	; 0x24
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <std+0x3c>)
 8006e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <std+0x40>)
 8006e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <std+0x44>)
 8006e40:	6224      	str	r4, [r4, #32]
 8006e42:	6323      	str	r3, [r4, #48]	; 0x30
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	08007e35 	.word	0x08007e35
 8006e4c:	08007e57 	.word	0x08007e57
 8006e50:	08007e8f 	.word	0x08007e8f
 8006e54:	08007eb3 	.word	0x08007eb3

08006e58 <_cleanup_r>:
 8006e58:	4901      	ldr	r1, [pc, #4]	; (8006e60 <_cleanup_r+0x8>)
 8006e5a:	f000 b8af 	b.w	8006fbc <_fwalk_reent>
 8006e5e:	bf00      	nop
 8006e60:	080081c9 	.word	0x080081c9

08006e64 <__sfmoreglue>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	1e4a      	subs	r2, r1, #1
 8006e68:	2568      	movs	r5, #104	; 0x68
 8006e6a:	4355      	muls	r5, r2
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e72:	f000 fcbf 	bl	80077f4 <_malloc_r>
 8006e76:	4604      	mov	r4, r0
 8006e78:	b140      	cbz	r0, 8006e8c <__sfmoreglue+0x28>
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e80:	300c      	adds	r0, #12
 8006e82:	60a0      	str	r0, [r4, #8]
 8006e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e88:	f7fe fc9e 	bl	80057c8 <memset>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b8b8 	b.w	8007006 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	200003cc 	.word	0x200003cc

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b8b3 	b.w	8007008 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	200003cc 	.word	0x200003cc

08006ea8 <__sinit_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sinit_lock_acquire+0x8>)
 8006eaa:	f000 b8ac 	b.w	8007006 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	200003c7 	.word	0x200003c7

08006eb4 <__sinit_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sinit_lock_release+0x8>)
 8006eb6:	f000 b8a7 	b.w	8007008 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	200003c7 	.word	0x200003c7

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sinit_lock_acquire>
 8006ec8:	69a3      	ldr	r3, [r4, #24]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sinit_lock_release>
 8006ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <__sinit+0x68>)
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <__sinit+0x6c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	bf04      	itt	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	61a3      	streq	r3, [r4, #24]
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 f820 	bl	8006f30 <__sfp>
 8006ef0:	6060      	str	r0, [r4, #4]
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 f81c 	bl	8006f30 <__sfp>
 8006ef8:	60a0      	str	r0, [r4, #8]
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 f818 	bl	8006f30 <__sfp>
 8006f00:	2200      	movs	r2, #0
 8006f02:	60e0      	str	r0, [r4, #12]
 8006f04:	2104      	movs	r1, #4
 8006f06:	6860      	ldr	r0, [r4, #4]
 8006f08:	f7ff ff82 	bl	8006e10 <std>
 8006f0c:	68a0      	ldr	r0, [r4, #8]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2109      	movs	r1, #9
 8006f12:	f7ff ff7d 	bl	8006e10 <std>
 8006f16:	68e0      	ldr	r0, [r4, #12]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	2112      	movs	r1, #18
 8006f1c:	f7ff ff78 	bl	8006e10 <std>
 8006f20:	2301      	movs	r3, #1
 8006f22:	61a3      	str	r3, [r4, #24]
 8006f24:	e7d2      	b.n	8006ecc <__sinit+0xc>
 8006f26:	bf00      	nop
 8006f28:	080085b8 	.word	0x080085b8
 8006f2c:	08006e59 	.word	0x08006e59

08006f30 <__sfp>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	4607      	mov	r7, r0
 8006f34:	f7ff ffac 	bl	8006e90 <__sfp_lock_acquire>
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <__sfp+0x84>)
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	69b3      	ldr	r3, [r6, #24]
 8006f3e:	b913      	cbnz	r3, 8006f46 <__sfp+0x16>
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ffbd 	bl	8006ec0 <__sinit>
 8006f46:	3648      	adds	r6, #72	; 0x48
 8006f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	d503      	bpl.n	8006f58 <__sfp+0x28>
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	b30b      	cbz	r3, 8006f98 <__sfp+0x68>
 8006f54:	6836      	ldr	r6, [r6, #0]
 8006f56:	e7f7      	b.n	8006f48 <__sfp+0x18>
 8006f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f5c:	b9d5      	cbnz	r5, 8006f94 <__sfp+0x64>
 8006f5e:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <__sfp+0x88>)
 8006f60:	60e3      	str	r3, [r4, #12]
 8006f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f66:	6665      	str	r5, [r4, #100]	; 0x64
 8006f68:	f000 f84c 	bl	8007004 <__retarget_lock_init_recursive>
 8006f6c:	f7ff ff96 	bl	8006e9c <__sfp_lock_release>
 8006f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f78:	6025      	str	r5, [r4, #0]
 8006f7a:	61a5      	str	r5, [r4, #24]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f84:	f7fe fc20 	bl	80057c8 <memset>
 8006f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f90:	4620      	mov	r0, r4
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	3468      	adds	r4, #104	; 0x68
 8006f96:	e7d9      	b.n	8006f4c <__sfp+0x1c>
 8006f98:	2104      	movs	r1, #4
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f7ff ff62 	bl	8006e64 <__sfmoreglue>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	6030      	str	r0, [r6, #0]
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1d5      	bne.n	8006f54 <__sfp+0x24>
 8006fa8:	f7ff ff78 	bl	8006e9c <__sfp_lock_release>
 8006fac:	230c      	movs	r3, #12
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	e7ee      	b.n	8006f90 <__sfp+0x60>
 8006fb2:	bf00      	nop
 8006fb4:	080085b8 	.word	0x080085b8
 8006fb8:	ffff0001 	.word	0xffff0001

08006fbc <_fwalk_reent>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	4688      	mov	r8, r1
 8006fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fc8:	2700      	movs	r7, #0
 8006fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fce:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd2:	d505      	bpl.n	8006fe0 <_fwalk_reent+0x24>
 8006fd4:	6824      	ldr	r4, [r4, #0]
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d1f7      	bne.n	8006fca <_fwalk_reent+0xe>
 8006fda:	4638      	mov	r0, r7
 8006fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d907      	bls.n	8006ff6 <_fwalk_reent+0x3a>
 8006fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fea:	3301      	adds	r3, #1
 8006fec:	d003      	beq.n	8006ff6 <_fwalk_reent+0x3a>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	47c0      	blx	r8
 8006ff4:	4307      	orrs	r7, r0
 8006ff6:	3568      	adds	r5, #104	; 0x68
 8006ff8:	e7e9      	b.n	8006fce <_fwalk_reent+0x12>
	...

08006ffc <_localeconv_r>:
 8006ffc:	4800      	ldr	r0, [pc, #0]	; (8007000 <_localeconv_r+0x4>)
 8006ffe:	4770      	bx	lr
 8007000:	20000160 	.word	0x20000160

08007004 <__retarget_lock_init_recursive>:
 8007004:	4770      	bx	lr

08007006 <__retarget_lock_acquire_recursive>:
 8007006:	4770      	bx	lr

08007008 <__retarget_lock_release_recursive>:
 8007008:	4770      	bx	lr
	...

0800700c <malloc>:
 800700c:	4b02      	ldr	r3, [pc, #8]	; (8007018 <malloc+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f000 bbef 	b.w	80077f4 <_malloc_r>
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c

0800701c <memcpy>:
 800701c:	440a      	add	r2, r1
 800701e:	4291      	cmp	r1, r2
 8007020:	f100 33ff 	add.w	r3, r0, #4294967295
 8007024:	d100      	bne.n	8007028 <memcpy+0xc>
 8007026:	4770      	bx	lr
 8007028:	b510      	push	{r4, lr}
 800702a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007032:	4291      	cmp	r1, r2
 8007034:	d1f9      	bne.n	800702a <memcpy+0xe>
 8007036:	bd10      	pop	{r4, pc}

08007038 <_Balloc>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	b976      	cbnz	r6, 8007060 <_Balloc+0x28>
 8007042:	2010      	movs	r0, #16
 8007044:	f7ff ffe2 	bl	800700c <malloc>
 8007048:	4602      	mov	r2, r0
 800704a:	6260      	str	r0, [r4, #36]	; 0x24
 800704c:	b920      	cbnz	r0, 8007058 <_Balloc+0x20>
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <_Balloc+0x78>)
 8007050:	4818      	ldr	r0, [pc, #96]	; (80070b4 <_Balloc+0x7c>)
 8007052:	2166      	movs	r1, #102	; 0x66
 8007054:	f001 f804 	bl	8008060 <__assert_func>
 8007058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800705c:	6006      	str	r6, [r0, #0]
 800705e:	60c6      	str	r6, [r0, #12]
 8007060:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007062:	68f3      	ldr	r3, [r6, #12]
 8007064:	b183      	cbz	r3, 8007088 <_Balloc+0x50>
 8007066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800706e:	b9b8      	cbnz	r0, 80070a0 <_Balloc+0x68>
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f605 	lsl.w	r6, r1, r5
 8007076:	1d72      	adds	r2, r6, #5
 8007078:	0092      	lsls	r2, r2, #2
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fb5a 	bl	8007734 <_calloc_r>
 8007080:	b160      	cbz	r0, 800709c <_Balloc+0x64>
 8007082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007086:	e00e      	b.n	80070a6 <_Balloc+0x6e>
 8007088:	2221      	movs	r2, #33	; 0x21
 800708a:	2104      	movs	r1, #4
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fb51 	bl	8007734 <_calloc_r>
 8007092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007094:	60f0      	str	r0, [r6, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e4      	bne.n	8007066 <_Balloc+0x2e>
 800709c:	2000      	movs	r0, #0
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	6802      	ldr	r2, [r0, #0]
 80070a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070a6:	2300      	movs	r3, #0
 80070a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070ac:	e7f7      	b.n	800709e <_Balloc+0x66>
 80070ae:	bf00      	nop
 80070b0:	080085fd 	.word	0x080085fd
 80070b4:	080086e4 	.word	0x080086e4

080070b8 <_Bfree>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	b976      	cbnz	r6, 80070e0 <_Bfree+0x28>
 80070c2:	2010      	movs	r0, #16
 80070c4:	f7ff ffa2 	bl	800700c <malloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6268      	str	r0, [r5, #36]	; 0x24
 80070cc:	b920      	cbnz	r0, 80070d8 <_Bfree+0x20>
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <_Bfree+0x3c>)
 80070d0:	4809      	ldr	r0, [pc, #36]	; (80070f8 <_Bfree+0x40>)
 80070d2:	218a      	movs	r1, #138	; 0x8a
 80070d4:	f000 ffc4 	bl	8008060 <__assert_func>
 80070d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070dc:	6006      	str	r6, [r0, #0]
 80070de:	60c6      	str	r6, [r0, #12]
 80070e0:	b13c      	cbz	r4, 80070f2 <_Bfree+0x3a>
 80070e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070e4:	6862      	ldr	r2, [r4, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070ec:	6021      	str	r1, [r4, #0]
 80070ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	080085fd 	.word	0x080085fd
 80070f8:	080086e4 	.word	0x080086e4

080070fc <__multadd>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	690e      	ldr	r6, [r1, #16]
 8007102:	4607      	mov	r7, r0
 8007104:	4698      	mov	r8, r3
 8007106:	460c      	mov	r4, r1
 8007108:	f101 0014 	add.w	r0, r1, #20
 800710c:	2300      	movs	r3, #0
 800710e:	6805      	ldr	r5, [r0, #0]
 8007110:	b2a9      	uxth	r1, r5
 8007112:	fb02 8101 	mla	r1, r2, r1, r8
 8007116:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800711a:	0c2d      	lsrs	r5, r5, #16
 800711c:	fb02 c505 	mla	r5, r2, r5, ip
 8007120:	b289      	uxth	r1, r1
 8007122:	3301      	adds	r3, #1
 8007124:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007128:	429e      	cmp	r6, r3
 800712a:	f840 1b04 	str.w	r1, [r0], #4
 800712e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007132:	dcec      	bgt.n	800710e <__multadd+0x12>
 8007134:	f1b8 0f00 	cmp.w	r8, #0
 8007138:	d022      	beq.n	8007180 <__multadd+0x84>
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	42b3      	cmp	r3, r6
 800713e:	dc19      	bgt.n	8007174 <__multadd+0x78>
 8007140:	6861      	ldr	r1, [r4, #4]
 8007142:	4638      	mov	r0, r7
 8007144:	3101      	adds	r1, #1
 8007146:	f7ff ff77 	bl	8007038 <_Balloc>
 800714a:	4605      	mov	r5, r0
 800714c:	b928      	cbnz	r0, 800715a <__multadd+0x5e>
 800714e:	4602      	mov	r2, r0
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <__multadd+0x8c>)
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <__multadd+0x90>)
 8007154:	21b5      	movs	r1, #181	; 0xb5
 8007156:	f000 ff83 	bl	8008060 <__assert_func>
 800715a:	6922      	ldr	r2, [r4, #16]
 800715c:	3202      	adds	r2, #2
 800715e:	f104 010c 	add.w	r1, r4, #12
 8007162:	0092      	lsls	r2, r2, #2
 8007164:	300c      	adds	r0, #12
 8007166:	f7ff ff59 	bl	800701c <memcpy>
 800716a:	4621      	mov	r1, r4
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff ffa3 	bl	80070b8 <_Bfree>
 8007172:	462c      	mov	r4, r5
 8007174:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007178:	3601      	adds	r6, #1
 800717a:	f8c3 8014 	str.w	r8, [r3, #20]
 800717e:	6126      	str	r6, [r4, #16]
 8007180:	4620      	mov	r0, r4
 8007182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007186:	bf00      	nop
 8007188:	08008673 	.word	0x08008673
 800718c:	080086e4 	.word	0x080086e4

08007190 <__hi0bits>:
 8007190:	0c03      	lsrs	r3, r0, #16
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	b9d3      	cbnz	r3, 80071cc <__hi0bits+0x3c>
 8007196:	0400      	lsls	r0, r0, #16
 8007198:	2310      	movs	r3, #16
 800719a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800719e:	bf04      	itt	eq
 80071a0:	0200      	lsleq	r0, r0, #8
 80071a2:	3308      	addeq	r3, #8
 80071a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071a8:	bf04      	itt	eq
 80071aa:	0100      	lsleq	r0, r0, #4
 80071ac:	3304      	addeq	r3, #4
 80071ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071b2:	bf04      	itt	eq
 80071b4:	0080      	lsleq	r0, r0, #2
 80071b6:	3302      	addeq	r3, #2
 80071b8:	2800      	cmp	r0, #0
 80071ba:	db05      	blt.n	80071c8 <__hi0bits+0x38>
 80071bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071c0:	f103 0301 	add.w	r3, r3, #1
 80071c4:	bf08      	it	eq
 80071c6:	2320      	moveq	r3, #32
 80071c8:	4618      	mov	r0, r3
 80071ca:	4770      	bx	lr
 80071cc:	2300      	movs	r3, #0
 80071ce:	e7e4      	b.n	800719a <__hi0bits+0xa>

080071d0 <__lo0bits>:
 80071d0:	6803      	ldr	r3, [r0, #0]
 80071d2:	f013 0207 	ands.w	r2, r3, #7
 80071d6:	4601      	mov	r1, r0
 80071d8:	d00b      	beq.n	80071f2 <__lo0bits+0x22>
 80071da:	07da      	lsls	r2, r3, #31
 80071dc:	d424      	bmi.n	8007228 <__lo0bits+0x58>
 80071de:	0798      	lsls	r0, r3, #30
 80071e0:	bf49      	itett	mi
 80071e2:	085b      	lsrmi	r3, r3, #1
 80071e4:	089b      	lsrpl	r3, r3, #2
 80071e6:	2001      	movmi	r0, #1
 80071e8:	600b      	strmi	r3, [r1, #0]
 80071ea:	bf5c      	itt	pl
 80071ec:	600b      	strpl	r3, [r1, #0]
 80071ee:	2002      	movpl	r0, #2
 80071f0:	4770      	bx	lr
 80071f2:	b298      	uxth	r0, r3
 80071f4:	b9b0      	cbnz	r0, 8007224 <__lo0bits+0x54>
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	2010      	movs	r0, #16
 80071fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071fe:	bf04      	itt	eq
 8007200:	0a1b      	lsreq	r3, r3, #8
 8007202:	3008      	addeq	r0, #8
 8007204:	071a      	lsls	r2, r3, #28
 8007206:	bf04      	itt	eq
 8007208:	091b      	lsreq	r3, r3, #4
 800720a:	3004      	addeq	r0, #4
 800720c:	079a      	lsls	r2, r3, #30
 800720e:	bf04      	itt	eq
 8007210:	089b      	lsreq	r3, r3, #2
 8007212:	3002      	addeq	r0, #2
 8007214:	07da      	lsls	r2, r3, #31
 8007216:	d403      	bmi.n	8007220 <__lo0bits+0x50>
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	f100 0001 	add.w	r0, r0, #1
 800721e:	d005      	beq.n	800722c <__lo0bits+0x5c>
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	4770      	bx	lr
 8007224:	4610      	mov	r0, r2
 8007226:	e7e8      	b.n	80071fa <__lo0bits+0x2a>
 8007228:	2000      	movs	r0, #0
 800722a:	4770      	bx	lr
 800722c:	2020      	movs	r0, #32
 800722e:	4770      	bx	lr

08007230 <__i2b>:
 8007230:	b510      	push	{r4, lr}
 8007232:	460c      	mov	r4, r1
 8007234:	2101      	movs	r1, #1
 8007236:	f7ff feff 	bl	8007038 <_Balloc>
 800723a:	4602      	mov	r2, r0
 800723c:	b928      	cbnz	r0, 800724a <__i2b+0x1a>
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <__i2b+0x24>)
 8007240:	4805      	ldr	r0, [pc, #20]	; (8007258 <__i2b+0x28>)
 8007242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007246:	f000 ff0b 	bl	8008060 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	6144      	str	r4, [r0, #20]
 800724e:	6103      	str	r3, [r0, #16]
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	08008673 	.word	0x08008673
 8007258:	080086e4 	.word	0x080086e4

0800725c <__multiply>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4614      	mov	r4, r2
 8007262:	690a      	ldr	r2, [r1, #16]
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	bfb8      	it	lt
 800726a:	460b      	movlt	r3, r1
 800726c:	460d      	mov	r5, r1
 800726e:	bfbc      	itt	lt
 8007270:	4625      	movlt	r5, r4
 8007272:	461c      	movlt	r4, r3
 8007274:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007278:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800727c:	68ab      	ldr	r3, [r5, #8]
 800727e:	6869      	ldr	r1, [r5, #4]
 8007280:	eb0a 0709 	add.w	r7, sl, r9
 8007284:	42bb      	cmp	r3, r7
 8007286:	b085      	sub	sp, #20
 8007288:	bfb8      	it	lt
 800728a:	3101      	addlt	r1, #1
 800728c:	f7ff fed4 	bl	8007038 <_Balloc>
 8007290:	b930      	cbnz	r0, 80072a0 <__multiply+0x44>
 8007292:	4602      	mov	r2, r0
 8007294:	4b42      	ldr	r3, [pc, #264]	; (80073a0 <__multiply+0x144>)
 8007296:	4843      	ldr	r0, [pc, #268]	; (80073a4 <__multiply+0x148>)
 8007298:	f240 115d 	movw	r1, #349	; 0x15d
 800729c:	f000 fee0 	bl	8008060 <__assert_func>
 80072a0:	f100 0614 	add.w	r6, r0, #20
 80072a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80072a8:	4633      	mov	r3, r6
 80072aa:	2200      	movs	r2, #0
 80072ac:	4543      	cmp	r3, r8
 80072ae:	d31e      	bcc.n	80072ee <__multiply+0x92>
 80072b0:	f105 0c14 	add.w	ip, r5, #20
 80072b4:	f104 0314 	add.w	r3, r4, #20
 80072b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80072bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80072c0:	9202      	str	r2, [sp, #8]
 80072c2:	ebac 0205 	sub.w	r2, ip, r5
 80072c6:	3a15      	subs	r2, #21
 80072c8:	f022 0203 	bic.w	r2, r2, #3
 80072cc:	3204      	adds	r2, #4
 80072ce:	f105 0115 	add.w	r1, r5, #21
 80072d2:	458c      	cmp	ip, r1
 80072d4:	bf38      	it	cc
 80072d6:	2204      	movcc	r2, #4
 80072d8:	9201      	str	r2, [sp, #4]
 80072da:	9a02      	ldr	r2, [sp, #8]
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d808      	bhi.n	80072f4 <__multiply+0x98>
 80072e2:	2f00      	cmp	r7, #0
 80072e4:	dc55      	bgt.n	8007392 <__multiply+0x136>
 80072e6:	6107      	str	r7, [r0, #16]
 80072e8:	b005      	add	sp, #20
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ee:	f843 2b04 	str.w	r2, [r3], #4
 80072f2:	e7db      	b.n	80072ac <__multiply+0x50>
 80072f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	d020      	beq.n	8007340 <__multiply+0xe4>
 80072fe:	f105 0e14 	add.w	lr, r5, #20
 8007302:	46b1      	mov	r9, r6
 8007304:	2200      	movs	r2, #0
 8007306:	f85e 4b04 	ldr.w	r4, [lr], #4
 800730a:	f8d9 b000 	ldr.w	fp, [r9]
 800730e:	b2a1      	uxth	r1, r4
 8007310:	fa1f fb8b 	uxth.w	fp, fp
 8007314:	fb0a b101 	mla	r1, sl, r1, fp
 8007318:	4411      	add	r1, r2
 800731a:	f8d9 2000 	ldr.w	r2, [r9]
 800731e:	0c24      	lsrs	r4, r4, #16
 8007320:	0c12      	lsrs	r2, r2, #16
 8007322:	fb0a 2404 	mla	r4, sl, r4, r2
 8007326:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800732a:	b289      	uxth	r1, r1
 800732c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007330:	45f4      	cmp	ip, lr
 8007332:	f849 1b04 	str.w	r1, [r9], #4
 8007336:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800733a:	d8e4      	bhi.n	8007306 <__multiply+0xaa>
 800733c:	9901      	ldr	r1, [sp, #4]
 800733e:	5072      	str	r2, [r6, r1]
 8007340:	9a03      	ldr	r2, [sp, #12]
 8007342:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007346:	3304      	adds	r3, #4
 8007348:	f1b9 0f00 	cmp.w	r9, #0
 800734c:	d01f      	beq.n	800738e <__multiply+0x132>
 800734e:	6834      	ldr	r4, [r6, #0]
 8007350:	f105 0114 	add.w	r1, r5, #20
 8007354:	46b6      	mov	lr, r6
 8007356:	f04f 0a00 	mov.w	sl, #0
 800735a:	880a      	ldrh	r2, [r1, #0]
 800735c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007360:	fb09 b202 	mla	r2, r9, r2, fp
 8007364:	4492      	add	sl, r2
 8007366:	b2a4      	uxth	r4, r4
 8007368:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800736c:	f84e 4b04 	str.w	r4, [lr], #4
 8007370:	f851 4b04 	ldr.w	r4, [r1], #4
 8007374:	f8be 2000 	ldrh.w	r2, [lr]
 8007378:	0c24      	lsrs	r4, r4, #16
 800737a:	fb09 2404 	mla	r4, r9, r4, r2
 800737e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007382:	458c      	cmp	ip, r1
 8007384:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007388:	d8e7      	bhi.n	800735a <__multiply+0xfe>
 800738a:	9a01      	ldr	r2, [sp, #4]
 800738c:	50b4      	str	r4, [r6, r2]
 800738e:	3604      	adds	r6, #4
 8007390:	e7a3      	b.n	80072da <__multiply+0x7e>
 8007392:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1a5      	bne.n	80072e6 <__multiply+0x8a>
 800739a:	3f01      	subs	r7, #1
 800739c:	e7a1      	b.n	80072e2 <__multiply+0x86>
 800739e:	bf00      	nop
 80073a0:	08008673 	.word	0x08008673
 80073a4:	080086e4 	.word	0x080086e4

080073a8 <__pow5mult>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	4615      	mov	r5, r2
 80073ae:	f012 0203 	ands.w	r2, r2, #3
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	d007      	beq.n	80073c8 <__pow5mult+0x20>
 80073b8:	4c25      	ldr	r4, [pc, #148]	; (8007450 <__pow5mult+0xa8>)
 80073ba:	3a01      	subs	r2, #1
 80073bc:	2300      	movs	r3, #0
 80073be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073c2:	f7ff fe9b 	bl	80070fc <__multadd>
 80073c6:	4607      	mov	r7, r0
 80073c8:	10ad      	asrs	r5, r5, #2
 80073ca:	d03d      	beq.n	8007448 <__pow5mult+0xa0>
 80073cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ce:	b97c      	cbnz	r4, 80073f0 <__pow5mult+0x48>
 80073d0:	2010      	movs	r0, #16
 80073d2:	f7ff fe1b 	bl	800700c <malloc>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6270      	str	r0, [r6, #36]	; 0x24
 80073da:	b928      	cbnz	r0, 80073e8 <__pow5mult+0x40>
 80073dc:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <__pow5mult+0xac>)
 80073de:	481e      	ldr	r0, [pc, #120]	; (8007458 <__pow5mult+0xb0>)
 80073e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073e4:	f000 fe3c 	bl	8008060 <__assert_func>
 80073e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073ec:	6004      	str	r4, [r0, #0]
 80073ee:	60c4      	str	r4, [r0, #12]
 80073f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073f8:	b94c      	cbnz	r4, 800740e <__pow5mult+0x66>
 80073fa:	f240 2171 	movw	r1, #625	; 0x271
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ff16 	bl	8007230 <__i2b>
 8007404:	2300      	movs	r3, #0
 8007406:	f8c8 0008 	str.w	r0, [r8, #8]
 800740a:	4604      	mov	r4, r0
 800740c:	6003      	str	r3, [r0, #0]
 800740e:	f04f 0900 	mov.w	r9, #0
 8007412:	07eb      	lsls	r3, r5, #31
 8007414:	d50a      	bpl.n	800742c <__pow5mult+0x84>
 8007416:	4639      	mov	r1, r7
 8007418:	4622      	mov	r2, r4
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff ff1e 	bl	800725c <__multiply>
 8007420:	4639      	mov	r1, r7
 8007422:	4680      	mov	r8, r0
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff fe47 	bl	80070b8 <_Bfree>
 800742a:	4647      	mov	r7, r8
 800742c:	106d      	asrs	r5, r5, #1
 800742e:	d00b      	beq.n	8007448 <__pow5mult+0xa0>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	b938      	cbnz	r0, 8007444 <__pow5mult+0x9c>
 8007434:	4622      	mov	r2, r4
 8007436:	4621      	mov	r1, r4
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff ff0f 	bl	800725c <__multiply>
 800743e:	6020      	str	r0, [r4, #0]
 8007440:	f8c0 9000 	str.w	r9, [r0]
 8007444:	4604      	mov	r4, r0
 8007446:	e7e4      	b.n	8007412 <__pow5mult+0x6a>
 8007448:	4638      	mov	r0, r7
 800744a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744e:	bf00      	nop
 8007450:	08008838 	.word	0x08008838
 8007454:	080085fd 	.word	0x080085fd
 8007458:	080086e4 	.word	0x080086e4

0800745c <__lshift>:
 800745c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007460:	460c      	mov	r4, r1
 8007462:	6849      	ldr	r1, [r1, #4]
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	4607      	mov	r7, r0
 800746e:	4691      	mov	r9, r2
 8007470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007474:	f108 0601 	add.w	r6, r8, #1
 8007478:	42b3      	cmp	r3, r6
 800747a:	db0b      	blt.n	8007494 <__lshift+0x38>
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff fddb 	bl	8007038 <_Balloc>
 8007482:	4605      	mov	r5, r0
 8007484:	b948      	cbnz	r0, 800749a <__lshift+0x3e>
 8007486:	4602      	mov	r2, r0
 8007488:	4b28      	ldr	r3, [pc, #160]	; (800752c <__lshift+0xd0>)
 800748a:	4829      	ldr	r0, [pc, #164]	; (8007530 <__lshift+0xd4>)
 800748c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007490:	f000 fde6 	bl	8008060 <__assert_func>
 8007494:	3101      	adds	r1, #1
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	e7ee      	b.n	8007478 <__lshift+0x1c>
 800749a:	2300      	movs	r3, #0
 800749c:	f100 0114 	add.w	r1, r0, #20
 80074a0:	f100 0210 	add.w	r2, r0, #16
 80074a4:	4618      	mov	r0, r3
 80074a6:	4553      	cmp	r3, sl
 80074a8:	db33      	blt.n	8007512 <__lshift+0xb6>
 80074aa:	6920      	ldr	r0, [r4, #16]
 80074ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	f019 091f 	ands.w	r9, r9, #31
 80074b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074c0:	d02b      	beq.n	800751a <__lshift+0xbe>
 80074c2:	f1c9 0e20 	rsb	lr, r9, #32
 80074c6:	468a      	mov	sl, r1
 80074c8:	2200      	movs	r2, #0
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	fa00 f009 	lsl.w	r0, r0, r9
 80074d0:	4302      	orrs	r2, r0
 80074d2:	f84a 2b04 	str.w	r2, [sl], #4
 80074d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074da:	459c      	cmp	ip, r3
 80074dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80074e0:	d8f3      	bhi.n	80074ca <__lshift+0x6e>
 80074e2:	ebac 0304 	sub.w	r3, ip, r4
 80074e6:	3b15      	subs	r3, #21
 80074e8:	f023 0303 	bic.w	r3, r3, #3
 80074ec:	3304      	adds	r3, #4
 80074ee:	f104 0015 	add.w	r0, r4, #21
 80074f2:	4584      	cmp	ip, r0
 80074f4:	bf38      	it	cc
 80074f6:	2304      	movcc	r3, #4
 80074f8:	50ca      	str	r2, [r1, r3]
 80074fa:	b10a      	cbz	r2, 8007500 <__lshift+0xa4>
 80074fc:	f108 0602 	add.w	r6, r8, #2
 8007500:	3e01      	subs	r6, #1
 8007502:	4638      	mov	r0, r7
 8007504:	612e      	str	r6, [r5, #16]
 8007506:	4621      	mov	r1, r4
 8007508:	f7ff fdd6 	bl	80070b8 <_Bfree>
 800750c:	4628      	mov	r0, r5
 800750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007512:	f842 0f04 	str.w	r0, [r2, #4]!
 8007516:	3301      	adds	r3, #1
 8007518:	e7c5      	b.n	80074a6 <__lshift+0x4a>
 800751a:	3904      	subs	r1, #4
 800751c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007520:	f841 2f04 	str.w	r2, [r1, #4]!
 8007524:	459c      	cmp	ip, r3
 8007526:	d8f9      	bhi.n	800751c <__lshift+0xc0>
 8007528:	e7ea      	b.n	8007500 <__lshift+0xa4>
 800752a:	bf00      	nop
 800752c:	08008673 	.word	0x08008673
 8007530:	080086e4 	.word	0x080086e4

08007534 <__mcmp>:
 8007534:	b530      	push	{r4, r5, lr}
 8007536:	6902      	ldr	r2, [r0, #16]
 8007538:	690c      	ldr	r4, [r1, #16]
 800753a:	1b12      	subs	r2, r2, r4
 800753c:	d10e      	bne.n	800755c <__mcmp+0x28>
 800753e:	f100 0314 	add.w	r3, r0, #20
 8007542:	3114      	adds	r1, #20
 8007544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800754c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007554:	42a5      	cmp	r5, r4
 8007556:	d003      	beq.n	8007560 <__mcmp+0x2c>
 8007558:	d305      	bcc.n	8007566 <__mcmp+0x32>
 800755a:	2201      	movs	r2, #1
 800755c:	4610      	mov	r0, r2
 800755e:	bd30      	pop	{r4, r5, pc}
 8007560:	4283      	cmp	r3, r0
 8007562:	d3f3      	bcc.n	800754c <__mcmp+0x18>
 8007564:	e7fa      	b.n	800755c <__mcmp+0x28>
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	e7f7      	b.n	800755c <__mcmp+0x28>

0800756c <__mdiff>:
 800756c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	4606      	mov	r6, r0
 8007574:	4611      	mov	r1, r2
 8007576:	4620      	mov	r0, r4
 8007578:	4617      	mov	r7, r2
 800757a:	f7ff ffdb 	bl	8007534 <__mcmp>
 800757e:	1e05      	subs	r5, r0, #0
 8007580:	d110      	bne.n	80075a4 <__mdiff+0x38>
 8007582:	4629      	mov	r1, r5
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff fd57 	bl	8007038 <_Balloc>
 800758a:	b930      	cbnz	r0, 800759a <__mdiff+0x2e>
 800758c:	4b39      	ldr	r3, [pc, #228]	; (8007674 <__mdiff+0x108>)
 800758e:	4602      	mov	r2, r0
 8007590:	f240 2132 	movw	r1, #562	; 0x232
 8007594:	4838      	ldr	r0, [pc, #224]	; (8007678 <__mdiff+0x10c>)
 8007596:	f000 fd63 	bl	8008060 <__assert_func>
 800759a:	2301      	movs	r3, #1
 800759c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	bfa4      	itt	ge
 80075a6:	463b      	movge	r3, r7
 80075a8:	4627      	movge	r7, r4
 80075aa:	4630      	mov	r0, r6
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	bfa6      	itte	ge
 80075b0:	461c      	movge	r4, r3
 80075b2:	2500      	movge	r5, #0
 80075b4:	2501      	movlt	r5, #1
 80075b6:	f7ff fd3f 	bl	8007038 <_Balloc>
 80075ba:	b920      	cbnz	r0, 80075c6 <__mdiff+0x5a>
 80075bc:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <__mdiff+0x108>)
 80075be:	4602      	mov	r2, r0
 80075c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075c4:	e7e6      	b.n	8007594 <__mdiff+0x28>
 80075c6:	693e      	ldr	r6, [r7, #16]
 80075c8:	60c5      	str	r5, [r0, #12]
 80075ca:	6925      	ldr	r5, [r4, #16]
 80075cc:	f107 0114 	add.w	r1, r7, #20
 80075d0:	f104 0914 	add.w	r9, r4, #20
 80075d4:	f100 0e14 	add.w	lr, r0, #20
 80075d8:	f107 0210 	add.w	r2, r7, #16
 80075dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80075e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80075e4:	46f2      	mov	sl, lr
 80075e6:	2700      	movs	r7, #0
 80075e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80075ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075f0:	fa1f f883 	uxth.w	r8, r3
 80075f4:	fa17 f78b 	uxtah	r7, r7, fp
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	eba7 0808 	sub.w	r8, r7, r8
 80075fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007606:	fa1f f888 	uxth.w	r8, r8
 800760a:	141f      	asrs	r7, r3, #16
 800760c:	454d      	cmp	r5, r9
 800760e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007612:	f84a 3b04 	str.w	r3, [sl], #4
 8007616:	d8e7      	bhi.n	80075e8 <__mdiff+0x7c>
 8007618:	1b2b      	subs	r3, r5, r4
 800761a:	3b15      	subs	r3, #21
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	3304      	adds	r3, #4
 8007622:	3415      	adds	r4, #21
 8007624:	42a5      	cmp	r5, r4
 8007626:	bf38      	it	cc
 8007628:	2304      	movcc	r3, #4
 800762a:	4419      	add	r1, r3
 800762c:	4473      	add	r3, lr
 800762e:	469e      	mov	lr, r3
 8007630:	460d      	mov	r5, r1
 8007632:	4565      	cmp	r5, ip
 8007634:	d30e      	bcc.n	8007654 <__mdiff+0xe8>
 8007636:	f10c 0203 	add.w	r2, ip, #3
 800763a:	1a52      	subs	r2, r2, r1
 800763c:	f022 0203 	bic.w	r2, r2, #3
 8007640:	3903      	subs	r1, #3
 8007642:	458c      	cmp	ip, r1
 8007644:	bf38      	it	cc
 8007646:	2200      	movcc	r2, #0
 8007648:	441a      	add	r2, r3
 800764a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800764e:	b17b      	cbz	r3, 8007670 <__mdiff+0x104>
 8007650:	6106      	str	r6, [r0, #16]
 8007652:	e7a5      	b.n	80075a0 <__mdiff+0x34>
 8007654:	f855 8b04 	ldr.w	r8, [r5], #4
 8007658:	fa17 f488 	uxtah	r4, r7, r8
 800765c:	1422      	asrs	r2, r4, #16
 800765e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007662:	b2a4      	uxth	r4, r4
 8007664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007668:	f84e 4b04 	str.w	r4, [lr], #4
 800766c:	1417      	asrs	r7, r2, #16
 800766e:	e7e0      	b.n	8007632 <__mdiff+0xc6>
 8007670:	3e01      	subs	r6, #1
 8007672:	e7ea      	b.n	800764a <__mdiff+0xde>
 8007674:	08008673 	.word	0x08008673
 8007678:	080086e4 	.word	0x080086e4

0800767c <__d2b>:
 800767c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007680:	4689      	mov	r9, r1
 8007682:	2101      	movs	r1, #1
 8007684:	ec57 6b10 	vmov	r6, r7, d0
 8007688:	4690      	mov	r8, r2
 800768a:	f7ff fcd5 	bl	8007038 <_Balloc>
 800768e:	4604      	mov	r4, r0
 8007690:	b930      	cbnz	r0, 80076a0 <__d2b+0x24>
 8007692:	4602      	mov	r2, r0
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <__d2b+0xb0>)
 8007696:	4826      	ldr	r0, [pc, #152]	; (8007730 <__d2b+0xb4>)
 8007698:	f240 310a 	movw	r1, #778	; 0x30a
 800769c:	f000 fce0 	bl	8008060 <__assert_func>
 80076a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076a8:	bb35      	cbnz	r5, 80076f8 <__d2b+0x7c>
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	d028      	beq.n	8007702 <__d2b+0x86>
 80076b0:	4668      	mov	r0, sp
 80076b2:	9600      	str	r6, [sp, #0]
 80076b4:	f7ff fd8c 	bl	80071d0 <__lo0bits>
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	b300      	cbz	r0, 80076fe <__d2b+0x82>
 80076bc:	9a01      	ldr	r2, [sp, #4]
 80076be:	f1c0 0320 	rsb	r3, r0, #32
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	430b      	orrs	r3, r1
 80076c8:	40c2      	lsrs	r2, r0
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	61a3      	str	r3, [r4, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2202      	movne	r2, #2
 80076d8:	2201      	moveq	r2, #1
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	b1d5      	cbz	r5, 8007714 <__d2b+0x98>
 80076de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076e2:	4405      	add	r5, r0
 80076e4:	f8c9 5000 	str.w	r5, [r9]
 80076e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076ec:	f8c8 0000 	str.w	r0, [r8]
 80076f0:	4620      	mov	r0, r4
 80076f2:	b003      	add	sp, #12
 80076f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fc:	e7d5      	b.n	80076aa <__d2b+0x2e>
 80076fe:	6161      	str	r1, [r4, #20]
 8007700:	e7e5      	b.n	80076ce <__d2b+0x52>
 8007702:	a801      	add	r0, sp, #4
 8007704:	f7ff fd64 	bl	80071d0 <__lo0bits>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	6163      	str	r3, [r4, #20]
 800770c:	2201      	movs	r2, #1
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	3020      	adds	r0, #32
 8007712:	e7e3      	b.n	80076dc <__d2b+0x60>
 8007714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800771c:	f8c9 0000 	str.w	r0, [r9]
 8007720:	6918      	ldr	r0, [r3, #16]
 8007722:	f7ff fd35 	bl	8007190 <__hi0bits>
 8007726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800772a:	e7df      	b.n	80076ec <__d2b+0x70>
 800772c:	08008673 	.word	0x08008673
 8007730:	080086e4 	.word	0x080086e4

08007734 <_calloc_r>:
 8007734:	b513      	push	{r0, r1, r4, lr}
 8007736:	434a      	muls	r2, r1
 8007738:	4611      	mov	r1, r2
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	f000 f85a 	bl	80077f4 <_malloc_r>
 8007740:	4604      	mov	r4, r0
 8007742:	b118      	cbz	r0, 800774c <_calloc_r+0x18>
 8007744:	9a01      	ldr	r2, [sp, #4]
 8007746:	2100      	movs	r1, #0
 8007748:	f7fe f83e 	bl	80057c8 <memset>
 800774c:	4620      	mov	r0, r4
 800774e:	b002      	add	sp, #8
 8007750:	bd10      	pop	{r4, pc}
	...

08007754 <_free_r>:
 8007754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007756:	2900      	cmp	r1, #0
 8007758:	d048      	beq.n	80077ec <_free_r+0x98>
 800775a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775e:	9001      	str	r0, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f1a1 0404 	sub.w	r4, r1, #4
 8007766:	bfb8      	it	lt
 8007768:	18e4      	addlt	r4, r4, r3
 800776a:	f000 fe1d 	bl	80083a8 <__malloc_lock>
 800776e:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <_free_r+0x9c>)
 8007770:	9801      	ldr	r0, [sp, #4]
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	4615      	mov	r5, r2
 8007776:	b933      	cbnz	r3, 8007786 <_free_r+0x32>
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	6014      	str	r4, [r2, #0]
 800777c:	b003      	add	sp, #12
 800777e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007782:	f000 be17 	b.w	80083b4 <__malloc_unlock>
 8007786:	42a3      	cmp	r3, r4
 8007788:	d90b      	bls.n	80077a2 <_free_r+0x4e>
 800778a:	6821      	ldr	r1, [r4, #0]
 800778c:	1862      	adds	r2, r4, r1
 800778e:	4293      	cmp	r3, r2
 8007790:	bf04      	itt	eq
 8007792:	681a      	ldreq	r2, [r3, #0]
 8007794:	685b      	ldreq	r3, [r3, #4]
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	bf04      	itt	eq
 800779a:	1852      	addeq	r2, r2, r1
 800779c:	6022      	streq	r2, [r4, #0]
 800779e:	602c      	str	r4, [r5, #0]
 80077a0:	e7ec      	b.n	800777c <_free_r+0x28>
 80077a2:	461a      	mov	r2, r3
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b10b      	cbz	r3, 80077ac <_free_r+0x58>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d9fa      	bls.n	80077a2 <_free_r+0x4e>
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	1855      	adds	r5, r2, r1
 80077b0:	42a5      	cmp	r5, r4
 80077b2:	d10b      	bne.n	80077cc <_free_r+0x78>
 80077b4:	6824      	ldr	r4, [r4, #0]
 80077b6:	4421      	add	r1, r4
 80077b8:	1854      	adds	r4, r2, r1
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	d1dd      	bne.n	800777c <_free_r+0x28>
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	4421      	add	r1, r4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	e7d7      	b.n	800777c <_free_r+0x28>
 80077cc:	d902      	bls.n	80077d4 <_free_r+0x80>
 80077ce:	230c      	movs	r3, #12
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	e7d3      	b.n	800777c <_free_r+0x28>
 80077d4:	6825      	ldr	r5, [r4, #0]
 80077d6:	1961      	adds	r1, r4, r5
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf04      	itt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	bf04      	itt	eq
 80077e4:	1949      	addeq	r1, r1, r5
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	6054      	str	r4, [r2, #4]
 80077ea:	e7c7      	b.n	800777c <_free_r+0x28>
 80077ec:	b003      	add	sp, #12
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	20000254 	.word	0x20000254

080077f4 <_malloc_r>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	1ccd      	adds	r5, r1, #3
 80077f8:	f025 0503 	bic.w	r5, r5, #3
 80077fc:	3508      	adds	r5, #8
 80077fe:	2d0c      	cmp	r5, #12
 8007800:	bf38      	it	cc
 8007802:	250c      	movcc	r5, #12
 8007804:	2d00      	cmp	r5, #0
 8007806:	4606      	mov	r6, r0
 8007808:	db01      	blt.n	800780e <_malloc_r+0x1a>
 800780a:	42a9      	cmp	r1, r5
 800780c:	d903      	bls.n	8007816 <_malloc_r+0x22>
 800780e:	230c      	movs	r3, #12
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	2000      	movs	r0, #0
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007816:	f000 fdc7 	bl	80083a8 <__malloc_lock>
 800781a:	4921      	ldr	r1, [pc, #132]	; (80078a0 <_malloc_r+0xac>)
 800781c:	680a      	ldr	r2, [r1, #0]
 800781e:	4614      	mov	r4, r2
 8007820:	b99c      	cbnz	r4, 800784a <_malloc_r+0x56>
 8007822:	4f20      	ldr	r7, [pc, #128]	; (80078a4 <_malloc_r+0xb0>)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	b923      	cbnz	r3, 8007832 <_malloc_r+0x3e>
 8007828:	4621      	mov	r1, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f000 faf2 	bl	8007e14 <_sbrk_r>
 8007830:	6038      	str	r0, [r7, #0]
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f000 faed 	bl	8007e14 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d123      	bne.n	8007886 <_malloc_r+0x92>
 800783e:	230c      	movs	r3, #12
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	4630      	mov	r0, r6
 8007844:	f000 fdb6 	bl	80083b4 <__malloc_unlock>
 8007848:	e7e3      	b.n	8007812 <_malloc_r+0x1e>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	1b5b      	subs	r3, r3, r5
 800784e:	d417      	bmi.n	8007880 <_malloc_r+0x8c>
 8007850:	2b0b      	cmp	r3, #11
 8007852:	d903      	bls.n	800785c <_malloc_r+0x68>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	441c      	add	r4, r3
 8007858:	6025      	str	r5, [r4, #0]
 800785a:	e004      	b.n	8007866 <_malloc_r+0x72>
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	42a2      	cmp	r2, r4
 8007860:	bf0c      	ite	eq
 8007862:	600b      	streq	r3, [r1, #0]
 8007864:	6053      	strne	r3, [r2, #4]
 8007866:	4630      	mov	r0, r6
 8007868:	f000 fda4 	bl	80083b4 <__malloc_unlock>
 800786c:	f104 000b 	add.w	r0, r4, #11
 8007870:	1d23      	adds	r3, r4, #4
 8007872:	f020 0007 	bic.w	r0, r0, #7
 8007876:	1ac2      	subs	r2, r0, r3
 8007878:	d0cc      	beq.n	8007814 <_malloc_r+0x20>
 800787a:	1a1b      	subs	r3, r3, r0
 800787c:	50a3      	str	r3, [r4, r2]
 800787e:	e7c9      	b.n	8007814 <_malloc_r+0x20>
 8007880:	4622      	mov	r2, r4
 8007882:	6864      	ldr	r4, [r4, #4]
 8007884:	e7cc      	b.n	8007820 <_malloc_r+0x2c>
 8007886:	1cc4      	adds	r4, r0, #3
 8007888:	f024 0403 	bic.w	r4, r4, #3
 800788c:	42a0      	cmp	r0, r4
 800788e:	d0e3      	beq.n	8007858 <_malloc_r+0x64>
 8007890:	1a21      	subs	r1, r4, r0
 8007892:	4630      	mov	r0, r6
 8007894:	f000 fabe 	bl	8007e14 <_sbrk_r>
 8007898:	3001      	adds	r0, #1
 800789a:	d1dd      	bne.n	8007858 <_malloc_r+0x64>
 800789c:	e7cf      	b.n	800783e <_malloc_r+0x4a>
 800789e:	bf00      	nop
 80078a0:	20000254 	.word	0x20000254
 80078a4:	20000258 	.word	0x20000258

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	429e      	cmp	r6, r3
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	461f      	mov	r7, r3
 80078b8:	d838      	bhi.n	800792c <__ssputs_r+0x84>
 80078ba:	898a      	ldrh	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c0:	d032      	beq.n	8007928 <__ssputs_r+0x80>
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	eba5 0901 	sub.w	r9, r5, r1
 80078ca:	6965      	ldr	r5, [r4, #20]
 80078cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d4:	3301      	adds	r3, #1
 80078d6:	444b      	add	r3, r9
 80078d8:	106d      	asrs	r5, r5, #1
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d531      	bpl.n	8007948 <__ssputs_r+0xa0>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7ff ff85 	bl	80077f4 <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b950      	cbnz	r0, 8007904 <__ssputs_r+0x5c>
 80078ee:	230c      	movs	r3, #12
 80078f0:	f8ca 3000 	str.w	r3, [sl]
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	6921      	ldr	r1, [r4, #16]
 8007906:	464a      	mov	r2, r9
 8007908:	f7ff fb88 	bl	800701c <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	6165      	str	r5, [r4, #20]
 800791c:	444e      	add	r6, r9
 800791e:	eba5 0509 	sub.w	r5, r5, r9
 8007922:	6026      	str	r6, [r4, #0]
 8007924:	60a5      	str	r5, [r4, #8]
 8007926:	463e      	mov	r6, r7
 8007928:	42be      	cmp	r6, r7
 800792a:	d900      	bls.n	800792e <__ssputs_r+0x86>
 800792c:	463e      	mov	r6, r7
 800792e:	4632      	mov	r2, r6
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	4641      	mov	r1, r8
 8007934:	f000 fd1e 	bl	8008374 <memmove>
 8007938:	68a3      	ldr	r3, [r4, #8]
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	1b9b      	subs	r3, r3, r6
 800793e:	4432      	add	r2, r6
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	2000      	movs	r0, #0
 8007946:	e7db      	b.n	8007900 <__ssputs_r+0x58>
 8007948:	462a      	mov	r2, r5
 800794a:	f000 fd39 	bl	80083c0 <_realloc_r>
 800794e:	4606      	mov	r6, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	d1e1      	bne.n	8007918 <__ssputs_r+0x70>
 8007954:	6921      	ldr	r1, [r4, #16]
 8007956:	4650      	mov	r0, sl
 8007958:	f7ff fefc 	bl	8007754 <_free_r>
 800795c:	e7c7      	b.n	80078ee <__ssputs_r+0x46>
	...

08007960 <_svfiprintf_r>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	4698      	mov	r8, r3
 8007966:	898b      	ldrh	r3, [r1, #12]
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	b09d      	sub	sp, #116	; 0x74
 800796c:	4607      	mov	r7, r0
 800796e:	460d      	mov	r5, r1
 8007970:	4614      	mov	r4, r2
 8007972:	d50e      	bpl.n	8007992 <_svfiprintf_r+0x32>
 8007974:	690b      	ldr	r3, [r1, #16]
 8007976:	b963      	cbnz	r3, 8007992 <_svfiprintf_r+0x32>
 8007978:	2140      	movs	r1, #64	; 0x40
 800797a:	f7ff ff3b 	bl	80077f4 <_malloc_r>
 800797e:	6028      	str	r0, [r5, #0]
 8007980:	6128      	str	r0, [r5, #16]
 8007982:	b920      	cbnz	r0, 800798e <_svfiprintf_r+0x2e>
 8007984:	230c      	movs	r3, #12
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e0d1      	b.n	8007b32 <_svfiprintf_r+0x1d2>
 800798e:	2340      	movs	r3, #64	; 0x40
 8007990:	616b      	str	r3, [r5, #20]
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	; 0x24
 8007996:	2320      	movs	r3, #32
 8007998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799c:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a0:	2330      	movs	r3, #48	; 0x30
 80079a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b4c <_svfiprintf_r+0x1ec>
 80079a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079aa:	f04f 0901 	mov.w	r9, #1
 80079ae:	4623      	mov	r3, r4
 80079b0:	469a      	mov	sl, r3
 80079b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b6:	b10a      	cbz	r2, 80079bc <_svfiprintf_r+0x5c>
 80079b8:	2a25      	cmp	r2, #37	; 0x25
 80079ba:	d1f9      	bne.n	80079b0 <_svfiprintf_r+0x50>
 80079bc:	ebba 0b04 	subs.w	fp, sl, r4
 80079c0:	d00b      	beq.n	80079da <_svfiprintf_r+0x7a>
 80079c2:	465b      	mov	r3, fp
 80079c4:	4622      	mov	r2, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ff6d 	bl	80078a8 <__ssputs_r>
 80079ce:	3001      	adds	r0, #1
 80079d0:	f000 80aa 	beq.w	8007b28 <_svfiprintf_r+0x1c8>
 80079d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d6:	445a      	add	r2, fp
 80079d8:	9209      	str	r2, [sp, #36]	; 0x24
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80a2 	beq.w	8007b28 <_svfiprintf_r+0x1c8>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ee:	f10a 0a01 	add.w	sl, sl, #1
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079fa:	931a      	str	r3, [sp, #104]	; 0x68
 80079fc:	4654      	mov	r4, sl
 80079fe:	2205      	movs	r2, #5
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	4851      	ldr	r0, [pc, #324]	; (8007b4c <_svfiprintf_r+0x1ec>)
 8007a06:	f7f8 fc1b 	bl	8000240 <memchr>
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	b9d8      	cbnz	r0, 8007a46 <_svfiprintf_r+0xe6>
 8007a0e:	06d0      	lsls	r0, r2, #27
 8007a10:	bf44      	itt	mi
 8007a12:	2320      	movmi	r3, #32
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a18:	0711      	lsls	r1, r2, #28
 8007a1a:	bf44      	itt	mi
 8007a1c:	232b      	movmi	r3, #43	; 0x2b
 8007a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a22:	f89a 3000 	ldrb.w	r3, [sl]
 8007a26:	2b2a      	cmp	r3, #42	; 0x2a
 8007a28:	d015      	beq.n	8007a56 <_svfiprintf_r+0xf6>
 8007a2a:	9a07      	ldr	r2, [sp, #28]
 8007a2c:	4654      	mov	r4, sl
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f04f 0c0a 	mov.w	ip, #10
 8007a34:	4621      	mov	r1, r4
 8007a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3a:	3b30      	subs	r3, #48	; 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d94e      	bls.n	8007ade <_svfiprintf_r+0x17e>
 8007a40:	b1b0      	cbz	r0, 8007a70 <_svfiprintf_r+0x110>
 8007a42:	9207      	str	r2, [sp, #28]
 8007a44:	e014      	b.n	8007a70 <_svfiprintf_r+0x110>
 8007a46:	eba0 0308 	sub.w	r3, r0, r8
 8007a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	46a2      	mov	sl, r4
 8007a54:	e7d2      	b.n	80079fc <_svfiprintf_r+0x9c>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	1d19      	adds	r1, r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	9103      	str	r1, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbb      	ittet	lt
 8007a62:	425b      	neglt	r3, r3
 8007a64:	f042 0202 	orrlt.w	r2, r2, #2
 8007a68:	9307      	strge	r3, [sp, #28]
 8007a6a:	9307      	strlt	r3, [sp, #28]
 8007a6c:	bfb8      	it	lt
 8007a6e:	9204      	strlt	r2, [sp, #16]
 8007a70:	7823      	ldrb	r3, [r4, #0]
 8007a72:	2b2e      	cmp	r3, #46	; 0x2e
 8007a74:	d10c      	bne.n	8007a90 <_svfiprintf_r+0x130>
 8007a76:	7863      	ldrb	r3, [r4, #1]
 8007a78:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7a:	d135      	bne.n	8007ae8 <_svfiprintf_r+0x188>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9203      	str	r2, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfb8      	it	lt
 8007a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a8c:	3402      	adds	r4, #2
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b5c <_svfiprintf_r+0x1fc>
 8007a94:	7821      	ldrb	r1, [r4, #0]
 8007a96:	2203      	movs	r2, #3
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f7f8 fbd1 	bl	8000240 <memchr>
 8007a9e:	b140      	cbz	r0, 8007ab2 <_svfiprintf_r+0x152>
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	eba0 000a 	sub.w	r0, r0, sl
 8007aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	4303      	orrs	r3, r0
 8007aae:	3401      	adds	r4, #1
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab6:	4826      	ldr	r0, [pc, #152]	; (8007b50 <_svfiprintf_r+0x1f0>)
 8007ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007abc:	2206      	movs	r2, #6
 8007abe:	f7f8 fbbf 	bl	8000240 <memchr>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d038      	beq.n	8007b38 <_svfiprintf_r+0x1d8>
 8007ac6:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <_svfiprintf_r+0x1f4>)
 8007ac8:	bb1b      	cbnz	r3, 8007b12 <_svfiprintf_r+0x1b2>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	3307      	adds	r3, #7
 8007ace:	f023 0307 	bic.w	r3, r3, #7
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad8:	4433      	add	r3, r6
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	e767      	b.n	80079ae <_svfiprintf_r+0x4e>
 8007ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e7a5      	b.n	8007a34 <_svfiprintf_r+0xd4>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	3401      	adds	r4, #1
 8007aec:	9305      	str	r3, [sp, #20]
 8007aee:	4619      	mov	r1, r3
 8007af0:	f04f 0c0a 	mov.w	ip, #10
 8007af4:	4620      	mov	r0, r4
 8007af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afa:	3a30      	subs	r2, #48	; 0x30
 8007afc:	2a09      	cmp	r2, #9
 8007afe:	d903      	bls.n	8007b08 <_svfiprintf_r+0x1a8>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0c5      	beq.n	8007a90 <_svfiprintf_r+0x130>
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	e7c3      	b.n	8007a90 <_svfiprintf_r+0x130>
 8007b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e7f0      	b.n	8007af4 <_svfiprintf_r+0x194>
 8007b12:	ab03      	add	r3, sp, #12
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	462a      	mov	r2, r5
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <_svfiprintf_r+0x1f8>)
 8007b1a:	a904      	add	r1, sp, #16
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7fd fefb 	bl	8005918 <_printf_float>
 8007b22:	1c42      	adds	r2, r0, #1
 8007b24:	4606      	mov	r6, r0
 8007b26:	d1d6      	bne.n	8007ad6 <_svfiprintf_r+0x176>
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	065b      	lsls	r3, r3, #25
 8007b2c:	f53f af2c 	bmi.w	8007988 <_svfiprintf_r+0x28>
 8007b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b32:	b01d      	add	sp, #116	; 0x74
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <_svfiprintf_r+0x1f8>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7fe f98c 	bl	8005e60 <_printf_i>
 8007b48:	e7eb      	b.n	8007b22 <_svfiprintf_r+0x1c2>
 8007b4a:	bf00      	nop
 8007b4c:	08008844 	.word	0x08008844
 8007b50:	0800884e 	.word	0x0800884e
 8007b54:	08005919 	.word	0x08005919
 8007b58:	080078a9 	.word	0x080078a9
 8007b5c:	0800884a 	.word	0x0800884a

08007b60 <__sfputc_r>:
 8007b60:	6893      	ldr	r3, [r2, #8]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	b410      	push	{r4}
 8007b68:	6093      	str	r3, [r2, #8]
 8007b6a:	da08      	bge.n	8007b7e <__sfputc_r+0x1e>
 8007b6c:	6994      	ldr	r4, [r2, #24]
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	db01      	blt.n	8007b76 <__sfputc_r+0x16>
 8007b72:	290a      	cmp	r1, #10
 8007b74:	d103      	bne.n	8007b7e <__sfputc_r+0x1e>
 8007b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b7a:	f000 b99f 	b.w	8007ebc <__swbuf_r>
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	1c58      	adds	r0, r3, #1
 8007b82:	6010      	str	r0, [r2, #0]
 8007b84:	7019      	strb	r1, [r3, #0]
 8007b86:	4608      	mov	r0, r1
 8007b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <__sfputs_r>:
 8007b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b90:	4606      	mov	r6, r0
 8007b92:	460f      	mov	r7, r1
 8007b94:	4614      	mov	r4, r2
 8007b96:	18d5      	adds	r5, r2, r3
 8007b98:	42ac      	cmp	r4, r5
 8007b9a:	d101      	bne.n	8007ba0 <__sfputs_r+0x12>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e007      	b.n	8007bb0 <__sfputs_r+0x22>
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	463a      	mov	r2, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ffda 	bl	8007b60 <__sfputc_r>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d1f3      	bne.n	8007b98 <__sfputs_r+0xa>
 8007bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bb4 <_vfiprintf_r>:
 8007bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	460d      	mov	r5, r1
 8007bba:	b09d      	sub	sp, #116	; 0x74
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	4698      	mov	r8, r3
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	b118      	cbz	r0, 8007bcc <_vfiprintf_r+0x18>
 8007bc4:	6983      	ldr	r3, [r0, #24]
 8007bc6:	b90b      	cbnz	r3, 8007bcc <_vfiprintf_r+0x18>
 8007bc8:	f7ff f97a 	bl	8006ec0 <__sinit>
 8007bcc:	4b89      	ldr	r3, [pc, #548]	; (8007df4 <_vfiprintf_r+0x240>)
 8007bce:	429d      	cmp	r5, r3
 8007bd0:	d11b      	bne.n	8007c0a <_vfiprintf_r+0x56>
 8007bd2:	6875      	ldr	r5, [r6, #4]
 8007bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_vfiprintf_r+0x32>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	059a      	lsls	r2, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_vfiprintf_r+0x32>
 8007be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007be2:	f7ff fa10 	bl	8007006 <__retarget_lock_acquire_recursive>
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	071b      	lsls	r3, r3, #28
 8007bea:	d501      	bpl.n	8007bf0 <_vfiprintf_r+0x3c>
 8007bec:	692b      	ldr	r3, [r5, #16]
 8007bee:	b9eb      	cbnz	r3, 8007c2c <_vfiprintf_r+0x78>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f000 f9c6 	bl	8007f84 <__swsetup_r>
 8007bf8:	b1c0      	cbz	r0, 8007c2c <_vfiprintf_r+0x78>
 8007bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bfc:	07dc      	lsls	r4, r3, #31
 8007bfe:	d50e      	bpl.n	8007c1e <_vfiprintf_r+0x6a>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	b01d      	add	sp, #116	; 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <_vfiprintf_r+0x244>)
 8007c0c:	429d      	cmp	r5, r3
 8007c0e:	d101      	bne.n	8007c14 <_vfiprintf_r+0x60>
 8007c10:	68b5      	ldr	r5, [r6, #8]
 8007c12:	e7df      	b.n	8007bd4 <_vfiprintf_r+0x20>
 8007c14:	4b79      	ldr	r3, [pc, #484]	; (8007dfc <_vfiprintf_r+0x248>)
 8007c16:	429d      	cmp	r5, r3
 8007c18:	bf08      	it	eq
 8007c1a:	68f5      	ldreq	r5, [r6, #12]
 8007c1c:	e7da      	b.n	8007bd4 <_vfiprintf_r+0x20>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	0598      	lsls	r0, r3, #22
 8007c22:	d4ed      	bmi.n	8007c00 <_vfiprintf_r+0x4c>
 8007c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c26:	f7ff f9ef 	bl	8007008 <__retarget_lock_release_recursive>
 8007c2a:	e7e9      	b.n	8007c00 <_vfiprintf_r+0x4c>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c30:	2320      	movs	r3, #32
 8007c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c3a:	2330      	movs	r3, #48	; 0x30
 8007c3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e00 <_vfiprintf_r+0x24c>
 8007c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c44:	f04f 0901 	mov.w	r9, #1
 8007c48:	4623      	mov	r3, r4
 8007c4a:	469a      	mov	sl, r3
 8007c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c50:	b10a      	cbz	r2, 8007c56 <_vfiprintf_r+0xa2>
 8007c52:	2a25      	cmp	r2, #37	; 0x25
 8007c54:	d1f9      	bne.n	8007c4a <_vfiprintf_r+0x96>
 8007c56:	ebba 0b04 	subs.w	fp, sl, r4
 8007c5a:	d00b      	beq.n	8007c74 <_vfiprintf_r+0xc0>
 8007c5c:	465b      	mov	r3, fp
 8007c5e:	4622      	mov	r2, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff ff93 	bl	8007b8e <__sfputs_r>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f000 80aa 	beq.w	8007dc2 <_vfiprintf_r+0x20e>
 8007c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c70:	445a      	add	r2, fp
 8007c72:	9209      	str	r2, [sp, #36]	; 0x24
 8007c74:	f89a 3000 	ldrb.w	r3, [sl]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80a2 	beq.w	8007dc2 <_vfiprintf_r+0x20e>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f04f 32ff 	mov.w	r2, #4294967295
 8007c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c88:	f10a 0a01 	add.w	sl, sl, #1
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c94:	931a      	str	r3, [sp, #104]	; 0x68
 8007c96:	4654      	mov	r4, sl
 8007c98:	2205      	movs	r2, #5
 8007c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9e:	4858      	ldr	r0, [pc, #352]	; (8007e00 <_vfiprintf_r+0x24c>)
 8007ca0:	f7f8 face 	bl	8000240 <memchr>
 8007ca4:	9a04      	ldr	r2, [sp, #16]
 8007ca6:	b9d8      	cbnz	r0, 8007ce0 <_vfiprintf_r+0x12c>
 8007ca8:	06d1      	lsls	r1, r2, #27
 8007caa:	bf44      	itt	mi
 8007cac:	2320      	movmi	r3, #32
 8007cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb2:	0713      	lsls	r3, r2, #28
 8007cb4:	bf44      	itt	mi
 8007cb6:	232b      	movmi	r3, #43	; 0x2b
 8007cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc2:	d015      	beq.n	8007cf0 <_vfiprintf_r+0x13c>
 8007cc4:	9a07      	ldr	r2, [sp, #28]
 8007cc6:	4654      	mov	r4, sl
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f04f 0c0a 	mov.w	ip, #10
 8007cce:	4621      	mov	r1, r4
 8007cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd4:	3b30      	subs	r3, #48	; 0x30
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	d94e      	bls.n	8007d78 <_vfiprintf_r+0x1c4>
 8007cda:	b1b0      	cbz	r0, 8007d0a <_vfiprintf_r+0x156>
 8007cdc:	9207      	str	r2, [sp, #28]
 8007cde:	e014      	b.n	8007d0a <_vfiprintf_r+0x156>
 8007ce0:	eba0 0308 	sub.w	r3, r0, r8
 8007ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	46a2      	mov	sl, r4
 8007cee:	e7d2      	b.n	8007c96 <_vfiprintf_r+0xe2>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	1d19      	adds	r1, r3, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	9103      	str	r1, [sp, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfbb      	ittet	lt
 8007cfc:	425b      	neglt	r3, r3
 8007cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8007d02:	9307      	strge	r3, [sp, #28]
 8007d04:	9307      	strlt	r3, [sp, #28]
 8007d06:	bfb8      	it	lt
 8007d08:	9204      	strlt	r2, [sp, #16]
 8007d0a:	7823      	ldrb	r3, [r4, #0]
 8007d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d0e:	d10c      	bne.n	8007d2a <_vfiprintf_r+0x176>
 8007d10:	7863      	ldrb	r3, [r4, #1]
 8007d12:	2b2a      	cmp	r3, #42	; 0x2a
 8007d14:	d135      	bne.n	8007d82 <_vfiprintf_r+0x1ce>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	1d1a      	adds	r2, r3, #4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	9203      	str	r2, [sp, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfb8      	it	lt
 8007d22:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d26:	3402      	adds	r4, #2
 8007d28:	9305      	str	r3, [sp, #20]
 8007d2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e10 <_vfiprintf_r+0x25c>
 8007d2e:	7821      	ldrb	r1, [r4, #0]
 8007d30:	2203      	movs	r2, #3
 8007d32:	4650      	mov	r0, sl
 8007d34:	f7f8 fa84 	bl	8000240 <memchr>
 8007d38:	b140      	cbz	r0, 8007d4c <_vfiprintf_r+0x198>
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	eba0 000a 	sub.w	r0, r0, sl
 8007d40:	fa03 f000 	lsl.w	r0, r3, r0
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	4303      	orrs	r3, r0
 8007d48:	3401      	adds	r4, #1
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d50:	482c      	ldr	r0, [pc, #176]	; (8007e04 <_vfiprintf_r+0x250>)
 8007d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d56:	2206      	movs	r2, #6
 8007d58:	f7f8 fa72 	bl	8000240 <memchr>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d03f      	beq.n	8007de0 <_vfiprintf_r+0x22c>
 8007d60:	4b29      	ldr	r3, [pc, #164]	; (8007e08 <_vfiprintf_r+0x254>)
 8007d62:	bb1b      	cbnz	r3, 8007dac <_vfiprintf_r+0x1f8>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	3307      	adds	r3, #7
 8007d68:	f023 0307 	bic.w	r3, r3, #7
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d72:	443b      	add	r3, r7
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	e767      	b.n	8007c48 <_vfiprintf_r+0x94>
 8007d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	2001      	movs	r0, #1
 8007d80:	e7a5      	b.n	8007cce <_vfiprintf_r+0x11a>
 8007d82:	2300      	movs	r3, #0
 8007d84:	3401      	adds	r4, #1
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f04f 0c0a 	mov.w	ip, #10
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d94:	3a30      	subs	r2, #48	; 0x30
 8007d96:	2a09      	cmp	r2, #9
 8007d98:	d903      	bls.n	8007da2 <_vfiprintf_r+0x1ee>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c5      	beq.n	8007d2a <_vfiprintf_r+0x176>
 8007d9e:	9105      	str	r1, [sp, #20]
 8007da0:	e7c3      	b.n	8007d2a <_vfiprintf_r+0x176>
 8007da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da6:	4604      	mov	r4, r0
 8007da8:	2301      	movs	r3, #1
 8007daa:	e7f0      	b.n	8007d8e <_vfiprintf_r+0x1da>
 8007dac:	ab03      	add	r3, sp, #12
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	462a      	mov	r2, r5
 8007db2:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <_vfiprintf_r+0x258>)
 8007db4:	a904      	add	r1, sp, #16
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7fd fdae 	bl	8005918 <_printf_float>
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	1c78      	adds	r0, r7, #1
 8007dc0:	d1d6      	bne.n	8007d70 <_vfiprintf_r+0x1bc>
 8007dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d405      	bmi.n	8007dd4 <_vfiprintf_r+0x220>
 8007dc8:	89ab      	ldrh	r3, [r5, #12]
 8007dca:	059a      	lsls	r2, r3, #22
 8007dcc:	d402      	bmi.n	8007dd4 <_vfiprintf_r+0x220>
 8007dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd0:	f7ff f91a 	bl	8007008 <__retarget_lock_release_recursive>
 8007dd4:	89ab      	ldrh	r3, [r5, #12]
 8007dd6:	065b      	lsls	r3, r3, #25
 8007dd8:	f53f af12 	bmi.w	8007c00 <_vfiprintf_r+0x4c>
 8007ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dde:	e711      	b.n	8007c04 <_vfiprintf_r+0x50>
 8007de0:	ab03      	add	r3, sp, #12
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <_vfiprintf_r+0x258>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7fe f838 	bl	8005e60 <_printf_i>
 8007df0:	e7e4      	b.n	8007dbc <_vfiprintf_r+0x208>
 8007df2:	bf00      	nop
 8007df4:	080086a4 	.word	0x080086a4
 8007df8:	080086c4 	.word	0x080086c4
 8007dfc:	08008684 	.word	0x08008684
 8007e00:	08008844 	.word	0x08008844
 8007e04:	0800884e 	.word	0x0800884e
 8007e08:	08005919 	.word	0x08005919
 8007e0c:	08007b8f 	.word	0x08007b8f
 8007e10:	0800884a 	.word	0x0800884a

08007e14 <_sbrk_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4d06      	ldr	r5, [pc, #24]	; (8007e30 <_sbrk_r+0x1c>)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	602b      	str	r3, [r5, #0]
 8007e20:	f7f9 fdec 	bl	80019fc <_sbrk>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_sbrk_r+0x1a>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_sbrk_r+0x1a>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200003d0 	.word	0x200003d0

08007e34 <__sread>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3c:	f000 fae6 	bl	800840c <_read_r>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	bfab      	itete	ge
 8007e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e46:	89a3      	ldrhlt	r3, [r4, #12]
 8007e48:	181b      	addge	r3, r3, r0
 8007e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e4e:	bfac      	ite	ge
 8007e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e52:	81a3      	strhlt	r3, [r4, #12]
 8007e54:	bd10      	pop	{r4, pc}

08007e56 <__swrite>:
 8007e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	898b      	ldrh	r3, [r1, #12]
 8007e5e:	05db      	lsls	r3, r3, #23
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4616      	mov	r6, r2
 8007e66:	d505      	bpl.n	8007e74 <__swrite+0x1e>
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f000 f9f8 	bl	8008264 <_lseek_r>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	4628      	mov	r0, r5
 8007e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	f000 b869 	b.w	8007f60 <_write_r>

08007e8e <__sseek>:
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 f9e5 	bl	8008264 <_lseek_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	bf15      	itete	ne
 8007ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eaa:	81a3      	strheq	r3, [r4, #12]
 8007eac:	bf18      	it	ne
 8007eae:	81a3      	strhne	r3, [r4, #12]
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <__sclose>:
 8007eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb6:	f000 b8f1 	b.w	800809c <_close_r>
	...

08007ebc <__swbuf_r>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	460e      	mov	r6, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	b118      	cbz	r0, 8007ece <__swbuf_r+0x12>
 8007ec6:	6983      	ldr	r3, [r0, #24]
 8007ec8:	b90b      	cbnz	r3, 8007ece <__swbuf_r+0x12>
 8007eca:	f7fe fff9 	bl	8006ec0 <__sinit>
 8007ece:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <__swbuf_r+0x98>)
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d12b      	bne.n	8007f2c <__swbuf_r+0x70>
 8007ed4:	686c      	ldr	r4, [r5, #4]
 8007ed6:	69a3      	ldr	r3, [r4, #24]
 8007ed8:	60a3      	str	r3, [r4, #8]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	071a      	lsls	r2, r3, #28
 8007ede:	d52f      	bpl.n	8007f40 <__swbuf_r+0x84>
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	b36b      	cbz	r3, 8007f40 <__swbuf_r+0x84>
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	1ac0      	subs	r0, r0, r3
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	b2f6      	uxtb	r6, r6
 8007eee:	4283      	cmp	r3, r0
 8007ef0:	4637      	mov	r7, r6
 8007ef2:	dc04      	bgt.n	8007efe <__swbuf_r+0x42>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f966 	bl	80081c8 <_fflush_r>
 8007efc:	bb30      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	60a3      	str	r3, [r4, #8]
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	6022      	str	r2, [r4, #0]
 8007f0a:	701e      	strb	r6, [r3, #0]
 8007f0c:	6963      	ldr	r3, [r4, #20]
 8007f0e:	3001      	adds	r0, #1
 8007f10:	4283      	cmp	r3, r0
 8007f12:	d004      	beq.n	8007f1e <__swbuf_r+0x62>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	07db      	lsls	r3, r3, #31
 8007f18:	d506      	bpl.n	8007f28 <__swbuf_r+0x6c>
 8007f1a:	2e0a      	cmp	r6, #10
 8007f1c:	d104      	bne.n	8007f28 <__swbuf_r+0x6c>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 f951 	bl	80081c8 <_fflush_r>
 8007f26:	b988      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <__swbuf_r+0x9c>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d101      	bne.n	8007f36 <__swbuf_r+0x7a>
 8007f32:	68ac      	ldr	r4, [r5, #8]
 8007f34:	e7cf      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <__swbuf_r+0xa0>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	bf08      	it	eq
 8007f3c:	68ec      	ldreq	r4, [r5, #12]
 8007f3e:	e7ca      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f81e 	bl	8007f84 <__swsetup_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0cb      	beq.n	8007ee4 <__swbuf_r+0x28>
 8007f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f50:	e7ea      	b.n	8007f28 <__swbuf_r+0x6c>
 8007f52:	bf00      	nop
 8007f54:	080086a4 	.word	0x080086a4
 8007f58:	080086c4 	.word	0x080086c4
 8007f5c:	08008684 	.word	0x08008684

08007f60 <_write_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_write_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 fcf3 	bl	800195a <_write>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_write_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_write_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200003d0 	.word	0x200003d0

08007f84 <__swsetup_r>:
 8007f84:	4b32      	ldr	r3, [pc, #200]	; (8008050 <__swsetup_r+0xcc>)
 8007f86:	b570      	push	{r4, r5, r6, lr}
 8007f88:	681d      	ldr	r5, [r3, #0]
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	b125      	cbz	r5, 8007f9a <__swsetup_r+0x16>
 8007f90:	69ab      	ldr	r3, [r5, #24]
 8007f92:	b913      	cbnz	r3, 8007f9a <__swsetup_r+0x16>
 8007f94:	4628      	mov	r0, r5
 8007f96:	f7fe ff93 	bl	8006ec0 <__sinit>
 8007f9a:	4b2e      	ldr	r3, [pc, #184]	; (8008054 <__swsetup_r+0xd0>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	d10f      	bne.n	8007fc0 <__swsetup_r+0x3c>
 8007fa0:	686c      	ldr	r4, [r5, #4]
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa8:	0719      	lsls	r1, r3, #28
 8007faa:	d42c      	bmi.n	8008006 <__swsetup_r+0x82>
 8007fac:	06dd      	lsls	r5, r3, #27
 8007fae:	d411      	bmi.n	8007fd4 <__swsetup_r+0x50>
 8007fb0:	2309      	movs	r3, #9
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	e03e      	b.n	800803e <__swsetup_r+0xba>
 8007fc0:	4b25      	ldr	r3, [pc, #148]	; (8008058 <__swsetup_r+0xd4>)
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d101      	bne.n	8007fca <__swsetup_r+0x46>
 8007fc6:	68ac      	ldr	r4, [r5, #8]
 8007fc8:	e7eb      	b.n	8007fa2 <__swsetup_r+0x1e>
 8007fca:	4b24      	ldr	r3, [pc, #144]	; (800805c <__swsetup_r+0xd8>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	bf08      	it	eq
 8007fd0:	68ec      	ldreq	r4, [r5, #12]
 8007fd2:	e7e6      	b.n	8007fa2 <__swsetup_r+0x1e>
 8007fd4:	0758      	lsls	r0, r3, #29
 8007fd6:	d512      	bpl.n	8007ffe <__swsetup_r+0x7a>
 8007fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fda:	b141      	cbz	r1, 8007fee <__swsetup_r+0x6a>
 8007fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe0:	4299      	cmp	r1, r3
 8007fe2:	d002      	beq.n	8007fea <__swsetup_r+0x66>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff fbb5 	bl	8007754 <_free_r>
 8007fea:	2300      	movs	r3, #0
 8007fec:	6363      	str	r3, [r4, #52]	; 0x34
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6063      	str	r3, [r4, #4]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f043 0308 	orr.w	r3, r3, #8
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	b94b      	cbnz	r3, 800801e <__swsetup_r+0x9a>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008014:	d003      	beq.n	800801e <__swsetup_r+0x9a>
 8008016:	4621      	mov	r1, r4
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f959 	bl	80082d0 <__smakebuf_r>
 800801e:	89a0      	ldrh	r0, [r4, #12]
 8008020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008024:	f010 0301 	ands.w	r3, r0, #1
 8008028:	d00a      	beq.n	8008040 <__swsetup_r+0xbc>
 800802a:	2300      	movs	r3, #0
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6963      	ldr	r3, [r4, #20]
 8008030:	425b      	negs	r3, r3
 8008032:	61a3      	str	r3, [r4, #24]
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	b943      	cbnz	r3, 800804a <__swsetup_r+0xc6>
 8008038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800803c:	d1ba      	bne.n	8007fb4 <__swsetup_r+0x30>
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	0781      	lsls	r1, r0, #30
 8008042:	bf58      	it	pl
 8008044:	6963      	ldrpl	r3, [r4, #20]
 8008046:	60a3      	str	r3, [r4, #8]
 8008048:	e7f4      	b.n	8008034 <__swsetup_r+0xb0>
 800804a:	2000      	movs	r0, #0
 800804c:	e7f7      	b.n	800803e <__swsetup_r+0xba>
 800804e:	bf00      	nop
 8008050:	2000000c 	.word	0x2000000c
 8008054:	080086a4 	.word	0x080086a4
 8008058:	080086c4 	.word	0x080086c4
 800805c:	08008684 	.word	0x08008684

08008060 <__assert_func>:
 8008060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008062:	4614      	mov	r4, r2
 8008064:	461a      	mov	r2, r3
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <__assert_func+0x2c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4605      	mov	r5, r0
 800806c:	68d8      	ldr	r0, [r3, #12]
 800806e:	b14c      	cbz	r4, 8008084 <__assert_func+0x24>
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <__assert_func+0x30>)
 8008072:	9100      	str	r1, [sp, #0]
 8008074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008078:	4906      	ldr	r1, [pc, #24]	; (8008094 <__assert_func+0x34>)
 800807a:	462b      	mov	r3, r5
 800807c:	f000 f8e0 	bl	8008240 <fiprintf>
 8008080:	f000 f9e3 	bl	800844a <abort>
 8008084:	4b04      	ldr	r3, [pc, #16]	; (8008098 <__assert_func+0x38>)
 8008086:	461c      	mov	r4, r3
 8008088:	e7f3      	b.n	8008072 <__assert_func+0x12>
 800808a:	bf00      	nop
 800808c:	2000000c 	.word	0x2000000c
 8008090:	08008855 	.word	0x08008855
 8008094:	08008862 	.word	0x08008862
 8008098:	08008890 	.word	0x08008890

0800809c <_close_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d06      	ldr	r5, [pc, #24]	; (80080b8 <_close_r+0x1c>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f9 fc73 	bl	8001992 <_close>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_close_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_close_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	200003d0 	.word	0x200003d0

080080bc <__sflush_r>:
 80080bc:	898a      	ldrh	r2, [r1, #12]
 80080be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c2:	4605      	mov	r5, r0
 80080c4:	0710      	lsls	r0, r2, #28
 80080c6:	460c      	mov	r4, r1
 80080c8:	d458      	bmi.n	800817c <__sflush_r+0xc0>
 80080ca:	684b      	ldr	r3, [r1, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc05      	bgt.n	80080dc <__sflush_r+0x20>
 80080d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc02      	bgt.n	80080dc <__sflush_r+0x20>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d0f9      	beq.n	80080d6 <__sflush_r+0x1a>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e8:	682f      	ldr	r7, [r5, #0]
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	d032      	beq.n	8008154 <__sflush_r+0x98>
 80080ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	075a      	lsls	r2, r3, #29
 80080f4:	d505      	bpl.n	8008102 <__sflush_r+0x46>
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	1ac0      	subs	r0, r0, r3
 80080fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080fc:	b10b      	cbz	r3, 8008102 <__sflush_r+0x46>
 80080fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008100:	1ac0      	subs	r0, r0, r3
 8008102:	2300      	movs	r3, #0
 8008104:	4602      	mov	r2, r0
 8008106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008108:	6a21      	ldr	r1, [r4, #32]
 800810a:	4628      	mov	r0, r5
 800810c:	47b0      	blx	r6
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	d106      	bne.n	8008122 <__sflush_r+0x66>
 8008114:	6829      	ldr	r1, [r5, #0]
 8008116:	291d      	cmp	r1, #29
 8008118:	d82c      	bhi.n	8008174 <__sflush_r+0xb8>
 800811a:	4a2a      	ldr	r2, [pc, #168]	; (80081c4 <__sflush_r+0x108>)
 800811c:	40ca      	lsrs	r2, r1
 800811e:	07d6      	lsls	r6, r2, #31
 8008120:	d528      	bpl.n	8008174 <__sflush_r+0xb8>
 8008122:	2200      	movs	r2, #0
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	d504      	bpl.n	8008138 <__sflush_r+0x7c>
 800812e:	1c42      	adds	r2, r0, #1
 8008130:	d101      	bne.n	8008136 <__sflush_r+0x7a>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b903      	cbnz	r3, 8008138 <__sflush_r+0x7c>
 8008136:	6560      	str	r0, [r4, #84]	; 0x54
 8008138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	2900      	cmp	r1, #0
 800813e:	d0ca      	beq.n	80080d6 <__sflush_r+0x1a>
 8008140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008144:	4299      	cmp	r1, r3
 8008146:	d002      	beq.n	800814e <__sflush_r+0x92>
 8008148:	4628      	mov	r0, r5
 800814a:	f7ff fb03 	bl	8007754 <_free_r>
 800814e:	2000      	movs	r0, #0
 8008150:	6360      	str	r0, [r4, #52]	; 0x34
 8008152:	e7c1      	b.n	80080d8 <__sflush_r+0x1c>
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	2301      	movs	r3, #1
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	1c41      	adds	r1, r0, #1
 800815e:	d1c7      	bne.n	80080f0 <__sflush_r+0x34>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0c4      	beq.n	80080f0 <__sflush_r+0x34>
 8008166:	2b1d      	cmp	r3, #29
 8008168:	d001      	beq.n	800816e <__sflush_r+0xb2>
 800816a:	2b16      	cmp	r3, #22
 800816c:	d101      	bne.n	8008172 <__sflush_r+0xb6>
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	e7b1      	b.n	80080d6 <__sflush_r+0x1a>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7ad      	b.n	80080d8 <__sflush_r+0x1c>
 800817c:	690f      	ldr	r7, [r1, #16]
 800817e:	2f00      	cmp	r7, #0
 8008180:	d0a9      	beq.n	80080d6 <__sflush_r+0x1a>
 8008182:	0793      	lsls	r3, r2, #30
 8008184:	680e      	ldr	r6, [r1, #0]
 8008186:	bf08      	it	eq
 8008188:	694b      	ldreq	r3, [r1, #20]
 800818a:	600f      	str	r7, [r1, #0]
 800818c:	bf18      	it	ne
 800818e:	2300      	movne	r3, #0
 8008190:	eba6 0807 	sub.w	r8, r6, r7
 8008194:	608b      	str	r3, [r1, #8]
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	dd9c      	ble.n	80080d6 <__sflush_r+0x1a>
 800819c:	6a21      	ldr	r1, [r4, #32]
 800819e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081a0:	4643      	mov	r3, r8
 80081a2:	463a      	mov	r2, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b0      	blx	r6
 80081a8:	2800      	cmp	r0, #0
 80081aa:	dc06      	bgt.n	80081ba <__sflush_r+0xfe>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	e78e      	b.n	80080d8 <__sflush_r+0x1c>
 80081ba:	4407      	add	r7, r0
 80081bc:	eba8 0800 	sub.w	r8, r8, r0
 80081c0:	e7e9      	b.n	8008196 <__sflush_r+0xda>
 80081c2:	bf00      	nop
 80081c4:	20400001 	.word	0x20400001

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b913      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d2:	2500      	movs	r5, #0
 80081d4:	4628      	mov	r0, r5
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	b118      	cbz	r0, 80081e2 <_fflush_r+0x1a>
 80081da:	6983      	ldr	r3, [r0, #24]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_fflush_r+0x1a>
 80081de:	f7fe fe6f 	bl	8006ec0 <__sinit>
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <_fflush_r+0x6c>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d11b      	bne.n	8008220 <_fflush_r+0x58>
 80081e8:	686c      	ldr	r4, [r5, #4]
 80081ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0ef      	beq.n	80081d2 <_fflush_r+0xa>
 80081f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081f4:	07d0      	lsls	r0, r2, #31
 80081f6:	d404      	bmi.n	8008202 <_fflush_r+0x3a>
 80081f8:	0599      	lsls	r1, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_fflush_r+0x3a>
 80081fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fe:	f7fe ff02 	bl	8007006 <__retarget_lock_acquire_recursive>
 8008202:	4628      	mov	r0, r5
 8008204:	4621      	mov	r1, r4
 8008206:	f7ff ff59 	bl	80080bc <__sflush_r>
 800820a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820c:	07da      	lsls	r2, r3, #31
 800820e:	4605      	mov	r5, r0
 8008210:	d4e0      	bmi.n	80081d4 <_fflush_r+0xc>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	059b      	lsls	r3, r3, #22
 8008216:	d4dd      	bmi.n	80081d4 <_fflush_r+0xc>
 8008218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800821a:	f7fe fef5 	bl	8007008 <__retarget_lock_release_recursive>
 800821e:	e7d9      	b.n	80081d4 <_fflush_r+0xc>
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <_fflush_r+0x70>)
 8008222:	429c      	cmp	r4, r3
 8008224:	d101      	bne.n	800822a <_fflush_r+0x62>
 8008226:	68ac      	ldr	r4, [r5, #8]
 8008228:	e7df      	b.n	80081ea <_fflush_r+0x22>
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <_fflush_r+0x74>)
 800822c:	429c      	cmp	r4, r3
 800822e:	bf08      	it	eq
 8008230:	68ec      	ldreq	r4, [r5, #12]
 8008232:	e7da      	b.n	80081ea <_fflush_r+0x22>
 8008234:	080086a4 	.word	0x080086a4
 8008238:	080086c4 	.word	0x080086c4
 800823c:	08008684 	.word	0x08008684

08008240 <fiprintf>:
 8008240:	b40e      	push	{r1, r2, r3}
 8008242:	b503      	push	{r0, r1, lr}
 8008244:	4601      	mov	r1, r0
 8008246:	ab03      	add	r3, sp, #12
 8008248:	4805      	ldr	r0, [pc, #20]	; (8008260 <fiprintf+0x20>)
 800824a:	f853 2b04 	ldr.w	r2, [r3], #4
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f7ff fcaf 	bl	8007bb4 <_vfiprintf_r>
 8008256:	b002      	add	sp, #8
 8008258:	f85d eb04 	ldr.w	lr, [sp], #4
 800825c:	b003      	add	sp, #12
 800825e:	4770      	bx	lr
 8008260:	2000000c 	.word	0x2000000c

08008264 <_lseek_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	; (8008284 <_lseek_r+0x20>)
 8008268:	4604      	mov	r4, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	602a      	str	r2, [r5, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7f9 fbb4 	bl	80019e0 <_lseek>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_lseek_r+0x1e>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_lseek_r+0x1e>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200003d0 	.word	0x200003d0

08008288 <__swhatbuf_r>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	460e      	mov	r6, r1
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	2900      	cmp	r1, #0
 8008292:	b096      	sub	sp, #88	; 0x58
 8008294:	4614      	mov	r4, r2
 8008296:	461d      	mov	r5, r3
 8008298:	da07      	bge.n	80082aa <__swhatbuf_r+0x22>
 800829a:	2300      	movs	r3, #0
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	89b3      	ldrh	r3, [r6, #12]
 80082a0:	061a      	lsls	r2, r3, #24
 80082a2:	d410      	bmi.n	80082c6 <__swhatbuf_r+0x3e>
 80082a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a8:	e00e      	b.n	80082c8 <__swhatbuf_r+0x40>
 80082aa:	466a      	mov	r2, sp
 80082ac:	f000 f8d4 	bl	8008458 <_fstat_r>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	dbf2      	blt.n	800829a <__swhatbuf_r+0x12>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082be:	425a      	negs	r2, r3
 80082c0:	415a      	adcs	r2, r3
 80082c2:	602a      	str	r2, [r5, #0]
 80082c4:	e7ee      	b.n	80082a4 <__swhatbuf_r+0x1c>
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	2000      	movs	r0, #0
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	b016      	add	sp, #88	; 0x58
 80082ce:	bd70      	pop	{r4, r5, r6, pc}

080082d0 <__smakebuf_r>:
 80082d0:	898b      	ldrh	r3, [r1, #12]
 80082d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d4:	079d      	lsls	r5, r3, #30
 80082d6:	4606      	mov	r6, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	d507      	bpl.n	80082ec <__smakebuf_r+0x1c>
 80082dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	2301      	movs	r3, #1
 80082e6:	6163      	str	r3, [r4, #20]
 80082e8:	b002      	add	sp, #8
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	ab01      	add	r3, sp, #4
 80082ee:	466a      	mov	r2, sp
 80082f0:	f7ff ffca 	bl	8008288 <__swhatbuf_r>
 80082f4:	9900      	ldr	r1, [sp, #0]
 80082f6:	4605      	mov	r5, r0
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7ff fa7b 	bl	80077f4 <_malloc_r>
 80082fe:	b948      	cbnz	r0, 8008314 <__smakebuf_r+0x44>
 8008300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d4ef      	bmi.n	80082e8 <__smakebuf_r+0x18>
 8008308:	f023 0303 	bic.w	r3, r3, #3
 800830c:	f043 0302 	orr.w	r3, r3, #2
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	e7e3      	b.n	80082dc <__smakebuf_r+0xc>
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <__smakebuf_r+0x7c>)
 8008316:	62b3      	str	r3, [r6, #40]	; 0x28
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	6020      	str	r0, [r4, #0]
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	6163      	str	r3, [r4, #20]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	6120      	str	r0, [r4, #16]
 800832a:	b15b      	cbz	r3, 8008344 <__smakebuf_r+0x74>
 800832c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f8a3 	bl	800847c <_isatty_r>
 8008336:	b128      	cbz	r0, 8008344 <__smakebuf_r+0x74>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	89a0      	ldrh	r0, [r4, #12]
 8008346:	4305      	orrs	r5, r0
 8008348:	81a5      	strh	r5, [r4, #12]
 800834a:	e7cd      	b.n	80082e8 <__smakebuf_r+0x18>
 800834c:	08006e59 	.word	0x08006e59

08008350 <__ascii_mbtowc>:
 8008350:	b082      	sub	sp, #8
 8008352:	b901      	cbnz	r1, 8008356 <__ascii_mbtowc+0x6>
 8008354:	a901      	add	r1, sp, #4
 8008356:	b142      	cbz	r2, 800836a <__ascii_mbtowc+0x1a>
 8008358:	b14b      	cbz	r3, 800836e <__ascii_mbtowc+0x1e>
 800835a:	7813      	ldrb	r3, [r2, #0]
 800835c:	600b      	str	r3, [r1, #0]
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	1e10      	subs	r0, r2, #0
 8008362:	bf18      	it	ne
 8008364:	2001      	movne	r0, #1
 8008366:	b002      	add	sp, #8
 8008368:	4770      	bx	lr
 800836a:	4610      	mov	r0, r2
 800836c:	e7fb      	b.n	8008366 <__ascii_mbtowc+0x16>
 800836e:	f06f 0001 	mvn.w	r0, #1
 8008372:	e7f8      	b.n	8008366 <__ascii_mbtowc+0x16>

08008374 <memmove>:
 8008374:	4288      	cmp	r0, r1
 8008376:	b510      	push	{r4, lr}
 8008378:	eb01 0402 	add.w	r4, r1, r2
 800837c:	d902      	bls.n	8008384 <memmove+0x10>
 800837e:	4284      	cmp	r4, r0
 8008380:	4623      	mov	r3, r4
 8008382:	d807      	bhi.n	8008394 <memmove+0x20>
 8008384:	1e43      	subs	r3, r0, #1
 8008386:	42a1      	cmp	r1, r4
 8008388:	d008      	beq.n	800839c <memmove+0x28>
 800838a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800838e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008392:	e7f8      	b.n	8008386 <memmove+0x12>
 8008394:	4402      	add	r2, r0
 8008396:	4601      	mov	r1, r0
 8008398:	428a      	cmp	r2, r1
 800839a:	d100      	bne.n	800839e <memmove+0x2a>
 800839c:	bd10      	pop	{r4, pc}
 800839e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083a6:	e7f7      	b.n	8008398 <memmove+0x24>

080083a8 <__malloc_lock>:
 80083a8:	4801      	ldr	r0, [pc, #4]	; (80083b0 <__malloc_lock+0x8>)
 80083aa:	f7fe be2c 	b.w	8007006 <__retarget_lock_acquire_recursive>
 80083ae:	bf00      	nop
 80083b0:	200003c8 	.word	0x200003c8

080083b4 <__malloc_unlock>:
 80083b4:	4801      	ldr	r0, [pc, #4]	; (80083bc <__malloc_unlock+0x8>)
 80083b6:	f7fe be27 	b.w	8007008 <__retarget_lock_release_recursive>
 80083ba:	bf00      	nop
 80083bc:	200003c8 	.word	0x200003c8

080083c0 <_realloc_r>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	4607      	mov	r7, r0
 80083c4:	4614      	mov	r4, r2
 80083c6:	460e      	mov	r6, r1
 80083c8:	b921      	cbnz	r1, 80083d4 <_realloc_r+0x14>
 80083ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083ce:	4611      	mov	r1, r2
 80083d0:	f7ff ba10 	b.w	80077f4 <_malloc_r>
 80083d4:	b922      	cbnz	r2, 80083e0 <_realloc_r+0x20>
 80083d6:	f7ff f9bd 	bl	8007754 <_free_r>
 80083da:	4625      	mov	r5, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e0:	f000 f85c 	bl	800849c <_malloc_usable_size_r>
 80083e4:	42a0      	cmp	r0, r4
 80083e6:	d20f      	bcs.n	8008408 <_realloc_r+0x48>
 80083e8:	4621      	mov	r1, r4
 80083ea:	4638      	mov	r0, r7
 80083ec:	f7ff fa02 	bl	80077f4 <_malloc_r>
 80083f0:	4605      	mov	r5, r0
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d0f2      	beq.n	80083dc <_realloc_r+0x1c>
 80083f6:	4631      	mov	r1, r6
 80083f8:	4622      	mov	r2, r4
 80083fa:	f7fe fe0f 	bl	800701c <memcpy>
 80083fe:	4631      	mov	r1, r6
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff f9a7 	bl	8007754 <_free_r>
 8008406:	e7e9      	b.n	80083dc <_realloc_r+0x1c>
 8008408:	4635      	mov	r5, r6
 800840a:	e7e7      	b.n	80083dc <_realloc_r+0x1c>

0800840c <_read_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_read_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f9 fa80 	bl	8001920 <_read>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_read_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_read_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	200003d0 	.word	0x200003d0

08008430 <__ascii_wctomb>:
 8008430:	b149      	cbz	r1, 8008446 <__ascii_wctomb+0x16>
 8008432:	2aff      	cmp	r2, #255	; 0xff
 8008434:	bf85      	ittet	hi
 8008436:	238a      	movhi	r3, #138	; 0x8a
 8008438:	6003      	strhi	r3, [r0, #0]
 800843a:	700a      	strbls	r2, [r1, #0]
 800843c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008440:	bf98      	it	ls
 8008442:	2001      	movls	r0, #1
 8008444:	4770      	bx	lr
 8008446:	4608      	mov	r0, r1
 8008448:	4770      	bx	lr

0800844a <abort>:
 800844a:	b508      	push	{r3, lr}
 800844c:	2006      	movs	r0, #6
 800844e:	f000 f855 	bl	80084fc <raise>
 8008452:	2001      	movs	r0, #1
 8008454:	f7f9 fa5a 	bl	800190c <_exit>

08008458 <_fstat_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	; (8008478 <_fstat_r+0x20>)
 800845c:	2300      	movs	r3, #0
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	f7f9 faa0 	bl	80019aa <_fstat>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	d102      	bne.n	8008474 <_fstat_r+0x1c>
 800846e:	682b      	ldr	r3, [r5, #0]
 8008470:	b103      	cbz	r3, 8008474 <_fstat_r+0x1c>
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	bd38      	pop	{r3, r4, r5, pc}
 8008476:	bf00      	nop
 8008478:	200003d0 	.word	0x200003d0

0800847c <_isatty_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d06      	ldr	r5, [pc, #24]	; (8008498 <_isatty_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f9 fa9f 	bl	80019ca <_isatty>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_isatty_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_isatty_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	200003d0 	.word	0x200003d0

0800849c <_malloc_usable_size_r>:
 800849c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a0:	1f18      	subs	r0, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfbc      	itt	lt
 80084a6:	580b      	ldrlt	r3, [r1, r0]
 80084a8:	18c0      	addlt	r0, r0, r3
 80084aa:	4770      	bx	lr

080084ac <_raise_r>:
 80084ac:	291f      	cmp	r1, #31
 80084ae:	b538      	push	{r3, r4, r5, lr}
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	d904      	bls.n	80084c0 <_raise_r+0x14>
 80084b6:	2316      	movs	r3, #22
 80084b8:	6003      	str	r3, [r0, #0]
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084c2:	b112      	cbz	r2, 80084ca <_raise_r+0x1e>
 80084c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084c8:	b94b      	cbnz	r3, 80084de <_raise_r+0x32>
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f830 	bl	8008530 <_getpid_r>
 80084d0:	462a      	mov	r2, r5
 80084d2:	4601      	mov	r1, r0
 80084d4:	4620      	mov	r0, r4
 80084d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084da:	f000 b817 	b.w	800850c <_kill_r>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d00a      	beq.n	80084f8 <_raise_r+0x4c>
 80084e2:	1c59      	adds	r1, r3, #1
 80084e4:	d103      	bne.n	80084ee <_raise_r+0x42>
 80084e6:	2316      	movs	r3, #22
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	2001      	movs	r0, #1
 80084ec:	e7e7      	b.n	80084be <_raise_r+0x12>
 80084ee:	2400      	movs	r4, #0
 80084f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084f4:	4628      	mov	r0, r5
 80084f6:	4798      	blx	r3
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7e0      	b.n	80084be <_raise_r+0x12>

080084fc <raise>:
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <raise+0xc>)
 80084fe:	4601      	mov	r1, r0
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	f7ff bfd3 	b.w	80084ac <_raise_r>
 8008506:	bf00      	nop
 8008508:	2000000c 	.word	0x2000000c

0800850c <_kill_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_kill_r+0x20>)
 8008510:	2300      	movs	r3, #0
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f7f9 f9e7 	bl	80018ec <_kill>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d102      	bne.n	8008528 <_kill_r+0x1c>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	b103      	cbz	r3, 8008528 <_kill_r+0x1c>
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	200003d0 	.word	0x200003d0

08008530 <_getpid_r>:
 8008530:	f7f9 b9d4 	b.w	80018dc <_getpid>

08008534 <_init>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr

08008540 <_fini>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr
