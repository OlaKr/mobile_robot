
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006d9bc  0800cf00  0800cf00  0001cf00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807a8bc  0807a8bc  000901e0  2**0
                  CONTENTS
  4 .ARM          00000008  0807a8bc  0807a8bc  0008a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807a8c4  0807a8c4  000901e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807a8c4  0807a8c4  0008a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807a8c8  0807a8c8  0008a8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0807a8cc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001e0  0807aaac  000901e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0807aaac  00090a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000901e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b1f  00000000  00000000  00090210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c3  00000000  00000000  000b1d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000b5ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  000b7648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267a4  00000000  00000000  000b8b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e762  00000000  00000000  000df2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dceda  00000000  00000000  000fda06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001da8e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c14  00000000  00000000  001da934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cee4 	.word	0x0800cee4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800cee4 	.word	0x0800cee4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <BH1750_Init>:
BH1750_mode 		Bh1750_Mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c1;
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <BH1750_Init+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	bh1750_i2c2 = hi2c2;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <BH1750_Init+0x40>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f16:	f000 f815 	bl	8000f44 <BH1750_Reset>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <BH1750_Init+0x34>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG))	// Set default value;
 8000f20:	2046      	movs	r0, #70	; 0x46
 8000f22:	f000 f867 	bl	8000ff4 <BH1750_SetMtreg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BH1750_Init+0x30>
		{
			return BH1750_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e001      	b.n	8000f34 <BH1750_Init+0x34>
		}

		return BH1750_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e7ff      	b.n	8000f34 <BH1750_Init+0x34>
	}

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000268 	.word	0x20000268
 8000f40:	20000264 	.word	0x20000264

08000f44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <BH1750_Reset+0x38>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	230a      	movs	r3, #10
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2146      	movs	r1, #70	; 0x46
 8000f5c:	f003 fa8e 	bl	800447c <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp, 1, 10))
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <BH1750_Reset+0x3c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2146      	movs	r1, #70	; 0x46
 8000f6e:	f003 fa85 	bl	800447c <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	return BH1750_OK;
 8000f72:	2300      	movs	r3, #0
//	return BH1750_ERROR;

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000268 	.word	0x20000268
 8000f80:	20000264 	.word	0x20000264

08000f84 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_mode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <BH1750_SetMode+0x30>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e015      	b.n	8000fe0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BH1750_SetMode+0x64>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <BH1750_SetMode+0x68>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2146      	movs	r1, #70	; 0x46
 8000fc8:	f003 fa58 	bl	800447c <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &Mode, 1, 10))
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BH1750_SetMode+0x6c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2146      	movs	r1, #70	; 0x46
 8000fda:	f003 fa4f 	bl	800447c <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	return BH1750_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	20000268 	.word	0x20000268
 8000ff0:	20000264 	.word	0x20000264

08000ff4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode, retCode2;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1e      	cmp	r3, #30
 8001002:	d902      	bls.n	800100a <BH1750_SetMtreg+0x16>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d101      	bne.n	800100e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e056      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	Bh1750_Mtreg = Mtreg;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <BH1750_SetMtreg+0xd0>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2146      	movs	r1, #70	; 0x46
 8001046:	f003 fa19 	bl	800447c <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[0], 1, 10);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2146      	movs	r1, #70	; 0x46
 800105e:	f003 fa0d 	bl	800447c <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK != retCode || HAL_OK != retCode2) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BH1750_SetMtreg+0x7e>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BH1750_SetMtreg+0x82>
		return BH1750_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e022      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	230a      	movs	r3, #10
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	2146      	movs	r1, #70	; 0x46
 8001088:	f003 f9f8 	bl	800447c <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f003 f9eb 	bl	800447c <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK == retCode && HAL_OK == retCode2) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
		return BH1750_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	return BH1750_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000026c 	.word	0x2000026c
 80010c8:	20000268 	.word	0x20000268
 80010cc:	20000264 	.word	0x20000264

080010d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <BH1750_ReadLight+0xa0>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	230a      	movs	r3, #10
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	f003 fac6 	bl	8004678 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	7a7a      	ldrb	r2, [r7, #9]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d00f      	beq.n	800112e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001178 <BH1750_ReadLight+0xa8>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b21      	cmp	r3, #33	; 0x21
 8001134:	d003      	beq.n	800113e <BH1750_ReadLight+0x6e>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <BH1750_ReadLight+0xac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d107      	bne.n	800114e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800114e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001180 <BH1750_ReadLight+0xb0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000268 	.word	0x20000268
 8001174:	2000026c 	.word	0x2000026c
 8001178:	428c0000 	.word	0x428c0000
 800117c:	20000260 	.word	0x20000260
 8001180:	3f99999a 	.word	0x3f99999a

08001184 <BH1750_ReadLight2>:

BH1750_STATUS BH1750_ReadLight2(float *Result)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c2, BH1750_ADDRESS, tmp, 2, 10))
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <BH1750_ReadLight2+0xa0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	230a      	movs	r3, #10
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	2146      	movs	r1, #70	; 0x46
 800119c:	f003 fa6c 	bl	8004678 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d138      	bne.n	8001218 <BH1750_ReadLight2+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	7a7a      	ldrb	r2, [r7, #9]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d00f      	beq.n	80011e2 <BH1750_ReadLight2+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800122c <BH1750_ReadLight2+0xa8>
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d003      	beq.n	80011f2 <BH1750_ReadLight2+0x6e>
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d107      	bne.n	8001202 <BH1750_ReadLight2+0x7e>
		{
			result /= 2.0;
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001202:	ed97 7a03 	vldr	s14, [r7, #12]
 8001206:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001234 <BH1750_ReadLight2+0xb0>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <BH1750_ReadLight2+0x96>
	}
	return BH1750_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000264 	.word	0x20000264
 8001228:	2000026c 	.word	0x2000026c
 800122c:	428c0000 	.word	0x428c0000
 8001230:	20000260 	.word	0x20000260
 8001234:	3f99999a 	.word	0x3f99999a

08001238 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_DAC_Init+0x4c>)
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_DAC_Init+0x50>)
 800124a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_DAC_Init+0x4c>)
 800124e:	f002 f83e 	bl	80032ce <HAL_DAC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001258:	f000 fddc 	bl	8001e14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800125c:	2304      	movs	r3, #4
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_DAC_Init+0x4c>)
 800126c:	f002 f92a 	bl	80034c4 <HAL_DAC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001276:	f000 fdcd 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002d0 	.word	0x200002d0
 8001288:	40007400 	.word	0x40007400

0800128c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d157      	bne.n	800135e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f002 fdcd 	bl	8003e98 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001344:	f002 f998 	bl	8003678 <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800134e:	f000 fd61 	bl	8001e14 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	20000270 	.word	0x20000270
 8001378:	40026088 	.word	0x40026088

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MX_DMA_Init+0x3c>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_DMA_Init+0x3c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2010      	movs	r0, #16
 80013a4:	f001 ff5d 	bl	8003262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013a8:	2010      	movs	r0, #16
 80013aa:	f001 ff76 	bl	800329a <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <MX_GPIO_Init+0x160>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a50      	ldr	r2, [pc, #320]	; (800151c <MX_GPIO_Init+0x160>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <MX_GPIO_Init+0x160>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_GPIO_Init+0x160>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <MX_GPIO_Init+0x160>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_GPIO_Init+0x160>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <MX_GPIO_Init+0x160>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <MX_GPIO_Init+0x160>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <MX_GPIO_Init+0x160>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_GPIO_Init+0x160>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <MX_GPIO_Init+0x160>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_GPIO_Init+0x160>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <MX_GPIO_Init+0x160>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 800145e:	2200      	movs	r2, #0
 8001460:	f640 114c 	movw	r1, #2380	; 0x94c
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <MX_GPIO_Init+0x164>)
 8001466:	f002 feab 	bl	80041c0 <HAL_GPIO_WritePin>
                          |DIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	482d      	ldr	r0, [pc, #180]	; (8001524 <MX_GPIO_Init+0x168>)
 8001470:	f002 fea6 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	482b      	ldr	r0, [pc, #172]	; (8001528 <MX_GPIO_Init+0x16c>)
 800147a:	f002 fea1 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2118      	movs	r1, #24
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <MX_GPIO_Init+0x170>)
 8001484:	f002 fe9c 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x164>)
 800149e:	f002 fcfb 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = CIN1_Pin|CIN2_Pin|BIN1_Pin|BIN2_Pin
 80014a2:	f640 134c 	movw	r3, #2380	; 0x94c
 80014a6:	617b      	str	r3, [r7, #20]
                          |DIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0x164>)
 80014bc:	f002 fcec 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0x168>)
 80014d8:	f002 fcde 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 80014dc:	2304      	movs	r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0x16c>)
 80014f4:	f002 fcd0 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80014f8:	2318      	movs	r3, #24
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_GPIO_Init+0x170>)
 8001510:	f002 fcc2 	bl	8003e98 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40020400 	.word	0x40020400

08001530 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 fe41 	bl	80041f4 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fc4c 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002e4 	.word	0x200002e4
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f002 fe13 	bl	80041f4 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 fc1e 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000338 	.word	0x20000338
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_I2C_MspInit+0x148>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13d      	bne.n	8001686 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001626:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	483d      	ldr	r0, [pc, #244]	; (8001738 <HAL_I2C_MspInit+0x150>)
 8001644:	f002 fc28 	bl	8003e98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201f      	movs	r0, #31
 800166a:	f001 fdfa 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166e:	201f      	movs	r0, #31
 8001670:	f001 fe13 	bl	800329a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2020      	movs	r0, #32
 800167a:	f001 fdf2 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167e:	2020      	movs	r0, #32
 8001680:	f001 fe0b 	bl	800329a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001684:	e050      	b.n	8001728 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x154>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d14b      	bne.n	8001728 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016da:	2304      	movs	r3, #4
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_I2C_MspInit+0x150>)
 80016e6:	f002 fbd7 	bl	8003e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_I2C_MspInit+0x158>)
 8001708:	f002 fbc6 	bl	8003e98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 8001716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_I2C_MspInit+0x14c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	40005800 	.word	0x40005800
 8001740:	40020800 	.word	0x40020800

08001744 <setMax>:

#define MIN_SUB -500
#define MAX_SUB 500
#define MAX_V 50

void setMax(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	if(BH1750_lux_sub>MAX_SUB) BH1750_lux_sub=MAX_SUB;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <setMax+0x44>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800178c <setMax+0x48>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd02      	ble.n	8001762 <setMax+0x1e>
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <setMax+0x44>)
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <setMax+0x4c>)
 8001760:	601a      	str	r2, [r3, #0]
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <setMax+0x44>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001794 <setMax+0x50>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d400      	bmi.n	8001778 <setMax+0x34>
}
 8001776:	e002      	b.n	800177e <setMax+0x3a>
	if(BH1750_lux_sub<MIN_SUB) BH1750_lux_sub=MIN_SUB;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <setMax+0x44>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <setMax+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200003fc 	.word	0x200003fc
 800178c:	43fa0000 	.word	0x43fa0000
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	c3fa0000 	.word	0xc3fa0000
 8001798:	c3fa0000 	.word	0xc3fa0000

0800179c <proportionalPID>:

void proportionalPID(){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	float sub_for_one_lux = (float)MAX_V/(float)MAX_SUB;					//wartosc w prędkosci dla 1lux
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <proportionalPID+0x2c>)
 80017a4:	607b      	str	r3, [r7, #4]
	change = BH1750_lux_sub*sub_for_one_lux;								//wartosc w predkosci dla SUB
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <proportionalPID+0x30>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <proportionalPID+0x34>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	200003fc 	.word	0x200003fc
 80017d0:	2000038c 	.word	0x2000038c

080017d4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int __io_putchar(int sign)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d109      	bne.n	80017f6 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 80017e2:	230d      	movs	r3, #13
 80017e4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 80017e6:	f107 010f 	add.w	r1, r7, #15
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2201      	movs	r2, #1
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <__io_putchar+0x3c>)
 80017f2:	f007 fee2 	bl	80095ba <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2201      	movs	r2, #1
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <__io_putchar+0x3c>)
 8001800:	f007 fedb 	bl	80095ba <HAL_UART_Transmit>
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200005d8 	.word	0x200005d8

08001814 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b0d      	cmp	r3, #13
 8001822:	d002      	beq.n	800182a <line_append+0x16>
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d10c      	bne.n	8001844 <line_append+0x30>
	{
		if(line_length>0)
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <line_append+0x5c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d018      	beq.n	8001864 <line_append+0x50>
		{
			line_buffer[line_length]='\0';
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <line_append+0x5c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <line_append+0x60>)
 8001838:	2100      	movs	r1, #0
 800183a:	54d1      	strb	r1, [r2, r3]
			line_length=0;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <line_append+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8001842:	e00f      	b.n	8001864 <line_append+0x50>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <line_append+0x5c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b4f      	cmp	r3, #79	; 0x4f
 800184a:	d902      	bls.n	8001852 <line_append+0x3e>
		{
			line_length=0;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <line_append+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <line_append+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <line_append+0x5c>)
 800185a:	600a      	str	r2, [r1, #0]
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <line_append+0x60>)
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	54ca      	strb	r2, [r1, r3]
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20000250 	.word	0x20000250
 8001874:	200001fc 	.word	0x200001fc

08001878 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d104      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffc1 	bl	8001814 <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001898:	f007 ff21 	bl	80096de <HAL_UART_Receive_IT>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200005d8 	.word	0x200005d8
 80018a8:	20000400 	.word	0x20000400

080018ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d16d      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		if (strcmp(line_buffer, "on")==0){
 80018bc:	495d      	ldr	r1, [pc, #372]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018be:	485e      	ldr	r0, [pc, #376]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018c0:	f7fe fca6 	bl	8000210 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	485b      	ldr	r0, [pc, #364]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018d0:	f002 fc76 	bl	80041c0 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018d4:	4958      	ldr	r1, [pc, #352]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018d6:	485a      	ldr	r0, [pc, #360]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018d8:	f009 fa86 	bl	800ade8 <iprintf>
 80018dc:	e05c      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "off")==0){
 80018de:	4959      	ldr	r1, [pc, #356]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80018e0:	4855      	ldr	r0, [pc, #340]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018e2:	f7fe fc95 	bl	8000210 <strcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	4852      	ldr	r0, [pc, #328]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018f2:	f002 fc65 	bl	80041c0 <HAL_GPIO_WritePin>
			printf("Command: %s\n", line_buffer);
 80018f6:	4950      	ldr	r1, [pc, #320]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018f8:	4851      	ldr	r0, [pc, #324]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018fa:	f009 fa75 	bl	800ade8 <iprintf>
 80018fe:	e04b      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "w")==0){
 8001900:	4951      	ldr	r1, [pc, #324]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001902:	484d      	ldr	r0, [pc, #308]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001904:	f7fe fc84 	bl	8000210 <strcmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x6a>
			setCommand = SLOW;
 800190e:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001910:	2205      	movs	r2, #5
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e040      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "s")==0){
 8001916:	494e      	ldr	r1, [pc, #312]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001918:	4847      	ldr	r0, [pc, #284]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800191a:	f7fe fc79 	bl	8000210 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_TIM_PeriodElapsedCallback+0x80>
			setCommand = STOP;
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e035      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "t")==0){
 800192c:	4949      	ldr	r1, [pc, #292]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800192e:	4842      	ldr	r0, [pc, #264]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001930:	f7fe fc6e 	bl	8000210 <strcmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x96>
			setCommand = FAST;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800193c:	2206      	movs	r2, #6
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e02a      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "f")==0){
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001944:	483c      	ldr	r0, [pc, #240]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xac>
			setCommand = FORWARD;
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e01f      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "b")==0){
 8001958:	4940      	ldr	r1, [pc, #256]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800195a:	4837      	ldr	r0, [pc, #220]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800195c:	f7fe fc58 	bl	8000210 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0xc2>
			setCommand = BACKWARD;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e014      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "l")==0){
 800196e:	493c      	ldr	r1, [pc, #240]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001972:	f7fe fc4d 	bl	8000210 <strcmp>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xd8>
			setCommand = LEFT;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e009      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
		}
		else if(strcmp(line_buffer, "r")==0){
 8001984:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001986:	482c      	ldr	r0, [pc, #176]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001988:	f7fe fc42 	bl	8000210 <strcmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0xec>
			setCommand = RIGHT;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
		}
		//else printf("Unrecognized command: %s\n", line_buffer);
	}

	if(htim==&htim5)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d129      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
	{
		if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
 80019a0:	4832      	ldr	r0, [pc, #200]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019a2:	f7ff fb95 	bl	80010d0 <BH1750_ReadLight>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			//sprintf(buffer,"BH1750 Lux: %.2f\r\n", BH1750_lux);
			len=strlen(buffer);
 80019ac:	4830      	ldr	r0, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ae:	f7fe fc39 	bl	8000224 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019b8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019c4:	482c      	ldr	r0, [pc, #176]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019c6:	f007 fdf8 	bl	80095ba <HAL_UART_Transmit>
		}
		if(BH1750_OK == BH1750_ReadLight2(&BH1750_lux2))
 80019ca:	482c      	ldr	r0, [pc, #176]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019cc:	f7ff fbda 	bl	8001184 <BH1750_ReadLight2>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x148>
		{
			//sprintf(buffer,"BH1750 Lux2: %.2f\r\n", BH1750_lux2);
			len=strlen(buffer);
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019d8:	f7fe fc24 	bl	8000224 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	4920      	ldr	r1, [pc, #128]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019f0:	f007 fde3 	bl	80095ba <HAL_UART_Transmit>
		}
	}

	if(htim==&htim9)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d114      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
	{
		BH1750_lux_sub=BH1750_lux2-BH1750_lux;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(buffer,"SUB: %.2f\r\n", BH1750_lux_sub);
		if(strcmp(line_buffer, "i")==0)
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a16:	f7fe fbfb 	bl	8000210 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x17a>
		{
			setCommand = LIGHT;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	701a      	strb	r2, [r3, #0]
//			setCommand = PLAY;
//		}


	}
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000590 	.word	0x20000590
 8001a34:	0800cf00 	.word	0x0800cf00
 8001a38:	200001fc 	.word	0x200001fc
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	0800cf04 	.word	0x0800cf04
 8001a44:	0800cf14 	.word	0x0800cf14
 8001a48:	0800cf18 	.word	0x0800cf18
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	0800cf1c 	.word	0x0800cf1c
 8001a54:	0800cf20 	.word	0x0800cf20
 8001a58:	0800cf24 	.word	0x0800cf24
 8001a5c:	0800cf28 	.word	0x0800cf28
 8001a60:	0800cf2c 	.word	0x0800cf2c
 8001a64:	0800cf30 	.word	0x0800cf30
 8001a68:	20000428 	.word	0x20000428
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	20000398 	.word	0x20000398
 8001a74:	20000404 	.word	0x20000404
 8001a78:	200005d8 	.word	0x200005d8
 8001a7c:	20000394 	.word	0x20000394
 8001a80:	20000548 	.word	0x20000548
 8001a84:	200003fc 	.word	0x200003fc
 8001a88:	0800cf34 	.word	0x0800cf34

08001a8c <robotControl>:

void robotControl()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	if(FORWARD==setCommand)
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <robotControl+0xa8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <robotControl+0x1a>
	{
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
 8001a98:	2363      	movs	r3, #99	; 0x63
 8001a9a:	2263      	movs	r2, #99	; 0x63
 8001a9c:	2163      	movs	r1, #99	; 0x63
 8001a9e:	2063      	movs	r0, #99	; 0x63
 8001aa0:	f000 fca4 	bl	80023ec <TB6612_init>
	}
	else if(FAST==setCommand)
	{
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
	}
}
 8001aa4:	e044      	b.n	8001b30 <robotControl+0xa4>
	else if(BACKWARD==setCommand)
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <robotControl+0xa8>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10a      	bne.n	8001ac4 <robotControl+0x38>
		TB6612_init(-V_FAST,-V_FAST,-V_FAST,-V_FAST);
 8001aae:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001ab2:	f06f 0262 	mvn.w	r2, #98	; 0x62
 8001ab6:	f06f 0162 	mvn.w	r1, #98	; 0x62
 8001aba:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8001abe:	f000 fc95 	bl	80023ec <TB6612_init>
}
 8001ac2:	e035      	b.n	8001b30 <robotControl+0xa4>
	else if(LEFT==setCommand)
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <robotControl+0xa8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d106      	bne.n	8001ada <robotControl+0x4e>
		TB6612_init(V_ZERO,V_AVERAGE,V_AVERAGE,V_ZERO);
 8001acc:	2300      	movs	r3, #0
 8001ace:	2250      	movs	r2, #80	; 0x50
 8001ad0:	2150      	movs	r1, #80	; 0x50
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 fc8a 	bl	80023ec <TB6612_init>
}
 8001ad8:	e02a      	b.n	8001b30 <robotControl+0xa4>
	else if(RIGHT==setCommand)
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <robotControl+0xa8>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d106      	bne.n	8001af0 <robotControl+0x64>
		TB6612_init(V_AVERAGE,V_ZERO,V_ZERO,V_AVERAGE);
 8001ae2:	2350      	movs	r3, #80	; 0x50
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2050      	movs	r0, #80	; 0x50
 8001aea:	f000 fc7f 	bl	80023ec <TB6612_init>
}
 8001aee:	e01f      	b.n	8001b30 <robotControl+0xa4>
	else if(STOP==setCommand)
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <robotControl+0xa8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d106      	bne.n	8001b06 <robotControl+0x7a>
		TB6612_init(V_ZERO,V_ZERO,V_ZERO,V_ZERO);
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 fc74 	bl	80023ec <TB6612_init>
}
 8001b04:	e014      	b.n	8001b30 <robotControl+0xa4>
	else if(SLOW==setCommand)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <robotControl+0xa8>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d106      	bne.n	8001b1c <robotControl+0x90>
		TB6612_init(V_SLOW,V_SLOW,V_SLOW,V_SLOW);
 8001b0e:	2328      	movs	r3, #40	; 0x28
 8001b10:	2228      	movs	r2, #40	; 0x28
 8001b12:	2128      	movs	r1, #40	; 0x28
 8001b14:	2028      	movs	r0, #40	; 0x28
 8001b16:	f000 fc69 	bl	80023ec <TB6612_init>
}
 8001b1a:	e009      	b.n	8001b30 <robotControl+0xa4>
	else if(FAST==setCommand)
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <robotControl+0xa8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d105      	bne.n	8001b30 <robotControl+0xa4>
		TB6612_init(V_FAST,V_FAST,V_FAST,V_FAST);
 8001b24:	2363      	movs	r3, #99	; 0x63
 8001b26:	2263      	movs	r2, #99	; 0x63
 8001b28:	2163      	movs	r1, #99	; 0x63
 8001b2a:	2063      	movs	r0, #99	; 0x63
 8001b2c:	f000 fc5e 	bl	80023ec <TB6612_init>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000000 	.word	0x20000000

08001b38 <followTheLight>:

void followTheLight(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
	if(BH1750_lux>MIN_LUX && BH1750_lux2>MIN_LUX)
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <followTheLight+0xb4>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	dd40      	ble.n	8001bd4 <followTheLight+0x9c>
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <followTheLight+0xb8>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	dd36      	ble.n	8001bd4 <followTheLight+0x9c>
	{
		TB6612_init(V_LIGHT-change,V_LIGHT+change,V_LIGHT+change,V_LIGHT-change);
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <followTheLight+0xbc>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001bf8 <followTheLight+0xc0>
 8001b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b7c:	793b      	ldrb	r3, [r7, #4]
 8001b7e:	b258      	sxtb	r0, r3
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <followTheLight+0xbc>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bf8 <followTheLight+0xc0>
 8001b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b92:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b96:	793b      	ldrb	r3, [r7, #4]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <followTheLight+0xbc>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bf8 <followTheLight+0xc0>
 8001ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bb0:	793b      	ldrb	r3, [r7, #4]
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <followTheLight+0xbc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <followTheLight+0xc0>
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bca:	793b      	ldrb	r3, [r7, #4]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	f000 fc0d 	bl	80023ec <TB6612_init>
 8001bd2:	e006      	b.n	8001be2 <followTheLight+0xaa>
	}
	else
	{
		TB6612_init(V_ZERO,V_ZERO,V_ZERO,V_ZERO);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 fc06 	bl	80023ec <TB6612_init>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000390 	.word	0x20000390
 8001bf0:	20000394 	.word	0x20000394
 8001bf4:	2000038c 	.word	0x2000038c
 8001bf8:	42440000 	.word	0x42440000

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f001 f9e2 	bl	8002fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f85a 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f7ff fbd8 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c0c:	f7ff fbb6 	bl	800137c <MX_DMA_Init>
  MX_TIM2_Init();
 8001c10:	f000 fcd4 	bl	80025bc <MX_TIM2_Init>
  MX_RTC_Init();
 8001c14:	f000 f904 	bl	8001e20 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c18:	f000 ff70 	bl	8002afc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c1c:	f000 fc22 	bl	8002464 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001c20:	f7ff fc86 	bl	8001530 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c24:	f7ff fcb2 	bl	800158c <MX_I2C2_Init>
  MX_TIM5_Init();
 8001c28:	f000 fd96 	bl	8002758 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fd14 	bl	8002658 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001c30:	f000 fe16 	bl	8002860 <MX_TIM9_Init>
  MX_DAC_Init();
 8001c34:	f7ff fb00 	bl	8001238 <MX_DAC_Init>
  MX_TIM6_Init();
 8001c38:	f000 fddc 	bl	80027f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4914      	ldr	r1, [pc, #80]	; (8001c90 <main+0x94>)
 8001c40:	4814      	ldr	r0, [pc, #80]	; (8001c94 <main+0x98>)
 8001c42:	f007 fd4c 	bl	80096de <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <main+0x9c>)
 8001c48:	f006 fc2c 	bl	80084a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001c4c:	4813      	ldr	r0, [pc, #76]	; (8001c9c <main+0xa0>)
 8001c4e:	f006 fc29 	bl	80084a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <main+0xa4>)
 8001c54:	f006 fc26 	bl	80084a4 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim8);

  BH1750_Init(&hi2c1, &hi2c2);
 8001c58:	4912      	ldr	r1, [pc, #72]	; (8001ca4 <main+0xa8>)
 8001c5a:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <main+0xac>)
 8001c5c:	f7ff f950 	bl	8000f00 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001c60:	2011      	movs	r0, #17
 8001c62:	f7ff f98f 	bl	8000f84 <BH1750_SetMode>

  setMax();
 8001c66:	f7ff fd6d 	bl	8001744 <setMax>

  wave_player_init(&htim6, &hdac);
 8001c6a:	4910      	ldr	r1, [pc, #64]	; (8001cac <main+0xb0>)
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <main+0xb4>)
 8001c6e:	f000 ffdf 	bl	8002c30 <wave_player_init>
  wave_player_start(audio_file);
 8001c72:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <main+0xb8>)
 8001c74:	f000 fff0 	bl	8002c58 <wave_player_start>
//	  printf("Time: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
//	  HAL_Delay(200);
//


	  robotControl();
 8001c78:	f7ff ff08 	bl	8001a8c <robotControl>

	  proportionalPID();
 8001c7c:	f7ff fd8e 	bl	800179c <proportionalPID>
	  if(LIGHT==setCommand)
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <main+0xbc>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d1f7      	bne.n	8001c78 <main+0x7c>
		  followTheLight();
 8001c88:	f7ff ff56 	bl	8001b38 <followTheLight>
	  robotControl();
 8001c8c:	e7f4      	b.n	8001c78 <main+0x7c>
 8001c8e:	bf00      	nop
 8001c90:	20000400 	.word	0x20000400
 8001c94:	200005d8 	.word	0x200005d8
 8001c98:	20000590 	.word	0x20000590
 8001c9c:	20000428 	.word	0x20000428
 8001ca0:	20000548 	.word	0x20000548
 8001ca4:	20000338 	.word	0x20000338
 8001ca8:	200002e4 	.word	0x200002e4
 8001cac:	200002d0 	.word	0x200002d0
 8001cb0:	200004b8 	.word	0x200004b8
 8001cb4:	0800cf50 	.word	0x0800cf50
 8001cb8:	20000000 	.word	0x20000000

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0ac      	sub	sp, #176	; 0xb0
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc6:	2234      	movs	r2, #52	; 0x34
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 fc1a 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	225c      	movs	r2, #92	; 0x5c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f008 fc0b 	bl	800a504 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <SystemClock_Config+0x124>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <SystemClock_Config+0x124>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <SystemClock_Config+0x124>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <SystemClock_Config+0x128>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <SystemClock_Config+0x128>)
 8001d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <SystemClock_Config+0x128>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d26:	2309      	movs	r3, #9
 8001d28:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d52:	23b4      	movs	r3, #180	; 0xb4
 8001d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f005 fcec 	bl	800774c <HAL_RCC_OscConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d7a:	f000 f84b 	bl	8001e14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d7e:	f004 fe9f 	bl	8006ac0 <HAL_PWREx_EnableOverDrive>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d88:	f000 f844 	bl	8001e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d90:	2302      	movs	r3, #2
 8001d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d9c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001da4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da8:	2105      	movs	r1, #5
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fed8 	bl	8006b60 <HAL_RCC_ClockConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001db6:	f000 f82d 	bl	8001e14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 ffe3 	bl	8006d94 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001dd4:	f000 f81e 	bl	8001e14 <Error_Handler>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	37b0      	adds	r7, #176	; 0xb0
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(SECOND_HALF_OF_BUFFER);
 8001df0:	2002      	movs	r0, #2
 8001df2:	f001 f805 	bl	8002e00 <wave_player_prepare_half_buffer>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	wave_player_prepare_half_buffer(FIRST_HALF_OF_BUFFER);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 fffa 	bl	8002e00 <wave_player_prepare_half_buffer>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <Error_Handler+0x8>
	...

08001e20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <MX_RTC_Init+0xc4>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e46:	227f      	movs	r2, #127	; 0x7f
 8001e48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e62:	481f      	ldr	r0, [pc, #124]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e64:	f005 ff10 	bl	8007c88 <HAL_RTC_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e6e:	f7ff ffd1 	bl	8001e14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001e8e:	f005 ff8c 	bl	8007daa <HAL_RTC_SetTime>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e98:	f7ff ffbc 	bl	8001e14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001eb4:	f006 f836 	bl	8007f24 <HAL_RTC_SetDate>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001ebe:	f7ff ffa9 	bl	8001e14 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 9, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	2109      	movs	r1, #9
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_RTC_Init+0xc0>)
 8001ec8:	f006 f946 	bl	8008158 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001ed2:	f7ff ff9f 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000408 	.word	0x20000408
 8001ee4:	40002800 	.word	0x40002800

08001ee8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_RTC_MspInit+0x30>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10a      	bne.n	8001f10 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RTC_MspInit+0x34>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2003      	movs	r0, #3
 8001f06:	f001 f9ac 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f001 f9c5 	bl	800329a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40002800 	.word	0x40002800
 8001f1c:	42470e3c 	.word	0x42470e3c

08001f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f001 f856 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <RTC_WKUP_IRQHandler+0x10>)
 8001fca:	f006 f985 	bl	80082d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000408 	.word	0x20000408

08001fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8001fde:	f001 fce3 	bl	80039a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000270 	.word	0x20000270

08001fec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001ff2:	f006 fbe9 	bl	80087c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001ff8:	f006 fbe6 	bl	80087c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000500 	.word	0x20000500
 8002004:	20000548 	.word	0x20000548

08002008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM2_IRQHandler+0x10>)
 800200e:	f006 fbdb 	bl	80087c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000590 	.word	0x20000590

0800201c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM3_IRQHandler+0x10>)
 8002022:	f006 fbd1 	bl	80087c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000470 	.word	0x20000470

08002030 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <I2C1_EV_IRQHandler+0x10>)
 8002036:	f002 fd45 	bl	8004ac4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200002e4 	.word	0x200002e4

08002044 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <I2C1_ER_IRQHandler+0x10>)
 800204a:	f002 feac 	bl	8004da6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200002e4 	.word	0x200002e4

08002058 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <USART1_IRQHandler+0x10>)
 800205e:	f007 fb6f 	bl	8009740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200005d8 	.word	0x200005d8

0800206c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM5_IRQHandler+0x10>)
 8002072:	f006 fba9 	bl	80087c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000428 	.word	0x20000428

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_kill>:

int _kill(int pid, int sig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800209a:	f008 fa09 	bl	800a4b0 <__errno>
 800209e:	4603      	mov	r3, r0
 80020a0:	2216      	movs	r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
	return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_exit>:

void _exit (int status)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffe7 	bl	8002090 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020c2:	e7fe      	b.n	80020c2 <_exit+0x12>

080020c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e00a      	b.n	80020ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020d6:	f3af 8000 	nop.w
 80020da:	4601      	mov	r1, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf0      	blt.n	80020d6 <_read+0x12>
	}

return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb5b 	bl	80017d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf1      	blt.n	8002110 <_write+0x12>
	}
	return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_close>:

int _close(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	return -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215e:	605a      	str	r2, [r3, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f008 f96e 	bl	800a4b0 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20020000 	.word	0x20020000
 8002200:	00000400 	.word	0x00000400
 8002204:	20000254 	.word	0x20000254
 8002208:	20000a70 	.word	0x20000a70

0800220c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <set_motorA>:
#include "tb6612fng.h"
#include "main.h"


void set_motorA(int8_t speed)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0a      	blt.n	8002258 <set_motorA+0x28>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 8002242:	2201      	movs	r2, #1
 8002244:	2108      	movs	r1, #8
 8002246:	4813      	ldr	r0, [pc, #76]	; (8002294 <set_motorA+0x64>)
 8002248:	f001 ffba 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	2110      	movs	r1, #16
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <set_motorA+0x64>)
 8002252:	f001 ffb5 	bl	80041c0 <HAL_GPIO_WritePin>
 8002256:	e009      	b.n	800226c <set_motorA+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	2108      	movs	r1, #8
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <set_motorA+0x64>)
 800225e:	f001 ffaf 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 8002262:	2201      	movs	r2, #1
 8002264:	2110      	movs	r1, #16
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <set_motorA+0x64>)
 8002268:	f001 ffaa 	bl	80041c0 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 800226c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <set_motorA+0x68>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	429a      	cmp	r2, r3
 8002278:	d303      	bcc.n	8002282 <set_motorA+0x52>
		speed=htim1.Instance->ARR;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <set_motorA+0x68>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <set_motorA+0x68>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020400 	.word	0x40020400
 8002298:	20000500 	.word	0x20000500

0800229c <set_motorB>:

void set_motorB(int8_t speed)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <set_motorB+0x2a>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4814      	ldr	r0, [pc, #80]	; (8002304 <set_motorB+0x68>)
 80022b4:	f001 ff84 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022be:	4811      	ldr	r0, [pc, #68]	; (8002304 <set_motorB+0x68>)
 80022c0:	f001 ff7e 	bl	80041c0 <HAL_GPIO_WritePin>
 80022c4:	e00a      	b.n	80022dc <set_motorB+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <set_motorB+0x68>)
 80022cc:	f001 ff78 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <set_motorB+0x68>)
 80022d8:	f001 ff72 	bl	80041c0 <HAL_GPIO_WritePin>
	}

	if(speed>=htim1.Instance->ARR)
 80022dc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <set_motorB+0x6c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d303      	bcc.n	80022f2 <set_motorB+0x56>
		speed=htim1.Instance->ARR;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <set_motorB+0x6c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <set_motorB+0x6c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40020800 	.word	0x40020800
 8002308:	20000500 	.word	0x20000500

0800230c <set_motorC>:

void set_motorC(int8_t speed)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0a      	blt.n	8002334 <set_motorC+0x28>
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2104      	movs	r1, #4
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <set_motorC+0x64>)
 8002324:	f001 ff4c 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	2108      	movs	r1, #8
 800232c:	4810      	ldr	r0, [pc, #64]	; (8002370 <set_motorC+0x64>)
 800232e:	f001 ff47 	bl	80041c0 <HAL_GPIO_WritePin>
 8002332:	e009      	b.n	8002348 <set_motorC+0x3c>
	}
	else
	{
		HAL_GPIO_WritePin(CIN1_GPIO_Port, CIN1_Pin, RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2104      	movs	r1, #4
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <set_motorC+0x64>)
 800233a:	f001 ff41 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2108      	movs	r1, #8
 8002342:	480b      	ldr	r0, [pc, #44]	; (8002370 <set_motorC+0x64>)
 8002344:	f001 ff3c 	bl	80041c0 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 8002348:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <set_motorC+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	429a      	cmp	r2, r3
 8002354:	d303      	bcc.n	800235e <set_motorC+0x52>
		speed=htim3.Instance->ARR;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <set_motorC+0x68>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <set_motorC+0x68>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40020800 	.word	0x40020800
 8002374:	20000470 	.word	0x20000470

08002378 <set_motorD>:

void set_motorD(int8_t speed)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	if (speed>=0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <set_motorD+0x2a>
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_SET);
 800238a:	2201      	movs	r2, #1
 800238c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002390:	4813      	ldr	r0, [pc, #76]	; (80023e0 <set_motorD+0x68>)
 8002392:	f001 ff15 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2104      	movs	r1, #4
 800239a:	4812      	ldr	r0, [pc, #72]	; (80023e4 <set_motorD+0x6c>)
 800239c:	f001 ff10 	bl	80041c0 <HAL_GPIO_WritePin>
 80023a0:	e00a      	b.n	80023b8 <set_motorD+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(DIN1_GPIO_Port, DIN1_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <set_motorD+0x68>)
 80023aa:	f001 ff09 	bl	80041c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIN2_GPIO_Port, DIN2_Pin, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	2104      	movs	r1, #4
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <set_motorD+0x6c>)
 80023b4:	f001 ff04 	bl	80041c0 <HAL_GPIO_WritePin>
	}

	if(speed>=htim3.Instance->ARR)
 80023b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <set_motorD+0x70>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d303      	bcc.n	80023ce <set_motorD+0x56>
		speed=htim3.Instance->ARR;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <set_motorD+0x70>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <set_motorD+0x70>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	20000470 	.word	0x20000470

080023ec <TB6612_init>:

void TB6612_init(int8_t speedA, int8_t speedB, int8_t speedC, int8_t speedD)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	4603      	mov	r3, r0
 8002400:	71bb      	strb	r3, [r7, #6]
 8002402:	460b      	mov	r3, r1
 8002404:	717b      	strb	r3, [r7, #5]
 8002406:	4613      	mov	r3, r2
 8002408:	713b      	strb	r3, [r7, #4]
	set_motorA(speedA);
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff0e 	bl	8002230 <set_motorA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002414:	2100      	movs	r1, #0
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <TB6612_init+0x70>)
 8002418:	f006 f90e 	bl	8008638 <HAL_TIM_PWM_Start>
	set_motorB(speedB);
 800241c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff3b 	bl	800229c <set_motorB>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002426:	2104      	movs	r1, #4
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <TB6612_init+0x70>)
 800242a:	f006 f905 	bl	8008638 <HAL_TIM_PWM_Start>
	set_motorC(speedC);
 800242e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff6a 	bl	800230c <set_motorC>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002438:	2100      	movs	r1, #0
 800243a:	4809      	ldr	r0, [pc, #36]	; (8002460 <TB6612_init+0x74>)
 800243c:	f006 f8fc 	bl	8008638 <HAL_TIM_PWM_Start>
	set_motorD(speedD);
 8002440:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff97 	bl	8002378 <set_motorD>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800244a:	2104      	movs	r1, #4
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <TB6612_init+0x74>)
 800244e:	f006 f8f3 	bl	8008638 <HAL_TIM_PWM_Start>
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	20000500 	.word	0x20000500
 8002460:	20000470 	.word	0x20000470

08002464 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b096      	sub	sp, #88	; 0x58
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]
 8002492:	615a      	str	r2, [r3, #20]
 8002494:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2220      	movs	r2, #32
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f008 f831 	bl	800a504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024a4:	4a44      	ldr	r2, [pc, #272]	; (80025b8 <MX_TIM1_Init+0x154>)
 80024a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024aa:	222c      	movs	r2, #44	; 0x2c
 80024ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024b6:	2263      	movs	r2, #99	; 0x63
 80024b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024c0:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024cc:	4839      	ldr	r0, [pc, #228]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024ce:	f005 ff31 	bl	8008334 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80024d8:	f7ff fc9c 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024e6:	4619      	mov	r1, r3
 80024e8:	4832      	ldr	r0, [pc, #200]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024ea:	f006 fb37 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80024f4:	f7ff fc8e 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024f8:	482e      	ldr	r0, [pc, #184]	; (80025b4 <MX_TIM1_Init+0x150>)
 80024fa:	f006 f843 	bl	8008584 <HAL_TIM_PWM_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002504:	f7ff fc86 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002514:	4619      	mov	r1, r3
 8002516:	4827      	ldr	r0, [pc, #156]	; (80025b4 <MX_TIM1_Init+0x150>)
 8002518:	f006 ff20 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002522:	f7ff fc77 	bl	8001e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002526:	2360      	movs	r3, #96	; 0x60
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002532:	2300      	movs	r3, #0
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	2200      	movs	r2, #0
 8002548:	4619      	mov	r1, r3
 800254a:	481a      	ldr	r0, [pc, #104]	; (80025b4 <MX_TIM1_Init+0x150>)
 800254c:	f006 fa44 	bl	80089d8 <HAL_TIM_PWM_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002556:	f7ff fc5d 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	2204      	movs	r2, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4814      	ldr	r0, [pc, #80]	; (80025b4 <MX_TIM1_Init+0x150>)
 8002564:	f006 fa38 	bl	80089d8 <HAL_TIM_PWM_ConfigChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800256e:	f7ff fc51 	bl	8001e14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM1_Init+0x150>)
 8002596:	f006 ff5d 	bl	8009454 <HAL_TIMEx_ConfigBreakDeadTime>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80025a0:	f7ff fc38 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM1_Init+0x150>)
 80025a6:	f000 fa49 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3758      	adds	r7, #88	; 0x58
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000500 	.word	0x20000500
 80025b8:	40010000 	.word	0x40010000

080025bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	463b      	mov	r3, r7
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_TIM2_Init+0x98>)
 80025da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_TIM2_Init+0x98>)
 80025e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80025e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_TIM2_Init+0x98>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <MX_TIM2_Init+0x98>)
 80025f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_TIM2_Init+0x98>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_TIM2_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002602:	4814      	ldr	r0, [pc, #80]	; (8002654 <MX_TIM2_Init+0x98>)
 8002604:	f005 fe96 	bl	8008334 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800260e:	f7ff fc01 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_TIM2_Init+0x98>)
 8002620:	f006 fa9c 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800262a:	f7ff fbf3 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800262e:	2320      	movs	r3, #32
 8002630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002636:	463b      	mov	r3, r7
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_TIM2_Init+0x98>)
 800263c:	f006 fe8e 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002646:	f7ff fbe5 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000590 	.word	0x20000590

08002658 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
 8002684:	615a      	str	r2, [r3, #20]
 8002686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002688:	4b31      	ldr	r3, [pc, #196]	; (8002750 <MX_TIM3_Init+0xf8>)
 800268a:	4a32      	ldr	r2, [pc, #200]	; (8002754 <MX_TIM3_Init+0xfc>)
 800268c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <MX_TIM3_Init+0xf8>)
 8002690:	222c      	movs	r2, #44	; 0x2c
 8002692:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <MX_TIM3_Init+0xf8>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <MX_TIM3_Init+0xf8>)
 800269c:	2263      	movs	r2, #99	; 0x63
 800269e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ac:	4828      	ldr	r0, [pc, #160]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026ae:	f005 fe41 	bl	8008334 <HAL_TIM_Base_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80026b8:	f7ff fbac 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c6:	4619      	mov	r1, r3
 80026c8:	4821      	ldr	r0, [pc, #132]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026ca:	f006 fa47 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80026d4:	f7ff fb9e 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026d8:	481d      	ldr	r0, [pc, #116]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026da:	f005 ff53 	bl	8008584 <HAL_TIM_PWM_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80026e4:	f7ff fb96 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4619      	mov	r1, r3
 80026f6:	4816      	ldr	r0, [pc, #88]	; (8002750 <MX_TIM3_Init+0xf8>)
 80026f8:	f006 fe30 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002702:	f7ff fb87 	bl	8001e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002706:	2360      	movs	r3, #96	; 0x60
 8002708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_TIM3_Init+0xf8>)
 800271e:	f006 f95b 	bl	80089d8 <HAL_TIM_PWM_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002728:	f7ff fb74 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2204      	movs	r2, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM3_Init+0xf8>)
 8002734:	f006 f950 	bl	80089d8 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800273e:	f7ff fb69 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM3_Init+0xf8>)
 8002744:	f000 f97a 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3738      	adds	r7, #56	; 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000470 	.word	0x20000470
 8002754:	40000400 	.word	0x40000400

08002758 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	463b      	mov	r3, r7
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <MX_TIM5_Init+0x94>)
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <MX_TIM5_Init+0x98>)
 8002778:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_TIM5_Init+0x94>)
 800277c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002780:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_TIM5_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_TIM5_Init+0x94>)
 800278a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800278e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_TIM5_Init+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_TIM5_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800279c:	4813      	ldr	r0, [pc, #76]	; (80027ec <MX_TIM5_Init+0x94>)
 800279e:	f005 fdc9 	bl	8008334 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027a8:	f7ff fb34 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4619      	mov	r1, r3
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <MX_TIM5_Init+0x94>)
 80027ba:	f006 f9cf 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027c4:	f7ff fb26 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027c8:	2320      	movs	r3, #32
 80027ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_TIM5_Init+0x94>)
 80027d6:	f006 fdc1 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f7ff fb18 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000428 	.word	0x20000428
 80027f0:	40000c00 	.word	0x40000c00

080027f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <MX_TIM6_Init+0x64>)
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <MX_TIM6_Init+0x68>)
 8002806:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <MX_TIM6_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_TIM6_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <MX_TIM6_Init+0x64>)
 8002816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_TIM6_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002822:	480d      	ldr	r0, [pc, #52]	; (8002858 <MX_TIM6_Init+0x64>)
 8002824:	f005 fd86 	bl	8008334 <HAL_TIM_Base_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800282e:	f7ff faf1 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002832:	2320      	movs	r3, #32
 8002834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800283a:	463b      	mov	r3, r7
 800283c:	4619      	mov	r1, r3
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <MX_TIM6_Init+0x64>)
 8002840:	f006 fd8c 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800284a:	f7ff fae3 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200004b8 	.word	0x200004b8
 800285c:	40001000 	.word	0x40001000

08002860 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002866:	463b      	mov	r3, r7
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_TIM9_Init+0x6c>)
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <MX_TIM9_Init+0x70>)
 8002876:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8000-1;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_TIM9_Init+0x6c>)
 800287a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800287e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <MX_TIM9_Init+0x6c>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_TIM9_Init+0x6c>)
 8002888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800288c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_TIM9_Init+0x6c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <MX_TIM9_Init+0x6c>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800289a:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_TIM9_Init+0x6c>)
 800289c:	f005 fd4a 	bl	8008334 <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80028a6:	f7ff fab5 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_TIM9_Init+0x6c>)
 80028b6:	f006 f951 	bl	8008b5c <HAL_TIM_ConfigClockSource>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80028c0:	f7ff faa8 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000548 	.word	0x20000548
 80028d0:	40014000 	.word	0x40014000

080028d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_TIM_Base_MspInit+0x150>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d116      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a4e      	ldr	r2, [pc, #312]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	2018      	movs	r0, #24
 8002908:	f000 fcab 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800290c:	2018      	movs	r0, #24
 800290e:	f000 fcc4 	bl	800329a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002912:	e082      	b.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d116      	bne.n	800294c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a40      	ldr	r2, [pc, #256]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	201c      	movs	r0, #28
 8002940:	f000 fc8f 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002944:	201c      	movs	r0, #28
 8002946:	f000 fca8 	bl	800329a <HAL_NVIC_EnableIRQ>
}
 800294a:	e066      	b.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a36      	ldr	r2, [pc, #216]	; (8002a2c <HAL_TIM_Base_MspInit+0x158>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d116      	bne.n	8002984 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	201d      	movs	r0, #29
 8002978:	f000 fc73 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800297c:	201d      	movs	r0, #29
 800297e:	f000 fc8c 	bl	800329a <HAL_NVIC_EnableIRQ>
}
 8002982:	e04a      	b.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_TIM_Base_MspInit+0x15c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d116      	bne.n	80029bc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	2032      	movs	r0, #50	; 0x32
 80029b0:	f000 fc57 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029b4:	2032      	movs	r0, #50	; 0x32
 80029b6:	f000 fc70 	bl	800329a <HAL_NVIC_EnableIRQ>
}
 80029ba:	e02e      	b.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_TIM_Base_MspInit+0x160>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
}
 80029e2:	e01a      	b.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_TIM_Base_MspInit+0x164>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d115      	bne.n	8002a1a <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_TIM_Base_MspInit+0x154>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2018      	movs	r0, #24
 8002a10:	f000 fc27 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a14:	2018      	movs	r0, #24
 8002a16:	f000 fc40 	bl	800329a <HAL_NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000c00 	.word	0x40000c00
 8002a34:	40001000 	.word	0x40001000
 8002a38:	40014000 	.word	0x40014000

08002a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_TIM_MspPostInit+0xb0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d11f      	bne.n	8002a9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin|PWM2_Pin;
 8002a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4817      	ldr	r0, [pc, #92]	; (8002af4 <HAL_TIM_MspPostInit+0xb8>)
 8002a98:	f001 f9fe 	bl	8003e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a9c:	e022      	b.n	8002ae4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_TIM_MspPostInit+0xbc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d11d      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_TIM_MspPostInit+0xb4>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_TIM_MspPostInit+0xb8>)
 8002ae0:	f001 f9da 	bl	8003e98 <HAL_GPIO_Init>
}
 8002ae4:	bf00      	nop
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40000400 	.word	0x40000400

08002afc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <MX_USART1_UART_Init+0x50>)
 8002b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b22:	220c      	movs	r2, #12
 8002b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_USART1_UART_Init+0x4c>)
 8002b34:	f006 fcf4 	bl	8009520 <HAL_UART_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b3e:	f7ff f969 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200005d8 	.word	0x200005d8
 8002b4c:	40011000 	.word	0x40011000

08002b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <HAL_UART_MspInit+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d152      	bne.n	8002c18 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_UART_MspInit+0xd4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4619      	mov	r1, r3
 8002be2:	4811      	ldr	r0, [pc, #68]	; (8002c28 <HAL_UART_MspInit+0xd8>)
 8002be4:	f001 f958 	bl	8003e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002be8:	2340      	movs	r3, #64	; 0x40
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	480a      	ldr	r0, [pc, #40]	; (8002c2c <HAL_UART_MspInit+0xdc>)
 8002c04:	f001 f948 	bl	8003e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2025      	movs	r0, #37	; 0x25
 8002c0e:	f000 fb28 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c12:	2025      	movs	r0, #37	; 0x25
 8002c14:	f000 fb41 	bl	800329a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400

08002c30 <wave_player_init>:
#include "main.h"

struct wave_player_s wave_player;

void wave_player_init(TIM_HandleTypeDef *_htim, DAC_HandleTypeDef *_hdac)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	wave_player.htim = _htim;
 8002c3a:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <wave_player_init+0x24>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6013      	str	r3, [r2, #0]
	wave_player.hdac = _hdac;
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <wave_player_init+0x24>)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6053      	str	r3, [r2, #4]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000061c 	.word	0x2000061c

08002c58 <wave_player_start>:

void wave_player_start(uint8_t *file)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
	int8_t status;

	status = wave_player_read_header(file);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f827 	bl	8002cb4 <wave_player_read_header>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]

	if(ERROR == status)
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d017      	beq.n	8002ca2 <wave_player_start+0x4a>
	{
		return;
	}

	wave_player_set_timer_arr(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <wave_player_start+0x54>)
 8002c74:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f869 	bl	8002d50 <wave_player_set_timer_arr>

	wave_player_prepare_first_buffer();
 8002c7e:	f000 f883 	bl	8002d88 <wave_player_prepare_first_buffer>

	HAL_TIM_Base_Start(wave_player.htim);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <wave_player_start+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 fba4 	bl	80083d4 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <wave_player_start+0x54>)
 8002c8e:	6858      	ldr	r0, [r3, #4]
 8002c90:	2304      	movs	r3, #4
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <wave_player_start+0x58>)
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f000 fb3a 	bl	8003314 <HAL_DAC_Start_DMA>
 8002ca0:	e000      	b.n	8002ca4 <wave_player_start+0x4c>
		return;
 8002ca2:	bf00      	nop
}
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000061c 	.word	0x2000061c
 8002cb0:	20000628 	.word	0x20000628

08002cb4 <wave_player_read_header>:

int8_t wave_player_read_header(uint8_t *file)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	uint32_t i;

	wave_player.data_pointer = file;
 8002cbc:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <wave_player_read_header+0x8c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6093      	str	r3, [r2, #8]

	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e00e      	b.n	8002ce6 <wave_player_read_header+0x32>
	{
		wave_player.file_hdr.bytes[i] = *(wave_player.data_pointer+i);
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <wave_player_read_header+0x8c>)
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	7819      	ldrb	r1, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <wave_player_read_header+0x8c>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8002cdc:	460a      	mov	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < WAVE_FILE_HEADER_SIZE; i++)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8002cea:	d9ed      	bls.n	8002cc8 <wave_player_read_header+0x14>
	}

	if(RIFF_HDR_CONST != wave_player.file_hdr.wave_file_hdr.riff_hdr)
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <wave_player_read_header+0x8c>)
 8002cee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002cf2:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <wave_player_read_header+0x90>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d001      	beq.n	8002cfc <wave_player_read_header+0x48>
	{
		return ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01b      	b.n	8002d34 <wave_player_read_header+0x80>
	}

	if(WAVE_ID_CONST != wave_player.file_hdr.wave_file_hdr.wave_id)
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <wave_player_read_header+0x8c>)
 8002cfe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <wave_player_read_header+0x94>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d001      	beq.n	8002d0c <wave_player_read_header+0x58>
	{
		return ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e013      	b.n	8002d34 <wave_player_read_header+0x80>
	}

	if(FMT_CONST != wave_player.file_hdr.wave_file_hdr.chunk_marker)
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <wave_player_read_header+0x8c>)
 8002d0e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <wave_player_read_header+0x98>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d001      	beq.n	8002d1c <wave_player_read_header+0x68>
	{
		return ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e00b      	b.n	8002d34 <wave_player_read_header+0x80>
	}

	if(CHANNEL_MONO != wave_player.file_hdr.wave_file_hdr.channels)
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <wave_player_read_header+0x8c>)
 8002d1e:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <wave_player_read_header+0x76>
	{
		return ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e004      	b.n	8002d34 <wave_player_read_header+0x80>
	}

	wave_player.byte_counter = WAVE_FILE_HEADER_SIZE;
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <wave_player_read_header+0x8c>)
 8002d2c:	222c      	movs	r2, #44	; 0x2c
 8002d2e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	return SUCCESS;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	2000061c 	.word	0x2000061c
 8002d44:	46464952 	.word	0x46464952
 8002d48:	45564157 	.word	0x45564157
 8002d4c:	20746d66 	.word	0x20746d66

08002d50 <wave_player_set_timer_arr>:

void wave_player_set_timer_arr(uint32_t sample_rate)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	uint32_t arr;

	arr = HAL_RCC_GetPCLK1Freq() / sample_rate;
 8002d58:	f003 fff4 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(wave_player.htim, arr - 1);
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <wave_player_set_timer_arr+0x34>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <wave_player_set_timer_arr+0x34>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000061c 	.word	0x2000061c

08002d88 <wave_player_prepare_first_buffer>:

void wave_player_prepare_first_buffer(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
	int32_t i;
	int16_t audio_sample;

	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	e028      	b.n	8002de6 <wave_player_prepare_first_buffer+0x5e>
	{
		audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002d9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002dae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002db2:	440b      	add	r3, r1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	807b      	strh	r3, [r7, #2]

		wave_player.buffer[i] = (audio_sample + 32768);
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002dc2:	b299      	uxth	r1, r3
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	460a      	mov	r2, r1
 8002dd0:	809a      	strh	r2, [r3, #4]

		wave_player.byte_counter += 2;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002dd4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dd8:	3302      	adds	r3, #2
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <wave_player_prepare_first_buffer+0x74>)
 8002ddc:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
	for(i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	dbd2      	blt.n	8002d94 <wave_player_prepare_first_buffer+0xc>
	}
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	2000061c 	.word	0x2000061c

08002e00 <wave_player_prepare_half_buffer>:
extern uint8_t audio_file[];
void wave_player_prepare_half_buffer(uint8_t half_number)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
	int32_t i;
	int16_t audio_sample;

	if(FIRST_HALF_OF_BUFFER == half_number)
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d14a      	bne.n	8002ea6 <wave_player_prepare_half_buffer+0xa6>
	{
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e043      	b.n	8002e9e <wave_player_prepare_half_buffer+0x9e>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e20:	3301      	adds	r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e30:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e34:	440b      	add	r3, r1
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e44:	b299      	uxth	r1, r3
 8002e46:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	460a      	mov	r2, r1
 8002e52:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8002e54:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e56:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	4a42      	ldr	r2, [pc, #264]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e5e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size / 2)
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e6a:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d311      	bcc.n	8002e98 <wave_player_prepare_half_buffer+0x98>
			{
				int8_t status;

				status = wave_player_read_header(audio_file);
 8002e74:	483d      	ldr	r0, [pc, #244]	; (8002f6c <wave_player_prepare_half_buffer+0x16c>)
 8002e76:	f7ff ff1d 	bl	8002cb4 <wave_player_read_header>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	723b      	strb	r3, [r7, #8]

				if(ERROR == status)
 8002e7e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d069      	beq.n	8002f5a <wave_player_prepare_half_buffer+0x15a>
				{
					return;
				}

				wave_player_set_timer_arr(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002e88:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5f 	bl	8002d50 <wave_player_set_timer_arr>

				wave_player_prepare_first_buffer();
 8002e92:	f7ff ff79 	bl	8002d88 <wave_player_prepare_first_buffer>
				return;
 8002e96:	e063      	b.n	8002f60 <wave_player_prepare_half_buffer+0x160>
		for(i = 0; i < AUDIO_BUFFER_SIZE/2; i++)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2bff      	cmp	r3, #255	; 0xff
 8002ea2:	ddb8      	ble.n	8002e16 <wave_player_prepare_half_buffer+0x16>
 8002ea4:	e05c      	b.n	8002f60 <wave_player_prepare_half_buffer+0x160>
			}
		}
	}
	else if(SECOND_HALF_OF_BUFFER == half_number)
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d159      	bne.n	8002f60 <wave_player_prepare_half_buffer+0x160>
	{
		HAL_DAC_Start_DMA(wave_player.hdac, DAC_CHANNEL_1, (uint32_t *)wave_player.buffer, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_L);
 8002eac:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002eae:	6858      	ldr	r0, [r3, #4]
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <wave_player_prepare_half_buffer+0x170>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f000 fa2a 	bl	8003314 <HAL_DAC_Start_DMA>

		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8002ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e043      	b.n	8002f50 <wave_player_prepare_half_buffer+0x150>
		{
			audio_sample = (*(wave_player.data_pointer+(wave_player.byte_counter+1)) << 8) | *(wave_player.data_pointer+wave_player.byte_counter);
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002ece:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	b21a      	sxth	r2, r3
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002ee2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ee6:	440b      	add	r3, r1
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	817b      	strh	r3, [r7, #10]

			wave_player.buffer[i] = (audio_sample + 32768);
 8002ef0:	897b      	ldrh	r3, [r7, #10]
 8002ef2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ef6:	b299      	uxth	r1, r3
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3304      	adds	r3, #4
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	460a      	mov	r2, r1
 8002f04:	809a      	strh	r2, [r3, #4]

			wave_player.byte_counter += 2;
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002f08:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002f10:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c

			if(wave_player.byte_counter >= wave_player.file_hdr.wave_file_hdr.data_size / 2)
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002f16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002f1c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d311      	bcc.n	8002f4a <wave_player_prepare_half_buffer+0x14a>
			{
				int8_t status;

				status = wave_player_read_header(audio_file);
 8002f26:	4811      	ldr	r0, [pc, #68]	; (8002f6c <wave_player_prepare_half_buffer+0x16c>)
 8002f28:	f7ff fec4 	bl	8002cb4 <wave_player_read_header>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	727b      	strb	r3, [r7, #9]

				if(ERROR == status)
 8002f30:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d012      	beq.n	8002f5e <wave_player_prepare_half_buffer+0x15e>
				{
					return;
				}

				wave_player_set_timer_arr(wave_player.file_hdr.wave_file_hdr.sample_rate);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <wave_player_prepare_half_buffer+0x168>)
 8002f3a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff06 	bl	8002d50 <wave_player_set_timer_arr>

				wave_player_prepare_first_buffer();
 8002f44:	f7ff ff20 	bl	8002d88 <wave_player_prepare_first_buffer>
				return;
 8002f48:	e00a      	b.n	8002f60 <wave_player_prepare_half_buffer+0x160>
		for(i = AUDIO_BUFFER_SIZE/2; i < AUDIO_BUFFER_SIZE; i++)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f56:	dbb7      	blt.n	8002ec8 <wave_player_prepare_half_buffer+0xc8>
 8002f58:	e002      	b.n	8002f60 <wave_player_prepare_half_buffer+0x160>
					return;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <wave_player_prepare_half_buffer+0x160>
					return;
 8002f5e:	bf00      	nop
			}
		}
	}
}
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000061c 	.word	0x2000061c
 8002f6c:	0800cf50 	.word	0x0800cf50
 8002f70:	20000628 	.word	0x20000628

08002f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f90:	4c0b      	ldr	r4, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f9e:	f7ff f935 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f007 fa8b 	bl	800a4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa6:	f7fe fe29 	bl	8001bfc <main>
  bx  lr    
 8002faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002fb8:	0807a8cc 	.word	0x0807a8cc
  ldr r2, =_sbss
 8002fbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002fc0:	20000a6c 	.word	0x20000a6c

08002fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC_IRQHandler>
	...

08002fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_Init+0x40>)
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_Init+0x40>)
 8002fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_Init+0x40>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_Init+0x40>)
 8002fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f000 f92b 	bl	800324c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f000 f808 	bl	800300c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffc:	f7fe ff90 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00

0800300c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_InitTick+0x54>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	fbb3 f3f1 	udiv	r3, r3, r1
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f943 	bl	80032b6 <HAL_SYSTICK_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00e      	b.n	8003058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d80a      	bhi.n	8003056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003040:	2200      	movs	r2, #0
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f000 f90b 	bl	8003262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_InitTick+0x5c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000004 	.word	0x20000004
 8003064:	2000000c 	.word	0x2000000c
 8003068:	20000008 	.word	0x20000008

0800306c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x20>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x24>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_IncTick+0x24>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2000000c 	.word	0x2000000c
 8003090:	20000a58 	.word	0x20000a58

08003094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetTick+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000a58 	.word	0x20000a58

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4907      	ldr	r1, [pc, #28]	; (8003148 <__NVIC_EnableIRQ+0x38>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000e100 	.word	0xe000e100

0800314c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db0a      	blt.n	8003176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	490c      	ldr	r1, [pc, #48]	; (8003198 <__NVIC_SetPriority+0x4c>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	440b      	add	r3, r1
 8003170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003174:	e00a      	b.n	800318c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4908      	ldr	r1, [pc, #32]	; (800319c <__NVIC_SetPriority+0x50>)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	3b04      	subs	r3, #4
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	440b      	add	r3, r1
 800318a:	761a      	strb	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f1c3 0307 	rsb	r3, r3, #7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf28      	it	cs
 80031be:	2304      	movcs	r3, #4
 80031c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d902      	bls.n	80031d0 <NVIC_EncodePriority+0x30>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b03      	subs	r3, #3
 80031ce:	e000      	b.n	80031d2 <NVIC_EncodePriority+0x32>
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	4313      	orrs	r3, r2
         );
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	; 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003218:	d301      	bcc.n	800321e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321a:	2301      	movs	r3, #1
 800321c:	e00f      	b.n	800323e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <SysTick_Config+0x40>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003226:	210f      	movs	r1, #15
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	f7ff ff8e 	bl	800314c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <SysTick_Config+0x40>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <SysTick_Config+0x40>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010

0800324c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff29 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003274:	f7ff ff3e 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	6978      	ldr	r0, [r7, #20]
 8003280:	f7ff ff8e 	bl	80031a0 <NVIC_EncodePriority>
 8003284:	4602      	mov	r2, r0
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff5d 	bl	800314c <__NVIC_SetPriority>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff31 	bl	8003110 <__NVIC_EnableIRQ>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffa2 	bl	8003208 <SysTick_Config>
 80032c4:	4603      	mov	r3, r0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e014      	b.n	800330a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	791b      	ldrb	r3, [r3, #4]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd ffcb 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	795b      	ldrb	r3, [r3, #5]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DAC_Start_DMA+0x22>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ab      	b.n	800348e <HAL_DAC_Start_DMA+0x17a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12f      	bne.n	80033a8 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_DAC_Start_DMA+0x184>)
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <HAL_DAC_Start_DMA+0x188>)
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a50      	ldr	r2, [pc, #320]	; (80034a0 <HAL_DAC_Start_DMA+0x18c>)
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800336e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b08      	cmp	r3, #8
 8003374:	d013      	beq.n	800339e <HAL_DAC_Start_DMA+0x8a>
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d845      	bhi.n	8003408 <HAL_DAC_Start_DMA+0xf4>
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_DAC_Start_DMA+0x76>
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d005      	beq.n	8003394 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003388:	e03e      	b.n	8003408 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3308      	adds	r3, #8
 8003390:	613b      	str	r3, [r7, #16]
        break;
 8003392:	e03c      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	613b      	str	r3, [r7, #16]
        break;
 800339c:	e037      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3310      	adds	r3, #16
 80033a4:	613b      	str	r3, [r7, #16]
        break;
 80033a6:	e032      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_DAC_Start_DMA+0x190>)
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <HAL_DAC_Start_DMA+0x194>)
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <HAL_DAC_Start_DMA+0x198>)
 80033be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d013      	beq.n	80033fe <HAL_DAC_Start_DMA+0xea>
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d817      	bhi.n	800340c <HAL_DAC_Start_DMA+0xf8>
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_DAC_Start_DMA+0xd6>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d005      	beq.n	80033f4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80033e8:	e010      	b.n	800340c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	613b      	str	r3, [r7, #16]
        break;
 80033f2:	e00c      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3318      	adds	r3, #24
 80033fa:	613b      	str	r3, [r7, #16]
        break;
 80033fc:	e007      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	331c      	adds	r3, #28
 8003404:	613b      	str	r3, [r7, #16]
        break;
 8003406:	e002      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_DAC_Start_DMA+0xfa>
        break;
 800340c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003422:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f000 f9d1 	bl	80037d4 <HAL_DMA_Start_IT>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]
 8003436:	e010      	b.n	800345a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003446:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68d8      	ldr	r0, [r3, #12]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	f000 f9bf 	bl	80037d4 <HAL_DMA_Start_IT>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e005      	b.n	800348c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	08003563 	.word	0x08003563
 800349c:	08003585 	.word	0x08003585
 80034a0:	080035a1 	.word	0x080035a1
 80034a4:	0800360b 	.word	0x0800360b
 80034a8:	0800362d 	.word	0x0800362d
 80034ac:	08003649 	.word	0x08003649

080034b0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	795b      	ldrb	r3, [r3, #5]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_DAC_ConfigChannel+0x18>
 80034d8:	2302      	movs	r3, #2
 80034da:	e03c      	b.n	8003556 <HAL_DAC_ConfigChannel+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2202      	movs	r2, #2
 80034e6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4013      	ands	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	22c0      	movs	r2, #192	; 0xc0
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43da      	mvns	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	400a      	ands	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7fe fc39 	bl	8001de8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	711a      	strb	r2, [r3, #4]
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7fe fc33 	bl	8001dfe <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f043 0204 	orr.w	r2, r3, #4
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff78 	bl	80034b0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	711a      	strb	r2, [r3, #4]
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ffd8 	bl	80035ce <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	711a      	strb	r2, [r3, #4]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ffd1 	bl	80035e2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff ffc7 	bl	80035f6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	711a      	strb	r2, [r3, #4]
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff fd06 	bl	8003094 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e099      	b.n	80037c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	e00f      	b.n	80036d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b6:	f7ff fced 	bl	8003094 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d908      	bls.n	80036d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e078      	b.n	80037c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e8      	bne.n	80036b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <HAL_DMA_Init+0x158>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b04      	cmp	r3, #4
 8003768:	d117      	bne.n	800379a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fb0f 	bl	8003da0 <DMA_CheckFifoParam>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003796:	2301      	movs	r3, #1
 8003798:	e016      	b.n	80037c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fac6 	bl	8003d34 <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	f010803f 	.word	0xf010803f

080037d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_DMA_Start_IT+0x26>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e040      	b.n	800387c <HAL_DMA_Start_IT+0xa8>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d12f      	bne.n	800386e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa58 	bl	8003cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	223f      	movs	r2, #63	; 0x3f
 800382e:	409a      	lsls	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0216 	orr.w	r2, r2, #22
 8003842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e005      	b.n	800387a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800387a:	7dfb      	ldrb	r3, [r7, #23]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff fbff 	bl	8003094 <HAL_GetTick>
 8003896:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e052      	b.n	800395c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0216 	bic.w	r2, r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_DMA_Abort+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003906:	e013      	b.n	8003930 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003908:	f7ff fbc4 	bl	8003094 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b05      	cmp	r3, #5
 8003914:	d90c      	bls.n	8003930 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e015      	b.n	800395c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e4      	bne.n	8003908 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	223f      	movs	r2, #63	; 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00c      	b.n	800399c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2205      	movs	r2, #5
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_DMA_IRQHandler+0x258>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a92      	ldr	r2, [pc, #584]	; (8003c04 <HAL_DMA_IRQHandler+0x25c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2208      	movs	r2, #8
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	2208      	movs	r2, #8
 8003a02:	409a      	lsls	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	2201      	movs	r2, #1
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2204      	movs	r2, #4
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	2210      	movs	r2, #16
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d043      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03c      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d024      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	e01f      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0208 	bic.w	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808e 	beq.w	8003c46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8086 	beq.w	8003c46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	2220      	movs	r2, #32
 8003b40:	409a      	lsls	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d136      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0216 	bic.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x1da>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	223f      	movs	r2, #63	; 0x3f
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d07d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
        }
        return;
 8003bbe:	e078      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01c      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d030      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
 8003bec:	e02b      	b.n	8003c46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d027      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
 8003bfe:	e022      	b.n	8003c46 <HAL_DMA_IRQHandler+0x29e>
 8003c00:	20000004 	.word	0x20000004
 8003c04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0210 	bic.w	r2, r2, #16
 8003c24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d032      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d022      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d307      	bcc.n	8003c8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f2      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x2ca>
 8003c8c:	e000      	b.n	8003c90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	e000      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cb2:	bf00      	nop
    }
  }
}
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop

08003cbc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cca:	b2db      	uxtb	r3, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d108      	bne.n	8003d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d16:	e007      	b.n	8003d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	3b10      	subs	r3, #16
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <DMA_CalcBaseAndBitshift+0x64>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <DMA_CalcBaseAndBitshift+0x68>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d909      	bls.n	8003d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
 8003d74:	e007      	b.n	8003d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	aaaaaaab 	.word	0xaaaaaaab
 8003d9c:	0807a4d0 	.word	0x0807a4d0

08003da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0x5a>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d856      	bhi.n	8003e6e <DMA_CheckFifoParam+0xce>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x28>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003deb 	.word	0x08003deb
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003e6f 	.word	0x08003e6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d046      	beq.n	8003e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de8:	e043      	b.n	8003e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df2:	d140      	bne.n	8003e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df8:	e03d      	b.n	8003e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d121      	bne.n	8003e48 <DMA_CheckFifoParam+0xa8>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d837      	bhi.n	8003e7a <DMA_CheckFifoParam+0xda>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <DMA_CheckFifoParam+0x70>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e27 	.word	0x08003e27
 8003e18:	08003e21 	.word	0x08003e21
 8003e1c:	08003e39 	.word	0x08003e39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e030      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d025      	beq.n	8003e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e36:	e022      	b.n	8003e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e40:	d11f      	bne.n	8003e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e46:	e01c      	b.n	8003e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d903      	bls.n	8003e56 <DMA_CheckFifoParam+0xb6>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d003      	beq.n	8003e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e54:	e018      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5a:	e015      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e00b      	b.n	8003e86 <DMA_CheckFifoParam+0xe6>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e00a      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e008      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e006      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e004      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
    }
  } 
  
  return status; 
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e165      	b.n	8004180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	f040 8154 	bne.w	800417a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d005      	beq.n	8003eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d130      	bne.n	8003f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d017      	beq.n	8003f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d123      	bne.n	8003fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80ae 	beq.w	800417a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a5c      	ldr	r2, [pc, #368]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_GPIO_Init+0x304>)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_GPIO_Init+0x308>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d025      	beq.n	80040b2 <HAL_GPIO_Init+0x21a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <HAL_GPIO_Init+0x30c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <HAL_GPIO_Init+0x216>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_GPIO_Init+0x310>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x212>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_GPIO_Init+0x314>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x20e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_GPIO_Init+0x318>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x20a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_GPIO_Init+0x31c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x206>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a49      	ldr	r2, [pc, #292]	; (80041b8 <HAL_GPIO_Init+0x320>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x202>
 8004096:	2306      	movs	r3, #6
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 800409a:	2307      	movs	r3, #7
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x21c>
 80040b2:	2300      	movs	r3, #0
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c4:	4935      	ldr	r1, [pc, #212]	; (800419c <HAL_GPIO_Init+0x304>)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f6:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_GPIO_Init+0x324>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_GPIO_Init+0x324>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_GPIO_Init+0x324>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	f67f ae96 	bls.w	8003eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40013800 	.word	0x40013800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40020400 	.word	0x40020400
 80041a8:	40020800 	.word	0x40020800
 80041ac:	40020c00 	.word	0x40020c00
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40021400 	.word	0x40021400
 80041b8:	40021800 	.word	0x40021800
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
 80041cc:	4613      	mov	r3, r2
 80041ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d0:	787b      	ldrb	r3, [r7, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041dc:	e003      	b.n	80041e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	619a      	str	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e12b      	b.n	800445e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd f9e4 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004258:	f002 fd74 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a81      	ldr	r2, [pc, #516]	; (8004468 <HAL_I2C_Init+0x274>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d807      	bhi.n	8004278 <HAL_I2C_Init+0x84>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a80      	ldr	r2, [pc, #512]	; (800446c <HAL_I2C_Init+0x278>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e006      	b.n	8004286 <HAL_I2C_Init+0x92>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_I2C_Init+0x27c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	bf94      	ite	ls
 8004280:	2301      	movls	r3, #1
 8004282:	2300      	movhi	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0e7      	b.n	800445e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a78      	ldr	r2, [pc, #480]	; (8004474 <HAL_I2C_Init+0x280>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0c9b      	lsrs	r3, r3, #18
 8004298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_I2C_Init+0x274>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d802      	bhi.n	80042c8 <HAL_I2C_Init+0xd4>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	e009      	b.n	80042dc <HAL_I2C_Init+0xe8>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	4a69      	ldr	r2, [pc, #420]	; (8004478 <HAL_I2C_Init+0x284>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	3301      	adds	r3, #1
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	495c      	ldr	r1, [pc, #368]	; (8004468 <HAL_I2C_Init+0x274>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d819      	bhi.n	8004330 <HAL_I2C_Init+0x13c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e59      	subs	r1, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb1 f3f3 	udiv	r3, r1, r3
 800430a:	1c59      	adds	r1, r3, #1
 800430c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004310:	400b      	ands	r3, r1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_I2C_Init+0x138>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e59      	subs	r1, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fbb1 f3f3 	udiv	r3, r1, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432a:	e051      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800432c:	2304      	movs	r3, #4
 800432e:	e04f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <HAL_I2C_Init+0x168>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e012      	b.n	8004382 <HAL_I2C_Init+0x18e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	0099      	lsls	r1, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004372:	3301      	adds	r3, #1
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Init+0x196>
 8004386:	2301      	movs	r3, #1
 8004388:	e022      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <HAL_I2C_Init+0x1bc>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e58      	subs	r0, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	440b      	add	r3, r1
 80043a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	6809      	ldr	r1, [r1, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6911      	ldr	r1, [r2, #16]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	000186a0 	.word	0x000186a0
 800446c:	001e847f 	.word	0x001e847f
 8004470:	003d08ff 	.word	0x003d08ff
 8004474:	431bde83 	.word	0x431bde83
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7fe fe00 	bl	8003094 <HAL_GetTick>
 8004494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 80e0 	bne.w	8004664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	4970      	ldr	r1, [pc, #448]	; (8004670 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f002 f8dc 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0d3      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2C_Master_Transmit+0x50>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e0cc      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	; 0x21
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a50      	ldr	r2, [pc, #320]	; (8004674 <HAL_I2C_Master_Transmit+0x1f8>)
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f001 fe9e 	bl	800627c <I2C_MasterRequestWrite>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08d      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004560:	e066      	b.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f002 f956 	bl	8006818 <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06b      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11b      	bne.n	8004604 <HAL_I2C_Master_Transmit+0x188>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f002 f946 	bl	800689a <I2C_WaitOnBTFFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01a      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d194      	bne.n	8004562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	00100002 	.word	0x00100002
 8004674:	ffff0000 	.word	0xffff0000

08004678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	461a      	mov	r2, r3
 8004684:	460b      	mov	r3, r1
 8004686:	817b      	strh	r3, [r7, #10]
 8004688:	4613      	mov	r3, r2
 800468a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800468c:	f7fe fd02 	bl	8003094 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b20      	cmp	r3, #32
 800469c:	f040 820b 	bne.w	8004ab6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2319      	movs	r3, #25
 80046a6:	2201      	movs	r2, #1
 80046a8:	497c      	ldr	r1, [pc, #496]	; (800489c <HAL_I2C_Master_Receive+0x224>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f001 ffde 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	e1fe      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_I2C_Master_Receive+0x50>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e1f7      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d007      	beq.n	80046ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2222      	movs	r2, #34	; 0x22
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2210      	movs	r2, #16
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	893a      	ldrh	r2, [r7, #8]
 800471e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a5c      	ldr	r2, [pc, #368]	; (80048a0 <HAL_I2C_Master_Receive+0x228>)
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004730:	8979      	ldrh	r1, [r7, #10]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f001 fe22 	bl	8006380 <I2C_MasterRequestRead>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e1b8      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e18c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d11b      	bne.n	80047b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e16c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d11b      	bne.n	80047f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	e14c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800481c:	e138      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b03      	cmp	r3, #3
 8004824:	f200 80f1 	bhi.w	8004a0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b01      	cmp	r3, #1
 800482e:	d123      	bne.n	8004878 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f002 f8a3 	bl	8006980 <I2C_WaitOnRXNEFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e139      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004876:	e10b      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	d14e      	bne.n	800491e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	4906      	ldr	r1, [pc, #24]	; (80048a4 <HAL_I2C_Master_Receive+0x22c>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f001 feee 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e10e      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
 800489a:	bf00      	nop
 800489c:	00100002 	.word	0x00100002
 80048a0:	ffff0000 	.word	0xffff0000
 80048a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800491c:	e0b8      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2200      	movs	r2, #0
 8004926:	4966      	ldr	r1, [pc, #408]	; (8004ac0 <HAL_I2C_Master_Receive+0x448>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f001 fe9f 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0bf      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	494f      	ldr	r1, [pc, #316]	; (8004ac0 <HAL_I2C_Master_Receive+0x448>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f001 fe71 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e091      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a08:	e042      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 ffb6 	bl	8006980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e04c      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d118      	bne.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f aec2 	bne.w	800481e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e000      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00010004 	.word	0x00010004

08004ac4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d003      	beq.n	8004afc <HAL_I2C_EV_IRQHandler+0x38>
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	f040 80c1 	bne.w	8004c7e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <HAL_I2C_EV_IRQHandler+0x6e>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b1c:	d003      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x62>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b24:	d101      	bne.n	8004b2a <HAL_I2C_EV_IRQHandler+0x66>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_I2C_EV_IRQHandler+0x68>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f000 8132 	beq.w	8004d96 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <HAL_I2C_EV_IRQHandler+0x92>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	0a5b      	lsrs	r3, r3, #9
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 ff9e 	bl	8006a8a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fd79 	bl	8005646 <I2C_Master_SB>
 8004b54:	e092      	b.n	8004c7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_I2C_EV_IRQHandler+0xb2>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0a5b      	lsrs	r3, r3, #9
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fdef 	bl	8005752 <I2C_Master_ADD10>
 8004b74:	e082      	b.n	8004c7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_I2C_EV_IRQHandler+0xd2>
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	0a5b      	lsrs	r3, r3, #9
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fe09 	bl	80057a6 <I2C_Master_ADDR>
 8004b94:	e072      	b.n	8004c7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d03b      	beq.n	8004c1a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb0:	f000 80f3 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	09db      	lsrs	r3, r3, #7
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00f      	beq.n	8004be0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	0a9b      	lsrs	r3, r3, #10
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9f3 	bl	8004fc4 <I2C_MasterTransmit_TXE>
 8004bde:	e04d      	b.n	8004c7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80d6 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	0a5b      	lsrs	r3, r3, #9
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80cf 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
 8004bfe:	2b21      	cmp	r3, #33	; 0x21
 8004c00:	d103      	bne.n	8004c0a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa7a 	bl	80050fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c08:	e0c7      	b.n	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	f040 80c4 	bne.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fae8 	bl	80051e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c18:	e0bf      	b.n	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	f000 80b7 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00f      	beq.n	8004c58 <HAL_I2C_EV_IRQHandler+0x194>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_I2C_EV_IRQHandler+0x194>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fb5d 	bl	8005310 <I2C_MasterReceive_RXNE>
 8004c56:	e011      	b.n	8004c7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 809a 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	0a5b      	lsrs	r3, r3, #9
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8093 	beq.w	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fbfc 	bl	8005472 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7a:	e08e      	b.n	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c7c:	e08d      	b.n	8004d9a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e007      	b.n	8004ca0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x20e>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	0a5b      	lsrs	r3, r3, #9
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 ffba 	bl	8005c44 <I2C_Slave_ADDR>
 8004cd0:	e066      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x22e>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	0a5b      	lsrs	r3, r3, #9
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fff4 	bl	8005cd8 <I2C_Slave_STOPF>
 8004cf0:	e056      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cf2:	7bbb      	ldrb	r3, [r7, #14]
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d002      	beq.n	8004cfe <HAL_I2C_EV_IRQHandler+0x23a>
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	2b29      	cmp	r3, #41	; 0x29
 8004cfc:	d125      	bne.n	8004d4a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	09db      	lsrs	r3, r3, #7
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00f      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x266>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	0a9b      	lsrs	r3, r3, #10
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x266>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fed0 	bl	8005ac8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d28:	e039      	b.n	8004d9e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d033      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x2da>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d02d      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fefd 	bl	8005b42 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d48:	e029      	b.n	8004d9e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00f      	beq.n	8004d76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	0a9b      	lsrs	r3, r3, #10
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 ff08 	bl	8005b84 <I2C_SlaveReceive_RXNE>
 8004d74:	e014      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	0a5b      	lsrs	r3, r3, #9
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 ff36 	bl	8005c00 <I2C_SlaveReceive_BTF>
 8004d94:	e004      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08a      	sub	sp, #40	; 0x28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00e      	beq.n	8004df4 <HAL_I2C_ER_IRQHandler+0x4e>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004df2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	0a5b      	lsrs	r3, r3, #9
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_I2C_ER_IRQHandler+0x78>
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f043 0302 	orr.w	r3, r3, #2
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004e1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	0a9b      	lsrs	r3, r3, #10
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03f      	beq.n	8004eaa <HAL_I2C_ER_IRQHandler+0x104>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d039      	beq.n	8004eaa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004e36:	7efb      	ldrb	r3, [r7, #27]
 8004e38:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e50:	7ebb      	ldrb	r3, [r7, #26]
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d112      	bne.n	8004e7c <HAL_I2C_ER_IRQHandler+0xd6>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <HAL_I2C_ER_IRQHandler+0xd6>
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	2b21      	cmp	r3, #33	; 0x21
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b29      	cmp	r3, #41	; 0x29
 8004e66:	d005      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0xce>
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b28      	cmp	r3, #40	; 0x28
 8004e6c:	d106      	bne.n	8004e7c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b21      	cmp	r3, #33	; 0x21
 8004e72:	d103      	bne.n	8004e7c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 f85f 	bl	8005f38 <I2C_Slave_AF>
 8004e7a:	e016      	b.n	8004eaa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e84:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e8e:	7efb      	ldrb	r3, [r7, #27]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d002      	beq.n	8004e9a <HAL_I2C_ER_IRQHandler+0xf4>
 8004e94:	7efb      	ldrb	r3, [r7, #27]
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d107      	bne.n	8004eaa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	0adb      	lsrs	r3, r3, #11
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_I2C_ER_IRQHandler+0x12e>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	f043 0308 	orr.w	r3, r3, #8
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ed2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f896 	bl	8006018 <I2C_ITError>
  }
}
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
 8004f50:	4613      	mov	r3, r2
 8004f52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d150      	bne.n	800508c <I2C_MasterTransmit_TXE+0xc8>
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b21      	cmp	r3, #33	; 0x21
 8004fee:	d14d      	bne.n	800508c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d01d      	beq.n	8005032 <I2C_MasterTransmit_TXE+0x6e>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d01a      	beq.n	8005032 <I2C_MasterTransmit_TXE+0x6e>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005002:	d016      	beq.n	8005032 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005012:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2211      	movs	r2, #17
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff62 	bl	8004ef4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005030:	e060      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005040:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005050:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d107      	bne.n	800507c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff7d 	bl	8004f74 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800507a:	e03b      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff35 	bl	8004ef4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800508a:	e033      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b21      	cmp	r3, #33	; 0x21
 8005090:	d005      	beq.n	800509e <I2C_MasterTransmit_TXE+0xda>
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d12d      	bne.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b22      	cmp	r3, #34	; 0x22
 800509c:	d12a      	bne.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d108      	bne.n	80050ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050b8:	e01c      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d103      	bne.n	80050ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f88e 	bl	80051e8 <I2C_MemoryTransmit_TXE_BTF>
}
 80050cc:	e012      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f2:	e7ff      	b.n	80050f4 <I2C_MasterTransmit_TXE+0x130>
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b21      	cmp	r3, #33	; 0x21
 8005114:	d164      	bne.n	80051e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005144:	e04c      	b.n	80051e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d01d      	beq.n	8005188 <I2C_MasterTransmit_BTF+0x8c>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b20      	cmp	r3, #32
 8005150:	d01a      	beq.n	8005188 <I2C_MasterTransmit_BTF+0x8c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005158:	d016      	beq.n	8005188 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005168:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2211      	movs	r2, #17
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff feb7 	bl	8004ef4 <HAL_I2C_MasterTxCpltCallback>
}
 8005186:	e02b      	b.n	80051e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005196:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d107      	bne.n	80051d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fed2 	bl	8004f74 <HAL_I2C_MemTxCpltCallback>
}
 80051d0:	e006      	b.n	80051e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe8a 	bl	8004ef4 <HAL_I2C_MasterTxCpltCallback>
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11d      	bne.n	800523c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10b      	bne.n	8005220 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520c:	b2da      	uxtb	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800521e:	e073      	b.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005224:	b29b      	uxth	r3, r3
 8005226:	121b      	asrs	r3, r3, #8
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	651a      	str	r2, [r3, #80]	; 0x50
}
 800523a:	e065      	b.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10b      	bne.n	800525c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005248:	b2da      	uxtb	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	651a      	str	r2, [r3, #80]	; 0x50
}
 800525a:	e055      	b.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	2b02      	cmp	r3, #2
 8005262:	d151      	bne.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	d10d      	bne.n	8005286 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005278:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005284:	e040      	b.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b21      	cmp	r3, #33	; 0x21
 8005294:	d112      	bne.n	80052bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052ba:	e025      	b.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d120      	bne.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b21      	cmp	r3, #33	; 0x21
 80052ca:	d11d      	bne.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fe36 	bl	8004f74 <HAL_I2C_MemTxCpltCallback>
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	f040 80a2 	bne.w	800546a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d921      	bls.n	8005378 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b03      	cmp	r3, #3
 8005362:	f040 8082 	bne.w	800546a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005374:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005376:	e078      	b.n	800546a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2b02      	cmp	r3, #2
 800537e:	d074      	beq.n	800546a <I2C_MasterReceive_RXNE+0x15a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d002      	beq.n	800538c <I2C_MasterReceive_RXNE+0x7c>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d16e      	bne.n	800546a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 fac5 	bl	800691c <I2C_WaitOnSTOPRequestThroughIT>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d142      	bne.n	800541e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d10a      	bne.n	8005408 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fdc1 	bl	8004f88 <HAL_I2C_MemRxCpltCallback>
}
 8005406:	e030      	b.n	800546a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2212      	movs	r2, #18
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fd76 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
}
 800541c:	e025      	b.n	800546a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800542c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fd99 	bl	8004f9c <HAL_I2C_ErrorCallback>
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b04      	cmp	r3, #4
 8005488:	d11b      	bne.n	80054c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80054c0:	e0bd      	b.n	800563e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d129      	bne.n	8005520 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00a      	beq.n	80054f8 <I2C_MasterReceive_BTF+0x86>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d007      	beq.n	80054f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800551e:	e08e      	b.n	800563e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d176      	bne.n	8005618 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d002      	beq.n	8005536 <I2C_MasterReceive_BTF+0xc4>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b10      	cmp	r3, #16
 8005534:	d108      	bne.n	8005548 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e019      	b.n	800557c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d002      	beq.n	8005554 <I2C_MasterReceive_BTF+0xe2>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d108      	bne.n	8005566 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e00a      	b.n	800557c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b10      	cmp	r3, #16
 800556a:	d007      	beq.n	800557c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d10a      	bne.n	8005602 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fcc4 	bl	8004f88 <HAL_I2C_MemRxCpltCallback>
}
 8005600:	e01d      	b.n	800563e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2212      	movs	r2, #18
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fc79 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
}
 8005616:	e012      	b.n	800563e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d117      	bne.n	800568a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005672:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005674:	e067      	b.n	8005746 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]
}
 8005688:	e05d      	b.n	8005746 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005692:	d133      	bne.n	80056fc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b21      	cmp	r3, #33	; 0x21
 800569e:	d109      	bne.n	80056b4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056b0:	611a      	str	r2, [r3, #16]
 80056b2:	e008      	b.n	80056c6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <I2C_Master_SB+0x92>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <I2C_Master_SB+0x100>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02d      	beq.n	8005746 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f8:	605a      	str	r2, [r3, #4]
}
 80056fa:	e024      	b.n	8005746 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10e      	bne.n	8005722 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	b29b      	uxth	r3, r3
 800570a:	11db      	asrs	r3, r3, #7
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 0306 	and.w	r3, r3, #6
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f063 030f 	orn	r3, r3, #15
 8005718:	b2da      	uxtb	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]
}
 8005720:	e011      	b.n	8005746 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10d      	bne.n	8005746 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	b29b      	uxth	r3, r3
 8005730:	11db      	asrs	r3, r3, #7
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 0306 	and.w	r3, r3, #6
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f063 030e 	orn	r3, r3, #14
 800573e:	b2da      	uxtb	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	611a      	str	r2, [r3, #16]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	b2da      	uxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <I2C_Master_ADD10+0x26>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <I2C_Master_ADD10+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005798:	605a      	str	r2, [r3, #4]
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b091      	sub	sp, #68	; 0x44
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b22      	cmp	r3, #34	; 0x22
 80057ce:	f040 8169 	bne.w	8005aa4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <I2C_Master_ADDR+0x54>
 80057da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d10b      	bne.n	80057fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e2:	2300      	movs	r3, #0
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	633b      	str	r3, [r7, #48]	; 0x30
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	e160      	b.n	8005abc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <I2C_Master_ADDR+0x98>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800580a:	d118      	bne.n	800583e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005830:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	651a      	str	r2, [r3, #80]	; 0x50
 800583c:	e13e      	b.n	8005abc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e115      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	f040 808a 	bne.w	8005990 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005882:	d137      	bne.n	80058f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005892:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d113      	bne.n	80058cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b4:	2300      	movs	r3, #0
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	e0e7      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e0d3      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d02e      	beq.n	8005958 <I2C_Master_ADDR+0x1b2>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d02b      	beq.n	8005958 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	2b12      	cmp	r3, #18
 8005904:	d102      	bne.n	800590c <I2C_Master_ADDR+0x166>
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b01      	cmp	r3, #1
 800590a:	d125      	bne.n	8005958 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	2b04      	cmp	r3, #4
 8005910:	d00e      	beq.n	8005930 <I2C_Master_ADDR+0x18a>
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	2b02      	cmp	r3, #2
 8005916:	d00b      	beq.n	8005930 <I2C_Master_ADDR+0x18a>
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	2b10      	cmp	r3, #16
 800591c:	d008      	beq.n	8005930 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e007      	b.n	8005940 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800593e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	e0a1      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005966:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e085      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d14d      	bne.n	8005a36 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	2b04      	cmp	r3, #4
 800599e:	d016      	beq.n	80059ce <I2C_Master_ADDR+0x228>
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d013      	beq.n	80059ce <I2C_Master_ADDR+0x228>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d010      	beq.n	80059ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e007      	b.n	80059de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d117      	bne.n	8005a1e <I2C_Master_ADDR+0x278>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059f4:	d00b      	beq.n	8005a0e <I2C_Master_ADDR+0x268>
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d008      	beq.n	8005a0e <I2C_Master_ADDR+0x268>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d005      	beq.n	8005a0e <I2C_Master_ADDR+0x268>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d002      	beq.n	8005a0e <I2C_Master_ADDR+0x268>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d107      	bne.n	8005a1e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	e032      	b.n	8005a9c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a44:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d117      	bne.n	8005a86 <I2C_Master_ADDR+0x2e0>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a5c:	d00b      	beq.n	8005a76 <I2C_Master_ADDR+0x2d0>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d008      	beq.n	8005a76 <I2C_Master_ADDR+0x2d0>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d005      	beq.n	8005a76 <I2C_Master_ADDR+0x2d0>
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d002      	beq.n	8005a76 <I2C_Master_ADDR+0x2d0>
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d107      	bne.n	8005a86 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005aa2:	e00b      	b.n	8005abc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	e7ff      	b.n	8005abc <I2C_Master_ADDR+0x316>
 8005abc:	bf00      	nop
 8005abe:	3744      	adds	r7, #68	; 0x44
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02b      	beq.n	8005b3a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d114      	bne.n	8005b3a <I2C_SlaveTransmit_TXE+0x72>
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b29      	cmp	r3, #41	; 0x29
 8005b14:	d111      	bne.n	8005b3a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2228      	movs	r2, #40	; 0x28
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff f9f1 	bl	8004f1c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d011      	beq.n	8005b78 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02c      	beq.n	8005bf8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d114      	bne.n	8005bf8 <I2C_SlaveReceive_RXNE+0x74>
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd2:	d111      	bne.n	8005bf8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2222      	movs	r2, #34	; 0x22
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2228      	movs	r2, #40	; 0x28
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff f99c 	bl	8004f30 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d012      	beq.n	8005c38 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c5e:	2b28      	cmp	r3, #40	; 0x28
 8005c60:	d127      	bne.n	8005cb2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	09db      	lsrs	r3, r3, #7
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	81bb      	strh	r3, [r7, #12]
 8005c94:	e002      	b.n	8005c9c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005ca4:	89ba      	ldrh	r2, [r7, #12]
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff f94a 	bl	8004f44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cb0:	e00e      	b.n	8005cd0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d24:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d172      	bne.n	8005e1c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b22      	cmp	r3, #34	; 0x22
 8005d3a:	d002      	beq.n	8005d42 <I2C_Slave_STOPF+0x6a>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d40:	d135      	bne.n	8005dae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0204 	orr.w	r2, r3, #4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fd ff9e 	bl	8003cbc <HAL_DMA_GetState>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d049      	beq.n	8005e1a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <I2C_Slave_STOPF+0x258>)
 8005d8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd fde6 	bl	8003964 <HAL_DMA_Abort_IT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d03d      	beq.n	8005e1a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dac:	e035      	b.n	8005e1a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fd ff68 	bl	8003cbc <HAL_DMA_GetState>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d014      	beq.n	8005e1c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <I2C_Slave_STOPF+0x258>)
 8005df8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd fdb0 	bl	8003964 <HAL_DMA_Abort_IT>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	e000      	b.n	8005e1c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e1a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d03e      	beq.n	8005ea4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d112      	bne.n	8005e5a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d112      	bne.n	8005e8e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f8b3 	bl	8006018 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005eb2:	e039      	b.n	8005f28 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb8:	d109      	bne.n	8005ece <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2228      	movs	r2, #40	; 0x28
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff f831 	bl	8004f30 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b28      	cmp	r3, #40	; 0x28
 8005ed8:	d111      	bne.n	8005efe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <I2C_Slave_STOPF+0x25c>)
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff f832 	bl	8004f60 <HAL_I2C_ListenCpltCallback>
}
 8005efc:	e014      	b.n	8005f28 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	2b22      	cmp	r3, #34	; 0x22
 8005f04:	d002      	beq.n	8005f0c <I2C_Slave_STOPF+0x234>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b22      	cmp	r3, #34	; 0x22
 8005f0a:	d10d      	bne.n	8005f28 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff f804 	bl	8004f30 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	0800651d 	.word	0x0800651d
 8005f34:	ffff0000 	.word	0xffff0000

08005f38 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f46:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d002      	beq.n	8005f5a <I2C_Slave_AF+0x22>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d129      	bne.n	8005fae <I2C_Slave_AF+0x76>
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b28      	cmp	r3, #40	; 0x28
 8005f5e:	d126      	bne.n	8005fae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <I2C_Slave_AF+0xdc>)
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f74:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f7e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fe ffda 	bl	8004f60 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005fac:	e02e      	b.n	800600c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b21      	cmp	r3, #33	; 0x21
 8005fb2:	d126      	bne.n	8006002 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <I2C_Slave_AF+0xdc>)
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fde:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fe8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fe ff8e 	bl	8004f1c <HAL_I2C_SlaveTxCpltCallback>
}
 8006000:	e004      	b.n	800600c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600a:	615a      	str	r2, [r3, #20]
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	ffff0000 	.word	0xffff0000

08006018 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b10      	cmp	r3, #16
 8006034:	d002      	beq.n	800603c <I2C_ITError+0x24>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d10a      	bne.n	8006052 <I2C_ITError+0x3a>
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b22      	cmp	r3, #34	; 0x22
 8006040:	d107      	bne.n	8006052 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006050:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006058:	2b28      	cmp	r3, #40	; 0x28
 800605a:	d107      	bne.n	800606c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2228      	movs	r2, #40	; 0x28
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800606a:	e015      	b.n	8006098 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607a:	d00a      	beq.n	8006092 <I2C_ITError+0x7a>
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b60      	cmp	r3, #96	; 0x60
 8006080:	d007      	beq.n	8006092 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a6:	d162      	bne.n	800616e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d020      	beq.n	8006108 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	4a6a      	ldr	r2, [pc, #424]	; (8006274 <I2C_ITError+0x25c>)
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd fc46 	bl	8003964 <HAL_DMA_Abort_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8089 	beq.w	80061f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006102:	4610      	mov	r0, r2
 8006104:	4798      	blx	r3
 8006106:	e074      	b.n	80061f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	4a59      	ldr	r2, [pc, #356]	; (8006274 <I2C_ITError+0x25c>)
 800610e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	4618      	mov	r0, r3
 8006116:	f7fd fc25 	bl	8003964 <HAL_DMA_Abort_IT>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d068      	beq.n	80061f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d10b      	bne.n	8006146 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0201 	bic.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	e041      	b.n	80061f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b60      	cmp	r3, #96	; 0x60
 8006178:	d125      	bne.n	80061c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d10b      	bne.n	80061ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe fef6 	bl	8004fb0 <HAL_I2C_AbortCpltCallback>
 80061c4:	e015      	b.n	80061f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d10b      	bne.n	80061ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe fed5 	bl	8004f9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10e      	bne.n	8006220 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800622e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006236:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b04      	cmp	r3, #4
 8006242:	d113      	bne.n	800626c <I2C_ITError+0x254>
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b28      	cmp	r3, #40	; 0x28
 8006248:	d110      	bne.n	800626c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <I2C_ITError+0x260>)
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fe fe7a 	bl	8004f60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	0800651d 	.word	0x0800651d
 8006278:	ffff0000 	.word	0xffff0000

0800627c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	460b      	mov	r3, r1
 800628a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d006      	beq.n	80062a6 <I2C_MasterRequestWrite+0x2a>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d003      	beq.n	80062a6 <I2C_MasterRequestWrite+0x2a>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a4:	d108      	bne.n	80062b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e00b      	b.n	80062d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	2b12      	cmp	r3, #18
 80062be:	d107      	bne.n	80062d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f9c5 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00d      	beq.n	8006304 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f6:	d103      	bne.n	8006300 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e035      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630c:	d108      	bne.n	8006320 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	e01b      	b.n	8006358 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	11db      	asrs	r3, r3, #7
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f063 030f 	orn	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	490e      	ldr	r1, [pc, #56]	; (8006378 <I2C_MasterRequestWrite+0xfc>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f9eb 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e010      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800634e:	897b      	ldrh	r3, [r7, #10]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4907      	ldr	r1, [pc, #28]	; (800637c <I2C_MasterRequestWrite+0x100>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f9db 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	00010008 	.word	0x00010008
 800637c:	00010002 	.word	0x00010002

08006380 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	460b      	mov	r3, r1
 800638e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d006      	beq.n	80063ba <I2C_MasterRequestRead+0x3a>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d003      	beq.n	80063ba <I2C_MasterRequestRead+0x3a>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063b8:	d108      	bne.n	80063cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e00b      	b.n	80063e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b11      	cmp	r3, #17
 80063d2:	d107      	bne.n	80063e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f93b 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d103      	bne.n	8006414 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e079      	b.n	800650c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006420:	d108      	bne.n	8006434 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	611a      	str	r2, [r3, #16]
 8006432:	e05f      	b.n	80064f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006434:	897b      	ldrh	r3, [r7, #10]
 8006436:	11db      	asrs	r3, r3, #7
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0306 	and.w	r3, r3, #6
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f063 030f 	orn	r3, r3, #15
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4930      	ldr	r1, [pc, #192]	; (8006514 <I2C_MasterRequestRead+0x194>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f961 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e054      	b.n	800650c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006462:	897b      	ldrh	r3, [r7, #10]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4929      	ldr	r1, [pc, #164]	; (8006518 <I2C_MasterRequestRead+0x198>)
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f951 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e044      	b.n	800650c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006482:	2300      	movs	r3, #0
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f8d9 	bl	800666c <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00d      	beq.n	80064dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d103      	bne.n	80064d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e017      	b.n	800650c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064dc:	897b      	ldrh	r3, [r7, #10]
 80064de:	11db      	asrs	r3, r3, #7
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 0306 	and.w	r3, r3, #6
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f063 030e 	orn	r3, r3, #14
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4907      	ldr	r1, [pc, #28]	; (8006518 <I2C_MasterRequestRead+0x198>)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f90d 	bl	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	00010008 	.word	0x00010008
 8006518:	00010002 	.word	0x00010002

0800651c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006536:	4b4b      	ldr	r3, [pc, #300]	; (8006664 <I2C_DMAAbort+0x148>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	4a4a      	ldr	r2, [pc, #296]	; (8006668 <I2C_DMAAbort+0x14c>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	0a1a      	lsrs	r2, r3, #8
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	00da      	lsls	r2, r3, #3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f043 0220 	orr.w	r2, r3, #32
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006562:	e00a      	b.n	800657a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d0ea      	beq.n	8006550 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	2200      	movs	r2, #0
 8006588:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	2200      	movs	r2, #0
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	2200      	movs	r2, #0
 80065be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	2200      	movs	r2, #0
 80065ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d10e      	bne.n	800660a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006602:	6978      	ldr	r0, [r7, #20]
 8006604:	f7fe fcd4 	bl	8004fb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006608:	e027      	b.n	800665a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006610:	2b28      	cmp	r3, #40	; 0x28
 8006612:	d117      	bne.n	8006644 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006632:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2228      	movs	r2, #40	; 0x28
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006642:	e007      	b.n	8006654 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006654:	6978      	ldr	r0, [r7, #20]
 8006656:	f7fe fca1 	bl	8004f9c <HAL_I2C_ErrorCallback>
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000004 	.word	0x20000004
 8006668:	14f8b589 	.word	0x14f8b589

0800666c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800667c:	e025      	b.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d021      	beq.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fc fd05 	bl	8003094 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e023      	b.n	8006712 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	0c1b      	lsrs	r3, r3, #16
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d10d      	bne.n	80066f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	43da      	mvns	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf0c      	ite	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	2300      	movne	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	e00c      	b.n	800670a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	429a      	cmp	r2, r3
 800670e:	d0b6      	beq.n	800667e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006728:	e051      	b.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006738:	d123      	bne.n	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006748:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006752:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e046      	b.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d021      	beq.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fc fc83 	bl	8003094 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d116      	bne.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e020      	b.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10c      	bne.n	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	43da      	mvns	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e00b      	b.n	800680a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	43da      	mvns	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d18d      	bne.n	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006824:	e02d      	b.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f900 	bl	8006a2c <I2C_IsAcknowledgeFailed>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e02d      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d021      	beq.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fc fc29 	bl	8003094 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e007      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d1ca      	bne.n	8006826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a6:	e02d      	b.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f8bf 	bl	8006a2c <I2C_IsAcknowledgeFailed>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e02d      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d021      	beq.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c0:	f7fc fbe8 	bl	8003094 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d116      	bne.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e007      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d1ca      	bne.n	80068a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006928:	4b13      	ldr	r3, [pc, #76]	; (8006978 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	08db      	lsrs	r3, r3, #3
 800692e:	4a13      	ldr	r2, [pc, #76]	; (800697c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	0a1a      	lsrs	r2, r3, #8
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3b01      	subs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d107      	bne.n	800695a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e008      	b.n	800696c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d0e9      	beq.n	800693e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20000004 	.word	0x20000004
 800697c:	14f8b589 	.word	0x14f8b589

08006980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800698c:	e042      	b.n	8006a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b10      	cmp	r3, #16
 800699a:	d119      	bne.n	80069d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0210 	mvn.w	r2, #16
 80069a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e029      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d0:	f7fc fb60 	bl	8003094 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d116      	bne.n	8006a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e007      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d1b5      	bne.n	800698e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a42:	d11b      	bne.n	8006a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a9a:	d103      	bne.n	8006aa4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aa2:	e007      	b.n	8006ab4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006aac:	d102      	bne.n	8006ab4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_PWREx_EnableOverDrive+0x94>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006aec:	f7fc fad2 	bl	8003094 <HAL_GetTick>
 8006af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006af2:	e009      	b.n	8006b08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006af4:	f7fc face 	bl	8003094 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b02:	d901      	bls.n	8006b08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e01f      	b.n	8006b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b14:	d1ee      	bne.n	8006af4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b16:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b1c:	f7fc faba 	bl	8003094 <HAL_GetTick>
 8006b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b22:	e009      	b.n	8006b38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b24:	f7fc fab6 	bl	8003094 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b32:	d901      	bls.n	8006b38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e007      	b.n	8006b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b44:	d1ee      	bne.n	8006b24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40023800 	.word	0x40023800
 8006b54:	420e0040 	.word	0x420e0040
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	420e0044 	.word	0x420e0044

08006b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0cc      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	4b68      	ldr	r3, [pc, #416]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d90c      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b65      	ldr	r3, [pc, #404]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8a:	4b63      	ldr	r3, [pc, #396]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0b8      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d020      	beq.n	8006bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb4:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4a58      	ldr	r2, [pc, #352]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bcc:	4b53      	ldr	r3, [pc, #332]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a52      	ldr	r2, [pc, #328]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd8:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	494d      	ldr	r1, [pc, #308]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d044      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfe:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d119      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e07f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d003      	beq.n	8006c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e06f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e067      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3e:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f023 0203 	bic.w	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4934      	ldr	r1, [pc, #208]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c50:	f7fc fa20 	bl	8003094 <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c58:	f7fc fa1c 	bl	8003094 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e04f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 020c 	and.w	r2, r3, #12
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d1eb      	bne.n	8006c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c80:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20c      	bcs.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8e:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	4b20      	ldr	r3, [pc, #128]	; (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d001      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e032      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb4:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4916      	ldr	r1, [pc, #88]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd2:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	490e      	ldr	r1, [pc, #56]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ce6:	f000 fb7f 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	490a      	ldr	r1, [pc, #40]	; (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	5ccb      	ldrb	r3, [r1, r3]
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_RCC_ClockConfig+0x1c8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fc f980 	bl	800300c <HAL_InitTick>

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40023c00 	.word	0x40023c00
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	0800cf38 	.word	0x0800cf38
 8006d24:	20000004 	.word	0x20000004
 8006d28:	20000008 	.word	0x20000008

08006d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d32:	681b      	ldr	r3, [r3, #0]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000004 	.word	0x20000004

08006d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d48:	f7ff fff0 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	0a9b      	lsrs	r3, r3, #10
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	4903      	ldr	r1, [pc, #12]	; (8006d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d5a:	5ccb      	ldrb	r3, [r1, r3]
 8006d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40023800 	.word	0x40023800
 8006d68:	0800cf48 	.word	0x0800cf48

08006d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d70:	f7ff ffdc 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	0b5b      	lsrs	r3, r3, #13
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4903      	ldr	r1, [pc, #12]	; (8006d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	0800cf48 	.word	0x0800cf48

08006d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006dcc:	4b6f      	ldr	r3, [pc, #444]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	496c      	ldr	r1, [pc, #432]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006dea:	2301      	movs	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d010      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006dfa:	4b64      	ldr	r3, [pc, #400]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e08:	4960      	ldr	r1, [pc, #384]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d017      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e28:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	4955      	ldr	r1, [pc, #340]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e46:	d101      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006e54:	2301      	movs	r3, #1
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e64:	4b49      	ldr	r3, [pc, #292]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	4946      	ldr	r1, [pc, #280]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e82:	d101      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006e84:	2301      	movs	r3, #1
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006e90:	2301      	movs	r3, #1
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 808a 	beq.w	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb2:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ebe:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a33      	ldr	r2, [pc, #204]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eca:	f7fc f8e3 	bl	8003094 <HAL_GetTick>
 8006ece:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ed2:	f7fc f8df 	bl	8003094 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e278      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ee4:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ef0:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d02f      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f08:	6a3a      	ldr	r2, [r7, #32]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d028      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f2a:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d114      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f36:	f7fc f8ad 	bl	8003094 <HAL_GetTick>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f3c:	e00a      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f3e:	f7fc f8a9 	bl	8003094 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e240      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0ee      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6c:	d114      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006f6e:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f82:	4902      	ldr	r1, [pc, #8]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	608b      	str	r3, [r1, #8]
 8006f88:	e00c      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40007000 	.word	0x40007000
 8006f94:	42470e40 	.word	0x42470e40
 8006f98:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a49      	ldr	r2, [pc, #292]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fa2:	6093      	str	r3, [r2, #8]
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb0:	4944      	ldr	r1, [pc, #272]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006fca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006fd8:	4b3a      	ldr	r3, [pc, #232]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	4937      	ldr	r1, [pc, #220]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ffa:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007000:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007008:	492e      	ldr	r1, [pc, #184]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d011      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800701c:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800701e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007022:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	4926      	ldr	r1, [pc, #152]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703a:	d101      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800703c:	2301      	movs	r3, #1
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800704e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	491a      	ldr	r1, [pc, #104]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	2b00      	cmp	r3, #0
 800706c:	d011      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007074:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	4911      	ldr	r1, [pc, #68]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708c:	d101      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800708e:	2301      	movs	r3, #1
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d005      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a0:	f040 80ff 	bne.w	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fb fff3 	bl	8003094 <HAL_GetTick>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070b0:	e00e      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070b2:	f7fb ffef 	bl	8003094 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d907      	bls.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e188      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80070c4:	40023800 	.word	0x40023800
 80070c8:	424711e0 	.word	0x424711e0
 80070cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070d0:	4b7e      	ldr	r3, [pc, #504]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1ea      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d028      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d124      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007104:	4b71      	ldr	r3, [pc, #452]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	3301      	adds	r3, #1
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007116:	4b6d      	ldr	r3, [pc, #436]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	0e1b      	lsrs	r3, r3, #24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	431a      	orrs	r2, r3
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	3b01      	subs	r3, #1
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	431a      	orrs	r2, r3
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	071b      	lsls	r3, r3, #28
 8007146:	4961      	ldr	r1, [pc, #388]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800716c:	2b00      	cmp	r3, #0
 800716e:	d035      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007178:	d130      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800717a:	4b54      	ldr	r3, [pc, #336]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800717c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	3301      	adds	r3, #1
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800718c:	4b4f      	ldr	r3, [pc, #316]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	019b      	lsls	r3, r3, #6
 80071a4:	431a      	orrs	r2, r3
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	3b01      	subs	r3, #1
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	071b      	lsls	r3, r3, #28
 80071bc:	4943      	ldr	r1, [pc, #268]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071c4:	4b41      	ldr	r3, [pc, #260]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ca:	f023 021f 	bic.w	r2, r3, #31
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	3b01      	subs	r3, #1
 80071d4:	493d      	ldr	r1, [pc, #244]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d029      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f0:	d124      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80071f2:	4b36      	ldr	r3, [pc, #216]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	3301      	adds	r3, #1
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007204:	4b31      	ldr	r3, [pc, #196]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720a:	0f1b      	lsrs	r3, r3, #28
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	019b      	lsls	r3, r3, #6
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	3b01      	subs	r3, #1
 8007226:	041b      	lsls	r3, r3, #16
 8007228:	431a      	orrs	r2, r3
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	431a      	orrs	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	071b      	lsls	r3, r3, #28
 8007234:	4925      	ldr	r1, [pc, #148]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	2b00      	cmp	r3, #0
 8007246:	d016      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	019b      	lsls	r3, r3, #6
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	3b01      	subs	r3, #1
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	4917      	ldr	r1, [pc, #92]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007276:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800727c:	f7fb ff0a 	bl	8003094 <HAL_GetTick>
 8007280:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007284:	f7fb ff06 	bl	8003094 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e09f      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 8095 	bne.w	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072b0:	f7fb fef0 	bl	8003094 <HAL_GetTick>
 80072b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072b6:	e00f      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80072b8:	f7fb feec 	bl	8003094 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d908      	bls.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e085      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800
 80072d0:	42470068 	.word	0x42470068
 80072d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072d8:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e4:	d0e8      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x566>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02b      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	2b00      	cmp	r3, #0
 800730c:	d127      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800730e:	4b34      	ldr	r3, [pc, #208]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	3301      	adds	r3, #1
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	019b      	lsls	r3, r3, #6
 800732a:	431a      	orrs	r2, r3
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	3b01      	subs	r3, #1
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	061b      	lsls	r3, r3, #24
 800733c:	4928      	ldr	r1, [pc, #160]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007344:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	3b01      	subs	r3, #1
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	4922      	ldr	r1, [pc, #136]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01d      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007372:	d118      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737a:	0e1b      	lsrs	r3, r3, #24
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	019b      	lsls	r3, r3, #6
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	3b01      	subs	r3, #1
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	061b      	lsls	r3, r3, #24
 800739e:	4910      	ldr	r1, [pc, #64]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ac:	f7fb fe72 	bl	8003094 <HAL_GetTick>
 80073b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073b4:	f7fb fe6e 	bl	8003094 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e007      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d2:	d1ef      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3730      	adds	r7, #48	; 0x30
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40023800 	.word	0x40023800
 80073e4:	42470070 	.word	0x42470070

080073e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073ec:	b088      	sub	sp, #32
 80073ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007404:	4bce      	ldr	r3, [pc, #824]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 030c 	and.w	r3, r3, #12
 800740c:	2b0c      	cmp	r3, #12
 800740e:	f200 818d 	bhi.w	800772c <HAL_RCC_GetSysClockFreq+0x344>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_RCC_GetSysClockFreq+0x30>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800744d 	.word	0x0800744d
 800741c:	0800772d 	.word	0x0800772d
 8007420:	0800772d 	.word	0x0800772d
 8007424:	0800772d 	.word	0x0800772d
 8007428:	08007453 	.word	0x08007453
 800742c:	0800772d 	.word	0x0800772d
 8007430:	0800772d 	.word	0x0800772d
 8007434:	0800772d 	.word	0x0800772d
 8007438:	08007459 	.word	0x08007459
 800743c:	0800772d 	.word	0x0800772d
 8007440:	0800772d 	.word	0x0800772d
 8007444:	0800772d 	.word	0x0800772d
 8007448:	080075cd 	.word	0x080075cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4bbd      	ldr	r3, [pc, #756]	; (8007744 <HAL_RCC_GetSysClockFreq+0x35c>)
 800744e:	61bb      	str	r3, [r7, #24]
       break;
 8007450:	e16f      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007452:	4bbd      	ldr	r3, [pc, #756]	; (8007748 <HAL_RCC_GetSysClockFreq+0x360>)
 8007454:	61bb      	str	r3, [r7, #24]
      break;
 8007456:	e16c      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007458:	4bb9      	ldr	r3, [pc, #740]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007460:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007462:	4bb7      	ldr	r3, [pc, #732]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d053      	beq.n	8007516 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800746e:	4bb4      	ldr	r3, [pc, #720]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	099b      	lsrs	r3, r3, #6
 8007474:	461a      	mov	r2, r3
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800747e:	f04f 0100 	mov.w	r1, #0
 8007482:	ea02 0400 	and.w	r4, r2, r0
 8007486:	603c      	str	r4, [r7, #0]
 8007488:	400b      	ands	r3, r1
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007490:	4620      	mov	r0, r4
 8007492:	4629      	mov	r1, r5
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	014b      	lsls	r3, r1, #5
 800749e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074a2:	0142      	lsls	r2, r0, #5
 80074a4:	4610      	mov	r0, r2
 80074a6:	4619      	mov	r1, r3
 80074a8:	4623      	mov	r3, r4
 80074aa:	1ac0      	subs	r0, r0, r3
 80074ac:	462b      	mov	r3, r5
 80074ae:	eb61 0103 	sbc.w	r1, r1, r3
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	018b      	lsls	r3, r1, #6
 80074bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074c0:	0182      	lsls	r2, r0, #6
 80074c2:	1a12      	subs	r2, r2, r0
 80074c4:	eb63 0301 	sbc.w	r3, r3, r1
 80074c8:	f04f 0000 	mov.w	r0, #0
 80074cc:	f04f 0100 	mov.w	r1, #0
 80074d0:	00d9      	lsls	r1, r3, #3
 80074d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d6:	00d0      	lsls	r0, r2, #3
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4621      	mov	r1, r4
 80074de:	1852      	adds	r2, r2, r1
 80074e0:	4629      	mov	r1, r5
 80074e2:	eb43 0101 	adc.w	r1, r3, r1
 80074e6:	460b      	mov	r3, r1
 80074e8:	f04f 0000 	mov.w	r0, #0
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	0259      	lsls	r1, r3, #9
 80074f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80074f6:	0250      	lsls	r0, r2, #9
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4610      	mov	r0, r2
 80074fe:	4619      	mov	r1, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	461a      	mov	r2, r3
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	f7f9 fb7e 	bl	8000c08 <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4613      	mov	r3, r2
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e04c      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007516:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	099b      	lsrs	r3, r3, #6
 800751c:	461a      	mov	r2, r3
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007526:	f04f 0100 	mov.w	r1, #0
 800752a:	ea02 0a00 	and.w	sl, r2, r0
 800752e:	ea03 0b01 	and.w	fp, r3, r1
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	014b      	lsls	r3, r1, #5
 8007540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007544:	0142      	lsls	r2, r0, #5
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	ebb0 000a 	subs.w	r0, r0, sl
 800754e:	eb61 010b 	sbc.w	r1, r1, fp
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	018b      	lsls	r3, r1, #6
 800755c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007560:	0182      	lsls	r2, r0, #6
 8007562:	1a12      	subs	r2, r2, r0
 8007564:	eb63 0301 	sbc.w	r3, r3, r1
 8007568:	f04f 0000 	mov.w	r0, #0
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	00d9      	lsls	r1, r3, #3
 8007572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007576:	00d0      	lsls	r0, r2, #3
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	eb12 020a 	adds.w	r2, r2, sl
 8007580:	eb43 030b 	adc.w	r3, r3, fp
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	0299      	lsls	r1, r3, #10
 800758e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007592:	0290      	lsls	r0, r2, #10
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4610      	mov	r0, r2
 800759a:	4619      	mov	r1, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	461a      	mov	r2, r3
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	f7f9 fb30 	bl	8000c08 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4613      	mov	r3, r2
 80075ae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075b0:	4b63      	ldr	r3, [pc, #396]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	3301      	adds	r3, #1
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	61bb      	str	r3, [r7, #24]
      break;
 80075ca:	e0b2      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075cc:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075d6:	4b5a      	ldr	r3, [pc, #360]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d04d      	beq.n	800767e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075e2:	4b57      	ldr	r3, [pc, #348]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	099b      	lsrs	r3, r3, #6
 80075e8:	461a      	mov	r2, r3
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075f2:	f04f 0100 	mov.w	r1, #0
 80075f6:	ea02 0800 	and.w	r8, r2, r0
 80075fa:	ea03 0901 	and.w	r9, r3, r1
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	014b      	lsls	r3, r1, #5
 800760c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007610:	0142      	lsls	r2, r0, #5
 8007612:	4610      	mov	r0, r2
 8007614:	4619      	mov	r1, r3
 8007616:	ebb0 0008 	subs.w	r0, r0, r8
 800761a:	eb61 0109 	sbc.w	r1, r1, r9
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	018b      	lsls	r3, r1, #6
 8007628:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800762c:	0182      	lsls	r2, r0, #6
 800762e:	1a12      	subs	r2, r2, r0
 8007630:	eb63 0301 	sbc.w	r3, r3, r1
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	00d9      	lsls	r1, r3, #3
 800763e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007642:	00d0      	lsls	r0, r2, #3
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	eb12 0208 	adds.w	r2, r2, r8
 800764c:	eb43 0309 	adc.w	r3, r3, r9
 8007650:	f04f 0000 	mov.w	r0, #0
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	0259      	lsls	r1, r3, #9
 800765a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800765e:	0250      	lsls	r0, r2, #9
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4610      	mov	r0, r2
 8007666:	4619      	mov	r1, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	461a      	mov	r2, r3
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	f7f9 faca 	bl	8000c08 <__aeabi_uldivmod>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4613      	mov	r3, r2
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e04a      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767e:	4b30      	ldr	r3, [pc, #192]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	461a      	mov	r2, r3
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800768e:	f04f 0100 	mov.w	r1, #0
 8007692:	ea02 0400 	and.w	r4, r2, r0
 8007696:	ea03 0501 	and.w	r5, r3, r1
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	014b      	lsls	r3, r1, #5
 80076a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076ac:	0142      	lsls	r2, r0, #5
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	1b00      	subs	r0, r0, r4
 80076b4:	eb61 0105 	sbc.w	r1, r1, r5
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	018b      	lsls	r3, r1, #6
 80076c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80076c6:	0182      	lsls	r2, r0, #6
 80076c8:	1a12      	subs	r2, r2, r0
 80076ca:	eb63 0301 	sbc.w	r3, r3, r1
 80076ce:	f04f 0000 	mov.w	r0, #0
 80076d2:	f04f 0100 	mov.w	r1, #0
 80076d6:	00d9      	lsls	r1, r3, #3
 80076d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076dc:	00d0      	lsls	r0, r2, #3
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	1912      	adds	r2, r2, r4
 80076e4:	eb45 0303 	adc.w	r3, r5, r3
 80076e8:	f04f 0000 	mov.w	r0, #0
 80076ec:	f04f 0100 	mov.w	r1, #0
 80076f0:	0299      	lsls	r1, r3, #10
 80076f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80076f6:	0290      	lsls	r0, r2, #10
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	461a      	mov	r2, r3
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	f7f9 fa7e 	bl	8000c08 <__aeabi_uldivmod>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4613      	mov	r3, r2
 8007712:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <HAL_RCC_GetSysClockFreq+0x358>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	0f1b      	lsrs	r3, r3, #28
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	61bb      	str	r3, [r7, #24]
      break;
 800772a:	e002      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCC_GetSysClockFreq+0x35c>)
 800772e:	61bb      	str	r3, [r7, #24]
      break;
 8007730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007732:	69bb      	ldr	r3, [r7, #24]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800773e:	bf00      	nop
 8007740:	40023800 	.word	0x40023800
 8007744:	00f42400 	.word	0x00f42400
 8007748:	007a1200 	.word	0x007a1200

0800774c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e28d      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8083 	beq.w	8007872 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800776c:	4b94      	ldr	r3, [pc, #592]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b04      	cmp	r3, #4
 8007776:	d019      	beq.n	80077ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007778:	4b91      	ldr	r3, [pc, #580]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007780:	2b08      	cmp	r3, #8
 8007782:	d106      	bne.n	8007792 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007784:	4b8e      	ldr	r3, [pc, #568]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007790:	d00c      	beq.n	80077ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007792:	4b8b      	ldr	r3, [pc, #556]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d112      	bne.n	80077c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779e:	4b88      	ldr	r3, [pc, #544]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077aa:	d10b      	bne.n	80077c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ac:	4b84      	ldr	r3, [pc, #528]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05b      	beq.n	8007870 <HAL_RCC_OscConfig+0x124>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d157      	bne.n	8007870 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e25a      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d106      	bne.n	80077dc <HAL_RCC_OscConfig+0x90>
 80077ce:	4b7c      	ldr	r3, [pc, #496]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a7b      	ldr	r2, [pc, #492]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e01d      	b.n	8007818 <HAL_RCC_OscConfig+0xcc>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e4:	d10c      	bne.n	8007800 <HAL_RCC_OscConfig+0xb4>
 80077e6:	4b76      	ldr	r3, [pc, #472]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a75      	ldr	r2, [pc, #468]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b73      	ldr	r3, [pc, #460]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a72      	ldr	r2, [pc, #456]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e00b      	b.n	8007818 <HAL_RCC_OscConfig+0xcc>
 8007800:	4b6f      	ldr	r3, [pc, #444]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a6e      	ldr	r2, [pc, #440]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4b6c      	ldr	r3, [pc, #432]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a6b      	ldr	r2, [pc, #428]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fb fc38 	bl	8003094 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007828:	f7fb fc34 	bl	8003094 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e21f      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b61      	ldr	r3, [pc, #388]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0xdc>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb fc24 	bl	8003094 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fb fc20 	bl	8003094 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e20b      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007862:	4b57      	ldr	r3, [pc, #348]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x104>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d06f      	beq.n	800795e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800787e:	4b50      	ldr	r3, [pc, #320]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007892:	2b08      	cmp	r3, #8
 8007894:	d105      	bne.n	80078a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007896:	4b4a      	ldr	r3, [pc, #296]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078a2:	4b47      	ldr	r3, [pc, #284]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80078aa:	2b0c      	cmp	r3, #12
 80078ac:	d11c      	bne.n	80078e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ae:	4b44      	ldr	r3, [pc, #272]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d116      	bne.n	80078e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ba:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_RCC_OscConfig+0x186>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d001      	beq.n	80078d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e1d3      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d2:	4b3b      	ldr	r3, [pc, #236]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4937      	ldr	r1, [pc, #220]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078e6:	e03a      	b.n	800795e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d020      	beq.n	8007932 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078f0:	4b34      	ldr	r3, [pc, #208]	; (80079c4 <HAL_RCC_OscConfig+0x278>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f6:	f7fb fbcd 	bl	8003094 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078fe:	f7fb fbc9 	bl	8003094 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e1b4      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4925      	ldr	r1, [pc, #148]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 800792c:	4313      	orrs	r3, r2
 800792e:	600b      	str	r3, [r1, #0]
 8007930:	e015      	b.n	800795e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <HAL_RCC_OscConfig+0x278>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fb fbac 	bl	8003094 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007940:	f7fb fba8 	bl	8003094 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e193      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d036      	beq.n	80079d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <HAL_RCC_OscConfig+0x27c>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007978:	f7fb fb8c 	bl	8003094 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007980:	f7fb fb88 	bl	8003094 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e173      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <HAL_RCC_OscConfig+0x274>)
 8007994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x234>
 800799e:	e01b      	b.n	80079d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a0:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <HAL_RCC_OscConfig+0x27c>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a6:	f7fb fb75 	bl	8003094 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079ac:	e00e      	b.n	80079cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ae:	f7fb fb71 	bl	8003094 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d907      	bls.n	80079cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e15c      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
 80079c0:	40023800 	.word	0x40023800
 80079c4:	42470000 	.word	0x42470000
 80079c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079cc:	4b8a      	ldr	r3, [pc, #552]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 80079ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ea      	bne.n	80079ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8097 	beq.w	8007b14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ea:	4b83      	ldr	r3, [pc, #524]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10f      	bne.n	8007a16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]
 80079fa:	4b7f      	ldr	r3, [pc, #508]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	4a7e      	ldr	r2, [pc, #504]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a04:	6413      	str	r3, [r2, #64]	; 0x40
 8007a06:	4b7c      	ldr	r3, [pc, #496]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a12:	2301      	movs	r3, #1
 8007a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a16:	4b79      	ldr	r3, [pc, #484]	; (8007bfc <HAL_RCC_OscConfig+0x4b0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d118      	bne.n	8007a54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a22:	4b76      	ldr	r3, [pc, #472]	; (8007bfc <HAL_RCC_OscConfig+0x4b0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a75      	ldr	r2, [pc, #468]	; (8007bfc <HAL_RCC_OscConfig+0x4b0>)
 8007a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a2e:	f7fb fb31 	bl	8003094 <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a36:	f7fb fb2d 	bl	8003094 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e118      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a48:	4b6c      	ldr	r3, [pc, #432]	; (8007bfc <HAL_RCC_OscConfig+0x4b0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f0      	beq.n	8007a36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d106      	bne.n	8007a6a <HAL_RCC_OscConfig+0x31e>
 8007a5c:	4b66      	ldr	r3, [pc, #408]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	4a65      	ldr	r2, [pc, #404]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	6713      	str	r3, [r2, #112]	; 0x70
 8007a68:	e01c      	b.n	8007aa4 <HAL_RCC_OscConfig+0x358>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d10c      	bne.n	8007a8c <HAL_RCC_OscConfig+0x340>
 8007a72:	4b61      	ldr	r3, [pc, #388]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	4a60      	ldr	r2, [pc, #384]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a78:	f043 0304 	orr.w	r3, r3, #4
 8007a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7e:	4b5e      	ldr	r3, [pc, #376]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	4a5d      	ldr	r2, [pc, #372]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8a:	e00b      	b.n	8007aa4 <HAL_RCC_OscConfig+0x358>
 8007a8c:	4b5a      	ldr	r3, [pc, #360]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	4a59      	ldr	r2, [pc, #356]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a92:	f023 0301 	bic.w	r3, r3, #1
 8007a96:	6713      	str	r3, [r2, #112]	; 0x70
 8007a98:	4b57      	ldr	r3, [pc, #348]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9c:	4a56      	ldr	r2, [pc, #344]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007a9e:	f023 0304 	bic.w	r3, r3, #4
 8007aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d015      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aac:	f7fb faf2 	bl	8003094 <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab2:	e00a      	b.n	8007aca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ab4:	f7fb faee 	bl	8003094 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e0d7      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aca:	4b4b      	ldr	r3, [pc, #300]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0ee      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x368>
 8007ad6:	e014      	b.n	8007b02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad8:	f7fb fadc 	bl	8003094 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ade:	e00a      	b.n	8007af6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae0:	f7fb fad8 	bl	8003094 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e0c1      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af6:	4b40      	ldr	r3, [pc, #256]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ee      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d105      	bne.n	8007b14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b08:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80ad 	beq.w	8007c78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 030c 	and.w	r3, r3, #12
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d060      	beq.n	8007bec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d145      	bne.n	8007bbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b32:	4b33      	ldr	r3, [pc, #204]	; (8007c00 <HAL_RCC_OscConfig+0x4b4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fb faac 	bl	8003094 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b40:	f7fb faa8 	bl	8003094 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e093      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b52:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69da      	ldr	r2, [r3, #28]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	019b      	lsls	r3, r3, #6
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	3b01      	subs	r3, #1
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	061b      	lsls	r3, r3, #24
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	071b      	lsls	r3, r3, #28
 8007b8a:	491b      	ldr	r1, [pc, #108]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b90:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <HAL_RCC_OscConfig+0x4b4>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b96:	f7fb fa7d 	bl	8003094 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9e:	f7fb fa79 	bl	8003094 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e064      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <HAL_RCC_OscConfig+0x452>
 8007bbc:	e05c      	b.n	8007c78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <HAL_RCC_OscConfig+0x4b4>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fb fa66 	bl	8003094 <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bcc:	f7fb fa62 	bl	8003094 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e04d      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bde:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <HAL_RCC_OscConfig+0x4ac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f0      	bne.n	8007bcc <HAL_RCC_OscConfig+0x480>
 8007bea:	e045      	b.n	8007c78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d107      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e040      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	40007000 	.word	0x40007000
 8007c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c04:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <HAL_RCC_OscConfig+0x538>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d030      	beq.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d129      	bne.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d122      	bne.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d119      	bne.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d10f      	bne.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d107      	bne.n	8007c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d001      	beq.n	8007c78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40023800 	.word	0x40023800

08007c88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e083      	b.n	8007da2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7f5b      	ldrb	r3, [r3, #29]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fa f91c 	bl	8001ee8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	22ca      	movs	r2, #202	; 0xca
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2253      	movs	r2, #83	; 0x53
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f9fb 	bl	80080c2 <RTC_EnterInitMode>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	22ff      	movs	r2, #255	; 0xff
 8007cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e05e      	b.n	8007da2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6812      	ldr	r2, [r2, #0]
 8007cee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6899      	ldr	r1, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68d2      	ldr	r2, [r2, #12]
 8007d1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6919      	ldr	r1, [r3, #16]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	041a      	lsls	r2, r3, #16
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10e      	bne.n	8007d70 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f98d 	bl	8008072 <HAL_RTC_WaitForSynchro>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	22ff      	movs	r2, #255	; 0xff
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e018      	b.n	8007da2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	22ff      	movs	r2, #255	; 0xff
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
  }
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007daa:	b590      	push	{r4, r7, lr}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	7f1b      	ldrb	r3, [r3, #28]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RTC_SetTime+0x1c>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e0aa      	b.n	8007f1c <HAL_RTC_SetTime+0x172>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d126      	bne.n	8007e26 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f992 	bl	800811a <RTC_ByteToBcd2>
 8007df6:	4603      	mov	r3, r0
 8007df8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	785b      	ldrb	r3, [r3, #1]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f98b 	bl	800811a <RTC_ByteToBcd2>
 8007e04:	4603      	mov	r3, r0
 8007e06:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e08:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f983 	bl	800811a <RTC_ByteToBcd2>
 8007e14:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e16:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e20:	4313      	orrs	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	e018      	b.n	8007e58 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e46:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e4c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	78db      	ldrb	r3, [r3, #3]
 8007e52:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	22ca      	movs	r2, #202	; 0xca
 8007e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2253      	movs	r2, #83	; 0x53
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f92a 	bl	80080c2 <RTC_EnterInitMode>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	22ff      	movs	r2, #255	; 0xff
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e047      	b.n	8007f1c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007e96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007e9a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eaa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6899      	ldr	r1, [r3, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ed2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d111      	bne.n	8007f06 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f8c5 	bl	8008072 <HAL_RTC_WaitForSynchro>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	22ff      	movs	r2, #255	; 0xff
 8007ef4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e00a      	b.n	8007f1c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	22ff      	movs	r2, #255	; 0xff
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd90      	pop	{r4, r7, pc}

08007f24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	7f1b      	ldrb	r3, [r3, #28]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_RTC_SetDate+0x1c>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e094      	b.n	800806a <HAL_RTC_SetDate+0x146>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10e      	bne.n	8007f70 <HAL_RTC_SetDate+0x4c>
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	f023 0310 	bic.w	r3, r3, #16
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	330a      	adds	r3, #10
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d11c      	bne.n	8007fb0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	78db      	ldrb	r3, [r3, #3]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f8cd 	bl	800811a <RTC_ByteToBcd2>
 8007f80:	4603      	mov	r3, r0
 8007f82:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f8c6 	bl	800811a <RTC_ByteToBcd2>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007f92:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f8be 	bl	800811a <RTC_ByteToBcd2>
 8007f9e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007fa0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	e00e      	b.n	8007fce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	78db      	ldrb	r3, [r3, #3]
 8007fb4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007fbc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007fc2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	22ca      	movs	r2, #202	; 0xca
 8007fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2253      	movs	r2, #83	; 0x53
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f86f 	bl	80080c2 <RTC_EnterInitMode>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	22ff      	movs	r2, #255	; 0xff
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e033      	b.n	800806a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800800c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008010:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008020:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d111      	bne.n	8008054 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f81e 	bl	8008072 <HAL_RTC_WaitForSynchro>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	22ff      	movs	r2, #255	; 0xff
 8008042:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2204      	movs	r2, #4
 8008048:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e00a      	b.n	800806a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008068:	2300      	movs	r3, #0
  }
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd90      	pop	{r4, r7, pc}

08008072 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800808c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800808e:	f7fb f801 	bl	8003094 <HAL_GetTick>
 8008092:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008094:	e009      	b.n	80080aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008096:	f7fa fffd 	bl	8003094 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080a4:	d901      	bls.n	80080aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e007      	b.n	80080ba <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0ee      	beq.n	8008096 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d119      	bne.n	8008110 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080e6:	f7fa ffd5 	bl	8003094 <HAL_GetTick>
 80080ea:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080ec:	e009      	b.n	8008102 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080ee:	f7fa ffd1 	bl	8003094 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080fc:	d901      	bls.n	8008102 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e007      	b.n	8008112 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0ee      	beq.n	80080ee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008128:	e005      	b.n	8008136 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	3b0a      	subs	r3, #10
 8008134:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	2b09      	cmp	r3, #9
 800813a:	d8f6      	bhi.n	800812a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	b2da      	uxtb	r2, r3
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	4313      	orrs	r3, r2
 8008148:	b2db      	uxtb	r3, r3
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	7f1b      	ldrb	r3, [r3, #28]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800816c:	2302      	movs	r3, #2
 800816e:	e0a6      	b.n	80082be <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	22ca      	movs	r2, #202	; 0xca
 8008182:	625a      	str	r2, [r3, #36]	; 0x24
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2253      	movs	r2, #83	; 0x53
 800818a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008196:	2b00      	cmp	r3, #0
 8008198:	d022      	beq.n	80081e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800819a:	4b4c      	ldr	r3, [pc, #304]	; (80082cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a4c      	ldr	r2, [pc, #304]	; (80082d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80081a0:	fba2 2303 	umull	r2, r3, r2, r3
 80081a4:	0adb      	lsrs	r3, r3, #11
 80081a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
 80081ae:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	1e5a      	subs	r2, r3, #1
 80081b4:	617a      	str	r2, [r7, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10b      	bne.n	80081d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	22ff      	movs	r2, #255	; 0xff
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2203      	movs	r2, #3
 80081c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e075      	b.n	80082be <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e7      	bne.n	80081b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ee:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80081f0:	4b36      	ldr	r3, [pc, #216]	; (80082cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a36      	ldr	r2, [pc, #216]	; (80082d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0adb      	lsrs	r3, r3, #11
 80081fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008200:	fb02 f303 	mul.w	r3, r2, r3
 8008204:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	1e5a      	subs	r2, r3, #1
 800820a:	617a      	str	r2, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	22ff      	movs	r2, #255	; 0xff
 8008216:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2203      	movs	r2, #3
 800821c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e04a      	b.n	80082be <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0e7      	beq.n	8008206 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0207 	bic.w	r2, r2, #7
 800824c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6899      	ldr	r1, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	430a      	orrs	r2, r1
 800825c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800825e:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a1c      	ldr	r2, [pc, #112]	; (80082d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008268:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800826a:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	4a19      	ldr	r2, [pc, #100]	; (80082d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008274:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	b2da      	uxtb	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008286:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008296:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	22ff      	movs	r2, #255	; 0xff
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000004 	.word	0x20000004
 80082d0:	10624dd3 	.word	0x10624dd3
 80082d4:	40013c00 	.word	0x40013c00

080082d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f816 	bl	8008320 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008304:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8008308:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800830c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	775a      	strb	r2, [r3, #29]
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40013c00 	.word	0x40013c00

08008320 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e041      	b.n	80083ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fa faba 	bl	80028d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f000 fce2 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d001      	beq.n	80083ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e046      	b.n	800847a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a23      	ldr	r2, [pc, #140]	; (8008488 <HAL_TIM_Base_Start+0xb4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d022      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d01d      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1f      	ldr	r2, [pc, #124]	; (800848c <HAL_TIM_Base_Start+0xb8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d018      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <HAL_TIM_Base_Start+0xbc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <HAL_TIM_Base_Start+0xc0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00e      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1b      	ldr	r2, [pc, #108]	; (8008498 <HAL_TIM_Base_Start+0xc4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d009      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <HAL_TIM_Base_Start+0xc8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_TIM_Base_Start+0x70>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a18      	ldr	r2, [pc, #96]	; (80084a0 <HAL_TIM_Base_Start+0xcc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d111      	bne.n	8008468 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d010      	beq.n	8008478 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0201 	orr.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008466:	e007      	b.n	8008478 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0201 	orr.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40010400 	.word	0x40010400
 800849c:	40014000 	.word	0x40014000
 80084a0:	40001800 	.word	0x40001800

080084a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d001      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e04e      	b.n	800855a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a23      	ldr	r2, [pc, #140]	; (8008568 <HAL_TIM_Base_Start_IT+0xc4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d022      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d01d      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1f      	ldr	r2, [pc, #124]	; (800856c <HAL_TIM_Base_Start_IT+0xc8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1e      	ldr	r2, [pc, #120]	; (8008570 <HAL_TIM_Base_Start_IT+0xcc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_TIM_Base_Start_IT+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <HAL_TIM_Base_Start_IT+0xd4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a19      	ldr	r2, [pc, #100]	; (800857c <HAL_TIM_Base_Start_IT+0xd8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x80>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_TIM_Base_Start_IT+0xdc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d111      	bne.n	8008548 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b06      	cmp	r3, #6
 8008534:	d010      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0201 	orr.w	r2, r2, #1
 8008544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008546:	e007      	b.n	8008558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00
 8008578:	40010400 	.word	0x40010400
 800857c:	40014000 	.word	0x40014000
 8008580:	40001800 	.word	0x40001800

08008584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e041      	b.n	800861a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f839 	bl	8008622 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f000 fbba 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d109      	bne.n	800865c <HAL_TIM_PWM_Start+0x24>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	e022      	b.n	80086a2 <HAL_TIM_PWM_Start+0x6a>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b04      	cmp	r3, #4
 8008660:	d109      	bne.n	8008676 <HAL_TIM_PWM_Start+0x3e>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	bf14      	ite	ne
 800866e:	2301      	movne	r3, #1
 8008670:	2300      	moveq	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	e015      	b.n	80086a2 <HAL_TIM_PWM_Start+0x6a>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d109      	bne.n	8008690 <HAL_TIM_PWM_Start+0x58>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	e008      	b.n	80086a2 <HAL_TIM_PWM_Start+0x6a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e07c      	b.n	80087a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <HAL_TIM_PWM_Start+0x82>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b8:	e013      	b.n	80086e2 <HAL_TIM_PWM_Start+0xaa>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d104      	bne.n	80086ca <HAL_TIM_PWM_Start+0x92>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c8:	e00b      	b.n	80086e2 <HAL_TIM_PWM_Start+0xaa>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Start+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d8:	e003      	b.n	80086e2 <HAL_TIM_PWM_Start+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2201      	movs	r2, #1
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fe10 	bl	8009310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	; (80087ac <HAL_TIM_PWM_Start+0x174>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_TIM_PWM_Start+0xcc>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2c      	ldr	r2, [pc, #176]	; (80087b0 <HAL_TIM_PWM_Start+0x178>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d101      	bne.n	8008708 <HAL_TIM_PWM_Start+0xd0>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <HAL_TIM_PWM_Start+0xd2>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800871c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a22      	ldr	r2, [pc, #136]	; (80087ac <HAL_TIM_PWM_Start+0x174>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d022      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008730:	d01d      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1f      	ldr	r2, [pc, #124]	; (80087b4 <HAL_TIM_PWM_Start+0x17c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d018      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <HAL_TIM_PWM_Start+0x180>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <HAL_TIM_PWM_Start+0x184>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00e      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <HAL_TIM_PWM_Start+0x178>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d009      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <HAL_TIM_PWM_Start+0x188>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d004      	beq.n	800876e <HAL_TIM_PWM_Start+0x136>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <HAL_TIM_PWM_Start+0x18c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d111      	bne.n	8008792 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b06      	cmp	r3, #6
 800877e:	d010      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008790:	e007      	b.n	80087a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0201 	orr.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	40010000 	.word	0x40010000
 80087b0:	40010400 	.word	0x40010400
 80087b4:	40000400 	.word	0x40000400
 80087b8:	40000800 	.word	0x40000800
 80087bc:	40000c00 	.word	0x40000c00
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40001800 	.word	0x40001800

080087c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d122      	bne.n	8008824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d11b      	bne.n	8008824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f06f 0202 	mvn.w	r2, #2
 80087f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa77 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
 8008810:	e005      	b.n	800881e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa69 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa7a 	bl	8008d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b04      	cmp	r3, #4
 8008830:	d122      	bne.n	8008878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b04      	cmp	r3, #4
 800883e:	d11b      	bne.n	8008878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0204 	mvn.w	r2, #4
 8008848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa4d 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
 8008864:	e005      	b.n	8008872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa3f 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fa50 	bl	8008d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	2b08      	cmp	r3, #8
 8008884:	d122      	bne.n	80088cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b08      	cmp	r3, #8
 8008892:	d11b      	bne.n	80088cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f06f 0208 	mvn.w	r2, #8
 800889c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2204      	movs	r2, #4
 80088a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa23 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
 80088b8:	e005      	b.n	80088c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fa15 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa26 	bl	8008d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0310 	and.w	r3, r3, #16
 80088d6:	2b10      	cmp	r3, #16
 80088d8:	d122      	bne.n	8008920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b10      	cmp	r3, #16
 80088e6:	d11b      	bne.n	8008920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0210 	mvn.w	r2, #16
 80088f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2208      	movs	r2, #8
 80088f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9f9 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
 800890c:	e005      	b.n	800891a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9eb 	bl	8008cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f9fc 	bl	8008d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b01      	cmp	r3, #1
 800892c:	d10e      	bne.n	800894c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b01      	cmp	r3, #1
 800893a:	d107      	bne.n	800894c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f06f 0201 	mvn.w	r2, #1
 8008944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f8 ffb0 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008956:	2b80      	cmp	r3, #128	; 0x80
 8008958:	d10e      	bne.n	8008978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008964:	2b80      	cmp	r3, #128	; 0x80
 8008966:	d107      	bne.n	8008978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fdca 	bl	800950c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d10e      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d107      	bne.n	80089a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800899c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9c1 	bl	8008d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d10e      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0320 	and.w	r3, r3, #32
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0220 	mvn.w	r2, #32
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fd94 	bl	80094f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089f2:	2302      	movs	r3, #2
 80089f4:	e0ae      	b.n	8008b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b0c      	cmp	r3, #12
 8008a02:	f200 809f 	bhi.w	8008b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a41 	.word	0x08008a41
 8008a10:	08008b45 	.word	0x08008b45
 8008a14:	08008b45 	.word	0x08008b45
 8008a18:	08008b45 	.word	0x08008b45
 8008a1c:	08008a81 	.word	0x08008a81
 8008a20:	08008b45 	.word	0x08008b45
 8008a24:	08008b45 	.word	0x08008b45
 8008a28:	08008b45 	.word	0x08008b45
 8008a2c:	08008ac3 	.word	0x08008ac3
 8008a30:	08008b45 	.word	0x08008b45
 8008a34:	08008b45 	.word	0x08008b45
 8008a38:	08008b45 	.word	0x08008b45
 8008a3c:	08008b03 	.word	0x08008b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fa18 	bl	8008e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0208 	orr.w	r2, r2, #8
 8008a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0204 	bic.w	r2, r2, #4
 8008a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6999      	ldr	r1, [r3, #24]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	619a      	str	r2, [r3, #24]
      break;
 8008a7e:	e064      	b.n	8008b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fa68 	bl	8008f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6999      	ldr	r1, [r3, #24]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	021a      	lsls	r2, r3, #8
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	619a      	str	r2, [r3, #24]
      break;
 8008ac0:	e043      	b.n	8008b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fabd 	bl	8009048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0208 	orr.w	r2, r2, #8
 8008adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0204 	bic.w	r2, r2, #4
 8008aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69d9      	ldr	r1, [r3, #28]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	61da      	str	r2, [r3, #28]
      break;
 8008b00:	e023      	b.n	8008b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68b9      	ldr	r1, [r7, #8]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fb11 	bl	8009130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69d9      	ldr	r1, [r3, #28]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	021a      	lsls	r2, r3, #8
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	61da      	str	r2, [r3, #28]
      break;
 8008b42:	e002      	b.n	8008b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
      break;
 8008b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_TIM_ConfigClockSource+0x1c>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e0b4      	b.n	8008ce2 <HAL_TIM_ConfigClockSource+0x186>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb0:	d03e      	beq.n	8008c30 <HAL_TIM_ConfigClockSource+0xd4>
 8008bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb6:	f200 8087 	bhi.w	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbe:	f000 8086 	beq.w	8008cce <HAL_TIM_ConfigClockSource+0x172>
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d87f      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bc8:	2b70      	cmp	r3, #112	; 0x70
 8008bca:	d01a      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0xa6>
 8008bcc:	2b70      	cmp	r3, #112	; 0x70
 8008bce:	d87b      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bd0:	2b60      	cmp	r3, #96	; 0x60
 8008bd2:	d050      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x11a>
 8008bd4:	2b60      	cmp	r3, #96	; 0x60
 8008bd6:	d877      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bd8:	2b50      	cmp	r3, #80	; 0x50
 8008bda:	d03c      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0xfa>
 8008bdc:	2b50      	cmp	r3, #80	; 0x50
 8008bde:	d873      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d058      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0x13a>
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	d86f      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008be8:	2b30      	cmp	r3, #48	; 0x30
 8008bea:	d064      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bec:	2b30      	cmp	r3, #48	; 0x30
 8008bee:	d86b      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d060      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d867      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d05c      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d05a      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008c00:	e062      	b.n	8008cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6899      	ldr	r1, [r3, #8]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f000 fb5d 	bl	80092d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	609a      	str	r2, [r3, #8]
      break;
 8008c2e:	e04f      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	6899      	ldr	r1, [r3, #8]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f000 fb46 	bl	80092d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c52:	609a      	str	r2, [r3, #8]
      break;
 8008c54:	e03c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6859      	ldr	r1, [r3, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f000 faba 	bl	80091dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2150      	movs	r1, #80	; 0x50
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fb13 	bl	800929a <TIM_ITRx_SetConfig>
      break;
 8008c74:	e02c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6859      	ldr	r1, [r3, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f000 fad9 	bl	800923a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2160      	movs	r1, #96	; 0x60
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fb03 	bl	800929a <TIM_ITRx_SetConfig>
      break;
 8008c94:	e01c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6859      	ldr	r1, [r3, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f000 fa9a 	bl	80091dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 faf3 	bl	800929a <TIM_ITRx_SetConfig>
      break;
 8008cb4:	e00c      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f000 faea 	bl	800929a <TIM_ITRx_SetConfig>
      break;
 8008cc6:	e003      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ccc:	e000      	b.n	8008cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a40      	ldr	r2, [pc, #256]	; (8008e50 <TIM_Base_SetConfig+0x114>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5a:	d00f      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a3d      	ldr	r2, [pc, #244]	; (8008e54 <TIM_Base_SetConfig+0x118>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a3c      	ldr	r2, [pc, #240]	; (8008e58 <TIM_Base_SetConfig+0x11c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d007      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <TIM_Base_SetConfig+0x120>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d003      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a3a      	ldr	r2, [pc, #232]	; (8008e60 <TIM_Base_SetConfig+0x124>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d108      	bne.n	8008d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a2f      	ldr	r2, [pc, #188]	; (8008e50 <TIM_Base_SetConfig+0x114>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d02b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9c:	d027      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a2c      	ldr	r2, [pc, #176]	; (8008e54 <TIM_Base_SetConfig+0x118>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d023      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a2b      	ldr	r2, [pc, #172]	; (8008e58 <TIM_Base_SetConfig+0x11c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01f      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a2a      	ldr	r2, [pc, #168]	; (8008e5c <TIM_Base_SetConfig+0x120>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a29      	ldr	r2, [pc, #164]	; (8008e60 <TIM_Base_SetConfig+0x124>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d017      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a28      	ldr	r2, [pc, #160]	; (8008e64 <TIM_Base_SetConfig+0x128>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d013      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a27      	ldr	r2, [pc, #156]	; (8008e68 <TIM_Base_SetConfig+0x12c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00f      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a26      	ldr	r2, [pc, #152]	; (8008e6c <TIM_Base_SetConfig+0x130>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a25      	ldr	r2, [pc, #148]	; (8008e70 <TIM_Base_SetConfig+0x134>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d007      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <TIM_Base_SetConfig+0x138>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <TIM_Base_SetConfig+0x13c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d108      	bne.n	8008e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <TIM_Base_SetConfig+0x114>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0xf8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a0c      	ldr	r2, [pc, #48]	; (8008e60 <TIM_Base_SetConfig+0x124>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d103      	bne.n	8008e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	615a      	str	r2, [r3, #20]
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	40010000 	.word	0x40010000
 8008e54:	40000400 	.word	0x40000400
 8008e58:	40000800 	.word	0x40000800
 8008e5c:	40000c00 	.word	0x40000c00
 8008e60:	40010400 	.word	0x40010400
 8008e64:	40014000 	.word	0x40014000
 8008e68:	40014400 	.word	0x40014400
 8008e6c:	40014800 	.word	0x40014800
 8008e70:	40001800 	.word	0x40001800
 8008e74:	40001c00 	.word	0x40001c00
 8008e78:	40002000 	.word	0x40002000

08008e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0201 	bic.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f023 0302 	bic.w	r3, r3, #2
 8008ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <TIM_OC1_SetConfig+0xd8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d003      	beq.n	8008ee0 <TIM_OC1_SetConfig+0x64>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <TIM_OC1_SetConfig+0xdc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10c      	bne.n	8008efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0308 	bic.w	r3, r3, #8
 8008ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f023 0304 	bic.w	r3, r3, #4
 8008ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <TIM_OC1_SetConfig+0xd8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_OC1_SetConfig+0x8e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a14      	ldr	r2, [pc, #80]	; (8008f58 <TIM_OC1_SetConfig+0xdc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d111      	bne.n	8008f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	621a      	str	r2, [r3, #32]
}
 8008f48:	bf00      	nop
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	40010000 	.word	0x40010000
 8008f58:	40010400 	.word	0x40010400

08008f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f023 0210 	bic.w	r2, r3, #16
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	021b      	lsls	r3, r3, #8
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f023 0320 	bic.w	r3, r3, #32
 8008fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a22      	ldr	r2, [pc, #136]	; (8009040 <TIM_OC2_SetConfig+0xe4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d003      	beq.n	8008fc4 <TIM_OC2_SetConfig+0x68>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a21      	ldr	r2, [pc, #132]	; (8009044 <TIM_OC2_SetConfig+0xe8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d10d      	bne.n	8008fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a17      	ldr	r2, [pc, #92]	; (8009040 <TIM_OC2_SetConfig+0xe4>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_OC2_SetConfig+0x94>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a16      	ldr	r2, [pc, #88]	; (8009044 <TIM_OC2_SetConfig+0xe8>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d113      	bne.n	8009018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	40010000 	.word	0x40010000
 8009044:	40010400 	.word	0x40010400

08009048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0303 	bic.w	r3, r3, #3
 800907e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a21      	ldr	r2, [pc, #132]	; (8009128 <TIM_OC3_SetConfig+0xe0>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d003      	beq.n	80090ae <TIM_OC3_SetConfig+0x66>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a20      	ldr	r2, [pc, #128]	; (800912c <TIM_OC3_SetConfig+0xe4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10d      	bne.n	80090ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a16      	ldr	r2, [pc, #88]	; (8009128 <TIM_OC3_SetConfig+0xe0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_OC3_SetConfig+0x92>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a15      	ldr	r2, [pc, #84]	; (800912c <TIM_OC3_SetConfig+0xe4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d113      	bne.n	8009102 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	621a      	str	r2, [r3, #32]
}
 800911c:	bf00      	nop
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40010000 	.word	0x40010000
 800912c:	40010400 	.word	0x40010400

08009130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800917a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	031b      	lsls	r3, r3, #12
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a12      	ldr	r2, [pc, #72]	; (80091d4 <TIM_OC4_SetConfig+0xa4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_OC4_SetConfig+0x68>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a11      	ldr	r2, [pc, #68]	; (80091d8 <TIM_OC4_SetConfig+0xa8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d109      	bne.n	80091ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800919e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	019b      	lsls	r3, r3, #6
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	621a      	str	r2, [r3, #32]
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	40010000 	.word	0x40010000
 80091d8:	40010400 	.word	0x40010400

080091dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0201 	bic.w	r2, r3, #1
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 030a 	bic.w	r3, r3, #10
 8009218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	621a      	str	r2, [r3, #32]
}
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f023 0210 	bic.w	r2, r3, #16
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	031b      	lsls	r3, r3, #12
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	011b      	lsls	r3, r3, #4
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	4313      	orrs	r3, r2
 8009280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	f043 0307 	orr.w	r3, r3, #7
 80092bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	609a      	str	r2, [r3, #8]
}
 80092c4:	bf00      	nop
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	021a      	lsls	r2, r3, #8
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	609a      	str	r2, [r3, #8]
}
 8009304:	bf00      	nop
 8009306:	371c      	adds	r7, #28
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	2201      	movs	r2, #1
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a1a      	ldr	r2, [r3, #32]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	43db      	mvns	r3, r3
 8009332:	401a      	ands	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a1a      	ldr	r2, [r3, #32]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	fa01 f303 	lsl.w	r3, r1, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009370:	2302      	movs	r3, #2
 8009372:	e05a      	b.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a21      	ldr	r2, [pc, #132]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d022      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c0:	d01d      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1d      	ldr	r2, [pc, #116]	; (800943c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d018      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1a      	ldr	r2, [pc, #104]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d00e      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a18      	ldr	r2, [pc, #96]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d009      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a17      	ldr	r2, [pc, #92]	; (800944c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d004      	beq.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a15      	ldr	r2, [pc, #84]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d10c      	bne.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4313      	orrs	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40010400 	.word	0x40010400
 800944c:	40014000 	.word	0x40014000
 8009450:	40001800 	.word	0x40001800

08009454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800946c:	2302      	movs	r3, #2
 800946e:	e03d      	b.n	80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e03f      	b.n	80095b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7f9 fb02 	bl	8002b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2224      	movs	r2, #36	; 0x24
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fddb 	bl	800a120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	695a      	ldr	r2, [r3, #20]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b08a      	sub	sp, #40	; 0x28
 80095be:	af02      	add	r7, sp, #8
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	603b      	str	r3, [r7, #0]
 80095c6:	4613      	mov	r3, r2
 80095c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	d17c      	bne.n	80096d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <HAL_UART_Transmit+0x2c>
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e075      	b.n	80096d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <HAL_UART_Transmit+0x3e>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e06e      	b.n	80096d6 <HAL_UART_Transmit+0x11c>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2221      	movs	r2, #33	; 0x21
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800960e:	f7f9 fd41 	bl	8003094 <HAL_GetTick>
 8009612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	88fa      	ldrh	r2, [r7, #6]
 800961e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009628:	d108      	bne.n	800963c <HAL_UART_Transmit+0x82>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	e003      	b.n	8009644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009640:	2300      	movs	r3, #0
 8009642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800964c:	e02a      	b.n	80096a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2200      	movs	r2, #0
 8009656:	2180      	movs	r1, #128	; 0x80
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fb1f 	bl	8009c9c <UART_WaitOnFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e036      	b.n	80096d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800967c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	3302      	adds	r3, #2
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	e007      	b.n	8009696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3301      	adds	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1cf      	bne.n	800964e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2200      	movs	r2, #0
 80096b6:	2140      	movs	r1, #64	; 0x40
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 faef 	bl	8009c9c <UART_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e006      	b.n	80096d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	e000      	b.n	80096d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096d4:	2302      	movs	r3, #2
  }
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	4613      	mov	r3, r2
 80096ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b20      	cmp	r3, #32
 80096f6:	d11d      	bne.n	8009734 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_UART_Receive_IT+0x26>
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e016      	b.n	8009736 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_UART_Receive_IT+0x38>
 8009712:	2302      	movs	r3, #2
 8009714:	e00f      	b.n	8009736 <HAL_UART_Receive_IT+0x58>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	461a      	mov	r2, r3
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fb24 	bl	8009d78 <UART_Start_Receive_IT>
 8009730:	4603      	mov	r3, r0
 8009732:	e000      	b.n	8009736 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b0ba      	sub	sp, #232	; 0xe8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800976c:	2300      	movs	r3, #0
 800976e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800977e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10f      	bne.n	80097a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d009      	beq.n	80097a6 <HAL_UART_IRQHandler+0x66>
 8009792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fc03 	bl	8009faa <UART_Receive_IT>
      return;
 80097a4:	e256      	b.n	8009c54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80de 	beq.w	800996c <HAL_UART_IRQHandler+0x22c>
 80097b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80d1 	beq.w	800996c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <HAL_UART_IRQHandler+0xae>
 80097d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e6:	f043 0201 	orr.w	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <HAL_UART_IRQHandler+0xd2>
 80097fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	f043 0202 	orr.w	r2, r3, #2
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <HAL_UART_IRQHandler+0xf6>
 800981e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	f043 0204 	orr.w	r2, r3, #4
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d011      	beq.n	8009866 <HAL_UART_IRQHandler+0x126>
 8009842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800984e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	f043 0208 	orr.w	r2, r3, #8
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 81ed 	beq.w	8009c4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d008      	beq.n	800988e <HAL_UART_IRQHandler+0x14e>
 800987c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fb8e 	bl	8009faa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b40      	cmp	r3, #64	; 0x40
 800989a:	bf0c      	ite	eq
 800989c:	2301      	moveq	r3, #1
 800989e:	2300      	movne	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f003 0308 	and.w	r3, r3, #8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <HAL_UART_IRQHandler+0x17a>
 80098b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d04f      	beq.n	800995a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa96 	bl	8009dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b40      	cmp	r3, #64	; 0x40
 80098cc:	d141      	bne.n	8009952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3314      	adds	r3, #20
 80098f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1d9      	bne.n	80098ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	2b00      	cmp	r3, #0
 8009920:	d013      	beq.n	800994a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	4a7d      	ldr	r2, [pc, #500]	; (8009b1c <HAL_UART_IRQHandler+0x3dc>)
 8009928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	4618      	mov	r0, r3
 8009930:	f7fa f818 	bl	8003964 <HAL_DMA_Abort_IT>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d016      	beq.n	8009968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009948:	e00e      	b.n	8009968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f990 	bl	8009c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	e00a      	b.n	8009968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f98c 	bl	8009c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009958:	e006      	b.n	8009968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f988 	bl	8009c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009966:	e170      	b.n	8009c4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	bf00      	nop
    return;
 800996a:	e16e      	b.n	8009c4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	2b01      	cmp	r3, #1
 8009972:	f040 814a 	bne.w	8009c0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997a:	f003 0310 	and.w	r3, r3, #16
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8143 	beq.w	8009c0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 813c 	beq.w	8009c0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009992:	2300      	movs	r3, #0
 8009994:	60bb      	str	r3, [r7, #8]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	60bb      	str	r3, [r7, #8]
 80099a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b40      	cmp	r3, #64	; 0x40
 80099b4:	f040 80b4 	bne.w	8009b20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8140 	beq.w	8009c4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099d6:	429a      	cmp	r2, r3
 80099d8:	f080 8139 	bcs.w	8009c4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ee:	f000 8088 	beq.w	8009b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1d9      	bne.n	80099f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3314      	adds	r3, #20
 8009a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a50:	f023 0301 	bic.w	r3, r3, #1
 8009a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3314      	adds	r3, #20
 8009a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e1      	bne.n	8009a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3314      	adds	r3, #20
 8009a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3314      	adds	r3, #20
 8009a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e3      	bne.n	8009a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad2:	f023 0310 	bic.w	r3, r3, #16
 8009ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e3      	bne.n	8009ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f9 fec1 	bl	8003884 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f8b6 	bl	8009c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b18:	e099      	b.n	8009c4e <HAL_UART_IRQHandler+0x50e>
 8009b1a:	bf00      	nop
 8009b1c:	08009eb3 	.word	0x08009eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 808b 	beq.w	8009c52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 8086 	beq.w	8009c52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	330c      	adds	r3, #12
 8009b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8009b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e3      	bne.n	8009b46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3314      	adds	r3, #20
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3314      	adds	r3, #20
 8009b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e3      	bne.n	8009b7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0310 	bic.w	r3, r3, #16
 8009bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	330c      	adds	r3, #12
 8009be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009be8:	61fa      	str	r2, [r7, #28]
 8009bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	69b9      	ldr	r1, [r7, #24]
 8009bee:	69fa      	ldr	r2, [r7, #28]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e3      	bne.n	8009bc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f83e 	bl	8009c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c08:	e023      	b.n	8009c52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <HAL_UART_IRQHandler+0x4ea>
 8009c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f959 	bl	8009eda <UART_Transmit_IT>
    return;
 8009c28:	e014      	b.n	8009c54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00e      	beq.n	8009c54 <HAL_UART_IRQHandler+0x514>
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d008      	beq.n	8009c54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f999 	bl	8009f7a <UART_EndTransmit_IT>
    return;
 8009c48:	e004      	b.n	8009c54 <HAL_UART_IRQHandler+0x514>
    return;
 8009c4a:	bf00      	nop
 8009c4c:	e002      	b.n	8009c54 <HAL_UART_IRQHandler+0x514>
      return;
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <HAL_UART_IRQHandler+0x514>
      return;
 8009c52:	bf00      	nop
  }
}
 8009c54:	37e8      	adds	r7, #232	; 0xe8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop

08009c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b090      	sub	sp, #64	; 0x40
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cac:	e050      	b.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d04c      	beq.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d007      	beq.n	8009ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8009cbc:	f7f9 f9ea 	bl	8003094 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d241      	bcs.n	8009d50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cec:	637a      	str	r2, [r7, #52]	; 0x34
 8009cee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e5      	bne.n	8009ccc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3314      	adds	r3, #20
 8009d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f023 0301 	bic.w	r3, r3, #1
 8009d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d20:	623a      	str	r2, [r7, #32]
 8009d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69f9      	ldr	r1, [r7, #28]
 8009d26:	6a3a      	ldr	r2, [r7, #32]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e5      	bne.n	8009d00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e00f      	b.n	8009d70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	4013      	ands	r3, r2
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	bf0c      	ite	eq
 8009d60:	2301      	moveq	r3, #1
 8009d62:	2300      	movne	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d09f      	beq.n	8009cae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3740      	adds	r7, #64	; 0x40
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	88fa      	ldrh	r2, [r7, #6]
 8009d90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	88fa      	ldrh	r2, [r7, #6]
 8009d96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2222      	movs	r2, #34	; 0x22
 8009da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dbc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695a      	ldr	r2, [r3, #20]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0201 	orr.w	r2, r2, #1
 8009dcc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0220 	orr.w	r2, r2, #32
 8009ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b095      	sub	sp, #84	; 0x54
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	330c      	adds	r3, #12
 8009e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e14:	643a      	str	r2, [r7, #64]	; 0x40
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e5      	bne.n	8009df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3314      	adds	r3, #20
 8009e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e5      	bne.n	8009e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d119      	bne.n	8009e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f023 0310 	bic.w	r3, r3, #16
 8009e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	330c      	adds	r3, #12
 8009e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e84:	61ba      	str	r2, [r7, #24]
 8009e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	6979      	ldr	r1, [r7, #20]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	613b      	str	r3, [r7, #16]
   return(result);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e5      	bne.n	8009e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009ea6:	bf00      	nop
 8009ea8:	3754      	adds	r7, #84	; 0x54
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff fecf 	bl	8009c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b085      	sub	sp, #20
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b21      	cmp	r3, #33	; 0x21
 8009eec:	d13e      	bne.n	8009f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef6:	d114      	bne.n	8009f22 <UART_Transmit_IT+0x48>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d110      	bne.n	8009f22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	1c9a      	adds	r2, r3, #2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	621a      	str	r2, [r3, #32]
 8009f20:	e008      	b.n	8009f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	1c59      	adds	r1, r3, #1
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6211      	str	r1, [r2, #32]
 8009f2c:	781a      	ldrb	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	4619      	mov	r1, r3
 8009f42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10f      	bne.n	8009f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e000      	b.n	8009f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f6c:	2302      	movs	r3, #2
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fe5e 	bl	8009c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b08c      	sub	sp, #48	; 0x30
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b22      	cmp	r3, #34	; 0x22
 8009fbc:	f040 80ab 	bne.w	800a116 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc8:	d117      	bne.n	8009ffa <UART_Receive_IT+0x50>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d113      	bne.n	8009ffa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff2:	1c9a      	adds	r2, r3, #2
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ff8:	e026      	b.n	800a048 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00c:	d007      	beq.n	800a01e <UART_Receive_IT+0x74>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <UART_Receive_IT+0x82>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	b2da      	uxtb	r2, r3
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e008      	b.n	800a03e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	3b01      	subs	r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4619      	mov	r1, r3
 800a056:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d15a      	bne.n	800a112 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0220 	bic.w	r2, r2, #32
 800a06a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a07a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	695a      	ldr	r2, [r3, #20]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 0201 	bic.w	r2, r2, #1
 800a08a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d135      	bne.n	800a108 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f023 0310 	bic.w	r3, r3, #16
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	330c      	adds	r3, #12
 800a0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c2:	623a      	str	r2, [r7, #32]
 800a0c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	69f9      	ldr	r1, [r7, #28]
 800a0c8:	6a3a      	ldr	r2, [r7, #32]
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e5      	bne.n	800a0a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	2b10      	cmp	r3, #16
 800a0e2:	d10a      	bne.n	800a0fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fdbf 	bl	8009c84 <HAL_UARTEx_RxEventCallback>
 800a106:	e002      	b.n	800a10e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7f7 fbb5 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	e002      	b.n	800a118 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a116:	2302      	movs	r3, #2
  }
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3730      	adds	r7, #48	; 0x30
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	b09f      	sub	sp, #124	; 0x7c
 800a126:	af00      	add	r7, sp, #0
 800a128:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a136:	68d9      	ldr	r1, [r3, #12]
 800a138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	ea40 0301 	orr.w	r3, r0, r1
 800a140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	431a      	orrs	r2, r3
 800a152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	4313      	orrs	r3, r2
 800a158:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a164:	f021 010c 	bic.w	r1, r1, #12
 800a168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a16e:	430b      	orrs	r3, r1
 800a170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17e:	6999      	ldr	r1, [r3, #24]
 800a180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	ea40 0301 	orr.w	r3, r0, r1
 800a188:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4bc5      	ldr	r3, [pc, #788]	; (800a4a4 <UART_SetConfig+0x384>)
 800a190:	429a      	cmp	r2, r3
 800a192:	d004      	beq.n	800a19e <UART_SetConfig+0x7e>
 800a194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	4bc3      	ldr	r3, [pc, #780]	; (800a4a8 <UART_SetConfig+0x388>)
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d103      	bne.n	800a1a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a19e:	f7fc fde5 	bl	8006d6c <HAL_RCC_GetPCLK2Freq>
 800a1a2:	6778      	str	r0, [r7, #116]	; 0x74
 800a1a4:	e002      	b.n	800a1ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1a6:	f7fc fdcd 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 800a1aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b4:	f040 80b6 	bne.w	800a324 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ba:	461c      	mov	r4, r3
 800a1bc:	f04f 0500 	mov.w	r5, #0
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	1891      	adds	r1, r2, r2
 800a1c6:	6439      	str	r1, [r7, #64]	; 0x40
 800a1c8:	415b      	adcs	r3, r3
 800a1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800a1cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1d0:	1912      	adds	r2, r2, r4
 800a1d2:	eb45 0303 	adc.w	r3, r5, r3
 800a1d6:	f04f 0000 	mov.w	r0, #0
 800a1da:	f04f 0100 	mov.w	r1, #0
 800a1de:	00d9      	lsls	r1, r3, #3
 800a1e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1e4:	00d0      	lsls	r0, r2, #3
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	1911      	adds	r1, r2, r4
 800a1ec:	6639      	str	r1, [r7, #96]	; 0x60
 800a1ee:	416b      	adcs	r3, r5
 800a1f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f04f 0300 	mov.w	r3, #0
 800a1fc:	1891      	adds	r1, r2, r2
 800a1fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800a200:	415b      	adcs	r3, r3
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a208:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a20c:	f7f6 fcfc 	bl	8000c08 <__aeabi_uldivmod>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4ba5      	ldr	r3, [pc, #660]	; (800a4ac <UART_SetConfig+0x38c>)
 800a216:	fba3 2302 	umull	r2, r3, r3, r2
 800a21a:	095b      	lsrs	r3, r3, #5
 800a21c:	011e      	lsls	r6, r3, #4
 800a21e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a220:	461c      	mov	r4, r3
 800a222:	f04f 0500 	mov.w	r5, #0
 800a226:	4622      	mov	r2, r4
 800a228:	462b      	mov	r3, r5
 800a22a:	1891      	adds	r1, r2, r2
 800a22c:	6339      	str	r1, [r7, #48]	; 0x30
 800a22e:	415b      	adcs	r3, r3
 800a230:	637b      	str	r3, [r7, #52]	; 0x34
 800a232:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a236:	1912      	adds	r2, r2, r4
 800a238:	eb45 0303 	adc.w	r3, r5, r3
 800a23c:	f04f 0000 	mov.w	r0, #0
 800a240:	f04f 0100 	mov.w	r1, #0
 800a244:	00d9      	lsls	r1, r3, #3
 800a246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a24a:	00d0      	lsls	r0, r2, #3
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	1911      	adds	r1, r2, r4
 800a252:	65b9      	str	r1, [r7, #88]	; 0x58
 800a254:	416b      	adcs	r3, r5
 800a256:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	461a      	mov	r2, r3
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	1891      	adds	r1, r2, r2
 800a264:	62b9      	str	r1, [r7, #40]	; 0x28
 800a266:	415b      	adcs	r3, r3
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a26a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a26e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a272:	f7f6 fcc9 	bl	8000c08 <__aeabi_uldivmod>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4b8c      	ldr	r3, [pc, #560]	; (800a4ac <UART_SetConfig+0x38c>)
 800a27c:	fba3 1302 	umull	r1, r3, r3, r2
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	2164      	movs	r1, #100	; 0x64
 800a284:	fb01 f303 	mul.w	r3, r1, r3
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	3332      	adds	r3, #50	; 0x32
 800a28e:	4a87      	ldr	r2, [pc, #540]	; (800a4ac <UART_SetConfig+0x38c>)
 800a290:	fba2 2303 	umull	r2, r3, r2, r3
 800a294:	095b      	lsrs	r3, r3, #5
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a29c:	441e      	add	r6, r3
 800a29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f04f 0100 	mov.w	r1, #0
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	1894      	adds	r4, r2, r2
 800a2ac:	623c      	str	r4, [r7, #32]
 800a2ae:	415b      	adcs	r3, r3
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2b6:	1812      	adds	r2, r2, r0
 800a2b8:	eb41 0303 	adc.w	r3, r1, r3
 800a2bc:	f04f 0400 	mov.w	r4, #0
 800a2c0:	f04f 0500 	mov.w	r5, #0
 800a2c4:	00dd      	lsls	r5, r3, #3
 800a2c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a2ca:	00d4      	lsls	r4, r2, #3
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	1814      	adds	r4, r2, r0
 800a2d2:	653c      	str	r4, [r7, #80]	; 0x50
 800a2d4:	414b      	adcs	r3, r1
 800a2d6:	657b      	str	r3, [r7, #84]	; 0x54
 800a2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	1891      	adds	r1, r2, r2
 800a2e4:	61b9      	str	r1, [r7, #24]
 800a2e6:	415b      	adcs	r3, r3
 800a2e8:	61fb      	str	r3, [r7, #28]
 800a2ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a2f2:	f7f6 fc89 	bl	8000c08 <__aeabi_uldivmod>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4b6c      	ldr	r3, [pc, #432]	; (800a4ac <UART_SetConfig+0x38c>)
 800a2fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a300:	095b      	lsrs	r3, r3, #5
 800a302:	2164      	movs	r1, #100	; 0x64
 800a304:	fb01 f303 	mul.w	r3, r1, r3
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	3332      	adds	r3, #50	; 0x32
 800a30e:	4a67      	ldr	r2, [pc, #412]	; (800a4ac <UART_SetConfig+0x38c>)
 800a310:	fba2 2303 	umull	r2, r3, r2, r3
 800a314:	095b      	lsrs	r3, r3, #5
 800a316:	f003 0207 	and.w	r2, r3, #7
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4432      	add	r2, r6
 800a320:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a322:	e0b9      	b.n	800a498 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a326:	461c      	mov	r4, r3
 800a328:	f04f 0500 	mov.w	r5, #0
 800a32c:	4622      	mov	r2, r4
 800a32e:	462b      	mov	r3, r5
 800a330:	1891      	adds	r1, r2, r2
 800a332:	6139      	str	r1, [r7, #16]
 800a334:	415b      	adcs	r3, r3
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a33c:	1912      	adds	r2, r2, r4
 800a33e:	eb45 0303 	adc.w	r3, r5, r3
 800a342:	f04f 0000 	mov.w	r0, #0
 800a346:	f04f 0100 	mov.w	r1, #0
 800a34a:	00d9      	lsls	r1, r3, #3
 800a34c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a350:	00d0      	lsls	r0, r2, #3
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	eb12 0804 	adds.w	r8, r2, r4
 800a35a:	eb43 0905 	adc.w	r9, r3, r5
 800a35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4618      	mov	r0, r3
 800a364:	f04f 0100 	mov.w	r1, #0
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	008b      	lsls	r3, r1, #2
 800a372:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a376:	0082      	lsls	r2, r0, #2
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f6 fc44 	bl	8000c08 <__aeabi_uldivmod>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4b49      	ldr	r3, [pc, #292]	; (800a4ac <UART_SetConfig+0x38c>)
 800a386:	fba3 2302 	umull	r2, r3, r3, r2
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	011e      	lsls	r6, r3, #4
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	4618      	mov	r0, r3
 800a392:	f04f 0100 	mov.w	r1, #0
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	1894      	adds	r4, r2, r2
 800a39c:	60bc      	str	r4, [r7, #8]
 800a39e:	415b      	adcs	r3, r3
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3a6:	1812      	adds	r2, r2, r0
 800a3a8:	eb41 0303 	adc.w	r3, r1, r3
 800a3ac:	f04f 0400 	mov.w	r4, #0
 800a3b0:	f04f 0500 	mov.w	r5, #0
 800a3b4:	00dd      	lsls	r5, r3, #3
 800a3b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a3ba:	00d4      	lsls	r4, r2, #3
 800a3bc:	4622      	mov	r2, r4
 800a3be:	462b      	mov	r3, r5
 800a3c0:	1814      	adds	r4, r2, r0
 800a3c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a3c4:	414b      	adcs	r3, r1
 800a3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f04f 0100 	mov.w	r1, #0
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	008b      	lsls	r3, r1, #2
 800a3dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3e0:	0082      	lsls	r2, r0, #2
 800a3e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a3e6:	f7f6 fc0f 	bl	8000c08 <__aeabi_uldivmod>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4b2f      	ldr	r3, [pc, #188]	; (800a4ac <UART_SetConfig+0x38c>)
 800a3f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a3f4:	095b      	lsrs	r3, r3, #5
 800a3f6:	2164      	movs	r1, #100	; 0x64
 800a3f8:	fb01 f303 	mul.w	r3, r1, r3
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	3332      	adds	r3, #50	; 0x32
 800a402:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <UART_SetConfig+0x38c>)
 800a404:	fba2 2303 	umull	r2, r3, r2, r3
 800a408:	095b      	lsrs	r3, r3, #5
 800a40a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a40e:	441e      	add	r6, r3
 800a410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a412:	4618      	mov	r0, r3
 800a414:	f04f 0100 	mov.w	r1, #0
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	1894      	adds	r4, r2, r2
 800a41e:	603c      	str	r4, [r7, #0]
 800a420:	415b      	adcs	r3, r3
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a428:	1812      	adds	r2, r2, r0
 800a42a:	eb41 0303 	adc.w	r3, r1, r3
 800a42e:	f04f 0400 	mov.w	r4, #0
 800a432:	f04f 0500 	mov.w	r5, #0
 800a436:	00dd      	lsls	r5, r3, #3
 800a438:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a43c:	00d4      	lsls	r4, r2, #3
 800a43e:	4622      	mov	r2, r4
 800a440:	462b      	mov	r3, r5
 800a442:	eb12 0a00 	adds.w	sl, r2, r0
 800a446:	eb43 0b01 	adc.w	fp, r3, r1
 800a44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	f04f 0100 	mov.w	r1, #0
 800a454:	f04f 0200 	mov.w	r2, #0
 800a458:	f04f 0300 	mov.w	r3, #0
 800a45c:	008b      	lsls	r3, r1, #2
 800a45e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a462:	0082      	lsls	r2, r0, #2
 800a464:	4650      	mov	r0, sl
 800a466:	4659      	mov	r1, fp
 800a468:	f7f6 fbce 	bl	8000c08 <__aeabi_uldivmod>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <UART_SetConfig+0x38c>)
 800a472:	fba3 1302 	umull	r1, r3, r3, r2
 800a476:	095b      	lsrs	r3, r3, #5
 800a478:	2164      	movs	r1, #100	; 0x64
 800a47a:	fb01 f303 	mul.w	r3, r1, r3
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	3332      	adds	r3, #50	; 0x32
 800a484:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <UART_SetConfig+0x38c>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	095b      	lsrs	r3, r3, #5
 800a48c:	f003 020f 	and.w	r2, r3, #15
 800a490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4432      	add	r2, r6
 800a496:	609a      	str	r2, [r3, #8]
}
 800a498:	bf00      	nop
 800a49a:	377c      	adds	r7, #124	; 0x7c
 800a49c:	46bd      	mov	sp, r7
 800a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a2:	bf00      	nop
 800a4a4:	40011000 	.word	0x40011000
 800a4a8:	40011400 	.word	0x40011400
 800a4ac:	51eb851f 	.word	0x51eb851f

0800a4b0 <__errno>:
 800a4b0:	4b01      	ldr	r3, [pc, #4]	; (800a4b8 <__errno+0x8>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000010 	.word	0x20000010

0800a4bc <__libc_init_array>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	4d0d      	ldr	r5, [pc, #52]	; (800a4f4 <__libc_init_array+0x38>)
 800a4c0:	4c0d      	ldr	r4, [pc, #52]	; (800a4f8 <__libc_init_array+0x3c>)
 800a4c2:	1b64      	subs	r4, r4, r5
 800a4c4:	10a4      	asrs	r4, r4, #2
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	d109      	bne.n	800a4e0 <__libc_init_array+0x24>
 800a4cc:	4d0b      	ldr	r5, [pc, #44]	; (800a4fc <__libc_init_array+0x40>)
 800a4ce:	4c0c      	ldr	r4, [pc, #48]	; (800a500 <__libc_init_array+0x44>)
 800a4d0:	f002 fd08 	bl	800cee4 <_init>
 800a4d4:	1b64      	subs	r4, r4, r5
 800a4d6:	10a4      	asrs	r4, r4, #2
 800a4d8:	2600      	movs	r6, #0
 800a4da:	42a6      	cmp	r6, r4
 800a4dc:	d105      	bne.n	800a4ea <__libc_init_array+0x2e>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e4:	4798      	blx	r3
 800a4e6:	3601      	adds	r6, #1
 800a4e8:	e7ee      	b.n	800a4c8 <__libc_init_array+0xc>
 800a4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ee:	4798      	blx	r3
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	e7f2      	b.n	800a4da <__libc_init_array+0x1e>
 800a4f4:	0807a8c4 	.word	0x0807a8c4
 800a4f8:	0807a8c4 	.word	0x0807a8c4
 800a4fc:	0807a8c4 	.word	0x0807a8c4
 800a500:	0807a8c8 	.word	0x0807a8c8

0800a504 <memset>:
 800a504:	4402      	add	r2, r0
 800a506:	4603      	mov	r3, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <__cvt>:
 800a514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	ec55 4b10 	vmov	r4, r5, d0
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	460e      	mov	r6, r1
 800a520:	4619      	mov	r1, r3
 800a522:	462b      	mov	r3, r5
 800a524:	bfbb      	ittet	lt
 800a526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a52a:	461d      	movlt	r5, r3
 800a52c:	2300      	movge	r3, #0
 800a52e:	232d      	movlt	r3, #45	; 0x2d
 800a530:	700b      	strb	r3, [r1, #0]
 800a532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a534:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a538:	4691      	mov	r9, r2
 800a53a:	f023 0820 	bic.w	r8, r3, #32
 800a53e:	bfbc      	itt	lt
 800a540:	4622      	movlt	r2, r4
 800a542:	4614      	movlt	r4, r2
 800a544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a548:	d005      	beq.n	800a556 <__cvt+0x42>
 800a54a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a54e:	d100      	bne.n	800a552 <__cvt+0x3e>
 800a550:	3601      	adds	r6, #1
 800a552:	2102      	movs	r1, #2
 800a554:	e000      	b.n	800a558 <__cvt+0x44>
 800a556:	2103      	movs	r1, #3
 800a558:	ab03      	add	r3, sp, #12
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	ab02      	add	r3, sp, #8
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	ec45 4b10 	vmov	d0, r4, r5
 800a564:	4653      	mov	r3, sl
 800a566:	4632      	mov	r2, r6
 800a568:	f000 fce2 	bl	800af30 <_dtoa_r>
 800a56c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a570:	4607      	mov	r7, r0
 800a572:	d102      	bne.n	800a57a <__cvt+0x66>
 800a574:	f019 0f01 	tst.w	r9, #1
 800a578:	d022      	beq.n	800a5c0 <__cvt+0xac>
 800a57a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a57e:	eb07 0906 	add.w	r9, r7, r6
 800a582:	d110      	bne.n	800a5a6 <__cvt+0x92>
 800a584:	783b      	ldrb	r3, [r7, #0]
 800a586:	2b30      	cmp	r3, #48	; 0x30
 800a588:	d10a      	bne.n	800a5a0 <__cvt+0x8c>
 800a58a:	2200      	movs	r2, #0
 800a58c:	2300      	movs	r3, #0
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f6 fac9 	bl	8000b28 <__aeabi_dcmpeq>
 800a596:	b918      	cbnz	r0, 800a5a0 <__cvt+0x8c>
 800a598:	f1c6 0601 	rsb	r6, r6, #1
 800a59c:	f8ca 6000 	str.w	r6, [sl]
 800a5a0:	f8da 3000 	ldr.w	r3, [sl]
 800a5a4:	4499      	add	r9, r3
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	f7f6 fabb 	bl	8000b28 <__aeabi_dcmpeq>
 800a5b2:	b108      	cbz	r0, 800a5b8 <__cvt+0xa4>
 800a5b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5b8:	2230      	movs	r2, #48	; 0x30
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	454b      	cmp	r3, r9
 800a5be:	d307      	bcc.n	800a5d0 <__cvt+0xbc>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5c4:	1bdb      	subs	r3, r3, r7
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	b004      	add	sp, #16
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	9103      	str	r1, [sp, #12]
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e7f0      	b.n	800a5ba <__cvt+0xa6>

0800a5d8 <__exponent>:
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	bfb8      	it	lt
 800a5e0:	4249      	neglt	r1, r1
 800a5e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a5e6:	bfb4      	ite	lt
 800a5e8:	222d      	movlt	r2, #45	; 0x2d
 800a5ea:	222b      	movge	r2, #43	; 0x2b
 800a5ec:	2909      	cmp	r1, #9
 800a5ee:	7042      	strb	r2, [r0, #1]
 800a5f0:	dd2a      	ble.n	800a648 <__exponent+0x70>
 800a5f2:	f10d 0407 	add.w	r4, sp, #7
 800a5f6:	46a4      	mov	ip, r4
 800a5f8:	270a      	movs	r7, #10
 800a5fa:	46a6      	mov	lr, r4
 800a5fc:	460a      	mov	r2, r1
 800a5fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a602:	fb07 1516 	mls	r5, r7, r6, r1
 800a606:	3530      	adds	r5, #48	; 0x30
 800a608:	2a63      	cmp	r2, #99	; 0x63
 800a60a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a60e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a612:	4631      	mov	r1, r6
 800a614:	dcf1      	bgt.n	800a5fa <__exponent+0x22>
 800a616:	3130      	adds	r1, #48	; 0x30
 800a618:	f1ae 0502 	sub.w	r5, lr, #2
 800a61c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a620:	1c44      	adds	r4, r0, #1
 800a622:	4629      	mov	r1, r5
 800a624:	4561      	cmp	r1, ip
 800a626:	d30a      	bcc.n	800a63e <__exponent+0x66>
 800a628:	f10d 0209 	add.w	r2, sp, #9
 800a62c:	eba2 020e 	sub.w	r2, r2, lr
 800a630:	4565      	cmp	r5, ip
 800a632:	bf88      	it	hi
 800a634:	2200      	movhi	r2, #0
 800a636:	4413      	add	r3, r2
 800a638:	1a18      	subs	r0, r3, r0
 800a63a:	b003      	add	sp, #12
 800a63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a642:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a646:	e7ed      	b.n	800a624 <__exponent+0x4c>
 800a648:	2330      	movs	r3, #48	; 0x30
 800a64a:	3130      	adds	r1, #48	; 0x30
 800a64c:	7083      	strb	r3, [r0, #2]
 800a64e:	70c1      	strb	r1, [r0, #3]
 800a650:	1d03      	adds	r3, r0, #4
 800a652:	e7f1      	b.n	800a638 <__exponent+0x60>

0800a654 <_printf_float>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	ed2d 8b02 	vpush	{d8}
 800a65c:	b08d      	sub	sp, #52	; 0x34
 800a65e:	460c      	mov	r4, r1
 800a660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a664:	4616      	mov	r6, r2
 800a666:	461f      	mov	r7, r3
 800a668:	4605      	mov	r5, r0
 800a66a:	f001 fb43 	bl	800bcf4 <_localeconv_r>
 800a66e:	f8d0 a000 	ldr.w	sl, [r0]
 800a672:	4650      	mov	r0, sl
 800a674:	f7f5 fdd6 	bl	8000224 <strlen>
 800a678:	2300      	movs	r3, #0
 800a67a:	930a      	str	r3, [sp, #40]	; 0x28
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	f8d8 3000 	ldr.w	r3, [r8]
 800a684:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	f103 0208 	add.w	r2, r3, #8
 800a692:	f8c8 2000 	str.w	r2, [r8]
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a69e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6a6:	9307      	str	r3, [sp, #28]
 800a6a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6ac:	ee08 0a10 	vmov	s16, r0
 800a6b0:	4b9f      	ldr	r3, [pc, #636]	; (800a930 <_printf_float+0x2dc>)
 800a6b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ba:	f7f6 fa67 	bl	8000b8c <__aeabi_dcmpun>
 800a6be:	bb88      	cbnz	r0, 800a724 <_printf_float+0xd0>
 800a6c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6c4:	4b9a      	ldr	r3, [pc, #616]	; (800a930 <_printf_float+0x2dc>)
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	f7f6 fa41 	bl	8000b50 <__aeabi_dcmple>
 800a6ce:	bb48      	cbnz	r0, 800a724 <_printf_float+0xd0>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	f7f6 fa30 	bl	8000b3c <__aeabi_dcmplt>
 800a6dc:	b110      	cbz	r0, 800a6e4 <_printf_float+0x90>
 800a6de:	232d      	movs	r3, #45	; 0x2d
 800a6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e4:	4b93      	ldr	r3, [pc, #588]	; (800a934 <_printf_float+0x2e0>)
 800a6e6:	4894      	ldr	r0, [pc, #592]	; (800a938 <_printf_float+0x2e4>)
 800a6e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6ec:	bf94      	ite	ls
 800a6ee:	4698      	movls	r8, r3
 800a6f0:	4680      	movhi	r8, r0
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	9b05      	ldr	r3, [sp, #20]
 800a6f8:	f023 0204 	bic.w	r2, r3, #4
 800a6fc:	6022      	str	r2, [r4, #0]
 800a6fe:	f04f 0900 	mov.w	r9, #0
 800a702:	9700      	str	r7, [sp, #0]
 800a704:	4633      	mov	r3, r6
 800a706:	aa0b      	add	r2, sp, #44	; 0x2c
 800a708:	4621      	mov	r1, r4
 800a70a:	4628      	mov	r0, r5
 800a70c:	f000 f9d8 	bl	800aac0 <_printf_common>
 800a710:	3001      	adds	r0, #1
 800a712:	f040 8090 	bne.w	800a836 <_printf_float+0x1e2>
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	b00d      	add	sp, #52	; 0x34
 800a71c:	ecbd 8b02 	vpop	{d8}
 800a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	4642      	mov	r2, r8
 800a726:	464b      	mov	r3, r9
 800a728:	4640      	mov	r0, r8
 800a72a:	4649      	mov	r1, r9
 800a72c:	f7f6 fa2e 	bl	8000b8c <__aeabi_dcmpun>
 800a730:	b140      	cbz	r0, 800a744 <_printf_float+0xf0>
 800a732:	464b      	mov	r3, r9
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfbc      	itt	lt
 800a738:	232d      	movlt	r3, #45	; 0x2d
 800a73a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a73e:	487f      	ldr	r0, [pc, #508]	; (800a93c <_printf_float+0x2e8>)
 800a740:	4b7f      	ldr	r3, [pc, #508]	; (800a940 <_printf_float+0x2ec>)
 800a742:	e7d1      	b.n	800a6e8 <_printf_float+0x94>
 800a744:	6863      	ldr	r3, [r4, #4]
 800a746:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a74a:	9206      	str	r2, [sp, #24]
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	d13f      	bne.n	800a7d0 <_printf_float+0x17c>
 800a750:	2306      	movs	r3, #6
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	9b05      	ldr	r3, [sp, #20]
 800a756:	6861      	ldr	r1, [r4, #4]
 800a758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a75c:	2300      	movs	r3, #0
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	ab0a      	add	r3, sp, #40	; 0x28
 800a762:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a766:	ab09      	add	r3, sp, #36	; 0x24
 800a768:	ec49 8b10 	vmov	d0, r8, r9
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	6022      	str	r2, [r4, #0]
 800a770:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a774:	4628      	mov	r0, r5
 800a776:	f7ff fecd 	bl	800a514 <__cvt>
 800a77a:	9b06      	ldr	r3, [sp, #24]
 800a77c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a77e:	2b47      	cmp	r3, #71	; 0x47
 800a780:	4680      	mov	r8, r0
 800a782:	d108      	bne.n	800a796 <_printf_float+0x142>
 800a784:	1cc8      	adds	r0, r1, #3
 800a786:	db02      	blt.n	800a78e <_printf_float+0x13a>
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	4299      	cmp	r1, r3
 800a78c:	dd41      	ble.n	800a812 <_printf_float+0x1be>
 800a78e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a792:	fa5f fb8b 	uxtb.w	fp, fp
 800a796:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a79a:	d820      	bhi.n	800a7de <_printf_float+0x18a>
 800a79c:	3901      	subs	r1, #1
 800a79e:	465a      	mov	r2, fp
 800a7a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a7a6:	f7ff ff17 	bl	800a5d8 <__exponent>
 800a7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ac:	1813      	adds	r3, r2, r0
 800a7ae:	2a01      	cmp	r2, #1
 800a7b0:	4681      	mov	r9, r0
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	dc02      	bgt.n	800a7bc <_printf_float+0x168>
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	07d2      	lsls	r2, r2, #31
 800a7ba:	d501      	bpl.n	800a7c0 <_printf_float+0x16c>
 800a7bc:	3301      	adds	r3, #1
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d09c      	beq.n	800a702 <_printf_float+0xae>
 800a7c8:	232d      	movs	r3, #45	; 0x2d
 800a7ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ce:	e798      	b.n	800a702 <_printf_float+0xae>
 800a7d0:	9a06      	ldr	r2, [sp, #24]
 800a7d2:	2a47      	cmp	r2, #71	; 0x47
 800a7d4:	d1be      	bne.n	800a754 <_printf_float+0x100>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1bc      	bne.n	800a754 <_printf_float+0x100>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e7b9      	b.n	800a752 <_printf_float+0xfe>
 800a7de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7e2:	d118      	bne.n	800a816 <_printf_float+0x1c2>
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	dd0b      	ble.n	800a802 <_printf_float+0x1ae>
 800a7ea:	6121      	str	r1, [r4, #16]
 800a7ec:	b913      	cbnz	r3, 800a7f4 <_printf_float+0x1a0>
 800a7ee:	6822      	ldr	r2, [r4, #0]
 800a7f0:	07d0      	lsls	r0, r2, #31
 800a7f2:	d502      	bpl.n	800a7fa <_printf_float+0x1a6>
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	440b      	add	r3, r1
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7fc:	f04f 0900 	mov.w	r9, #0
 800a800:	e7de      	b.n	800a7c0 <_printf_float+0x16c>
 800a802:	b913      	cbnz	r3, 800a80a <_printf_float+0x1b6>
 800a804:	6822      	ldr	r2, [r4, #0]
 800a806:	07d2      	lsls	r2, r2, #31
 800a808:	d501      	bpl.n	800a80e <_printf_float+0x1ba>
 800a80a:	3302      	adds	r3, #2
 800a80c:	e7f4      	b.n	800a7f8 <_printf_float+0x1a4>
 800a80e:	2301      	movs	r3, #1
 800a810:	e7f2      	b.n	800a7f8 <_printf_float+0x1a4>
 800a812:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a818:	4299      	cmp	r1, r3
 800a81a:	db05      	blt.n	800a828 <_printf_float+0x1d4>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	6121      	str	r1, [r4, #16]
 800a820:	07d8      	lsls	r0, r3, #31
 800a822:	d5ea      	bpl.n	800a7fa <_printf_float+0x1a6>
 800a824:	1c4b      	adds	r3, r1, #1
 800a826:	e7e7      	b.n	800a7f8 <_printf_float+0x1a4>
 800a828:	2900      	cmp	r1, #0
 800a82a:	bfd4      	ite	le
 800a82c:	f1c1 0202 	rsble	r2, r1, #2
 800a830:	2201      	movgt	r2, #1
 800a832:	4413      	add	r3, r2
 800a834:	e7e0      	b.n	800a7f8 <_printf_float+0x1a4>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	055a      	lsls	r2, r3, #21
 800a83a:	d407      	bmi.n	800a84c <_printf_float+0x1f8>
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	4642      	mov	r2, r8
 800a840:	4631      	mov	r1, r6
 800a842:	4628      	mov	r0, r5
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	d12c      	bne.n	800a8a4 <_printf_float+0x250>
 800a84a:	e764      	b.n	800a716 <_printf_float+0xc2>
 800a84c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a850:	f240 80e0 	bls.w	800aa14 <_printf_float+0x3c0>
 800a854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a858:	2200      	movs	r2, #0
 800a85a:	2300      	movs	r3, #0
 800a85c:	f7f6 f964 	bl	8000b28 <__aeabi_dcmpeq>
 800a860:	2800      	cmp	r0, #0
 800a862:	d034      	beq.n	800a8ce <_printf_float+0x27a>
 800a864:	4a37      	ldr	r2, [pc, #220]	; (800a944 <_printf_float+0x2f0>)
 800a866:	2301      	movs	r3, #1
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f af51 	beq.w	800a716 <_printf_float+0xc2>
 800a874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a878:	429a      	cmp	r2, r3
 800a87a:	db02      	blt.n	800a882 <_printf_float+0x22e>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	07d8      	lsls	r0, r3, #31
 800a880:	d510      	bpl.n	800a8a4 <_printf_float+0x250>
 800a882:	ee18 3a10 	vmov	r3, s16
 800a886:	4652      	mov	r2, sl
 800a888:	4631      	mov	r1, r6
 800a88a:	4628      	mov	r0, r5
 800a88c:	47b8      	blx	r7
 800a88e:	3001      	adds	r0, #1
 800a890:	f43f af41 	beq.w	800a716 <_printf_float+0xc2>
 800a894:	f04f 0800 	mov.w	r8, #0
 800a898:	f104 091a 	add.w	r9, r4, #26
 800a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	dc09      	bgt.n	800a8b8 <_printf_float+0x264>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	079b      	lsls	r3, r3, #30
 800a8a8:	f100 8105 	bmi.w	800aab6 <_printf_float+0x462>
 800a8ac:	68e0      	ldr	r0, [r4, #12]
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b0:	4298      	cmp	r0, r3
 800a8b2:	bfb8      	it	lt
 800a8b4:	4618      	movlt	r0, r3
 800a8b6:	e730      	b.n	800a71a <_printf_float+0xc6>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	464a      	mov	r2, r9
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	f43f af27 	beq.w	800a716 <_printf_float+0xc2>
 800a8c8:	f108 0801 	add.w	r8, r8, #1
 800a8cc:	e7e6      	b.n	800a89c <_printf_float+0x248>
 800a8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dc39      	bgt.n	800a948 <_printf_float+0x2f4>
 800a8d4:	4a1b      	ldr	r2, [pc, #108]	; (800a944 <_printf_float+0x2f0>)
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f af19 	beq.w	800a716 <_printf_float+0xc2>
 800a8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	d102      	bne.n	800a8f2 <_printf_float+0x29e>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	07d9      	lsls	r1, r3, #31
 800a8f0:	d5d8      	bpl.n	800a8a4 <_printf_float+0x250>
 800a8f2:	ee18 3a10 	vmov	r3, s16
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af09 	beq.w	800a716 <_printf_float+0xc2>
 800a904:	f04f 0900 	mov.w	r9, #0
 800a908:	f104 0a1a 	add.w	sl, r4, #26
 800a90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90e:	425b      	negs	r3, r3
 800a910:	454b      	cmp	r3, r9
 800a912:	dc01      	bgt.n	800a918 <_printf_float+0x2c4>
 800a914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a916:	e792      	b.n	800a83e <_printf_float+0x1ea>
 800a918:	2301      	movs	r3, #1
 800a91a:	4652      	mov	r2, sl
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	f43f aef7 	beq.w	800a716 <_printf_float+0xc2>
 800a928:	f109 0901 	add.w	r9, r9, #1
 800a92c:	e7ee      	b.n	800a90c <_printf_float+0x2b8>
 800a92e:	bf00      	nop
 800a930:	7fefffff 	.word	0x7fefffff
 800a934:	0807a4dc 	.word	0x0807a4dc
 800a938:	0807a4e0 	.word	0x0807a4e0
 800a93c:	0807a4e8 	.word	0x0807a4e8
 800a940:	0807a4e4 	.word	0x0807a4e4
 800a944:	0807a4ec 	.word	0x0807a4ec
 800a948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a94a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a94c:	429a      	cmp	r2, r3
 800a94e:	bfa8      	it	ge
 800a950:	461a      	movge	r2, r3
 800a952:	2a00      	cmp	r2, #0
 800a954:	4691      	mov	r9, r2
 800a956:	dc37      	bgt.n	800a9c8 <_printf_float+0x374>
 800a958:	f04f 0b00 	mov.w	fp, #0
 800a95c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a960:	f104 021a 	add.w	r2, r4, #26
 800a964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a966:	9305      	str	r3, [sp, #20]
 800a968:	eba3 0309 	sub.w	r3, r3, r9
 800a96c:	455b      	cmp	r3, fp
 800a96e:	dc33      	bgt.n	800a9d8 <_printf_float+0x384>
 800a970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a974:	429a      	cmp	r2, r3
 800a976:	db3b      	blt.n	800a9f0 <_printf_float+0x39c>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	07da      	lsls	r2, r3, #31
 800a97c:	d438      	bmi.n	800a9f0 <_printf_float+0x39c>
 800a97e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	eba2 0901 	sub.w	r9, r2, r1
 800a98a:	4599      	cmp	r9, r3
 800a98c:	bfa8      	it	ge
 800a98e:	4699      	movge	r9, r3
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	dc35      	bgt.n	800aa02 <_printf_float+0x3ae>
 800a996:	f04f 0800 	mov.w	r8, #0
 800a99a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a99e:	f104 0a1a 	add.w	sl, r4, #26
 800a9a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	eba3 0309 	sub.w	r3, r3, r9
 800a9ac:	4543      	cmp	r3, r8
 800a9ae:	f77f af79 	ble.w	800a8a4 <_printf_float+0x250>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4652      	mov	r2, sl
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	f43f aeaa 	beq.w	800a716 <_printf_float+0xc2>
 800a9c2:	f108 0801 	add.w	r8, r8, #1
 800a9c6:	e7ec      	b.n	800a9a2 <_printf_float+0x34e>
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d1c0      	bne.n	800a958 <_printf_float+0x304>
 800a9d6:	e69e      	b.n	800a716 <_printf_float+0xc2>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	9205      	str	r2, [sp, #20]
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f ae97 	beq.w	800a716 <_printf_float+0xc2>
 800a9e8:	9a05      	ldr	r2, [sp, #20]
 800a9ea:	f10b 0b01 	add.w	fp, fp, #1
 800a9ee:	e7b9      	b.n	800a964 <_printf_float+0x310>
 800a9f0:	ee18 3a10 	vmov	r3, s16
 800a9f4:	4652      	mov	r2, sl
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b8      	blx	r7
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d1be      	bne.n	800a97e <_printf_float+0x32a>
 800aa00:	e689      	b.n	800a716 <_printf_float+0xc2>
 800aa02:	9a05      	ldr	r2, [sp, #20]
 800aa04:	464b      	mov	r3, r9
 800aa06:	4442      	add	r2, r8
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d1c1      	bne.n	800a996 <_printf_float+0x342>
 800aa12:	e680      	b.n	800a716 <_printf_float+0xc2>
 800aa14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa16:	2a01      	cmp	r2, #1
 800aa18:	dc01      	bgt.n	800aa1e <_printf_float+0x3ca>
 800aa1a:	07db      	lsls	r3, r3, #31
 800aa1c:	d538      	bpl.n	800aa90 <_printf_float+0x43c>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4642      	mov	r2, r8
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f ae74 	beq.w	800a716 <_printf_float+0xc2>
 800aa2e:	ee18 3a10 	vmov	r3, s16
 800aa32:	4652      	mov	r2, sl
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	f43f ae6b 	beq.w	800a716 <_printf_float+0xc2>
 800aa40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	f7f6 f86e 	bl	8000b28 <__aeabi_dcmpeq>
 800aa4c:	b9d8      	cbnz	r0, 800aa86 <_printf_float+0x432>
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	f108 0201 	add.w	r2, r8, #1
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d10e      	bne.n	800aa7e <_printf_float+0x42a>
 800aa60:	e659      	b.n	800a716 <_printf_float+0xc2>
 800aa62:	2301      	movs	r3, #1
 800aa64:	4652      	mov	r2, sl
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f43f ae52 	beq.w	800a716 <_printf_float+0xc2>
 800aa72:	f108 0801 	add.w	r8, r8, #1
 800aa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	4543      	cmp	r3, r8
 800aa7c:	dcf1      	bgt.n	800aa62 <_printf_float+0x40e>
 800aa7e:	464b      	mov	r3, r9
 800aa80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa84:	e6dc      	b.n	800a840 <_printf_float+0x1ec>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f104 0a1a 	add.w	sl, r4, #26
 800aa8e:	e7f2      	b.n	800aa76 <_printf_float+0x422>
 800aa90:	2301      	movs	r3, #1
 800aa92:	4642      	mov	r2, r8
 800aa94:	e7df      	b.n	800aa56 <_printf_float+0x402>
 800aa96:	2301      	movs	r3, #1
 800aa98:	464a      	mov	r2, r9
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f43f ae38 	beq.w	800a716 <_printf_float+0xc2>
 800aaa6:	f108 0801 	add.w	r8, r8, #1
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaae:	1a5b      	subs	r3, r3, r1
 800aab0:	4543      	cmp	r3, r8
 800aab2:	dcf0      	bgt.n	800aa96 <_printf_float+0x442>
 800aab4:	e6fa      	b.n	800a8ac <_printf_float+0x258>
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	f104 0919 	add.w	r9, r4, #25
 800aabe:	e7f4      	b.n	800aaaa <_printf_float+0x456>

0800aac0 <_printf_common>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	4616      	mov	r6, r2
 800aac6:	4699      	mov	r9, r3
 800aac8:	688a      	ldr	r2, [r1, #8]
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bfb8      	it	lt
 800aad4:	4613      	movlt	r3, r2
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aadc:	4607      	mov	r7, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	b10a      	cbz	r2, 800aae6 <_printf_common+0x26>
 800aae2:	3301      	adds	r3, #1
 800aae4:	6033      	str	r3, [r6, #0]
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	0699      	lsls	r1, r3, #26
 800aaea:	bf42      	ittt	mi
 800aaec:	6833      	ldrmi	r3, [r6, #0]
 800aaee:	3302      	addmi	r3, #2
 800aaf0:	6033      	strmi	r3, [r6, #0]
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	f015 0506 	ands.w	r5, r5, #6
 800aaf8:	d106      	bne.n	800ab08 <_printf_common+0x48>
 800aafa:	f104 0a19 	add.w	sl, r4, #25
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	6832      	ldr	r2, [r6, #0]
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dc26      	bgt.n	800ab56 <_printf_common+0x96>
 800ab08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab0c:	1e13      	subs	r3, r2, #0
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	2301      	movne	r3, #1
 800ab14:	0692      	lsls	r2, r2, #26
 800ab16:	d42b      	bmi.n	800ab70 <_printf_common+0xb0>
 800ab18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	3001      	adds	r0, #1
 800ab24:	d01e      	beq.n	800ab64 <_printf_common+0xa4>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	68e5      	ldr	r5, [r4, #12]
 800ab2a:	6832      	ldr	r2, [r6, #0]
 800ab2c:	f003 0306 	and.w	r3, r3, #6
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	bf08      	it	eq
 800ab34:	1aad      	subeq	r5, r5, r2
 800ab36:	68a3      	ldr	r3, [r4, #8]
 800ab38:	6922      	ldr	r2, [r4, #16]
 800ab3a:	bf0c      	ite	eq
 800ab3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab40:	2500      	movne	r5, #0
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bfc4      	itt	gt
 800ab46:	1a9b      	subgt	r3, r3, r2
 800ab48:	18ed      	addgt	r5, r5, r3
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	341a      	adds	r4, #26
 800ab4e:	42b5      	cmp	r5, r6
 800ab50:	d11a      	bne.n	800ab88 <_printf_common+0xc8>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e008      	b.n	800ab68 <_printf_common+0xa8>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4652      	mov	r2, sl
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	47c0      	blx	r8
 800ab60:	3001      	adds	r0, #1
 800ab62:	d103      	bne.n	800ab6c <_printf_common+0xac>
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295
 800ab68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	e7c6      	b.n	800aafe <_printf_common+0x3e>
 800ab70:	18e1      	adds	r1, r4, r3
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	2030      	movs	r0, #48	; 0x30
 800ab76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab7a:	4422      	add	r2, r4
 800ab7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab84:	3302      	adds	r3, #2
 800ab86:	e7c7      	b.n	800ab18 <_printf_common+0x58>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4638      	mov	r0, r7
 800ab90:	47c0      	blx	r8
 800ab92:	3001      	adds	r0, #1
 800ab94:	d0e6      	beq.n	800ab64 <_printf_common+0xa4>
 800ab96:	3601      	adds	r6, #1
 800ab98:	e7d9      	b.n	800ab4e <_printf_common+0x8e>
	...

0800ab9c <_printf_i>:
 800ab9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	4691      	mov	r9, r2
 800aba4:	7e27      	ldrb	r7, [r4, #24]
 800aba6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aba8:	2f78      	cmp	r7, #120	; 0x78
 800abaa:	4680      	mov	r8, r0
 800abac:	469a      	mov	sl, r3
 800abae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb2:	d807      	bhi.n	800abc4 <_printf_i+0x28>
 800abb4:	2f62      	cmp	r7, #98	; 0x62
 800abb6:	d80a      	bhi.n	800abce <_printf_i+0x32>
 800abb8:	2f00      	cmp	r7, #0
 800abba:	f000 80d8 	beq.w	800ad6e <_printf_i+0x1d2>
 800abbe:	2f58      	cmp	r7, #88	; 0x58
 800abc0:	f000 80a3 	beq.w	800ad0a <_printf_i+0x16e>
 800abc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abcc:	e03a      	b.n	800ac44 <_printf_i+0xa8>
 800abce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abd2:	2b15      	cmp	r3, #21
 800abd4:	d8f6      	bhi.n	800abc4 <_printf_i+0x28>
 800abd6:	a001      	add	r0, pc, #4	; (adr r0, 800abdc <_printf_i+0x40>)
 800abd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abdc:	0800ac35 	.word	0x0800ac35
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800abc5 	.word	0x0800abc5
 800abe8:	0800abc5 	.word	0x0800abc5
 800abec:	0800abc5 	.word	0x0800abc5
 800abf0:	0800abc5 	.word	0x0800abc5
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800abc5 	.word	0x0800abc5
 800abfc:	0800abc5 	.word	0x0800abc5
 800ac00:	0800abc5 	.word	0x0800abc5
 800ac04:	0800abc5 	.word	0x0800abc5
 800ac08:	0800ad55 	.word	0x0800ad55
 800ac0c:	0800ac79 	.word	0x0800ac79
 800ac10:	0800ad37 	.word	0x0800ad37
 800ac14:	0800abc5 	.word	0x0800abc5
 800ac18:	0800abc5 	.word	0x0800abc5
 800ac1c:	0800ad77 	.word	0x0800ad77
 800ac20:	0800abc5 	.word	0x0800abc5
 800ac24:	0800ac79 	.word	0x0800ac79
 800ac28:	0800abc5 	.word	0x0800abc5
 800ac2c:	0800abc5 	.word	0x0800abc5
 800ac30:	0800ad3f 	.word	0x0800ad3f
 800ac34:	680b      	ldr	r3, [r1, #0]
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	600a      	str	r2, [r1, #0]
 800ac3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac44:	2301      	movs	r3, #1
 800ac46:	e0a3      	b.n	800ad90 <_printf_i+0x1f4>
 800ac48:	6825      	ldr	r5, [r4, #0]
 800ac4a:	6808      	ldr	r0, [r1, #0]
 800ac4c:	062e      	lsls	r6, r5, #24
 800ac4e:	f100 0304 	add.w	r3, r0, #4
 800ac52:	d50a      	bpl.n	800ac6a <_printf_i+0xce>
 800ac54:	6805      	ldr	r5, [r0, #0]
 800ac56:	600b      	str	r3, [r1, #0]
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	da03      	bge.n	800ac64 <_printf_i+0xc8>
 800ac5c:	232d      	movs	r3, #45	; 0x2d
 800ac5e:	426d      	negs	r5, r5
 800ac60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac64:	485e      	ldr	r0, [pc, #376]	; (800ade0 <_printf_i+0x244>)
 800ac66:	230a      	movs	r3, #10
 800ac68:	e019      	b.n	800ac9e <_printf_i+0x102>
 800ac6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac6e:	6805      	ldr	r5, [r0, #0]
 800ac70:	600b      	str	r3, [r1, #0]
 800ac72:	bf18      	it	ne
 800ac74:	b22d      	sxthne	r5, r5
 800ac76:	e7ef      	b.n	800ac58 <_printf_i+0xbc>
 800ac78:	680b      	ldr	r3, [r1, #0]
 800ac7a:	6825      	ldr	r5, [r4, #0]
 800ac7c:	1d18      	adds	r0, r3, #4
 800ac7e:	6008      	str	r0, [r1, #0]
 800ac80:	0628      	lsls	r0, r5, #24
 800ac82:	d501      	bpl.n	800ac88 <_printf_i+0xec>
 800ac84:	681d      	ldr	r5, [r3, #0]
 800ac86:	e002      	b.n	800ac8e <_printf_i+0xf2>
 800ac88:	0669      	lsls	r1, r5, #25
 800ac8a:	d5fb      	bpl.n	800ac84 <_printf_i+0xe8>
 800ac8c:	881d      	ldrh	r5, [r3, #0]
 800ac8e:	4854      	ldr	r0, [pc, #336]	; (800ade0 <_printf_i+0x244>)
 800ac90:	2f6f      	cmp	r7, #111	; 0x6f
 800ac92:	bf0c      	ite	eq
 800ac94:	2308      	moveq	r3, #8
 800ac96:	230a      	movne	r3, #10
 800ac98:	2100      	movs	r1, #0
 800ac9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac9e:	6866      	ldr	r6, [r4, #4]
 800aca0:	60a6      	str	r6, [r4, #8]
 800aca2:	2e00      	cmp	r6, #0
 800aca4:	bfa2      	ittt	ge
 800aca6:	6821      	ldrge	r1, [r4, #0]
 800aca8:	f021 0104 	bicge.w	r1, r1, #4
 800acac:	6021      	strge	r1, [r4, #0]
 800acae:	b90d      	cbnz	r5, 800acb4 <_printf_i+0x118>
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	d04d      	beq.n	800ad50 <_printf_i+0x1b4>
 800acb4:	4616      	mov	r6, r2
 800acb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800acba:	fb03 5711 	mls	r7, r3, r1, r5
 800acbe:	5dc7      	ldrb	r7, [r0, r7]
 800acc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acc4:	462f      	mov	r7, r5
 800acc6:	42bb      	cmp	r3, r7
 800acc8:	460d      	mov	r5, r1
 800acca:	d9f4      	bls.n	800acb6 <_printf_i+0x11a>
 800accc:	2b08      	cmp	r3, #8
 800acce:	d10b      	bne.n	800ace8 <_printf_i+0x14c>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	07df      	lsls	r7, r3, #31
 800acd4:	d508      	bpl.n	800ace8 <_printf_i+0x14c>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	6861      	ldr	r1, [r4, #4]
 800acda:	4299      	cmp	r1, r3
 800acdc:	bfde      	ittt	le
 800acde:	2330      	movle	r3, #48	; 0x30
 800ace0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ace4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ace8:	1b92      	subs	r2, r2, r6
 800acea:	6122      	str	r2, [r4, #16]
 800acec:	f8cd a000 	str.w	sl, [sp]
 800acf0:	464b      	mov	r3, r9
 800acf2:	aa03      	add	r2, sp, #12
 800acf4:	4621      	mov	r1, r4
 800acf6:	4640      	mov	r0, r8
 800acf8:	f7ff fee2 	bl	800aac0 <_printf_common>
 800acfc:	3001      	adds	r0, #1
 800acfe:	d14c      	bne.n	800ad9a <_printf_i+0x1fe>
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	b004      	add	sp, #16
 800ad06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0a:	4835      	ldr	r0, [pc, #212]	; (800ade0 <_printf_i+0x244>)
 800ad0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	680e      	ldr	r6, [r1, #0]
 800ad14:	061f      	lsls	r7, r3, #24
 800ad16:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad1a:	600e      	str	r6, [r1, #0]
 800ad1c:	d514      	bpl.n	800ad48 <_printf_i+0x1ac>
 800ad1e:	07d9      	lsls	r1, r3, #31
 800ad20:	bf44      	itt	mi
 800ad22:	f043 0320 	orrmi.w	r3, r3, #32
 800ad26:	6023      	strmi	r3, [r4, #0]
 800ad28:	b91d      	cbnz	r5, 800ad32 <_printf_i+0x196>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f023 0320 	bic.w	r3, r3, #32
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	2310      	movs	r3, #16
 800ad34:	e7b0      	b.n	800ac98 <_printf_i+0xfc>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f043 0320 	orr.w	r3, r3, #32
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	2378      	movs	r3, #120	; 0x78
 800ad40:	4828      	ldr	r0, [pc, #160]	; (800ade4 <_printf_i+0x248>)
 800ad42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad46:	e7e3      	b.n	800ad10 <_printf_i+0x174>
 800ad48:	065e      	lsls	r6, r3, #25
 800ad4a:	bf48      	it	mi
 800ad4c:	b2ad      	uxthmi	r5, r5
 800ad4e:	e7e6      	b.n	800ad1e <_printf_i+0x182>
 800ad50:	4616      	mov	r6, r2
 800ad52:	e7bb      	b.n	800accc <_printf_i+0x130>
 800ad54:	680b      	ldr	r3, [r1, #0]
 800ad56:	6826      	ldr	r6, [r4, #0]
 800ad58:	6960      	ldr	r0, [r4, #20]
 800ad5a:	1d1d      	adds	r5, r3, #4
 800ad5c:	600d      	str	r5, [r1, #0]
 800ad5e:	0635      	lsls	r5, r6, #24
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	d501      	bpl.n	800ad68 <_printf_i+0x1cc>
 800ad64:	6018      	str	r0, [r3, #0]
 800ad66:	e002      	b.n	800ad6e <_printf_i+0x1d2>
 800ad68:	0671      	lsls	r1, r6, #25
 800ad6a:	d5fb      	bpl.n	800ad64 <_printf_i+0x1c8>
 800ad6c:	8018      	strh	r0, [r3, #0]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6123      	str	r3, [r4, #16]
 800ad72:	4616      	mov	r6, r2
 800ad74:	e7ba      	b.n	800acec <_printf_i+0x150>
 800ad76:	680b      	ldr	r3, [r1, #0]
 800ad78:	1d1a      	adds	r2, r3, #4
 800ad7a:	600a      	str	r2, [r1, #0]
 800ad7c:	681e      	ldr	r6, [r3, #0]
 800ad7e:	6862      	ldr	r2, [r4, #4]
 800ad80:	2100      	movs	r1, #0
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7f5 fa5c 	bl	8000240 <memchr>
 800ad88:	b108      	cbz	r0, 800ad8e <_printf_i+0x1f2>
 800ad8a:	1b80      	subs	r0, r0, r6
 800ad8c:	6060      	str	r0, [r4, #4]
 800ad8e:	6863      	ldr	r3, [r4, #4]
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	2300      	movs	r3, #0
 800ad94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad98:	e7a8      	b.n	800acec <_printf_i+0x150>
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	47d0      	blx	sl
 800ada4:	3001      	adds	r0, #1
 800ada6:	d0ab      	beq.n	800ad00 <_printf_i+0x164>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	079b      	lsls	r3, r3, #30
 800adac:	d413      	bmi.n	800add6 <_printf_i+0x23a>
 800adae:	68e0      	ldr	r0, [r4, #12]
 800adb0:	9b03      	ldr	r3, [sp, #12]
 800adb2:	4298      	cmp	r0, r3
 800adb4:	bfb8      	it	lt
 800adb6:	4618      	movlt	r0, r3
 800adb8:	e7a4      	b.n	800ad04 <_printf_i+0x168>
 800adba:	2301      	movs	r3, #1
 800adbc:	4632      	mov	r2, r6
 800adbe:	4649      	mov	r1, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	47d0      	blx	sl
 800adc4:	3001      	adds	r0, #1
 800adc6:	d09b      	beq.n	800ad00 <_printf_i+0x164>
 800adc8:	3501      	adds	r5, #1
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	9903      	ldr	r1, [sp, #12]
 800adce:	1a5b      	subs	r3, r3, r1
 800add0:	42ab      	cmp	r3, r5
 800add2:	dcf2      	bgt.n	800adba <_printf_i+0x21e>
 800add4:	e7eb      	b.n	800adae <_printf_i+0x212>
 800add6:	2500      	movs	r5, #0
 800add8:	f104 0619 	add.w	r6, r4, #25
 800addc:	e7f5      	b.n	800adca <_printf_i+0x22e>
 800adde:	bf00      	nop
 800ade0:	0807a4ee 	.word	0x0807a4ee
 800ade4:	0807a4ff 	.word	0x0807a4ff

0800ade8 <iprintf>:
 800ade8:	b40f      	push	{r0, r1, r2, r3}
 800adea:	4b0a      	ldr	r3, [pc, #40]	; (800ae14 <iprintf+0x2c>)
 800adec:	b513      	push	{r0, r1, r4, lr}
 800adee:	681c      	ldr	r4, [r3, #0]
 800adf0:	b124      	cbz	r4, 800adfc <iprintf+0x14>
 800adf2:	69a3      	ldr	r3, [r4, #24]
 800adf4:	b913      	cbnz	r3, 800adfc <iprintf+0x14>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fede 	bl	800bbb8 <__sinit>
 800adfc:	ab05      	add	r3, sp, #20
 800adfe:	9a04      	ldr	r2, [sp, #16]
 800ae00:	68a1      	ldr	r1, [r4, #8]
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	4620      	mov	r0, r4
 800ae06:	f001 fbf5 	bl	800c5f4 <_vfiprintf_r>
 800ae0a:	b002      	add	sp, #8
 800ae0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae10:	b004      	add	sp, #16
 800ae12:	4770      	bx	lr
 800ae14:	20000010 	.word	0x20000010

0800ae18 <quorem>:
 800ae18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	6903      	ldr	r3, [r0, #16]
 800ae1e:	690c      	ldr	r4, [r1, #16]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	4607      	mov	r7, r0
 800ae24:	f2c0 8081 	blt.w	800af2a <quorem+0x112>
 800ae28:	3c01      	subs	r4, #1
 800ae2a:	f101 0814 	add.w	r8, r1, #20
 800ae2e:	f100 0514 	add.w	r5, r0, #20
 800ae32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae40:	3301      	adds	r3, #1
 800ae42:	429a      	cmp	r2, r3
 800ae44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae50:	d331      	bcc.n	800aeb6 <quorem+0x9e>
 800ae52:	f04f 0e00 	mov.w	lr, #0
 800ae56:	4640      	mov	r0, r8
 800ae58:	46ac      	mov	ip, r5
 800ae5a:	46f2      	mov	sl, lr
 800ae5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae60:	b293      	uxth	r3, r2
 800ae62:	fb06 e303 	mla	r3, r6, r3, lr
 800ae66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	ebaa 0303 	sub.w	r3, sl, r3
 800ae70:	0c12      	lsrs	r2, r2, #16
 800ae72:	f8dc a000 	ldr.w	sl, [ip]
 800ae76:	fb06 e202 	mla	r2, r6, r2, lr
 800ae7a:	fa13 f38a 	uxtah	r3, r3, sl
 800ae7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae82:	fa1f fa82 	uxth.w	sl, r2
 800ae86:	f8dc 2000 	ldr.w	r2, [ip]
 800ae8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae98:	4581      	cmp	r9, r0
 800ae9a:	f84c 3b04 	str.w	r3, [ip], #4
 800ae9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aea2:	d2db      	bcs.n	800ae5c <quorem+0x44>
 800aea4:	f855 300b 	ldr.w	r3, [r5, fp]
 800aea8:	b92b      	cbnz	r3, 800aeb6 <quorem+0x9e>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	3b04      	subs	r3, #4
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	d32e      	bcc.n	800af12 <quorem+0xfa>
 800aeb4:	613c      	str	r4, [r7, #16]
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f001 f9b8 	bl	800c22c <__mcmp>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	db24      	blt.n	800af0a <quorem+0xf2>
 800aec0:	3601      	adds	r6, #1
 800aec2:	4628      	mov	r0, r5
 800aec4:	f04f 0c00 	mov.w	ip, #0
 800aec8:	f858 2b04 	ldr.w	r2, [r8], #4
 800aecc:	f8d0 e000 	ldr.w	lr, [r0]
 800aed0:	b293      	uxth	r3, r2
 800aed2:	ebac 0303 	sub.w	r3, ip, r3
 800aed6:	0c12      	lsrs	r2, r2, #16
 800aed8:	fa13 f38e 	uxtah	r3, r3, lr
 800aedc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeea:	45c1      	cmp	r9, r8
 800aeec:	f840 3b04 	str.w	r3, [r0], #4
 800aef0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aef4:	d2e8      	bcs.n	800aec8 <quorem+0xb0>
 800aef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aefa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aefe:	b922      	cbnz	r2, 800af0a <quorem+0xf2>
 800af00:	3b04      	subs	r3, #4
 800af02:	429d      	cmp	r5, r3
 800af04:	461a      	mov	r2, r3
 800af06:	d30a      	bcc.n	800af1e <quorem+0x106>
 800af08:	613c      	str	r4, [r7, #16]
 800af0a:	4630      	mov	r0, r6
 800af0c:	b003      	add	sp, #12
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	3b04      	subs	r3, #4
 800af16:	2a00      	cmp	r2, #0
 800af18:	d1cc      	bne.n	800aeb4 <quorem+0x9c>
 800af1a:	3c01      	subs	r4, #1
 800af1c:	e7c7      	b.n	800aeae <quorem+0x96>
 800af1e:	6812      	ldr	r2, [r2, #0]
 800af20:	3b04      	subs	r3, #4
 800af22:	2a00      	cmp	r2, #0
 800af24:	d1f0      	bne.n	800af08 <quorem+0xf0>
 800af26:	3c01      	subs	r4, #1
 800af28:	e7eb      	b.n	800af02 <quorem+0xea>
 800af2a:	2000      	movs	r0, #0
 800af2c:	e7ee      	b.n	800af0c <quorem+0xf4>
	...

0800af30 <_dtoa_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	ed2d 8b02 	vpush	{d8}
 800af38:	ec57 6b10 	vmov	r6, r7, d0
 800af3c:	b095      	sub	sp, #84	; 0x54
 800af3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af44:	9105      	str	r1, [sp, #20]
 800af46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af4a:	4604      	mov	r4, r0
 800af4c:	9209      	str	r2, [sp, #36]	; 0x24
 800af4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af50:	b975      	cbnz	r5, 800af70 <_dtoa_r+0x40>
 800af52:	2010      	movs	r0, #16
 800af54:	f000 fed6 	bl	800bd04 <malloc>
 800af58:	4602      	mov	r2, r0
 800af5a:	6260      	str	r0, [r4, #36]	; 0x24
 800af5c:	b920      	cbnz	r0, 800af68 <_dtoa_r+0x38>
 800af5e:	4bb2      	ldr	r3, [pc, #712]	; (800b228 <_dtoa_r+0x2f8>)
 800af60:	21ea      	movs	r1, #234	; 0xea
 800af62:	48b2      	ldr	r0, [pc, #712]	; (800b22c <_dtoa_r+0x2fc>)
 800af64:	f001 fd9c 	bl	800caa0 <__assert_func>
 800af68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af6c:	6005      	str	r5, [r0, #0]
 800af6e:	60c5      	str	r5, [r0, #12]
 800af70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	b151      	cbz	r1, 800af8c <_dtoa_r+0x5c>
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	604a      	str	r2, [r1, #4]
 800af7a:	2301      	movs	r3, #1
 800af7c:	4093      	lsls	r3, r2
 800af7e:	608b      	str	r3, [r1, #8]
 800af80:	4620      	mov	r0, r4
 800af82:	f000 ff15 	bl	800bdb0 <_Bfree>
 800af86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	1e3b      	subs	r3, r7, #0
 800af8e:	bfb9      	ittee	lt
 800af90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af94:	9303      	strlt	r3, [sp, #12]
 800af96:	2300      	movge	r3, #0
 800af98:	f8c8 3000 	strge.w	r3, [r8]
 800af9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800afa0:	4ba3      	ldr	r3, [pc, #652]	; (800b230 <_dtoa_r+0x300>)
 800afa2:	bfbc      	itt	lt
 800afa4:	2201      	movlt	r2, #1
 800afa6:	f8c8 2000 	strlt.w	r2, [r8]
 800afaa:	ea33 0309 	bics.w	r3, r3, r9
 800afae:	d11b      	bne.n	800afe8 <_dtoa_r+0xb8>
 800afb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afb2:	f242 730f 	movw	r3, #9999	; 0x270f
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afbc:	4333      	orrs	r3, r6
 800afbe:	f000 857a 	beq.w	800bab6 <_dtoa_r+0xb86>
 800afc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afc4:	b963      	cbnz	r3, 800afe0 <_dtoa_r+0xb0>
 800afc6:	4b9b      	ldr	r3, [pc, #620]	; (800b234 <_dtoa_r+0x304>)
 800afc8:	e024      	b.n	800b014 <_dtoa_r+0xe4>
 800afca:	4b9b      	ldr	r3, [pc, #620]	; (800b238 <_dtoa_r+0x308>)
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	9800      	ldr	r0, [sp, #0]
 800afd6:	b015      	add	sp, #84	; 0x54
 800afd8:	ecbd 8b02 	vpop	{d8}
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	4b94      	ldr	r3, [pc, #592]	; (800b234 <_dtoa_r+0x304>)
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	3303      	adds	r3, #3
 800afe6:	e7f3      	b.n	800afd0 <_dtoa_r+0xa0>
 800afe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afec:	2200      	movs	r2, #0
 800afee:	ec51 0b17 	vmov	r0, r1, d7
 800aff2:	2300      	movs	r3, #0
 800aff4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aff8:	f7f5 fd96 	bl	8000b28 <__aeabi_dcmpeq>
 800affc:	4680      	mov	r8, r0
 800affe:	b158      	cbz	r0, 800b018 <_dtoa_r+0xe8>
 800b000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b002:	2301      	movs	r3, #1
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 8551 	beq.w	800bab0 <_dtoa_r+0xb80>
 800b00e:	488b      	ldr	r0, [pc, #556]	; (800b23c <_dtoa_r+0x30c>)
 800b010:	6018      	str	r0, [r3, #0]
 800b012:	1e43      	subs	r3, r0, #1
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	e7dd      	b.n	800afd4 <_dtoa_r+0xa4>
 800b018:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b01c:	aa12      	add	r2, sp, #72	; 0x48
 800b01e:	a913      	add	r1, sp, #76	; 0x4c
 800b020:	4620      	mov	r0, r4
 800b022:	f001 f9a7 	bl	800c374 <__d2b>
 800b026:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b02a:	4683      	mov	fp, r0
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	d07c      	beq.n	800b12a <_dtoa_r+0x1fa>
 800b030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b032:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b03a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b03e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b04a:	4b7d      	ldr	r3, [pc, #500]	; (800b240 <_dtoa_r+0x310>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4630      	mov	r0, r6
 800b050:	4639      	mov	r1, r7
 800b052:	f7f5 f949 	bl	80002e8 <__aeabi_dsub>
 800b056:	a36e      	add	r3, pc, #440	; (adr r3, 800b210 <_dtoa_r+0x2e0>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f7f5 fafc 	bl	8000658 <__aeabi_dmul>
 800b060:	a36d      	add	r3, pc, #436	; (adr r3, 800b218 <_dtoa_r+0x2e8>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f941 	bl	80002ec <__adddf3>
 800b06a:	4606      	mov	r6, r0
 800b06c:	4628      	mov	r0, r5
 800b06e:	460f      	mov	r7, r1
 800b070:	f7f5 fa88 	bl	8000584 <__aeabi_i2d>
 800b074:	a36a      	add	r3, pc, #424	; (adr r3, 800b220 <_dtoa_r+0x2f0>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 faed 	bl	8000658 <__aeabi_dmul>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 f931 	bl	80002ec <__adddf3>
 800b08a:	4606      	mov	r6, r0
 800b08c:	460f      	mov	r7, r1
 800b08e:	f7f5 fd93 	bl	8000bb8 <__aeabi_d2iz>
 800b092:	2200      	movs	r2, #0
 800b094:	4682      	mov	sl, r0
 800b096:	2300      	movs	r3, #0
 800b098:	4630      	mov	r0, r6
 800b09a:	4639      	mov	r1, r7
 800b09c:	f7f5 fd4e 	bl	8000b3c <__aeabi_dcmplt>
 800b0a0:	b148      	cbz	r0, 800b0b6 <_dtoa_r+0x186>
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	f7f5 fa6e 	bl	8000584 <__aeabi_i2d>
 800b0a8:	4632      	mov	r2, r6
 800b0aa:	463b      	mov	r3, r7
 800b0ac:	f7f5 fd3c 	bl	8000b28 <__aeabi_dcmpeq>
 800b0b0:	b908      	cbnz	r0, 800b0b6 <_dtoa_r+0x186>
 800b0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0b6:	f1ba 0f16 	cmp.w	sl, #22
 800b0ba:	d854      	bhi.n	800b166 <_dtoa_r+0x236>
 800b0bc:	4b61      	ldr	r3, [pc, #388]	; (800b244 <_dtoa_r+0x314>)
 800b0be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0ca:	f7f5 fd37 	bl	8000b3c <__aeabi_dcmplt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d04b      	beq.n	800b16a <_dtoa_r+0x23a>
 800b0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	930e      	str	r3, [sp, #56]	; 0x38
 800b0da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0dc:	1b5d      	subs	r5, r3, r5
 800b0de:	1e6b      	subs	r3, r5, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	bf43      	ittte	mi
 800b0e4:	2300      	movmi	r3, #0
 800b0e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800b0ea:	9304      	strmi	r3, [sp, #16]
 800b0ec:	f04f 0800 	movpl.w	r8, #0
 800b0f0:	f1ba 0f00 	cmp.w	sl, #0
 800b0f4:	db3b      	blt.n	800b16e <_dtoa_r+0x23e>
 800b0f6:	9b04      	ldr	r3, [sp, #16]
 800b0f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b0fc:	4453      	add	r3, sl
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	2300      	movs	r3, #0
 800b102:	9306      	str	r3, [sp, #24]
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	2b09      	cmp	r3, #9
 800b108:	d869      	bhi.n	800b1de <_dtoa_r+0x2ae>
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	bfc4      	itt	gt
 800b10e:	3b04      	subgt	r3, #4
 800b110:	9305      	strgt	r3, [sp, #20]
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	f1a3 0302 	sub.w	r3, r3, #2
 800b118:	bfcc      	ite	gt
 800b11a:	2500      	movgt	r5, #0
 800b11c:	2501      	movle	r5, #1
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d869      	bhi.n	800b1f6 <_dtoa_r+0x2c6>
 800b122:	e8df f003 	tbb	[pc, r3]
 800b126:	4e2c      	.short	0x4e2c
 800b128:	5a4c      	.short	0x5a4c
 800b12a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b12e:	441d      	add	r5, r3
 800b130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b134:	2b20      	cmp	r3, #32
 800b136:	bfc1      	itttt	gt
 800b138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b13c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b140:	fa09 f303 	lslgt.w	r3, r9, r3
 800b144:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b148:	bfda      	itte	le
 800b14a:	f1c3 0320 	rsble	r3, r3, #32
 800b14e:	fa06 f003 	lslle.w	r0, r6, r3
 800b152:	4318      	orrgt	r0, r3
 800b154:	f7f5 fa06 	bl	8000564 <__aeabi_ui2d>
 800b158:	2301      	movs	r3, #1
 800b15a:	4606      	mov	r6, r0
 800b15c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b160:	3d01      	subs	r5, #1
 800b162:	9310      	str	r3, [sp, #64]	; 0x40
 800b164:	e771      	b.n	800b04a <_dtoa_r+0x11a>
 800b166:	2301      	movs	r3, #1
 800b168:	e7b6      	b.n	800b0d8 <_dtoa_r+0x1a8>
 800b16a:	900e      	str	r0, [sp, #56]	; 0x38
 800b16c:	e7b5      	b.n	800b0da <_dtoa_r+0x1aa>
 800b16e:	f1ca 0300 	rsb	r3, sl, #0
 800b172:	9306      	str	r3, [sp, #24]
 800b174:	2300      	movs	r3, #0
 800b176:	eba8 080a 	sub.w	r8, r8, sl
 800b17a:	930d      	str	r3, [sp, #52]	; 0x34
 800b17c:	e7c2      	b.n	800b104 <_dtoa_r+0x1d4>
 800b17e:	2300      	movs	r3, #0
 800b180:	9308      	str	r3, [sp, #32]
 800b182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc39      	bgt.n	800b1fc <_dtoa_r+0x2cc>
 800b188:	f04f 0901 	mov.w	r9, #1
 800b18c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b190:	464b      	mov	r3, r9
 800b192:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b198:	2200      	movs	r2, #0
 800b19a:	6042      	str	r2, [r0, #4]
 800b19c:	2204      	movs	r2, #4
 800b19e:	f102 0614 	add.w	r6, r2, #20
 800b1a2:	429e      	cmp	r6, r3
 800b1a4:	6841      	ldr	r1, [r0, #4]
 800b1a6:	d92f      	bls.n	800b208 <_dtoa_r+0x2d8>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fdc1 	bl	800bd30 <_Balloc>
 800b1ae:	9000      	str	r0, [sp, #0]
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d14b      	bne.n	800b24c <_dtoa_r+0x31c>
 800b1b4:	4b24      	ldr	r3, [pc, #144]	; (800b248 <_dtoa_r+0x318>)
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1bc:	e6d1      	b.n	800af62 <_dtoa_r+0x32>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e7de      	b.n	800b180 <_dtoa_r+0x250>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9308      	str	r3, [sp, #32]
 800b1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c8:	eb0a 0903 	add.w	r9, sl, r3
 800b1cc:	f109 0301 	add.w	r3, r9, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	bfb8      	it	lt
 800b1d6:	2301      	movlt	r3, #1
 800b1d8:	e7dd      	b.n	800b196 <_dtoa_r+0x266>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e7f2      	b.n	800b1c4 <_dtoa_r+0x294>
 800b1de:	2501      	movs	r5, #1
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	9508      	str	r5, [sp, #32]
 800b1e6:	f04f 39ff 	mov.w	r9, #4294967295
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1f0:	2312      	movs	r3, #18
 800b1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f4:	e7cf      	b.n	800b196 <_dtoa_r+0x266>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	9308      	str	r3, [sp, #32]
 800b1fa:	e7f4      	b.n	800b1e6 <_dtoa_r+0x2b6>
 800b1fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b200:	f8cd 9004 	str.w	r9, [sp, #4]
 800b204:	464b      	mov	r3, r9
 800b206:	e7c6      	b.n	800b196 <_dtoa_r+0x266>
 800b208:	3101      	adds	r1, #1
 800b20a:	6041      	str	r1, [r0, #4]
 800b20c:	0052      	lsls	r2, r2, #1
 800b20e:	e7c6      	b.n	800b19e <_dtoa_r+0x26e>
 800b210:	636f4361 	.word	0x636f4361
 800b214:	3fd287a7 	.word	0x3fd287a7
 800b218:	8b60c8b3 	.word	0x8b60c8b3
 800b21c:	3fc68a28 	.word	0x3fc68a28
 800b220:	509f79fb 	.word	0x509f79fb
 800b224:	3fd34413 	.word	0x3fd34413
 800b228:	0807a51d 	.word	0x0807a51d
 800b22c:	0807a534 	.word	0x0807a534
 800b230:	7ff00000 	.word	0x7ff00000
 800b234:	0807a519 	.word	0x0807a519
 800b238:	0807a510 	.word	0x0807a510
 800b23c:	0807a4ed 	.word	0x0807a4ed
 800b240:	3ff80000 	.word	0x3ff80000
 800b244:	0807a690 	.word	0x0807a690
 800b248:	0807a593 	.word	0x0807a593
 800b24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24e:	9a00      	ldr	r2, [sp, #0]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	9b01      	ldr	r3, [sp, #4]
 800b254:	2b0e      	cmp	r3, #14
 800b256:	f200 80ad 	bhi.w	800b3b4 <_dtoa_r+0x484>
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	f000 80aa 	beq.w	800b3b4 <_dtoa_r+0x484>
 800b260:	f1ba 0f00 	cmp.w	sl, #0
 800b264:	dd36      	ble.n	800b2d4 <_dtoa_r+0x3a4>
 800b266:	4ac3      	ldr	r2, [pc, #780]	; (800b574 <_dtoa_r+0x644>)
 800b268:	f00a 030f 	and.w	r3, sl, #15
 800b26c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b270:	ed93 7b00 	vldr	d7, [r3]
 800b274:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b278:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b27c:	eeb0 8a47 	vmov.f32	s16, s14
 800b280:	eef0 8a67 	vmov.f32	s17, s15
 800b284:	d016      	beq.n	800b2b4 <_dtoa_r+0x384>
 800b286:	4bbc      	ldr	r3, [pc, #752]	; (800b578 <_dtoa_r+0x648>)
 800b288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b28c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b290:	f7f5 fb0c 	bl	80008ac <__aeabi_ddiv>
 800b294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b298:	f007 070f 	and.w	r7, r7, #15
 800b29c:	2503      	movs	r5, #3
 800b29e:	4eb6      	ldr	r6, [pc, #728]	; (800b578 <_dtoa_r+0x648>)
 800b2a0:	b957      	cbnz	r7, 800b2b8 <_dtoa_r+0x388>
 800b2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a6:	ec53 2b18 	vmov	r2, r3, d8
 800b2aa:	f7f5 faff 	bl	80008ac <__aeabi_ddiv>
 800b2ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b2:	e029      	b.n	800b308 <_dtoa_r+0x3d8>
 800b2b4:	2502      	movs	r5, #2
 800b2b6:	e7f2      	b.n	800b29e <_dtoa_r+0x36e>
 800b2b8:	07f9      	lsls	r1, r7, #31
 800b2ba:	d508      	bpl.n	800b2ce <_dtoa_r+0x39e>
 800b2bc:	ec51 0b18 	vmov	r0, r1, d8
 800b2c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2c4:	f7f5 f9c8 	bl	8000658 <__aeabi_dmul>
 800b2c8:	ec41 0b18 	vmov	d8, r0, r1
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	107f      	asrs	r7, r7, #1
 800b2d0:	3608      	adds	r6, #8
 800b2d2:	e7e5      	b.n	800b2a0 <_dtoa_r+0x370>
 800b2d4:	f000 80a6 	beq.w	800b424 <_dtoa_r+0x4f4>
 800b2d8:	f1ca 0600 	rsb	r6, sl, #0
 800b2dc:	4ba5      	ldr	r3, [pc, #660]	; (800b574 <_dtoa_r+0x644>)
 800b2de:	4fa6      	ldr	r7, [pc, #664]	; (800b578 <_dtoa_r+0x648>)
 800b2e0:	f006 020f 	and.w	r2, r6, #15
 800b2e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2f0:	f7f5 f9b2 	bl	8000658 <__aeabi_dmul>
 800b2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f8:	1136      	asrs	r6, r6, #4
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2502      	movs	r5, #2
 800b2fe:	2e00      	cmp	r6, #0
 800b300:	f040 8085 	bne.w	800b40e <_dtoa_r+0x4de>
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1d2      	bne.n	800b2ae <_dtoa_r+0x37e>
 800b308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 808c 	beq.w	800b428 <_dtoa_r+0x4f8>
 800b310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b314:	4b99      	ldr	r3, [pc, #612]	; (800b57c <_dtoa_r+0x64c>)
 800b316:	2200      	movs	r2, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f5 fc0e 	bl	8000b3c <__aeabi_dcmplt>
 800b320:	2800      	cmp	r0, #0
 800b322:	f000 8081 	beq.w	800b428 <_dtoa_r+0x4f8>
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d07d      	beq.n	800b428 <_dtoa_r+0x4f8>
 800b32c:	f1b9 0f00 	cmp.w	r9, #0
 800b330:	dd3c      	ble.n	800b3ac <_dtoa_r+0x47c>
 800b332:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	2200      	movs	r2, #0
 800b33a:	4b91      	ldr	r3, [pc, #580]	; (800b580 <_dtoa_r+0x650>)
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f5 f98a 	bl	8000658 <__aeabi_dmul>
 800b344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b348:	3501      	adds	r5, #1
 800b34a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b34e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b352:	4628      	mov	r0, r5
 800b354:	f7f5 f916 	bl	8000584 <__aeabi_i2d>
 800b358:	4632      	mov	r2, r6
 800b35a:	463b      	mov	r3, r7
 800b35c:	f7f5 f97c 	bl	8000658 <__aeabi_dmul>
 800b360:	4b88      	ldr	r3, [pc, #544]	; (800b584 <_dtoa_r+0x654>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f4 ffc2 	bl	80002ec <__adddf3>
 800b368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b370:	9303      	str	r3, [sp, #12]
 800b372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d15c      	bne.n	800b432 <_dtoa_r+0x502>
 800b378:	4b83      	ldr	r3, [pc, #524]	; (800b588 <_dtoa_r+0x658>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f4 ffb2 	bl	80002e8 <__aeabi_dsub>
 800b384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b388:	4606      	mov	r6, r0
 800b38a:	460f      	mov	r7, r1
 800b38c:	f7f5 fbf4 	bl	8000b78 <__aeabi_dcmpgt>
 800b390:	2800      	cmp	r0, #0
 800b392:	f040 8296 	bne.w	800b8c2 <_dtoa_r+0x992>
 800b396:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b39a:	4630      	mov	r0, r6
 800b39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f5 fbcb 	bl	8000b3c <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f040 8288 	bne.w	800b8bc <_dtoa_r+0x98c>
 800b3ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f2c0 8158 	blt.w	800b66c <_dtoa_r+0x73c>
 800b3bc:	f1ba 0f0e 	cmp.w	sl, #14
 800b3c0:	f300 8154 	bgt.w	800b66c <_dtoa_r+0x73c>
 800b3c4:	4b6b      	ldr	r3, [pc, #428]	; (800b574 <_dtoa_r+0x644>)
 800b3c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f280 80e3 	bge.w	800b59c <_dtoa_r+0x66c>
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f300 80df 	bgt.w	800b59c <_dtoa_r+0x66c>
 800b3de:	f040 826d 	bne.w	800b8bc <_dtoa_r+0x98c>
 800b3e2:	4b69      	ldr	r3, [pc, #420]	; (800b588 <_dtoa_r+0x658>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f5 f935 	bl	8000658 <__aeabi_dmul>
 800b3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3f2:	f7f5 fbb7 	bl	8000b64 <__aeabi_dcmpge>
 800b3f6:	9e01      	ldr	r6, [sp, #4]
 800b3f8:	4637      	mov	r7, r6
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f040 8243 	bne.w	800b886 <_dtoa_r+0x956>
 800b400:	9d00      	ldr	r5, [sp, #0]
 800b402:	2331      	movs	r3, #49	; 0x31
 800b404:	f805 3b01 	strb.w	r3, [r5], #1
 800b408:	f10a 0a01 	add.w	sl, sl, #1
 800b40c:	e23f      	b.n	800b88e <_dtoa_r+0x95e>
 800b40e:	07f2      	lsls	r2, r6, #31
 800b410:	d505      	bpl.n	800b41e <_dtoa_r+0x4ee>
 800b412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b416:	f7f5 f91f 	bl	8000658 <__aeabi_dmul>
 800b41a:	3501      	adds	r5, #1
 800b41c:	2301      	movs	r3, #1
 800b41e:	1076      	asrs	r6, r6, #1
 800b420:	3708      	adds	r7, #8
 800b422:	e76c      	b.n	800b2fe <_dtoa_r+0x3ce>
 800b424:	2502      	movs	r5, #2
 800b426:	e76f      	b.n	800b308 <_dtoa_r+0x3d8>
 800b428:	9b01      	ldr	r3, [sp, #4]
 800b42a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b42e:	930c      	str	r3, [sp, #48]	; 0x30
 800b430:	e78d      	b.n	800b34e <_dtoa_r+0x41e>
 800b432:	9900      	ldr	r1, [sp, #0]
 800b434:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b438:	4b4e      	ldr	r3, [pc, #312]	; (800b574 <_dtoa_r+0x644>)
 800b43a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b43e:	4401      	add	r1, r0
 800b440:	9102      	str	r1, [sp, #8]
 800b442:	9908      	ldr	r1, [sp, #32]
 800b444:	eeb0 8a47 	vmov.f32	s16, s14
 800b448:	eef0 8a67 	vmov.f32	s17, s15
 800b44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b454:	2900      	cmp	r1, #0
 800b456:	d045      	beq.n	800b4e4 <_dtoa_r+0x5b4>
 800b458:	494c      	ldr	r1, [pc, #304]	; (800b58c <_dtoa_r+0x65c>)
 800b45a:	2000      	movs	r0, #0
 800b45c:	f7f5 fa26 	bl	80008ac <__aeabi_ddiv>
 800b460:	ec53 2b18 	vmov	r2, r3, d8
 800b464:	f7f4 ff40 	bl	80002e8 <__aeabi_dsub>
 800b468:	9d00      	ldr	r5, [sp, #0]
 800b46a:	ec41 0b18 	vmov	d8, r0, r1
 800b46e:	4639      	mov	r1, r7
 800b470:	4630      	mov	r0, r6
 800b472:	f7f5 fba1 	bl	8000bb8 <__aeabi_d2iz>
 800b476:	900c      	str	r0, [sp, #48]	; 0x30
 800b478:	f7f5 f884 	bl	8000584 <__aeabi_i2d>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f4 ff30 	bl	80002e8 <__aeabi_dsub>
 800b488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b48a:	3330      	adds	r3, #48	; 0x30
 800b48c:	f805 3b01 	strb.w	r3, [r5], #1
 800b490:	ec53 2b18 	vmov	r2, r3, d8
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	f7f5 fb50 	bl	8000b3c <__aeabi_dcmplt>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d165      	bne.n	800b56c <_dtoa_r+0x63c>
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	4935      	ldr	r1, [pc, #212]	; (800b57c <_dtoa_r+0x64c>)
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	f7f4 ff1e 	bl	80002e8 <__aeabi_dsub>
 800b4ac:	ec53 2b18 	vmov	r2, r3, d8
 800b4b0:	f7f5 fb44 	bl	8000b3c <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f040 80b9 	bne.w	800b62c <_dtoa_r+0x6fc>
 800b4ba:	9b02      	ldr	r3, [sp, #8]
 800b4bc:	429d      	cmp	r5, r3
 800b4be:	f43f af75 	beq.w	800b3ac <_dtoa_r+0x47c>
 800b4c2:	4b2f      	ldr	r3, [pc, #188]	; (800b580 <_dtoa_r+0x650>)
 800b4c4:	ec51 0b18 	vmov	r0, r1, d8
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f7f5 f8c5 	bl	8000658 <__aeabi_dmul>
 800b4ce:	4b2c      	ldr	r3, [pc, #176]	; (800b580 <_dtoa_r+0x650>)
 800b4d0:	ec41 0b18 	vmov	d8, r0, r1
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	4639      	mov	r1, r7
 800b4da:	f7f5 f8bd 	bl	8000658 <__aeabi_dmul>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	e7c4      	b.n	800b46e <_dtoa_r+0x53e>
 800b4e4:	ec51 0b17 	vmov	r0, r1, d7
 800b4e8:	f7f5 f8b6 	bl	8000658 <__aeabi_dmul>
 800b4ec:	9b02      	ldr	r3, [sp, #8]
 800b4ee:	9d00      	ldr	r5, [sp, #0]
 800b4f0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4f2:	ec41 0b18 	vmov	d8, r0, r1
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7f5 fb5d 	bl	8000bb8 <__aeabi_d2iz>
 800b4fe:	9011      	str	r0, [sp, #68]	; 0x44
 800b500:	f7f5 f840 	bl	8000584 <__aeabi_i2d>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 feec 	bl	80002e8 <__aeabi_dsub>
 800b510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b512:	3330      	adds	r3, #48	; 0x30
 800b514:	f805 3b01 	strb.w	r3, [r5], #1
 800b518:	9b02      	ldr	r3, [sp, #8]
 800b51a:	429d      	cmp	r5, r3
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	d134      	bne.n	800b590 <_dtoa_r+0x660>
 800b526:	4b19      	ldr	r3, [pc, #100]	; (800b58c <_dtoa_r+0x65c>)
 800b528:	ec51 0b18 	vmov	r0, r1, d8
 800b52c:	f7f4 fede 	bl	80002ec <__adddf3>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f7f5 fb1e 	bl	8000b78 <__aeabi_dcmpgt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d175      	bne.n	800b62c <_dtoa_r+0x6fc>
 800b540:	ec53 2b18 	vmov	r2, r3, d8
 800b544:	4911      	ldr	r1, [pc, #68]	; (800b58c <_dtoa_r+0x65c>)
 800b546:	2000      	movs	r0, #0
 800b548:	f7f4 fece 	bl	80002e8 <__aeabi_dsub>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4630      	mov	r0, r6
 800b552:	4639      	mov	r1, r7
 800b554:	f7f5 faf2 	bl	8000b3c <__aeabi_dcmplt>
 800b558:	2800      	cmp	r0, #0
 800b55a:	f43f af27 	beq.w	800b3ac <_dtoa_r+0x47c>
 800b55e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b560:	1e6b      	subs	r3, r5, #1
 800b562:	930c      	str	r3, [sp, #48]	; 0x30
 800b564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b568:	2b30      	cmp	r3, #48	; 0x30
 800b56a:	d0f8      	beq.n	800b55e <_dtoa_r+0x62e>
 800b56c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b570:	e04a      	b.n	800b608 <_dtoa_r+0x6d8>
 800b572:	bf00      	nop
 800b574:	0807a690 	.word	0x0807a690
 800b578:	0807a668 	.word	0x0807a668
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	40240000 	.word	0x40240000
 800b584:	401c0000 	.word	0x401c0000
 800b588:	40140000 	.word	0x40140000
 800b58c:	3fe00000 	.word	0x3fe00000
 800b590:	4baf      	ldr	r3, [pc, #700]	; (800b850 <_dtoa_r+0x920>)
 800b592:	f7f5 f861 	bl	8000658 <__aeabi_dmul>
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	e7ac      	b.n	800b4f6 <_dtoa_r+0x5c6>
 800b59c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5a0:	9d00      	ldr	r5, [sp, #0]
 800b5a2:	4642      	mov	r2, r8
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 f97f 	bl	80008ac <__aeabi_ddiv>
 800b5ae:	f7f5 fb03 	bl	8000bb8 <__aeabi_d2iz>
 800b5b2:	9002      	str	r0, [sp, #8]
 800b5b4:	f7f4 ffe6 	bl	8000584 <__aeabi_i2d>
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	f7f5 f84c 	bl	8000658 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f4 fe8e 	bl	80002e8 <__aeabi_dsub>
 800b5cc:	9e02      	ldr	r6, [sp, #8]
 800b5ce:	9f01      	ldr	r7, [sp, #4]
 800b5d0:	3630      	adds	r6, #48	; 0x30
 800b5d2:	f805 6b01 	strb.w	r6, [r5], #1
 800b5d6:	9e00      	ldr	r6, [sp, #0]
 800b5d8:	1bae      	subs	r6, r5, r6
 800b5da:	42b7      	cmp	r7, r6
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	d137      	bne.n	800b652 <_dtoa_r+0x722>
 800b5e2:	f7f4 fe83 	bl	80002ec <__adddf3>
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	464b      	mov	r3, r9
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460f      	mov	r7, r1
 800b5ee:	f7f5 fac3 	bl	8000b78 <__aeabi_dcmpgt>
 800b5f2:	b9c8      	cbnz	r0, 800b628 <_dtoa_r+0x6f8>
 800b5f4:	4642      	mov	r2, r8
 800b5f6:	464b      	mov	r3, r9
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f5 fa94 	bl	8000b28 <__aeabi_dcmpeq>
 800b600:	b110      	cbz	r0, 800b608 <_dtoa_r+0x6d8>
 800b602:	9b02      	ldr	r3, [sp, #8]
 800b604:	07d9      	lsls	r1, r3, #31
 800b606:	d40f      	bmi.n	800b628 <_dtoa_r+0x6f8>
 800b608:	4620      	mov	r0, r4
 800b60a:	4659      	mov	r1, fp
 800b60c:	f000 fbd0 	bl	800bdb0 <_Bfree>
 800b610:	2300      	movs	r3, #0
 800b612:	702b      	strb	r3, [r5, #0]
 800b614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b616:	f10a 0001 	add.w	r0, sl, #1
 800b61a:	6018      	str	r0, [r3, #0]
 800b61c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f43f acd8 	beq.w	800afd4 <_dtoa_r+0xa4>
 800b624:	601d      	str	r5, [r3, #0]
 800b626:	e4d5      	b.n	800afd4 <_dtoa_r+0xa4>
 800b628:	f8cd a01c 	str.w	sl, [sp, #28]
 800b62c:	462b      	mov	r3, r5
 800b62e:	461d      	mov	r5, r3
 800b630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b634:	2a39      	cmp	r2, #57	; 0x39
 800b636:	d108      	bne.n	800b64a <_dtoa_r+0x71a>
 800b638:	9a00      	ldr	r2, [sp, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d1f7      	bne.n	800b62e <_dtoa_r+0x6fe>
 800b63e:	9a07      	ldr	r2, [sp, #28]
 800b640:	9900      	ldr	r1, [sp, #0]
 800b642:	3201      	adds	r2, #1
 800b644:	9207      	str	r2, [sp, #28]
 800b646:	2230      	movs	r2, #48	; 0x30
 800b648:	700a      	strb	r2, [r1, #0]
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	3201      	adds	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	e78c      	b.n	800b56c <_dtoa_r+0x63c>
 800b652:	4b7f      	ldr	r3, [pc, #508]	; (800b850 <_dtoa_r+0x920>)
 800b654:	2200      	movs	r2, #0
 800b656:	f7f4 ffff 	bl	8000658 <__aeabi_dmul>
 800b65a:	2200      	movs	r2, #0
 800b65c:	2300      	movs	r3, #0
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	f7f5 fa61 	bl	8000b28 <__aeabi_dcmpeq>
 800b666:	2800      	cmp	r0, #0
 800b668:	d09b      	beq.n	800b5a2 <_dtoa_r+0x672>
 800b66a:	e7cd      	b.n	800b608 <_dtoa_r+0x6d8>
 800b66c:	9a08      	ldr	r2, [sp, #32]
 800b66e:	2a00      	cmp	r2, #0
 800b670:	f000 80c4 	beq.w	800b7fc <_dtoa_r+0x8cc>
 800b674:	9a05      	ldr	r2, [sp, #20]
 800b676:	2a01      	cmp	r2, #1
 800b678:	f300 80a8 	bgt.w	800b7cc <_dtoa_r+0x89c>
 800b67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b67e:	2a00      	cmp	r2, #0
 800b680:	f000 80a0 	beq.w	800b7c4 <_dtoa_r+0x894>
 800b684:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b688:	9e06      	ldr	r6, [sp, #24]
 800b68a:	4645      	mov	r5, r8
 800b68c:	9a04      	ldr	r2, [sp, #16]
 800b68e:	2101      	movs	r1, #1
 800b690:	441a      	add	r2, r3
 800b692:	4620      	mov	r0, r4
 800b694:	4498      	add	r8, r3
 800b696:	9204      	str	r2, [sp, #16]
 800b698:	f000 fc46 	bl	800bf28 <__i2b>
 800b69c:	4607      	mov	r7, r0
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	dd0b      	ble.n	800b6ba <_dtoa_r+0x78a>
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd08      	ble.n	800b6ba <_dtoa_r+0x78a>
 800b6a8:	42ab      	cmp	r3, r5
 800b6aa:	9a04      	ldr	r2, [sp, #16]
 800b6ac:	bfa8      	it	ge
 800b6ae:	462b      	movge	r3, r5
 800b6b0:	eba8 0803 	sub.w	r8, r8, r3
 800b6b4:	1aed      	subs	r5, r5, r3
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	9b06      	ldr	r3, [sp, #24]
 800b6bc:	b1fb      	cbz	r3, 800b6fe <_dtoa_r+0x7ce>
 800b6be:	9b08      	ldr	r3, [sp, #32]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 809f 	beq.w	800b804 <_dtoa_r+0x8d4>
 800b6c6:	2e00      	cmp	r6, #0
 800b6c8:	dd11      	ble.n	800b6ee <_dtoa_r+0x7be>
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 fce6 	bl	800c0a0 <__pow5mult>
 800b6d4:	465a      	mov	r2, fp
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	4607      	mov	r7, r0
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 fc3a 	bl	800bf54 <__multiply>
 800b6e0:	4659      	mov	r1, fp
 800b6e2:	9007      	str	r0, [sp, #28]
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fb63 	bl	800bdb0 <_Bfree>
 800b6ea:	9b07      	ldr	r3, [sp, #28]
 800b6ec:	469b      	mov	fp, r3
 800b6ee:	9b06      	ldr	r3, [sp, #24]
 800b6f0:	1b9a      	subs	r2, r3, r6
 800b6f2:	d004      	beq.n	800b6fe <_dtoa_r+0x7ce>
 800b6f4:	4659      	mov	r1, fp
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 fcd2 	bl	800c0a0 <__pow5mult>
 800b6fc:	4683      	mov	fp, r0
 800b6fe:	2101      	movs	r1, #1
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fc11 	bl	800bf28 <__i2b>
 800b706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b708:	2b00      	cmp	r3, #0
 800b70a:	4606      	mov	r6, r0
 800b70c:	dd7c      	ble.n	800b808 <_dtoa_r+0x8d8>
 800b70e:	461a      	mov	r2, r3
 800b710:	4601      	mov	r1, r0
 800b712:	4620      	mov	r0, r4
 800b714:	f000 fcc4 	bl	800c0a0 <__pow5mult>
 800b718:	9b05      	ldr	r3, [sp, #20]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	4606      	mov	r6, r0
 800b71e:	dd76      	ble.n	800b80e <_dtoa_r+0x8de>
 800b720:	2300      	movs	r3, #0
 800b722:	9306      	str	r3, [sp, #24]
 800b724:	6933      	ldr	r3, [r6, #16]
 800b726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b72a:	6918      	ldr	r0, [r3, #16]
 800b72c:	f000 fbac 	bl	800be88 <__hi0bits>
 800b730:	f1c0 0020 	rsb	r0, r0, #32
 800b734:	9b04      	ldr	r3, [sp, #16]
 800b736:	4418      	add	r0, r3
 800b738:	f010 001f 	ands.w	r0, r0, #31
 800b73c:	f000 8086 	beq.w	800b84c <_dtoa_r+0x91c>
 800b740:	f1c0 0320 	rsb	r3, r0, #32
 800b744:	2b04      	cmp	r3, #4
 800b746:	dd7f      	ble.n	800b848 <_dtoa_r+0x918>
 800b748:	f1c0 001c 	rsb	r0, r0, #28
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	4403      	add	r3, r0
 800b750:	4480      	add	r8, r0
 800b752:	4405      	add	r5, r0
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	f1b8 0f00 	cmp.w	r8, #0
 800b75a:	dd05      	ble.n	800b768 <_dtoa_r+0x838>
 800b75c:	4659      	mov	r1, fp
 800b75e:	4642      	mov	r2, r8
 800b760:	4620      	mov	r0, r4
 800b762:	f000 fcf7 	bl	800c154 <__lshift>
 800b766:	4683      	mov	fp, r0
 800b768:	9b04      	ldr	r3, [sp, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	dd05      	ble.n	800b77a <_dtoa_r+0x84a>
 800b76e:	4631      	mov	r1, r6
 800b770:	461a      	mov	r2, r3
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fcee 	bl	800c154 <__lshift>
 800b778:	4606      	mov	r6, r0
 800b77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d069      	beq.n	800b854 <_dtoa_r+0x924>
 800b780:	4631      	mov	r1, r6
 800b782:	4658      	mov	r0, fp
 800b784:	f000 fd52 	bl	800c22c <__mcmp>
 800b788:	2800      	cmp	r0, #0
 800b78a:	da63      	bge.n	800b854 <_dtoa_r+0x924>
 800b78c:	2300      	movs	r3, #0
 800b78e:	4659      	mov	r1, fp
 800b790:	220a      	movs	r2, #10
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fb2e 	bl	800bdf4 <__multadd>
 800b798:	9b08      	ldr	r3, [sp, #32]
 800b79a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b79e:	4683      	mov	fp, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 818f 	beq.w	800bac4 <_dtoa_r+0xb94>
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	220a      	movs	r2, #10
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fb21 	bl	800bdf4 <__multadd>
 800b7b2:	f1b9 0f00 	cmp.w	r9, #0
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	f300 808e 	bgt.w	800b8d8 <_dtoa_r+0x9a8>
 800b7bc:	9b05      	ldr	r3, [sp, #20]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	dc50      	bgt.n	800b864 <_dtoa_r+0x934>
 800b7c2:	e089      	b.n	800b8d8 <_dtoa_r+0x9a8>
 800b7c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7ca:	e75d      	b.n	800b688 <_dtoa_r+0x758>
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	1e5e      	subs	r6, r3, #1
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	42b3      	cmp	r3, r6
 800b7d4:	bfbf      	itttt	lt
 800b7d6:	9b06      	ldrlt	r3, [sp, #24]
 800b7d8:	9606      	strlt	r6, [sp, #24]
 800b7da:	1af2      	sublt	r2, r6, r3
 800b7dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b7de:	bfb6      	itet	lt
 800b7e0:	189b      	addlt	r3, r3, r2
 800b7e2:	1b9e      	subge	r6, r3, r6
 800b7e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	bfb8      	it	lt
 800b7ea:	2600      	movlt	r6, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bfb5      	itete	lt
 800b7f0:	eba8 0503 	sublt.w	r5, r8, r3
 800b7f4:	9b01      	ldrge	r3, [sp, #4]
 800b7f6:	2300      	movlt	r3, #0
 800b7f8:	4645      	movge	r5, r8
 800b7fa:	e747      	b.n	800b68c <_dtoa_r+0x75c>
 800b7fc:	9e06      	ldr	r6, [sp, #24]
 800b7fe:	9f08      	ldr	r7, [sp, #32]
 800b800:	4645      	mov	r5, r8
 800b802:	e74c      	b.n	800b69e <_dtoa_r+0x76e>
 800b804:	9a06      	ldr	r2, [sp, #24]
 800b806:	e775      	b.n	800b6f4 <_dtoa_r+0x7c4>
 800b808:	9b05      	ldr	r3, [sp, #20]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	dc18      	bgt.n	800b840 <_dtoa_r+0x910>
 800b80e:	9b02      	ldr	r3, [sp, #8]
 800b810:	b9b3      	cbnz	r3, 800b840 <_dtoa_r+0x910>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b818:	b9a3      	cbnz	r3, 800b844 <_dtoa_r+0x914>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b820:	0d1b      	lsrs	r3, r3, #20
 800b822:	051b      	lsls	r3, r3, #20
 800b824:	b12b      	cbz	r3, 800b832 <_dtoa_r+0x902>
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	3301      	adds	r3, #1
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	f108 0801 	add.w	r8, r8, #1
 800b830:	2301      	movs	r3, #1
 800b832:	9306      	str	r3, [sp, #24]
 800b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b836:	2b00      	cmp	r3, #0
 800b838:	f47f af74 	bne.w	800b724 <_dtoa_r+0x7f4>
 800b83c:	2001      	movs	r0, #1
 800b83e:	e779      	b.n	800b734 <_dtoa_r+0x804>
 800b840:	2300      	movs	r3, #0
 800b842:	e7f6      	b.n	800b832 <_dtoa_r+0x902>
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	e7f4      	b.n	800b832 <_dtoa_r+0x902>
 800b848:	d085      	beq.n	800b756 <_dtoa_r+0x826>
 800b84a:	4618      	mov	r0, r3
 800b84c:	301c      	adds	r0, #28
 800b84e:	e77d      	b.n	800b74c <_dtoa_r+0x81c>
 800b850:	40240000 	.word	0x40240000
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	dc38      	bgt.n	800b8cc <_dtoa_r+0x99c>
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	dd35      	ble.n	800b8cc <_dtoa_r+0x99c>
 800b860:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b864:	f1b9 0f00 	cmp.w	r9, #0
 800b868:	d10d      	bne.n	800b886 <_dtoa_r+0x956>
 800b86a:	4631      	mov	r1, r6
 800b86c:	464b      	mov	r3, r9
 800b86e:	2205      	movs	r2, #5
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fabf 	bl	800bdf4 <__multadd>
 800b876:	4601      	mov	r1, r0
 800b878:	4606      	mov	r6, r0
 800b87a:	4658      	mov	r0, fp
 800b87c:	f000 fcd6 	bl	800c22c <__mcmp>
 800b880:	2800      	cmp	r0, #0
 800b882:	f73f adbd 	bgt.w	800b400 <_dtoa_r+0x4d0>
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	9d00      	ldr	r5, [sp, #0]
 800b88a:	ea6f 0a03 	mvn.w	sl, r3
 800b88e:	f04f 0800 	mov.w	r8, #0
 800b892:	4631      	mov	r1, r6
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fa8b 	bl	800bdb0 <_Bfree>
 800b89a:	2f00      	cmp	r7, #0
 800b89c:	f43f aeb4 	beq.w	800b608 <_dtoa_r+0x6d8>
 800b8a0:	f1b8 0f00 	cmp.w	r8, #0
 800b8a4:	d005      	beq.n	800b8b2 <_dtoa_r+0x982>
 800b8a6:	45b8      	cmp	r8, r7
 800b8a8:	d003      	beq.n	800b8b2 <_dtoa_r+0x982>
 800b8aa:	4641      	mov	r1, r8
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fa7f 	bl	800bdb0 <_Bfree>
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fa7b 	bl	800bdb0 <_Bfree>
 800b8ba:	e6a5      	b.n	800b608 <_dtoa_r+0x6d8>
 800b8bc:	2600      	movs	r6, #0
 800b8be:	4637      	mov	r7, r6
 800b8c0:	e7e1      	b.n	800b886 <_dtoa_r+0x956>
 800b8c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8c8:	4637      	mov	r7, r6
 800b8ca:	e599      	b.n	800b400 <_dtoa_r+0x4d0>
 800b8cc:	9b08      	ldr	r3, [sp, #32]
 800b8ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 80fd 	beq.w	800bad2 <_dtoa_r+0xba2>
 800b8d8:	2d00      	cmp	r5, #0
 800b8da:	dd05      	ble.n	800b8e8 <_dtoa_r+0x9b8>
 800b8dc:	4639      	mov	r1, r7
 800b8de:	462a      	mov	r2, r5
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 fc37 	bl	800c154 <__lshift>
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	9b06      	ldr	r3, [sp, #24]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d05c      	beq.n	800b9a8 <_dtoa_r+0xa78>
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 fa1d 	bl	800bd30 <_Balloc>
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	b928      	cbnz	r0, 800b906 <_dtoa_r+0x9d6>
 800b8fa:	4b80      	ldr	r3, [pc, #512]	; (800bafc <_dtoa_r+0xbcc>)
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b902:	f7ff bb2e 	b.w	800af62 <_dtoa_r+0x32>
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	3202      	adds	r2, #2
 800b90a:	0092      	lsls	r2, r2, #2
 800b90c:	f107 010c 	add.w	r1, r7, #12
 800b910:	300c      	adds	r0, #12
 800b912:	f000 f9ff 	bl	800bd14 <memcpy>
 800b916:	2201      	movs	r2, #1
 800b918:	4629      	mov	r1, r5
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fc1a 	bl	800c154 <__lshift>
 800b920:	9b00      	ldr	r3, [sp, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	444b      	add	r3, r9
 800b92a:	9307      	str	r3, [sp, #28]
 800b92c:	9b02      	ldr	r3, [sp, #8]
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	46b8      	mov	r8, r7
 800b934:	9306      	str	r3, [sp, #24]
 800b936:	4607      	mov	r7, r0
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	4631      	mov	r1, r6
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4658      	mov	r0, fp
 800b940:	9302      	str	r3, [sp, #8]
 800b942:	f7ff fa69 	bl	800ae18 <quorem>
 800b946:	4603      	mov	r3, r0
 800b948:	3330      	adds	r3, #48	; 0x30
 800b94a:	9004      	str	r0, [sp, #16]
 800b94c:	4641      	mov	r1, r8
 800b94e:	4658      	mov	r0, fp
 800b950:	9308      	str	r3, [sp, #32]
 800b952:	f000 fc6b 	bl	800c22c <__mcmp>
 800b956:	463a      	mov	r2, r7
 800b958:	4681      	mov	r9, r0
 800b95a:	4631      	mov	r1, r6
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 fc81 	bl	800c264 <__mdiff>
 800b962:	68c2      	ldr	r2, [r0, #12]
 800b964:	9b08      	ldr	r3, [sp, #32]
 800b966:	4605      	mov	r5, r0
 800b968:	bb02      	cbnz	r2, 800b9ac <_dtoa_r+0xa7c>
 800b96a:	4601      	mov	r1, r0
 800b96c:	4658      	mov	r0, fp
 800b96e:	f000 fc5d 	bl	800c22c <__mcmp>
 800b972:	9b08      	ldr	r3, [sp, #32]
 800b974:	4602      	mov	r2, r0
 800b976:	4629      	mov	r1, r5
 800b978:	4620      	mov	r0, r4
 800b97a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b97e:	f000 fa17 	bl	800bdb0 <_Bfree>
 800b982:	9b05      	ldr	r3, [sp, #20]
 800b984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b986:	9d01      	ldr	r5, [sp, #4]
 800b988:	ea43 0102 	orr.w	r1, r3, r2
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	430b      	orrs	r3, r1
 800b990:	9b08      	ldr	r3, [sp, #32]
 800b992:	d10d      	bne.n	800b9b0 <_dtoa_r+0xa80>
 800b994:	2b39      	cmp	r3, #57	; 0x39
 800b996:	d029      	beq.n	800b9ec <_dtoa_r+0xabc>
 800b998:	f1b9 0f00 	cmp.w	r9, #0
 800b99c:	dd01      	ble.n	800b9a2 <_dtoa_r+0xa72>
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	3331      	adds	r3, #49	; 0x31
 800b9a2:	9a02      	ldr	r2, [sp, #8]
 800b9a4:	7013      	strb	r3, [r2, #0]
 800b9a6:	e774      	b.n	800b892 <_dtoa_r+0x962>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	e7b9      	b.n	800b920 <_dtoa_r+0x9f0>
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	e7e2      	b.n	800b976 <_dtoa_r+0xa46>
 800b9b0:	f1b9 0f00 	cmp.w	r9, #0
 800b9b4:	db06      	blt.n	800b9c4 <_dtoa_r+0xa94>
 800b9b6:	9905      	ldr	r1, [sp, #20]
 800b9b8:	ea41 0909 	orr.w	r9, r1, r9
 800b9bc:	9906      	ldr	r1, [sp, #24]
 800b9be:	ea59 0101 	orrs.w	r1, r9, r1
 800b9c2:	d120      	bne.n	800ba06 <_dtoa_r+0xad6>
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	ddec      	ble.n	800b9a2 <_dtoa_r+0xa72>
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	f000 fbc0 	bl	800c154 <__lshift>
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	4683      	mov	fp, r0
 800b9d8:	f000 fc28 	bl	800c22c <__mcmp>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	dc02      	bgt.n	800b9e8 <_dtoa_r+0xab8>
 800b9e2:	d1de      	bne.n	800b9a2 <_dtoa_r+0xa72>
 800b9e4:	07da      	lsls	r2, r3, #31
 800b9e6:	d5dc      	bpl.n	800b9a2 <_dtoa_r+0xa72>
 800b9e8:	2b39      	cmp	r3, #57	; 0x39
 800b9ea:	d1d8      	bne.n	800b99e <_dtoa_r+0xa6e>
 800b9ec:	9a02      	ldr	r2, [sp, #8]
 800b9ee:	2339      	movs	r3, #57	; 0x39
 800b9f0:	7013      	strb	r3, [r2, #0]
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	461d      	mov	r5, r3
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9fc:	2a39      	cmp	r2, #57	; 0x39
 800b9fe:	d050      	beq.n	800baa2 <_dtoa_r+0xb72>
 800ba00:	3201      	adds	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	e745      	b.n	800b892 <_dtoa_r+0x962>
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	dd03      	ble.n	800ba12 <_dtoa_r+0xae2>
 800ba0a:	2b39      	cmp	r3, #57	; 0x39
 800ba0c:	d0ee      	beq.n	800b9ec <_dtoa_r+0xabc>
 800ba0e:	3301      	adds	r3, #1
 800ba10:	e7c7      	b.n	800b9a2 <_dtoa_r+0xa72>
 800ba12:	9a01      	ldr	r2, [sp, #4]
 800ba14:	9907      	ldr	r1, [sp, #28]
 800ba16:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba1a:	428a      	cmp	r2, r1
 800ba1c:	d02a      	beq.n	800ba74 <_dtoa_r+0xb44>
 800ba1e:	4659      	mov	r1, fp
 800ba20:	2300      	movs	r3, #0
 800ba22:	220a      	movs	r2, #10
 800ba24:	4620      	mov	r0, r4
 800ba26:	f000 f9e5 	bl	800bdf4 <__multadd>
 800ba2a:	45b8      	cmp	r8, r7
 800ba2c:	4683      	mov	fp, r0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	f04f 020a 	mov.w	r2, #10
 800ba36:	4641      	mov	r1, r8
 800ba38:	4620      	mov	r0, r4
 800ba3a:	d107      	bne.n	800ba4c <_dtoa_r+0xb1c>
 800ba3c:	f000 f9da 	bl	800bdf4 <__multadd>
 800ba40:	4680      	mov	r8, r0
 800ba42:	4607      	mov	r7, r0
 800ba44:	9b01      	ldr	r3, [sp, #4]
 800ba46:	3301      	adds	r3, #1
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	e775      	b.n	800b938 <_dtoa_r+0xa08>
 800ba4c:	f000 f9d2 	bl	800bdf4 <__multadd>
 800ba50:	4639      	mov	r1, r7
 800ba52:	4680      	mov	r8, r0
 800ba54:	2300      	movs	r3, #0
 800ba56:	220a      	movs	r2, #10
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 f9cb 	bl	800bdf4 <__multadd>
 800ba5e:	4607      	mov	r7, r0
 800ba60:	e7f0      	b.n	800ba44 <_dtoa_r+0xb14>
 800ba62:	f1b9 0f00 	cmp.w	r9, #0
 800ba66:	9a00      	ldr	r2, [sp, #0]
 800ba68:	bfcc      	ite	gt
 800ba6a:	464d      	movgt	r5, r9
 800ba6c:	2501      	movle	r5, #1
 800ba6e:	4415      	add	r5, r2
 800ba70:	f04f 0800 	mov.w	r8, #0
 800ba74:	4659      	mov	r1, fp
 800ba76:	2201      	movs	r2, #1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	f000 fb6a 	bl	800c154 <__lshift>
 800ba80:	4631      	mov	r1, r6
 800ba82:	4683      	mov	fp, r0
 800ba84:	f000 fbd2 	bl	800c22c <__mcmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dcb2      	bgt.n	800b9f2 <_dtoa_r+0xac2>
 800ba8c:	d102      	bne.n	800ba94 <_dtoa_r+0xb64>
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	07db      	lsls	r3, r3, #31
 800ba92:	d4ae      	bmi.n	800b9f2 <_dtoa_r+0xac2>
 800ba94:	462b      	mov	r3, r5
 800ba96:	461d      	mov	r5, r3
 800ba98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba9c:	2a30      	cmp	r2, #48	; 0x30
 800ba9e:	d0fa      	beq.n	800ba96 <_dtoa_r+0xb66>
 800baa0:	e6f7      	b.n	800b892 <_dtoa_r+0x962>
 800baa2:	9a00      	ldr	r2, [sp, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d1a5      	bne.n	800b9f4 <_dtoa_r+0xac4>
 800baa8:	f10a 0a01 	add.w	sl, sl, #1
 800baac:	2331      	movs	r3, #49	; 0x31
 800baae:	e779      	b.n	800b9a4 <_dtoa_r+0xa74>
 800bab0:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <_dtoa_r+0xbd0>)
 800bab2:	f7ff baaf 	b.w	800b014 <_dtoa_r+0xe4>
 800bab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f47f aa86 	bne.w	800afca <_dtoa_r+0x9a>
 800babe:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <_dtoa_r+0xbd4>)
 800bac0:	f7ff baa8 	b.w	800b014 <_dtoa_r+0xe4>
 800bac4:	f1b9 0f00 	cmp.w	r9, #0
 800bac8:	dc03      	bgt.n	800bad2 <_dtoa_r+0xba2>
 800baca:	9b05      	ldr	r3, [sp, #20]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	f73f aec9 	bgt.w	800b864 <_dtoa_r+0x934>
 800bad2:	9d00      	ldr	r5, [sp, #0]
 800bad4:	4631      	mov	r1, r6
 800bad6:	4658      	mov	r0, fp
 800bad8:	f7ff f99e 	bl	800ae18 <quorem>
 800badc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bae0:	f805 3b01 	strb.w	r3, [r5], #1
 800bae4:	9a00      	ldr	r2, [sp, #0]
 800bae6:	1aaa      	subs	r2, r5, r2
 800bae8:	4591      	cmp	r9, r2
 800baea:	ddba      	ble.n	800ba62 <_dtoa_r+0xb32>
 800baec:	4659      	mov	r1, fp
 800baee:	2300      	movs	r3, #0
 800baf0:	220a      	movs	r2, #10
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 f97e 	bl	800bdf4 <__multadd>
 800baf8:	4683      	mov	fp, r0
 800bafa:	e7eb      	b.n	800bad4 <_dtoa_r+0xba4>
 800bafc:	0807a593 	.word	0x0807a593
 800bb00:	0807a4ec 	.word	0x0807a4ec
 800bb04:	0807a510 	.word	0x0807a510

0800bb08 <std>:
 800bb08:	2300      	movs	r3, #0
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb16:	6083      	str	r3, [r0, #8]
 800bb18:	8181      	strh	r1, [r0, #12]
 800bb1a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb1c:	81c2      	strh	r2, [r0, #14]
 800bb1e:	6183      	str	r3, [r0, #24]
 800bb20:	4619      	mov	r1, r3
 800bb22:	2208      	movs	r2, #8
 800bb24:	305c      	adds	r0, #92	; 0x5c
 800bb26:	f7fe fced 	bl	800a504 <memset>
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <std+0x38>)
 800bb2c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <std+0x3c>)
 800bb30:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <std+0x40>)
 800bb34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <std+0x44>)
 800bb38:	6224      	str	r4, [r4, #32]
 800bb3a:	6323      	str	r3, [r4, #48]	; 0x30
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	bf00      	nop
 800bb40:	0800c875 	.word	0x0800c875
 800bb44:	0800c897 	.word	0x0800c897
 800bb48:	0800c8cf 	.word	0x0800c8cf
 800bb4c:	0800c8f3 	.word	0x0800c8f3

0800bb50 <_cleanup_r>:
 800bb50:	4901      	ldr	r1, [pc, #4]	; (800bb58 <_cleanup_r+0x8>)
 800bb52:	f000 b8af 	b.w	800bcb4 <_fwalk_reent>
 800bb56:	bf00      	nop
 800bb58:	0800cc09 	.word	0x0800cc09

0800bb5c <__sfmoreglue>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	1e4a      	subs	r2, r1, #1
 800bb60:	2568      	movs	r5, #104	; 0x68
 800bb62:	4355      	muls	r5, r2
 800bb64:	460e      	mov	r6, r1
 800bb66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb6a:	f000 fcbf 	bl	800c4ec <_malloc_r>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	b140      	cbz	r0, 800bb84 <__sfmoreglue+0x28>
 800bb72:	2100      	movs	r1, #0
 800bb74:	e9c0 1600 	strd	r1, r6, [r0]
 800bb78:	300c      	adds	r0, #12
 800bb7a:	60a0      	str	r0, [r4, #8]
 800bb7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb80:	f7fe fcc0 	bl	800a504 <memset>
 800bb84:	4620      	mov	r0, r4
 800bb86:	bd70      	pop	{r4, r5, r6, pc}

0800bb88 <__sfp_lock_acquire>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__sfp_lock_acquire+0x8>)
 800bb8a:	f000 b8b8 	b.w	800bcfe <__retarget_lock_acquire_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20000a64 	.word	0x20000a64

0800bb94 <__sfp_lock_release>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__sfp_lock_release+0x8>)
 800bb96:	f000 b8b3 	b.w	800bd00 <__retarget_lock_release_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	20000a64 	.word	0x20000a64

0800bba0 <__sinit_lock_acquire>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__sinit_lock_acquire+0x8>)
 800bba2:	f000 b8ac 	b.w	800bcfe <__retarget_lock_acquire_recursive>
 800bba6:	bf00      	nop
 800bba8:	20000a5f 	.word	0x20000a5f

0800bbac <__sinit_lock_release>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__sinit_lock_release+0x8>)
 800bbae:	f000 b8a7 	b.w	800bd00 <__retarget_lock_release_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20000a5f 	.word	0x20000a5f

0800bbb8 <__sinit>:
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	4604      	mov	r4, r0
 800bbbc:	f7ff fff0 	bl	800bba0 <__sinit_lock_acquire>
 800bbc0:	69a3      	ldr	r3, [r4, #24]
 800bbc2:	b11b      	cbz	r3, 800bbcc <__sinit+0x14>
 800bbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc8:	f7ff bff0 	b.w	800bbac <__sinit_lock_release>
 800bbcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbd0:	6523      	str	r3, [r4, #80]	; 0x50
 800bbd2:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <__sinit+0x68>)
 800bbd4:	4a13      	ldr	r2, [pc, #76]	; (800bc24 <__sinit+0x6c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	bf04      	itt	eq
 800bbde:	2301      	moveq	r3, #1
 800bbe0:	61a3      	streq	r3, [r4, #24]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 f820 	bl	800bc28 <__sfp>
 800bbe8:	6060      	str	r0, [r4, #4]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f81c 	bl	800bc28 <__sfp>
 800bbf0:	60a0      	str	r0, [r4, #8]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 f818 	bl	800bc28 <__sfp>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	60e0      	str	r0, [r4, #12]
 800bbfc:	2104      	movs	r1, #4
 800bbfe:	6860      	ldr	r0, [r4, #4]
 800bc00:	f7ff ff82 	bl	800bb08 <std>
 800bc04:	68a0      	ldr	r0, [r4, #8]
 800bc06:	2201      	movs	r2, #1
 800bc08:	2109      	movs	r1, #9
 800bc0a:	f7ff ff7d 	bl	800bb08 <std>
 800bc0e:	68e0      	ldr	r0, [r4, #12]
 800bc10:	2202      	movs	r2, #2
 800bc12:	2112      	movs	r1, #18
 800bc14:	f7ff ff78 	bl	800bb08 <std>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	61a3      	str	r3, [r4, #24]
 800bc1c:	e7d2      	b.n	800bbc4 <__sinit+0xc>
 800bc1e:	bf00      	nop
 800bc20:	0807a4d8 	.word	0x0807a4d8
 800bc24:	0800bb51 	.word	0x0800bb51

0800bc28 <__sfp>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	4607      	mov	r7, r0
 800bc2c:	f7ff ffac 	bl	800bb88 <__sfp_lock_acquire>
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <__sfp+0x84>)
 800bc32:	681e      	ldr	r6, [r3, #0]
 800bc34:	69b3      	ldr	r3, [r6, #24]
 800bc36:	b913      	cbnz	r3, 800bc3e <__sfp+0x16>
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7ff ffbd 	bl	800bbb8 <__sinit>
 800bc3e:	3648      	adds	r6, #72	; 0x48
 800bc40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	d503      	bpl.n	800bc50 <__sfp+0x28>
 800bc48:	6833      	ldr	r3, [r6, #0]
 800bc4a:	b30b      	cbz	r3, 800bc90 <__sfp+0x68>
 800bc4c:	6836      	ldr	r6, [r6, #0]
 800bc4e:	e7f7      	b.n	800bc40 <__sfp+0x18>
 800bc50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc54:	b9d5      	cbnz	r5, 800bc8c <__sfp+0x64>
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <__sfp+0x88>)
 800bc58:	60e3      	str	r3, [r4, #12]
 800bc5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc5e:	6665      	str	r5, [r4, #100]	; 0x64
 800bc60:	f000 f84c 	bl	800bcfc <__retarget_lock_init_recursive>
 800bc64:	f7ff ff96 	bl	800bb94 <__sfp_lock_release>
 800bc68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc70:	6025      	str	r5, [r4, #0]
 800bc72:	61a5      	str	r5, [r4, #24]
 800bc74:	2208      	movs	r2, #8
 800bc76:	4629      	mov	r1, r5
 800bc78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc7c:	f7fe fc42 	bl	800a504 <memset>
 800bc80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc88:	4620      	mov	r0, r4
 800bc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8c:	3468      	adds	r4, #104	; 0x68
 800bc8e:	e7d9      	b.n	800bc44 <__sfp+0x1c>
 800bc90:	2104      	movs	r1, #4
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7ff ff62 	bl	800bb5c <__sfmoreglue>
 800bc98:	4604      	mov	r4, r0
 800bc9a:	6030      	str	r0, [r6, #0]
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1d5      	bne.n	800bc4c <__sfp+0x24>
 800bca0:	f7ff ff78 	bl	800bb94 <__sfp_lock_release>
 800bca4:	230c      	movs	r3, #12
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	e7ee      	b.n	800bc88 <__sfp+0x60>
 800bcaa:	bf00      	nop
 800bcac:	0807a4d8 	.word	0x0807a4d8
 800bcb0:	ffff0001 	.word	0xffff0001

0800bcb4 <_fwalk_reent>:
 800bcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4606      	mov	r6, r0
 800bcba:	4688      	mov	r8, r1
 800bcbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcc0:	2700      	movs	r7, #0
 800bcc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcc6:	f1b9 0901 	subs.w	r9, r9, #1
 800bcca:	d505      	bpl.n	800bcd8 <_fwalk_reent+0x24>
 800bccc:	6824      	ldr	r4, [r4, #0]
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d1f7      	bne.n	800bcc2 <_fwalk_reent+0xe>
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd8:	89ab      	ldrh	r3, [r5, #12]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d907      	bls.n	800bcee <_fwalk_reent+0x3a>
 800bcde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bce2:	3301      	adds	r3, #1
 800bce4:	d003      	beq.n	800bcee <_fwalk_reent+0x3a>
 800bce6:	4629      	mov	r1, r5
 800bce8:	4630      	mov	r0, r6
 800bcea:	47c0      	blx	r8
 800bcec:	4307      	orrs	r7, r0
 800bcee:	3568      	adds	r5, #104	; 0x68
 800bcf0:	e7e9      	b.n	800bcc6 <_fwalk_reent+0x12>
	...

0800bcf4 <_localeconv_r>:
 800bcf4:	4800      	ldr	r0, [pc, #0]	; (800bcf8 <_localeconv_r+0x4>)
 800bcf6:	4770      	bx	lr
 800bcf8:	20000164 	.word	0x20000164

0800bcfc <__retarget_lock_init_recursive>:
 800bcfc:	4770      	bx	lr

0800bcfe <__retarget_lock_acquire_recursive>:
 800bcfe:	4770      	bx	lr

0800bd00 <__retarget_lock_release_recursive>:
 800bd00:	4770      	bx	lr
	...

0800bd04 <malloc>:
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <malloc+0xc>)
 800bd06:	4601      	mov	r1, r0
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	f000 bbef 	b.w	800c4ec <_malloc_r>
 800bd0e:	bf00      	nop
 800bd10:	20000010 	.word	0x20000010

0800bd14 <memcpy>:
 800bd14:	440a      	add	r2, r1
 800bd16:	4291      	cmp	r1, r2
 800bd18:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd1c:	d100      	bne.n	800bd20 <memcpy+0xc>
 800bd1e:	4770      	bx	lr
 800bd20:	b510      	push	{r4, lr}
 800bd22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd2a:	4291      	cmp	r1, r2
 800bd2c:	d1f9      	bne.n	800bd22 <memcpy+0xe>
 800bd2e:	bd10      	pop	{r4, pc}

0800bd30 <_Balloc>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd34:	4604      	mov	r4, r0
 800bd36:	460d      	mov	r5, r1
 800bd38:	b976      	cbnz	r6, 800bd58 <_Balloc+0x28>
 800bd3a:	2010      	movs	r0, #16
 800bd3c:	f7ff ffe2 	bl	800bd04 <malloc>
 800bd40:	4602      	mov	r2, r0
 800bd42:	6260      	str	r0, [r4, #36]	; 0x24
 800bd44:	b920      	cbnz	r0, 800bd50 <_Balloc+0x20>
 800bd46:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <_Balloc+0x78>)
 800bd48:	4818      	ldr	r0, [pc, #96]	; (800bdac <_Balloc+0x7c>)
 800bd4a:	2166      	movs	r1, #102	; 0x66
 800bd4c:	f000 fea8 	bl	800caa0 <__assert_func>
 800bd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd54:	6006      	str	r6, [r0, #0]
 800bd56:	60c6      	str	r6, [r0, #12]
 800bd58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd5a:	68f3      	ldr	r3, [r6, #12]
 800bd5c:	b183      	cbz	r3, 800bd80 <_Balloc+0x50>
 800bd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd66:	b9b8      	cbnz	r0, 800bd98 <_Balloc+0x68>
 800bd68:	2101      	movs	r1, #1
 800bd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd6e:	1d72      	adds	r2, r6, #5
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fb5a 	bl	800c42c <_calloc_r>
 800bd78:	b160      	cbz	r0, 800bd94 <_Balloc+0x64>
 800bd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd7e:	e00e      	b.n	800bd9e <_Balloc+0x6e>
 800bd80:	2221      	movs	r2, #33	; 0x21
 800bd82:	2104      	movs	r1, #4
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fb51 	bl	800c42c <_calloc_r>
 800bd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8c:	60f0      	str	r0, [r6, #12]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e4      	bne.n	800bd5e <_Balloc+0x2e>
 800bd94:	2000      	movs	r0, #0
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	6802      	ldr	r2, [r0, #0]
 800bd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bda4:	e7f7      	b.n	800bd96 <_Balloc+0x66>
 800bda6:	bf00      	nop
 800bda8:	0807a51d 	.word	0x0807a51d
 800bdac:	0807a604 	.word	0x0807a604

0800bdb0 <_Bfree>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Bfree+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7ff ffa2 	bl	800bd04 <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	6268      	str	r0, [r5, #36]	; 0x24
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Bfree+0x20>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <_Bfree+0x3c>)
 800bdc8:	4809      	ldr	r0, [pc, #36]	; (800bdf0 <_Bfree+0x40>)
 800bdca:	218a      	movs	r1, #138	; 0x8a
 800bdcc:	f000 fe68 	bl	800caa0 <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	b13c      	cbz	r4, 800bdea <_Bfree+0x3a>
 800bdda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bddc:	6862      	ldr	r2, [r4, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bde4:	6021      	str	r1, [r4, #0]
 800bde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
 800bdec:	0807a51d 	.word	0x0807a51d
 800bdf0:	0807a604 	.word	0x0807a604

0800bdf4 <__multadd>:
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	690e      	ldr	r6, [r1, #16]
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	4698      	mov	r8, r3
 800bdfe:	460c      	mov	r4, r1
 800be00:	f101 0014 	add.w	r0, r1, #20
 800be04:	2300      	movs	r3, #0
 800be06:	6805      	ldr	r5, [r0, #0]
 800be08:	b2a9      	uxth	r1, r5
 800be0a:	fb02 8101 	mla	r1, r2, r1, r8
 800be0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800be12:	0c2d      	lsrs	r5, r5, #16
 800be14:	fb02 c505 	mla	r5, r2, r5, ip
 800be18:	b289      	uxth	r1, r1
 800be1a:	3301      	adds	r3, #1
 800be1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800be20:	429e      	cmp	r6, r3
 800be22:	f840 1b04 	str.w	r1, [r0], #4
 800be26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800be2a:	dcec      	bgt.n	800be06 <__multadd+0x12>
 800be2c:	f1b8 0f00 	cmp.w	r8, #0
 800be30:	d022      	beq.n	800be78 <__multadd+0x84>
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	42b3      	cmp	r3, r6
 800be36:	dc19      	bgt.n	800be6c <__multadd+0x78>
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	4638      	mov	r0, r7
 800be3c:	3101      	adds	r1, #1
 800be3e:	f7ff ff77 	bl	800bd30 <_Balloc>
 800be42:	4605      	mov	r5, r0
 800be44:	b928      	cbnz	r0, 800be52 <__multadd+0x5e>
 800be46:	4602      	mov	r2, r0
 800be48:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <__multadd+0x8c>)
 800be4a:	480e      	ldr	r0, [pc, #56]	; (800be84 <__multadd+0x90>)
 800be4c:	21b5      	movs	r1, #181	; 0xb5
 800be4e:	f000 fe27 	bl	800caa0 <__assert_func>
 800be52:	6922      	ldr	r2, [r4, #16]
 800be54:	3202      	adds	r2, #2
 800be56:	f104 010c 	add.w	r1, r4, #12
 800be5a:	0092      	lsls	r2, r2, #2
 800be5c:	300c      	adds	r0, #12
 800be5e:	f7ff ff59 	bl	800bd14 <memcpy>
 800be62:	4621      	mov	r1, r4
 800be64:	4638      	mov	r0, r7
 800be66:	f7ff ffa3 	bl	800bdb0 <_Bfree>
 800be6a:	462c      	mov	r4, r5
 800be6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800be70:	3601      	adds	r6, #1
 800be72:	f8c3 8014 	str.w	r8, [r3, #20]
 800be76:	6126      	str	r6, [r4, #16]
 800be78:	4620      	mov	r0, r4
 800be7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7e:	bf00      	nop
 800be80:	0807a593 	.word	0x0807a593
 800be84:	0807a604 	.word	0x0807a604

0800be88 <__hi0bits>:
 800be88:	0c03      	lsrs	r3, r0, #16
 800be8a:	041b      	lsls	r3, r3, #16
 800be8c:	b9d3      	cbnz	r3, 800bec4 <__hi0bits+0x3c>
 800be8e:	0400      	lsls	r0, r0, #16
 800be90:	2310      	movs	r3, #16
 800be92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be96:	bf04      	itt	eq
 800be98:	0200      	lsleq	r0, r0, #8
 800be9a:	3308      	addeq	r3, #8
 800be9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bea0:	bf04      	itt	eq
 800bea2:	0100      	lsleq	r0, r0, #4
 800bea4:	3304      	addeq	r3, #4
 800bea6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800beaa:	bf04      	itt	eq
 800beac:	0080      	lsleq	r0, r0, #2
 800beae:	3302      	addeq	r3, #2
 800beb0:	2800      	cmp	r0, #0
 800beb2:	db05      	blt.n	800bec0 <__hi0bits+0x38>
 800beb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800beb8:	f103 0301 	add.w	r3, r3, #1
 800bebc:	bf08      	it	eq
 800bebe:	2320      	moveq	r3, #32
 800bec0:	4618      	mov	r0, r3
 800bec2:	4770      	bx	lr
 800bec4:	2300      	movs	r3, #0
 800bec6:	e7e4      	b.n	800be92 <__hi0bits+0xa>

0800bec8 <__lo0bits>:
 800bec8:	6803      	ldr	r3, [r0, #0]
 800beca:	f013 0207 	ands.w	r2, r3, #7
 800bece:	4601      	mov	r1, r0
 800bed0:	d00b      	beq.n	800beea <__lo0bits+0x22>
 800bed2:	07da      	lsls	r2, r3, #31
 800bed4:	d424      	bmi.n	800bf20 <__lo0bits+0x58>
 800bed6:	0798      	lsls	r0, r3, #30
 800bed8:	bf49      	itett	mi
 800beda:	085b      	lsrmi	r3, r3, #1
 800bedc:	089b      	lsrpl	r3, r3, #2
 800bede:	2001      	movmi	r0, #1
 800bee0:	600b      	strmi	r3, [r1, #0]
 800bee2:	bf5c      	itt	pl
 800bee4:	600b      	strpl	r3, [r1, #0]
 800bee6:	2002      	movpl	r0, #2
 800bee8:	4770      	bx	lr
 800beea:	b298      	uxth	r0, r3
 800beec:	b9b0      	cbnz	r0, 800bf1c <__lo0bits+0x54>
 800beee:	0c1b      	lsrs	r3, r3, #16
 800bef0:	2010      	movs	r0, #16
 800bef2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bef6:	bf04      	itt	eq
 800bef8:	0a1b      	lsreq	r3, r3, #8
 800befa:	3008      	addeq	r0, #8
 800befc:	071a      	lsls	r2, r3, #28
 800befe:	bf04      	itt	eq
 800bf00:	091b      	lsreq	r3, r3, #4
 800bf02:	3004      	addeq	r0, #4
 800bf04:	079a      	lsls	r2, r3, #30
 800bf06:	bf04      	itt	eq
 800bf08:	089b      	lsreq	r3, r3, #2
 800bf0a:	3002      	addeq	r0, #2
 800bf0c:	07da      	lsls	r2, r3, #31
 800bf0e:	d403      	bmi.n	800bf18 <__lo0bits+0x50>
 800bf10:	085b      	lsrs	r3, r3, #1
 800bf12:	f100 0001 	add.w	r0, r0, #1
 800bf16:	d005      	beq.n	800bf24 <__lo0bits+0x5c>
 800bf18:	600b      	str	r3, [r1, #0]
 800bf1a:	4770      	bx	lr
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	e7e8      	b.n	800bef2 <__lo0bits+0x2a>
 800bf20:	2000      	movs	r0, #0
 800bf22:	4770      	bx	lr
 800bf24:	2020      	movs	r0, #32
 800bf26:	4770      	bx	lr

0800bf28 <__i2b>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	f7ff feff 	bl	800bd30 <_Balloc>
 800bf32:	4602      	mov	r2, r0
 800bf34:	b928      	cbnz	r0, 800bf42 <__i2b+0x1a>
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <__i2b+0x24>)
 800bf38:	4805      	ldr	r0, [pc, #20]	; (800bf50 <__i2b+0x28>)
 800bf3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf3e:	f000 fdaf 	bl	800caa0 <__assert_func>
 800bf42:	2301      	movs	r3, #1
 800bf44:	6144      	str	r4, [r0, #20]
 800bf46:	6103      	str	r3, [r0, #16]
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0807a593 	.word	0x0807a593
 800bf50:	0807a604 	.word	0x0807a604

0800bf54 <__multiply>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	4614      	mov	r4, r2
 800bf5a:	690a      	ldr	r2, [r1, #16]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	bfb8      	it	lt
 800bf62:	460b      	movlt	r3, r1
 800bf64:	460d      	mov	r5, r1
 800bf66:	bfbc      	itt	lt
 800bf68:	4625      	movlt	r5, r4
 800bf6a:	461c      	movlt	r4, r3
 800bf6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bf70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf74:	68ab      	ldr	r3, [r5, #8]
 800bf76:	6869      	ldr	r1, [r5, #4]
 800bf78:	eb0a 0709 	add.w	r7, sl, r9
 800bf7c:	42bb      	cmp	r3, r7
 800bf7e:	b085      	sub	sp, #20
 800bf80:	bfb8      	it	lt
 800bf82:	3101      	addlt	r1, #1
 800bf84:	f7ff fed4 	bl	800bd30 <_Balloc>
 800bf88:	b930      	cbnz	r0, 800bf98 <__multiply+0x44>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	4b42      	ldr	r3, [pc, #264]	; (800c098 <__multiply+0x144>)
 800bf8e:	4843      	ldr	r0, [pc, #268]	; (800c09c <__multiply+0x148>)
 800bf90:	f240 115d 	movw	r1, #349	; 0x15d
 800bf94:	f000 fd84 	bl	800caa0 <__assert_func>
 800bf98:	f100 0614 	add.w	r6, r0, #20
 800bf9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bfa0:	4633      	mov	r3, r6
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4543      	cmp	r3, r8
 800bfa6:	d31e      	bcc.n	800bfe6 <__multiply+0x92>
 800bfa8:	f105 0c14 	add.w	ip, r5, #20
 800bfac:	f104 0314 	add.w	r3, r4, #20
 800bfb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bfb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bfb8:	9202      	str	r2, [sp, #8]
 800bfba:	ebac 0205 	sub.w	r2, ip, r5
 800bfbe:	3a15      	subs	r2, #21
 800bfc0:	f022 0203 	bic.w	r2, r2, #3
 800bfc4:	3204      	adds	r2, #4
 800bfc6:	f105 0115 	add.w	r1, r5, #21
 800bfca:	458c      	cmp	ip, r1
 800bfcc:	bf38      	it	cc
 800bfce:	2204      	movcc	r2, #4
 800bfd0:	9201      	str	r2, [sp, #4]
 800bfd2:	9a02      	ldr	r2, [sp, #8]
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d808      	bhi.n	800bfec <__multiply+0x98>
 800bfda:	2f00      	cmp	r7, #0
 800bfdc:	dc55      	bgt.n	800c08a <__multiply+0x136>
 800bfde:	6107      	str	r7, [r0, #16]
 800bfe0:	b005      	add	sp, #20
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	f843 2b04 	str.w	r2, [r3], #4
 800bfea:	e7db      	b.n	800bfa4 <__multiply+0x50>
 800bfec:	f8b3 a000 	ldrh.w	sl, [r3]
 800bff0:	f1ba 0f00 	cmp.w	sl, #0
 800bff4:	d020      	beq.n	800c038 <__multiply+0xe4>
 800bff6:	f105 0e14 	add.w	lr, r5, #20
 800bffa:	46b1      	mov	r9, r6
 800bffc:	2200      	movs	r2, #0
 800bffe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c002:	f8d9 b000 	ldr.w	fp, [r9]
 800c006:	b2a1      	uxth	r1, r4
 800c008:	fa1f fb8b 	uxth.w	fp, fp
 800c00c:	fb0a b101 	mla	r1, sl, r1, fp
 800c010:	4411      	add	r1, r2
 800c012:	f8d9 2000 	ldr.w	r2, [r9]
 800c016:	0c24      	lsrs	r4, r4, #16
 800c018:	0c12      	lsrs	r2, r2, #16
 800c01a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c01e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c022:	b289      	uxth	r1, r1
 800c024:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c028:	45f4      	cmp	ip, lr
 800c02a:	f849 1b04 	str.w	r1, [r9], #4
 800c02e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c032:	d8e4      	bhi.n	800bffe <__multiply+0xaa>
 800c034:	9901      	ldr	r1, [sp, #4]
 800c036:	5072      	str	r2, [r6, r1]
 800c038:	9a03      	ldr	r2, [sp, #12]
 800c03a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c03e:	3304      	adds	r3, #4
 800c040:	f1b9 0f00 	cmp.w	r9, #0
 800c044:	d01f      	beq.n	800c086 <__multiply+0x132>
 800c046:	6834      	ldr	r4, [r6, #0]
 800c048:	f105 0114 	add.w	r1, r5, #20
 800c04c:	46b6      	mov	lr, r6
 800c04e:	f04f 0a00 	mov.w	sl, #0
 800c052:	880a      	ldrh	r2, [r1, #0]
 800c054:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c058:	fb09 b202 	mla	r2, r9, r2, fp
 800c05c:	4492      	add	sl, r2
 800c05e:	b2a4      	uxth	r4, r4
 800c060:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c064:	f84e 4b04 	str.w	r4, [lr], #4
 800c068:	f851 4b04 	ldr.w	r4, [r1], #4
 800c06c:	f8be 2000 	ldrh.w	r2, [lr]
 800c070:	0c24      	lsrs	r4, r4, #16
 800c072:	fb09 2404 	mla	r4, r9, r4, r2
 800c076:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c07a:	458c      	cmp	ip, r1
 800c07c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c080:	d8e7      	bhi.n	800c052 <__multiply+0xfe>
 800c082:	9a01      	ldr	r2, [sp, #4]
 800c084:	50b4      	str	r4, [r6, r2]
 800c086:	3604      	adds	r6, #4
 800c088:	e7a3      	b.n	800bfd2 <__multiply+0x7e>
 800c08a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1a5      	bne.n	800bfde <__multiply+0x8a>
 800c092:	3f01      	subs	r7, #1
 800c094:	e7a1      	b.n	800bfda <__multiply+0x86>
 800c096:	bf00      	nop
 800c098:	0807a593 	.word	0x0807a593
 800c09c:	0807a604 	.word	0x0807a604

0800c0a0 <__pow5mult>:
 800c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4615      	mov	r5, r2
 800c0a6:	f012 0203 	ands.w	r2, r2, #3
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	460f      	mov	r7, r1
 800c0ae:	d007      	beq.n	800c0c0 <__pow5mult+0x20>
 800c0b0:	4c25      	ldr	r4, [pc, #148]	; (800c148 <__pow5mult+0xa8>)
 800c0b2:	3a01      	subs	r2, #1
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0ba:	f7ff fe9b 	bl	800bdf4 <__multadd>
 800c0be:	4607      	mov	r7, r0
 800c0c0:	10ad      	asrs	r5, r5, #2
 800c0c2:	d03d      	beq.n	800c140 <__pow5mult+0xa0>
 800c0c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0c6:	b97c      	cbnz	r4, 800c0e8 <__pow5mult+0x48>
 800c0c8:	2010      	movs	r0, #16
 800c0ca:	f7ff fe1b 	bl	800bd04 <malloc>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	6270      	str	r0, [r6, #36]	; 0x24
 800c0d2:	b928      	cbnz	r0, 800c0e0 <__pow5mult+0x40>
 800c0d4:	4b1d      	ldr	r3, [pc, #116]	; (800c14c <__pow5mult+0xac>)
 800c0d6:	481e      	ldr	r0, [pc, #120]	; (800c150 <__pow5mult+0xb0>)
 800c0d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0dc:	f000 fce0 	bl	800caa0 <__assert_func>
 800c0e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0e4:	6004      	str	r4, [r0, #0]
 800c0e6:	60c4      	str	r4, [r0, #12]
 800c0e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c0ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0f0:	b94c      	cbnz	r4, 800c106 <__pow5mult+0x66>
 800c0f2:	f240 2171 	movw	r1, #625	; 0x271
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7ff ff16 	bl	800bf28 <__i2b>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c102:	4604      	mov	r4, r0
 800c104:	6003      	str	r3, [r0, #0]
 800c106:	f04f 0900 	mov.w	r9, #0
 800c10a:	07eb      	lsls	r3, r5, #31
 800c10c:	d50a      	bpl.n	800c124 <__pow5mult+0x84>
 800c10e:	4639      	mov	r1, r7
 800c110:	4622      	mov	r2, r4
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ff1e 	bl	800bf54 <__multiply>
 800c118:	4639      	mov	r1, r7
 800c11a:	4680      	mov	r8, r0
 800c11c:	4630      	mov	r0, r6
 800c11e:	f7ff fe47 	bl	800bdb0 <_Bfree>
 800c122:	4647      	mov	r7, r8
 800c124:	106d      	asrs	r5, r5, #1
 800c126:	d00b      	beq.n	800c140 <__pow5mult+0xa0>
 800c128:	6820      	ldr	r0, [r4, #0]
 800c12a:	b938      	cbnz	r0, 800c13c <__pow5mult+0x9c>
 800c12c:	4622      	mov	r2, r4
 800c12e:	4621      	mov	r1, r4
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff ff0f 	bl	800bf54 <__multiply>
 800c136:	6020      	str	r0, [r4, #0]
 800c138:	f8c0 9000 	str.w	r9, [r0]
 800c13c:	4604      	mov	r4, r0
 800c13e:	e7e4      	b.n	800c10a <__pow5mult+0x6a>
 800c140:	4638      	mov	r0, r7
 800c142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c146:	bf00      	nop
 800c148:	0807a758 	.word	0x0807a758
 800c14c:	0807a51d 	.word	0x0807a51d
 800c150:	0807a604 	.word	0x0807a604

0800c154 <__lshift>:
 800c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	460c      	mov	r4, r1
 800c15a:	6849      	ldr	r1, [r1, #4]
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	4607      	mov	r7, r0
 800c166:	4691      	mov	r9, r2
 800c168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c16c:	f108 0601 	add.w	r6, r8, #1
 800c170:	42b3      	cmp	r3, r6
 800c172:	db0b      	blt.n	800c18c <__lshift+0x38>
 800c174:	4638      	mov	r0, r7
 800c176:	f7ff fddb 	bl	800bd30 <_Balloc>
 800c17a:	4605      	mov	r5, r0
 800c17c:	b948      	cbnz	r0, 800c192 <__lshift+0x3e>
 800c17e:	4602      	mov	r2, r0
 800c180:	4b28      	ldr	r3, [pc, #160]	; (800c224 <__lshift+0xd0>)
 800c182:	4829      	ldr	r0, [pc, #164]	; (800c228 <__lshift+0xd4>)
 800c184:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c188:	f000 fc8a 	bl	800caa0 <__assert_func>
 800c18c:	3101      	adds	r1, #1
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	e7ee      	b.n	800c170 <__lshift+0x1c>
 800c192:	2300      	movs	r3, #0
 800c194:	f100 0114 	add.w	r1, r0, #20
 800c198:	f100 0210 	add.w	r2, r0, #16
 800c19c:	4618      	mov	r0, r3
 800c19e:	4553      	cmp	r3, sl
 800c1a0:	db33      	blt.n	800c20a <__lshift+0xb6>
 800c1a2:	6920      	ldr	r0, [r4, #16]
 800c1a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1a8:	f104 0314 	add.w	r3, r4, #20
 800c1ac:	f019 091f 	ands.w	r9, r9, #31
 800c1b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1b8:	d02b      	beq.n	800c212 <__lshift+0xbe>
 800c1ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c1be:	468a      	mov	sl, r1
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c1c8:	4302      	orrs	r2, r0
 800c1ca:	f84a 2b04 	str.w	r2, [sl], #4
 800c1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d2:	459c      	cmp	ip, r3
 800c1d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1d8:	d8f3      	bhi.n	800c1c2 <__lshift+0x6e>
 800c1da:	ebac 0304 	sub.w	r3, ip, r4
 800c1de:	3b15      	subs	r3, #21
 800c1e0:	f023 0303 	bic.w	r3, r3, #3
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	f104 0015 	add.w	r0, r4, #21
 800c1ea:	4584      	cmp	ip, r0
 800c1ec:	bf38      	it	cc
 800c1ee:	2304      	movcc	r3, #4
 800c1f0:	50ca      	str	r2, [r1, r3]
 800c1f2:	b10a      	cbz	r2, 800c1f8 <__lshift+0xa4>
 800c1f4:	f108 0602 	add.w	r6, r8, #2
 800c1f8:	3e01      	subs	r6, #1
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	612e      	str	r6, [r5, #16]
 800c1fe:	4621      	mov	r1, r4
 800c200:	f7ff fdd6 	bl	800bdb0 <_Bfree>
 800c204:	4628      	mov	r0, r5
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c20e:	3301      	adds	r3, #1
 800c210:	e7c5      	b.n	800c19e <__lshift+0x4a>
 800c212:	3904      	subs	r1, #4
 800c214:	f853 2b04 	ldr.w	r2, [r3], #4
 800c218:	f841 2f04 	str.w	r2, [r1, #4]!
 800c21c:	459c      	cmp	ip, r3
 800c21e:	d8f9      	bhi.n	800c214 <__lshift+0xc0>
 800c220:	e7ea      	b.n	800c1f8 <__lshift+0xa4>
 800c222:	bf00      	nop
 800c224:	0807a593 	.word	0x0807a593
 800c228:	0807a604 	.word	0x0807a604

0800c22c <__mcmp>:
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	6902      	ldr	r2, [r0, #16]
 800c230:	690c      	ldr	r4, [r1, #16]
 800c232:	1b12      	subs	r2, r2, r4
 800c234:	d10e      	bne.n	800c254 <__mcmp+0x28>
 800c236:	f100 0314 	add.w	r3, r0, #20
 800c23a:	3114      	adds	r1, #20
 800c23c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c24c:	42a5      	cmp	r5, r4
 800c24e:	d003      	beq.n	800c258 <__mcmp+0x2c>
 800c250:	d305      	bcc.n	800c25e <__mcmp+0x32>
 800c252:	2201      	movs	r2, #1
 800c254:	4610      	mov	r0, r2
 800c256:	bd30      	pop	{r4, r5, pc}
 800c258:	4283      	cmp	r3, r0
 800c25a:	d3f3      	bcc.n	800c244 <__mcmp+0x18>
 800c25c:	e7fa      	b.n	800c254 <__mcmp+0x28>
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	e7f7      	b.n	800c254 <__mcmp+0x28>

0800c264 <__mdiff>:
 800c264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	460c      	mov	r4, r1
 800c26a:	4606      	mov	r6, r0
 800c26c:	4611      	mov	r1, r2
 800c26e:	4620      	mov	r0, r4
 800c270:	4617      	mov	r7, r2
 800c272:	f7ff ffdb 	bl	800c22c <__mcmp>
 800c276:	1e05      	subs	r5, r0, #0
 800c278:	d110      	bne.n	800c29c <__mdiff+0x38>
 800c27a:	4629      	mov	r1, r5
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff fd57 	bl	800bd30 <_Balloc>
 800c282:	b930      	cbnz	r0, 800c292 <__mdiff+0x2e>
 800c284:	4b39      	ldr	r3, [pc, #228]	; (800c36c <__mdiff+0x108>)
 800c286:	4602      	mov	r2, r0
 800c288:	f240 2132 	movw	r1, #562	; 0x232
 800c28c:	4838      	ldr	r0, [pc, #224]	; (800c370 <__mdiff+0x10c>)
 800c28e:	f000 fc07 	bl	800caa0 <__assert_func>
 800c292:	2301      	movs	r3, #1
 800c294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29c:	bfa4      	itt	ge
 800c29e:	463b      	movge	r3, r7
 800c2a0:	4627      	movge	r7, r4
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	bfa6      	itte	ge
 800c2a8:	461c      	movge	r4, r3
 800c2aa:	2500      	movge	r5, #0
 800c2ac:	2501      	movlt	r5, #1
 800c2ae:	f7ff fd3f 	bl	800bd30 <_Balloc>
 800c2b2:	b920      	cbnz	r0, 800c2be <__mdiff+0x5a>
 800c2b4:	4b2d      	ldr	r3, [pc, #180]	; (800c36c <__mdiff+0x108>)
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2bc:	e7e6      	b.n	800c28c <__mdiff+0x28>
 800c2be:	693e      	ldr	r6, [r7, #16]
 800c2c0:	60c5      	str	r5, [r0, #12]
 800c2c2:	6925      	ldr	r5, [r4, #16]
 800c2c4:	f107 0114 	add.w	r1, r7, #20
 800c2c8:	f104 0914 	add.w	r9, r4, #20
 800c2cc:	f100 0e14 	add.w	lr, r0, #20
 800c2d0:	f107 0210 	add.w	r2, r7, #16
 800c2d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c2d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c2dc:	46f2      	mov	sl, lr
 800c2de:	2700      	movs	r7, #0
 800c2e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2e8:	fa1f f883 	uxth.w	r8, r3
 800c2ec:	fa17 f78b 	uxtah	r7, r7, fp
 800c2f0:	0c1b      	lsrs	r3, r3, #16
 800c2f2:	eba7 0808 	sub.w	r8, r7, r8
 800c2f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2fe:	fa1f f888 	uxth.w	r8, r8
 800c302:	141f      	asrs	r7, r3, #16
 800c304:	454d      	cmp	r5, r9
 800c306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c30a:	f84a 3b04 	str.w	r3, [sl], #4
 800c30e:	d8e7      	bhi.n	800c2e0 <__mdiff+0x7c>
 800c310:	1b2b      	subs	r3, r5, r4
 800c312:	3b15      	subs	r3, #21
 800c314:	f023 0303 	bic.w	r3, r3, #3
 800c318:	3304      	adds	r3, #4
 800c31a:	3415      	adds	r4, #21
 800c31c:	42a5      	cmp	r5, r4
 800c31e:	bf38      	it	cc
 800c320:	2304      	movcc	r3, #4
 800c322:	4419      	add	r1, r3
 800c324:	4473      	add	r3, lr
 800c326:	469e      	mov	lr, r3
 800c328:	460d      	mov	r5, r1
 800c32a:	4565      	cmp	r5, ip
 800c32c:	d30e      	bcc.n	800c34c <__mdiff+0xe8>
 800c32e:	f10c 0203 	add.w	r2, ip, #3
 800c332:	1a52      	subs	r2, r2, r1
 800c334:	f022 0203 	bic.w	r2, r2, #3
 800c338:	3903      	subs	r1, #3
 800c33a:	458c      	cmp	ip, r1
 800c33c:	bf38      	it	cc
 800c33e:	2200      	movcc	r2, #0
 800c340:	441a      	add	r2, r3
 800c342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c346:	b17b      	cbz	r3, 800c368 <__mdiff+0x104>
 800c348:	6106      	str	r6, [r0, #16]
 800c34a:	e7a5      	b.n	800c298 <__mdiff+0x34>
 800c34c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c350:	fa17 f488 	uxtah	r4, r7, r8
 800c354:	1422      	asrs	r2, r4, #16
 800c356:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c35a:	b2a4      	uxth	r4, r4
 800c35c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c360:	f84e 4b04 	str.w	r4, [lr], #4
 800c364:	1417      	asrs	r7, r2, #16
 800c366:	e7e0      	b.n	800c32a <__mdiff+0xc6>
 800c368:	3e01      	subs	r6, #1
 800c36a:	e7ea      	b.n	800c342 <__mdiff+0xde>
 800c36c:	0807a593 	.word	0x0807a593
 800c370:	0807a604 	.word	0x0807a604

0800c374 <__d2b>:
 800c374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c378:	4689      	mov	r9, r1
 800c37a:	2101      	movs	r1, #1
 800c37c:	ec57 6b10 	vmov	r6, r7, d0
 800c380:	4690      	mov	r8, r2
 800c382:	f7ff fcd5 	bl	800bd30 <_Balloc>
 800c386:	4604      	mov	r4, r0
 800c388:	b930      	cbnz	r0, 800c398 <__d2b+0x24>
 800c38a:	4602      	mov	r2, r0
 800c38c:	4b25      	ldr	r3, [pc, #148]	; (800c424 <__d2b+0xb0>)
 800c38e:	4826      	ldr	r0, [pc, #152]	; (800c428 <__d2b+0xb4>)
 800c390:	f240 310a 	movw	r1, #778	; 0x30a
 800c394:	f000 fb84 	bl	800caa0 <__assert_func>
 800c398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c39c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3a0:	bb35      	cbnz	r5, 800c3f0 <__d2b+0x7c>
 800c3a2:	2e00      	cmp	r6, #0
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	d028      	beq.n	800c3fa <__d2b+0x86>
 800c3a8:	4668      	mov	r0, sp
 800c3aa:	9600      	str	r6, [sp, #0]
 800c3ac:	f7ff fd8c 	bl	800bec8 <__lo0bits>
 800c3b0:	9900      	ldr	r1, [sp, #0]
 800c3b2:	b300      	cbz	r0, 800c3f6 <__d2b+0x82>
 800c3b4:	9a01      	ldr	r2, [sp, #4]
 800c3b6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c3be:	430b      	orrs	r3, r1
 800c3c0:	40c2      	lsrs	r2, r0
 800c3c2:	6163      	str	r3, [r4, #20]
 800c3c4:	9201      	str	r2, [sp, #4]
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	61a3      	str	r3, [r4, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bf14      	ite	ne
 800c3ce:	2202      	movne	r2, #2
 800c3d0:	2201      	moveq	r2, #1
 800c3d2:	6122      	str	r2, [r4, #16]
 800c3d4:	b1d5      	cbz	r5, 800c40c <__d2b+0x98>
 800c3d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3da:	4405      	add	r5, r0
 800c3dc:	f8c9 5000 	str.w	r5, [r9]
 800c3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3e4:	f8c8 0000 	str.w	r0, [r8]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	b003      	add	sp, #12
 800c3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3f4:	e7d5      	b.n	800c3a2 <__d2b+0x2e>
 800c3f6:	6161      	str	r1, [r4, #20]
 800c3f8:	e7e5      	b.n	800c3c6 <__d2b+0x52>
 800c3fa:	a801      	add	r0, sp, #4
 800c3fc:	f7ff fd64 	bl	800bec8 <__lo0bits>
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	6163      	str	r3, [r4, #20]
 800c404:	2201      	movs	r2, #1
 800c406:	6122      	str	r2, [r4, #16]
 800c408:	3020      	adds	r0, #32
 800c40a:	e7e3      	b.n	800c3d4 <__d2b+0x60>
 800c40c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c414:	f8c9 0000 	str.w	r0, [r9]
 800c418:	6918      	ldr	r0, [r3, #16]
 800c41a:	f7ff fd35 	bl	800be88 <__hi0bits>
 800c41e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c422:	e7df      	b.n	800c3e4 <__d2b+0x70>
 800c424:	0807a593 	.word	0x0807a593
 800c428:	0807a604 	.word	0x0807a604

0800c42c <_calloc_r>:
 800c42c:	b513      	push	{r0, r1, r4, lr}
 800c42e:	434a      	muls	r2, r1
 800c430:	4611      	mov	r1, r2
 800c432:	9201      	str	r2, [sp, #4]
 800c434:	f000 f85a 	bl	800c4ec <_malloc_r>
 800c438:	4604      	mov	r4, r0
 800c43a:	b118      	cbz	r0, 800c444 <_calloc_r+0x18>
 800c43c:	9a01      	ldr	r2, [sp, #4]
 800c43e:	2100      	movs	r1, #0
 800c440:	f7fe f860 	bl	800a504 <memset>
 800c444:	4620      	mov	r0, r4
 800c446:	b002      	add	sp, #8
 800c448:	bd10      	pop	{r4, pc}
	...

0800c44c <_free_r>:
 800c44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c44e:	2900      	cmp	r1, #0
 800c450:	d048      	beq.n	800c4e4 <_free_r+0x98>
 800c452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c456:	9001      	str	r0, [sp, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f1a1 0404 	sub.w	r4, r1, #4
 800c45e:	bfb8      	it	lt
 800c460:	18e4      	addlt	r4, r4, r3
 800c462:	f000 fca7 	bl	800cdb4 <__malloc_lock>
 800c466:	4a20      	ldr	r2, [pc, #128]	; (800c4e8 <_free_r+0x9c>)
 800c468:	9801      	ldr	r0, [sp, #4]
 800c46a:	6813      	ldr	r3, [r2, #0]
 800c46c:	4615      	mov	r5, r2
 800c46e:	b933      	cbnz	r3, 800c47e <_free_r+0x32>
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	6014      	str	r4, [r2, #0]
 800c474:	b003      	add	sp, #12
 800c476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c47a:	f000 bca1 	b.w	800cdc0 <__malloc_unlock>
 800c47e:	42a3      	cmp	r3, r4
 800c480:	d90b      	bls.n	800c49a <_free_r+0x4e>
 800c482:	6821      	ldr	r1, [r4, #0]
 800c484:	1862      	adds	r2, r4, r1
 800c486:	4293      	cmp	r3, r2
 800c488:	bf04      	itt	eq
 800c48a:	681a      	ldreq	r2, [r3, #0]
 800c48c:	685b      	ldreq	r3, [r3, #4]
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	bf04      	itt	eq
 800c492:	1852      	addeq	r2, r2, r1
 800c494:	6022      	streq	r2, [r4, #0]
 800c496:	602c      	str	r4, [r5, #0]
 800c498:	e7ec      	b.n	800c474 <_free_r+0x28>
 800c49a:	461a      	mov	r2, r3
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	b10b      	cbz	r3, 800c4a4 <_free_r+0x58>
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	d9fa      	bls.n	800c49a <_free_r+0x4e>
 800c4a4:	6811      	ldr	r1, [r2, #0]
 800c4a6:	1855      	adds	r5, r2, r1
 800c4a8:	42a5      	cmp	r5, r4
 800c4aa:	d10b      	bne.n	800c4c4 <_free_r+0x78>
 800c4ac:	6824      	ldr	r4, [r4, #0]
 800c4ae:	4421      	add	r1, r4
 800c4b0:	1854      	adds	r4, r2, r1
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	6011      	str	r1, [r2, #0]
 800c4b6:	d1dd      	bne.n	800c474 <_free_r+0x28>
 800c4b8:	681c      	ldr	r4, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	6053      	str	r3, [r2, #4]
 800c4be:	4421      	add	r1, r4
 800c4c0:	6011      	str	r1, [r2, #0]
 800c4c2:	e7d7      	b.n	800c474 <_free_r+0x28>
 800c4c4:	d902      	bls.n	800c4cc <_free_r+0x80>
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	e7d3      	b.n	800c474 <_free_r+0x28>
 800c4cc:	6825      	ldr	r5, [r4, #0]
 800c4ce:	1961      	adds	r1, r4, r5
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	bf04      	itt	eq
 800c4d4:	6819      	ldreq	r1, [r3, #0]
 800c4d6:	685b      	ldreq	r3, [r3, #4]
 800c4d8:	6063      	str	r3, [r4, #4]
 800c4da:	bf04      	itt	eq
 800c4dc:	1949      	addeq	r1, r1, r5
 800c4de:	6021      	streq	r1, [r4, #0]
 800c4e0:	6054      	str	r4, [r2, #4]
 800c4e2:	e7c7      	b.n	800c474 <_free_r+0x28>
 800c4e4:	b003      	add	sp, #12
 800c4e6:	bd30      	pop	{r4, r5, pc}
 800c4e8:	20000258 	.word	0x20000258

0800c4ec <_malloc_r>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	1ccd      	adds	r5, r1, #3
 800c4f0:	f025 0503 	bic.w	r5, r5, #3
 800c4f4:	3508      	adds	r5, #8
 800c4f6:	2d0c      	cmp	r5, #12
 800c4f8:	bf38      	it	cc
 800c4fa:	250c      	movcc	r5, #12
 800c4fc:	2d00      	cmp	r5, #0
 800c4fe:	4606      	mov	r6, r0
 800c500:	db01      	blt.n	800c506 <_malloc_r+0x1a>
 800c502:	42a9      	cmp	r1, r5
 800c504:	d903      	bls.n	800c50e <_malloc_r+0x22>
 800c506:	230c      	movs	r3, #12
 800c508:	6033      	str	r3, [r6, #0]
 800c50a:	2000      	movs	r0, #0
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c50e:	f000 fc51 	bl	800cdb4 <__malloc_lock>
 800c512:	4921      	ldr	r1, [pc, #132]	; (800c598 <_malloc_r+0xac>)
 800c514:	680a      	ldr	r2, [r1, #0]
 800c516:	4614      	mov	r4, r2
 800c518:	b99c      	cbnz	r4, 800c542 <_malloc_r+0x56>
 800c51a:	4f20      	ldr	r7, [pc, #128]	; (800c59c <_malloc_r+0xb0>)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	b923      	cbnz	r3, 800c52a <_malloc_r+0x3e>
 800c520:	4621      	mov	r1, r4
 800c522:	4630      	mov	r0, r6
 800c524:	f000 f996 	bl	800c854 <_sbrk_r>
 800c528:	6038      	str	r0, [r7, #0]
 800c52a:	4629      	mov	r1, r5
 800c52c:	4630      	mov	r0, r6
 800c52e:	f000 f991 	bl	800c854 <_sbrk_r>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d123      	bne.n	800c57e <_malloc_r+0x92>
 800c536:	230c      	movs	r3, #12
 800c538:	6033      	str	r3, [r6, #0]
 800c53a:	4630      	mov	r0, r6
 800c53c:	f000 fc40 	bl	800cdc0 <__malloc_unlock>
 800c540:	e7e3      	b.n	800c50a <_malloc_r+0x1e>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	1b5b      	subs	r3, r3, r5
 800c546:	d417      	bmi.n	800c578 <_malloc_r+0x8c>
 800c548:	2b0b      	cmp	r3, #11
 800c54a:	d903      	bls.n	800c554 <_malloc_r+0x68>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	441c      	add	r4, r3
 800c550:	6025      	str	r5, [r4, #0]
 800c552:	e004      	b.n	800c55e <_malloc_r+0x72>
 800c554:	6863      	ldr	r3, [r4, #4]
 800c556:	42a2      	cmp	r2, r4
 800c558:	bf0c      	ite	eq
 800c55a:	600b      	streq	r3, [r1, #0]
 800c55c:	6053      	strne	r3, [r2, #4]
 800c55e:	4630      	mov	r0, r6
 800c560:	f000 fc2e 	bl	800cdc0 <__malloc_unlock>
 800c564:	f104 000b 	add.w	r0, r4, #11
 800c568:	1d23      	adds	r3, r4, #4
 800c56a:	f020 0007 	bic.w	r0, r0, #7
 800c56e:	1ac2      	subs	r2, r0, r3
 800c570:	d0cc      	beq.n	800c50c <_malloc_r+0x20>
 800c572:	1a1b      	subs	r3, r3, r0
 800c574:	50a3      	str	r3, [r4, r2]
 800c576:	e7c9      	b.n	800c50c <_malloc_r+0x20>
 800c578:	4622      	mov	r2, r4
 800c57a:	6864      	ldr	r4, [r4, #4]
 800c57c:	e7cc      	b.n	800c518 <_malloc_r+0x2c>
 800c57e:	1cc4      	adds	r4, r0, #3
 800c580:	f024 0403 	bic.w	r4, r4, #3
 800c584:	42a0      	cmp	r0, r4
 800c586:	d0e3      	beq.n	800c550 <_malloc_r+0x64>
 800c588:	1a21      	subs	r1, r4, r0
 800c58a:	4630      	mov	r0, r6
 800c58c:	f000 f962 	bl	800c854 <_sbrk_r>
 800c590:	3001      	adds	r0, #1
 800c592:	d1dd      	bne.n	800c550 <_malloc_r+0x64>
 800c594:	e7cf      	b.n	800c536 <_malloc_r+0x4a>
 800c596:	bf00      	nop
 800c598:	20000258 	.word	0x20000258
 800c59c:	2000025c 	.word	0x2000025c

0800c5a0 <__sfputc_r>:
 800c5a0:	6893      	ldr	r3, [r2, #8]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	b410      	push	{r4}
 800c5a8:	6093      	str	r3, [r2, #8]
 800c5aa:	da08      	bge.n	800c5be <__sfputc_r+0x1e>
 800c5ac:	6994      	ldr	r4, [r2, #24]
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	db01      	blt.n	800c5b6 <__sfputc_r+0x16>
 800c5b2:	290a      	cmp	r1, #10
 800c5b4:	d103      	bne.n	800c5be <__sfputc_r+0x1e>
 800c5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ba:	f000 b99f 	b.w	800c8fc <__swbuf_r>
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	1c58      	adds	r0, r3, #1
 800c5c2:	6010      	str	r0, [r2, #0]
 800c5c4:	7019      	strb	r1, [r3, #0]
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <__sfputs_r>:
 800c5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	18d5      	adds	r5, r2, r3
 800c5d8:	42ac      	cmp	r4, r5
 800c5da:	d101      	bne.n	800c5e0 <__sfputs_r+0x12>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e007      	b.n	800c5f0 <__sfputs_r+0x22>
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	463a      	mov	r2, r7
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7ff ffda 	bl	800c5a0 <__sfputc_r>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d1f3      	bne.n	800c5d8 <__sfputs_r+0xa>
 800c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5f4 <_vfiprintf_r>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	b09d      	sub	sp, #116	; 0x74
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4698      	mov	r8, r3
 800c600:	4606      	mov	r6, r0
 800c602:	b118      	cbz	r0, 800c60c <_vfiprintf_r+0x18>
 800c604:	6983      	ldr	r3, [r0, #24]
 800c606:	b90b      	cbnz	r3, 800c60c <_vfiprintf_r+0x18>
 800c608:	f7ff fad6 	bl	800bbb8 <__sinit>
 800c60c:	4b89      	ldr	r3, [pc, #548]	; (800c834 <_vfiprintf_r+0x240>)
 800c60e:	429d      	cmp	r5, r3
 800c610:	d11b      	bne.n	800c64a <_vfiprintf_r+0x56>
 800c612:	6875      	ldr	r5, [r6, #4]
 800c614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c616:	07d9      	lsls	r1, r3, #31
 800c618:	d405      	bmi.n	800c626 <_vfiprintf_r+0x32>
 800c61a:	89ab      	ldrh	r3, [r5, #12]
 800c61c:	059a      	lsls	r2, r3, #22
 800c61e:	d402      	bmi.n	800c626 <_vfiprintf_r+0x32>
 800c620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c622:	f7ff fb6c 	bl	800bcfe <__retarget_lock_acquire_recursive>
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	071b      	lsls	r3, r3, #28
 800c62a:	d501      	bpl.n	800c630 <_vfiprintf_r+0x3c>
 800c62c:	692b      	ldr	r3, [r5, #16]
 800c62e:	b9eb      	cbnz	r3, 800c66c <_vfiprintf_r+0x78>
 800c630:	4629      	mov	r1, r5
 800c632:	4630      	mov	r0, r6
 800c634:	f000 f9c6 	bl	800c9c4 <__swsetup_r>
 800c638:	b1c0      	cbz	r0, 800c66c <_vfiprintf_r+0x78>
 800c63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c63c:	07dc      	lsls	r4, r3, #31
 800c63e:	d50e      	bpl.n	800c65e <_vfiprintf_r+0x6a>
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	b01d      	add	sp, #116	; 0x74
 800c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64a:	4b7b      	ldr	r3, [pc, #492]	; (800c838 <_vfiprintf_r+0x244>)
 800c64c:	429d      	cmp	r5, r3
 800c64e:	d101      	bne.n	800c654 <_vfiprintf_r+0x60>
 800c650:	68b5      	ldr	r5, [r6, #8]
 800c652:	e7df      	b.n	800c614 <_vfiprintf_r+0x20>
 800c654:	4b79      	ldr	r3, [pc, #484]	; (800c83c <_vfiprintf_r+0x248>)
 800c656:	429d      	cmp	r5, r3
 800c658:	bf08      	it	eq
 800c65a:	68f5      	ldreq	r5, [r6, #12]
 800c65c:	e7da      	b.n	800c614 <_vfiprintf_r+0x20>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	0598      	lsls	r0, r3, #22
 800c662:	d4ed      	bmi.n	800c640 <_vfiprintf_r+0x4c>
 800c664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c666:	f7ff fb4b 	bl	800bd00 <__retarget_lock_release_recursive>
 800c66a:	e7e9      	b.n	800c640 <_vfiprintf_r+0x4c>
 800c66c:	2300      	movs	r3, #0
 800c66e:	9309      	str	r3, [sp, #36]	; 0x24
 800c670:	2320      	movs	r3, #32
 800c672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c676:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67a:	2330      	movs	r3, #48	; 0x30
 800c67c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c840 <_vfiprintf_r+0x24c>
 800c680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c684:	f04f 0901 	mov.w	r9, #1
 800c688:	4623      	mov	r3, r4
 800c68a:	469a      	mov	sl, r3
 800c68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c690:	b10a      	cbz	r2, 800c696 <_vfiprintf_r+0xa2>
 800c692:	2a25      	cmp	r2, #37	; 0x25
 800c694:	d1f9      	bne.n	800c68a <_vfiprintf_r+0x96>
 800c696:	ebba 0b04 	subs.w	fp, sl, r4
 800c69a:	d00b      	beq.n	800c6b4 <_vfiprintf_r+0xc0>
 800c69c:	465b      	mov	r3, fp
 800c69e:	4622      	mov	r2, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7ff ff93 	bl	800c5ce <__sfputs_r>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	f000 80aa 	beq.w	800c802 <_vfiprintf_r+0x20e>
 800c6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b0:	445a      	add	r2, fp
 800c6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 80a2 	beq.w	800c802 <_vfiprintf_r+0x20e>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c8:	f10a 0a01 	add.w	sl, sl, #1
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d6:	4654      	mov	r4, sl
 800c6d8:	2205      	movs	r2, #5
 800c6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6de:	4858      	ldr	r0, [pc, #352]	; (800c840 <_vfiprintf_r+0x24c>)
 800c6e0:	f7f3 fdae 	bl	8000240 <memchr>
 800c6e4:	9a04      	ldr	r2, [sp, #16]
 800c6e6:	b9d8      	cbnz	r0, 800c720 <_vfiprintf_r+0x12c>
 800c6e8:	06d1      	lsls	r1, r2, #27
 800c6ea:	bf44      	itt	mi
 800c6ec:	2320      	movmi	r3, #32
 800c6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f2:	0713      	lsls	r3, r2, #28
 800c6f4:	bf44      	itt	mi
 800c6f6:	232b      	movmi	r3, #43	; 0x2b
 800c6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c700:	2b2a      	cmp	r3, #42	; 0x2a
 800c702:	d015      	beq.n	800c730 <_vfiprintf_r+0x13c>
 800c704:	9a07      	ldr	r2, [sp, #28]
 800c706:	4654      	mov	r4, sl
 800c708:	2000      	movs	r0, #0
 800c70a:	f04f 0c0a 	mov.w	ip, #10
 800c70e:	4621      	mov	r1, r4
 800c710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c714:	3b30      	subs	r3, #48	; 0x30
 800c716:	2b09      	cmp	r3, #9
 800c718:	d94e      	bls.n	800c7b8 <_vfiprintf_r+0x1c4>
 800c71a:	b1b0      	cbz	r0, 800c74a <_vfiprintf_r+0x156>
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	e014      	b.n	800c74a <_vfiprintf_r+0x156>
 800c720:	eba0 0308 	sub.w	r3, r0, r8
 800c724:	fa09 f303 	lsl.w	r3, r9, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	46a2      	mov	sl, r4
 800c72e:	e7d2      	b.n	800c6d6 <_vfiprintf_r+0xe2>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	1d19      	adds	r1, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	9103      	str	r1, [sp, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfbb      	ittet	lt
 800c73c:	425b      	neglt	r3, r3
 800c73e:	f042 0202 	orrlt.w	r2, r2, #2
 800c742:	9307      	strge	r3, [sp, #28]
 800c744:	9307      	strlt	r3, [sp, #28]
 800c746:	bfb8      	it	lt
 800c748:	9204      	strlt	r2, [sp, #16]
 800c74a:	7823      	ldrb	r3, [r4, #0]
 800c74c:	2b2e      	cmp	r3, #46	; 0x2e
 800c74e:	d10c      	bne.n	800c76a <_vfiprintf_r+0x176>
 800c750:	7863      	ldrb	r3, [r4, #1]
 800c752:	2b2a      	cmp	r3, #42	; 0x2a
 800c754:	d135      	bne.n	800c7c2 <_vfiprintf_r+0x1ce>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d1a      	adds	r2, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9203      	str	r2, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfb8      	it	lt
 800c762:	f04f 33ff 	movlt.w	r3, #4294967295
 800c766:	3402      	adds	r4, #2
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c850 <_vfiprintf_r+0x25c>
 800c76e:	7821      	ldrb	r1, [r4, #0]
 800c770:	2203      	movs	r2, #3
 800c772:	4650      	mov	r0, sl
 800c774:	f7f3 fd64 	bl	8000240 <memchr>
 800c778:	b140      	cbz	r0, 800c78c <_vfiprintf_r+0x198>
 800c77a:	2340      	movs	r3, #64	; 0x40
 800c77c:	eba0 000a 	sub.w	r0, r0, sl
 800c780:	fa03 f000 	lsl.w	r0, r3, r0
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	4303      	orrs	r3, r0
 800c788:	3401      	adds	r4, #1
 800c78a:	9304      	str	r3, [sp, #16]
 800c78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c790:	482c      	ldr	r0, [pc, #176]	; (800c844 <_vfiprintf_r+0x250>)
 800c792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c796:	2206      	movs	r2, #6
 800c798:	f7f3 fd52 	bl	8000240 <memchr>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d03f      	beq.n	800c820 <_vfiprintf_r+0x22c>
 800c7a0:	4b29      	ldr	r3, [pc, #164]	; (800c848 <_vfiprintf_r+0x254>)
 800c7a2:	bb1b      	cbnz	r3, 800c7ec <_vfiprintf_r+0x1f8>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	3307      	adds	r3, #7
 800c7a8:	f023 0307 	bic.w	r3, r3, #7
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b2:	443b      	add	r3, r7
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	e767      	b.n	800c688 <_vfiprintf_r+0x94>
 800c7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7bc:	460c      	mov	r4, r1
 800c7be:	2001      	movs	r0, #1
 800c7c0:	e7a5      	b.n	800c70e <_vfiprintf_r+0x11a>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	3401      	adds	r4, #1
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f04f 0c0a 	mov.w	ip, #10
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d4:	3a30      	subs	r2, #48	; 0x30
 800c7d6:	2a09      	cmp	r2, #9
 800c7d8:	d903      	bls.n	800c7e2 <_vfiprintf_r+0x1ee>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0c5      	beq.n	800c76a <_vfiprintf_r+0x176>
 800c7de:	9105      	str	r1, [sp, #20]
 800c7e0:	e7c3      	b.n	800c76a <_vfiprintf_r+0x176>
 800c7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e7f0      	b.n	800c7ce <_vfiprintf_r+0x1da>
 800c7ec:	ab03      	add	r3, sp, #12
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4b16      	ldr	r3, [pc, #88]	; (800c84c <_vfiprintf_r+0x258>)
 800c7f4:	a904      	add	r1, sp, #16
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7fd ff2c 	bl	800a654 <_printf_float>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	1c78      	adds	r0, r7, #1
 800c800:	d1d6      	bne.n	800c7b0 <_vfiprintf_r+0x1bc>
 800c802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c804:	07d9      	lsls	r1, r3, #31
 800c806:	d405      	bmi.n	800c814 <_vfiprintf_r+0x220>
 800c808:	89ab      	ldrh	r3, [r5, #12]
 800c80a:	059a      	lsls	r2, r3, #22
 800c80c:	d402      	bmi.n	800c814 <_vfiprintf_r+0x220>
 800c80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c810:	f7ff fa76 	bl	800bd00 <__retarget_lock_release_recursive>
 800c814:	89ab      	ldrh	r3, [r5, #12]
 800c816:	065b      	lsls	r3, r3, #25
 800c818:	f53f af12 	bmi.w	800c640 <_vfiprintf_r+0x4c>
 800c81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c81e:	e711      	b.n	800c644 <_vfiprintf_r+0x50>
 800c820:	ab03      	add	r3, sp, #12
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	462a      	mov	r2, r5
 800c826:	4b09      	ldr	r3, [pc, #36]	; (800c84c <_vfiprintf_r+0x258>)
 800c828:	a904      	add	r1, sp, #16
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7fe f9b6 	bl	800ab9c <_printf_i>
 800c830:	e7e4      	b.n	800c7fc <_vfiprintf_r+0x208>
 800c832:	bf00      	nop
 800c834:	0807a5c4 	.word	0x0807a5c4
 800c838:	0807a5e4 	.word	0x0807a5e4
 800c83c:	0807a5a4 	.word	0x0807a5a4
 800c840:	0807a764 	.word	0x0807a764
 800c844:	0807a76e 	.word	0x0807a76e
 800c848:	0800a655 	.word	0x0800a655
 800c84c:	0800c5cf 	.word	0x0800c5cf
 800c850:	0807a76a 	.word	0x0807a76a

0800c854 <_sbrk_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d06      	ldr	r5, [pc, #24]	; (800c870 <_sbrk_r+0x1c>)
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	602b      	str	r3, [r5, #0]
 800c860:	f7f5 fc9e 	bl	80021a0 <_sbrk>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	d102      	bne.n	800c86e <_sbrk_r+0x1a>
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	b103      	cbz	r3, 800c86e <_sbrk_r+0x1a>
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	20000a68 	.word	0x20000a68

0800c874 <__sread>:
 800c874:	b510      	push	{r4, lr}
 800c876:	460c      	mov	r4, r1
 800c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87c:	f000 faa6 	bl	800cdcc <_read_r>
 800c880:	2800      	cmp	r0, #0
 800c882:	bfab      	itete	ge
 800c884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c886:	89a3      	ldrhlt	r3, [r4, #12]
 800c888:	181b      	addge	r3, r3, r0
 800c88a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c88e:	bfac      	ite	ge
 800c890:	6563      	strge	r3, [r4, #84]	; 0x54
 800c892:	81a3      	strhlt	r3, [r4, #12]
 800c894:	bd10      	pop	{r4, pc}

0800c896 <__swrite>:
 800c896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	461f      	mov	r7, r3
 800c89c:	898b      	ldrh	r3, [r1, #12]
 800c89e:	05db      	lsls	r3, r3, #23
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	460c      	mov	r4, r1
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	d505      	bpl.n	800c8b4 <__swrite+0x1e>
 800c8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f000 f9f8 	bl	800cca4 <_lseek_r>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8be:	81a3      	strh	r3, [r4, #12]
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	463b      	mov	r3, r7
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	f000 b869 	b.w	800c9a0 <_write_r>

0800c8ce <__sseek>:
 800c8ce:	b510      	push	{r4, lr}
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d6:	f000 f9e5 	bl	800cca4 <_lseek_r>
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	bf15      	itete	ne
 800c8e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8ea:	81a3      	strheq	r3, [r4, #12]
 800c8ec:	bf18      	it	ne
 800c8ee:	81a3      	strhne	r3, [r4, #12]
 800c8f0:	bd10      	pop	{r4, pc}

0800c8f2 <__sclose>:
 800c8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f6:	f000 b8f1 	b.w	800cadc <_close_r>
	...

0800c8fc <__swbuf_r>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	460e      	mov	r6, r1
 800c900:	4614      	mov	r4, r2
 800c902:	4605      	mov	r5, r0
 800c904:	b118      	cbz	r0, 800c90e <__swbuf_r+0x12>
 800c906:	6983      	ldr	r3, [r0, #24]
 800c908:	b90b      	cbnz	r3, 800c90e <__swbuf_r+0x12>
 800c90a:	f7ff f955 	bl	800bbb8 <__sinit>
 800c90e:	4b21      	ldr	r3, [pc, #132]	; (800c994 <__swbuf_r+0x98>)
 800c910:	429c      	cmp	r4, r3
 800c912:	d12b      	bne.n	800c96c <__swbuf_r+0x70>
 800c914:	686c      	ldr	r4, [r5, #4]
 800c916:	69a3      	ldr	r3, [r4, #24]
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	071a      	lsls	r2, r3, #28
 800c91e:	d52f      	bpl.n	800c980 <__swbuf_r+0x84>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b36b      	cbz	r3, 800c980 <__swbuf_r+0x84>
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	1ac0      	subs	r0, r0, r3
 800c92a:	6963      	ldr	r3, [r4, #20]
 800c92c:	b2f6      	uxtb	r6, r6
 800c92e:	4283      	cmp	r3, r0
 800c930:	4637      	mov	r7, r6
 800c932:	dc04      	bgt.n	800c93e <__swbuf_r+0x42>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f966 	bl	800cc08 <_fflush_r>
 800c93c:	bb30      	cbnz	r0, 800c98c <__swbuf_r+0x90>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	3b01      	subs	r3, #1
 800c942:	60a3      	str	r3, [r4, #8]
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	701e      	strb	r6, [r3, #0]
 800c94c:	6963      	ldr	r3, [r4, #20]
 800c94e:	3001      	adds	r0, #1
 800c950:	4283      	cmp	r3, r0
 800c952:	d004      	beq.n	800c95e <__swbuf_r+0x62>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	07db      	lsls	r3, r3, #31
 800c958:	d506      	bpl.n	800c968 <__swbuf_r+0x6c>
 800c95a:	2e0a      	cmp	r6, #10
 800c95c:	d104      	bne.n	800c968 <__swbuf_r+0x6c>
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f000 f951 	bl	800cc08 <_fflush_r>
 800c966:	b988      	cbnz	r0, 800c98c <__swbuf_r+0x90>
 800c968:	4638      	mov	r0, r7
 800c96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <__swbuf_r+0x9c>)
 800c96e:	429c      	cmp	r4, r3
 800c970:	d101      	bne.n	800c976 <__swbuf_r+0x7a>
 800c972:	68ac      	ldr	r4, [r5, #8]
 800c974:	e7cf      	b.n	800c916 <__swbuf_r+0x1a>
 800c976:	4b09      	ldr	r3, [pc, #36]	; (800c99c <__swbuf_r+0xa0>)
 800c978:	429c      	cmp	r4, r3
 800c97a:	bf08      	it	eq
 800c97c:	68ec      	ldreq	r4, [r5, #12]
 800c97e:	e7ca      	b.n	800c916 <__swbuf_r+0x1a>
 800c980:	4621      	mov	r1, r4
 800c982:	4628      	mov	r0, r5
 800c984:	f000 f81e 	bl	800c9c4 <__swsetup_r>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d0cb      	beq.n	800c924 <__swbuf_r+0x28>
 800c98c:	f04f 37ff 	mov.w	r7, #4294967295
 800c990:	e7ea      	b.n	800c968 <__swbuf_r+0x6c>
 800c992:	bf00      	nop
 800c994:	0807a5c4 	.word	0x0807a5c4
 800c998:	0807a5e4 	.word	0x0807a5e4
 800c99c:	0807a5a4 	.word	0x0807a5a4

0800c9a0 <_write_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d07      	ldr	r5, [pc, #28]	; (800c9c0 <_write_r+0x20>)
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	602a      	str	r2, [r5, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7f5 fba5 	bl	80020fe <_write>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_write_r+0x1e>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_write_r+0x1e>
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	20000a68 	.word	0x20000a68

0800c9c4 <__swsetup_r>:
 800c9c4:	4b32      	ldr	r3, [pc, #200]	; (800ca90 <__swsetup_r+0xcc>)
 800c9c6:	b570      	push	{r4, r5, r6, lr}
 800c9c8:	681d      	ldr	r5, [r3, #0]
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	b125      	cbz	r5, 800c9da <__swsetup_r+0x16>
 800c9d0:	69ab      	ldr	r3, [r5, #24]
 800c9d2:	b913      	cbnz	r3, 800c9da <__swsetup_r+0x16>
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f7ff f8ef 	bl	800bbb8 <__sinit>
 800c9da:	4b2e      	ldr	r3, [pc, #184]	; (800ca94 <__swsetup_r+0xd0>)
 800c9dc:	429c      	cmp	r4, r3
 800c9de:	d10f      	bne.n	800ca00 <__swsetup_r+0x3c>
 800c9e0:	686c      	ldr	r4, [r5, #4]
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9e8:	0719      	lsls	r1, r3, #28
 800c9ea:	d42c      	bmi.n	800ca46 <__swsetup_r+0x82>
 800c9ec:	06dd      	lsls	r5, r3, #27
 800c9ee:	d411      	bmi.n	800ca14 <__swsetup_r+0x50>
 800c9f0:	2309      	movs	r3, #9
 800c9f2:	6033      	str	r3, [r6, #0]
 800c9f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fe:	e03e      	b.n	800ca7e <__swsetup_r+0xba>
 800ca00:	4b25      	ldr	r3, [pc, #148]	; (800ca98 <__swsetup_r+0xd4>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d101      	bne.n	800ca0a <__swsetup_r+0x46>
 800ca06:	68ac      	ldr	r4, [r5, #8]
 800ca08:	e7eb      	b.n	800c9e2 <__swsetup_r+0x1e>
 800ca0a:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <__swsetup_r+0xd8>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	bf08      	it	eq
 800ca10:	68ec      	ldreq	r4, [r5, #12]
 800ca12:	e7e6      	b.n	800c9e2 <__swsetup_r+0x1e>
 800ca14:	0758      	lsls	r0, r3, #29
 800ca16:	d512      	bpl.n	800ca3e <__swsetup_r+0x7a>
 800ca18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca1a:	b141      	cbz	r1, 800ca2e <__swsetup_r+0x6a>
 800ca1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca20:	4299      	cmp	r1, r3
 800ca22:	d002      	beq.n	800ca2a <__swsetup_r+0x66>
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7ff fd11 	bl	800c44c <_free_r>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	2300      	movs	r3, #0
 800ca38:	6063      	str	r3, [r4, #4]
 800ca3a:	6923      	ldr	r3, [r4, #16]
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f043 0308 	orr.w	r3, r3, #8
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	b94b      	cbnz	r3, 800ca5e <__swsetup_r+0x9a>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca54:	d003      	beq.n	800ca5e <__swsetup_r+0x9a>
 800ca56:	4621      	mov	r1, r4
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f000 f959 	bl	800cd10 <__smakebuf_r>
 800ca5e:	89a0      	ldrh	r0, [r4, #12]
 800ca60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca64:	f010 0301 	ands.w	r3, r0, #1
 800ca68:	d00a      	beq.n	800ca80 <__swsetup_r+0xbc>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60a3      	str	r3, [r4, #8]
 800ca6e:	6963      	ldr	r3, [r4, #20]
 800ca70:	425b      	negs	r3, r3
 800ca72:	61a3      	str	r3, [r4, #24]
 800ca74:	6923      	ldr	r3, [r4, #16]
 800ca76:	b943      	cbnz	r3, 800ca8a <__swsetup_r+0xc6>
 800ca78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca7c:	d1ba      	bne.n	800c9f4 <__swsetup_r+0x30>
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	0781      	lsls	r1, r0, #30
 800ca82:	bf58      	it	pl
 800ca84:	6963      	ldrpl	r3, [r4, #20]
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	e7f4      	b.n	800ca74 <__swsetup_r+0xb0>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	e7f7      	b.n	800ca7e <__swsetup_r+0xba>
 800ca8e:	bf00      	nop
 800ca90:	20000010 	.word	0x20000010
 800ca94:	0807a5c4 	.word	0x0807a5c4
 800ca98:	0807a5e4 	.word	0x0807a5e4
 800ca9c:	0807a5a4 	.word	0x0807a5a4

0800caa0 <__assert_func>:
 800caa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caa2:	4614      	mov	r4, r2
 800caa4:	461a      	mov	r2, r3
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <__assert_func+0x2c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4605      	mov	r5, r0
 800caac:	68d8      	ldr	r0, [r3, #12]
 800caae:	b14c      	cbz	r4, 800cac4 <__assert_func+0x24>
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <__assert_func+0x30>)
 800cab2:	9100      	str	r1, [sp, #0]
 800cab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cab8:	4906      	ldr	r1, [pc, #24]	; (800cad4 <__assert_func+0x34>)
 800caba:	462b      	mov	r3, r5
 800cabc:	f000 f8e0 	bl	800cc80 <fiprintf>
 800cac0:	f000 f9a3 	bl	800ce0a <abort>
 800cac4:	4b04      	ldr	r3, [pc, #16]	; (800cad8 <__assert_func+0x38>)
 800cac6:	461c      	mov	r4, r3
 800cac8:	e7f3      	b.n	800cab2 <__assert_func+0x12>
 800caca:	bf00      	nop
 800cacc:	20000010 	.word	0x20000010
 800cad0:	0807a775 	.word	0x0807a775
 800cad4:	0807a782 	.word	0x0807a782
 800cad8:	0807a7b0 	.word	0x0807a7b0

0800cadc <_close_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d06      	ldr	r5, [pc, #24]	; (800caf8 <_close_r+0x1c>)
 800cae0:	2300      	movs	r3, #0
 800cae2:	4604      	mov	r4, r0
 800cae4:	4608      	mov	r0, r1
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	f7f5 fb25 	bl	8002136 <_close>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_close_r+0x1a>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_close_r+0x1a>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20000a68 	.word	0x20000a68

0800cafc <__sflush_r>:
 800cafc:	898a      	ldrh	r2, [r1, #12]
 800cafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb02:	4605      	mov	r5, r0
 800cb04:	0710      	lsls	r0, r2, #28
 800cb06:	460c      	mov	r4, r1
 800cb08:	d458      	bmi.n	800cbbc <__sflush_r+0xc0>
 800cb0a:	684b      	ldr	r3, [r1, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dc05      	bgt.n	800cb1c <__sflush_r+0x20>
 800cb10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dc02      	bgt.n	800cb1c <__sflush_r+0x20>
 800cb16:	2000      	movs	r0, #0
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	d0f9      	beq.n	800cb16 <__sflush_r+0x1a>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb28:	682f      	ldr	r7, [r5, #0]
 800cb2a:	602b      	str	r3, [r5, #0]
 800cb2c:	d032      	beq.n	800cb94 <__sflush_r+0x98>
 800cb2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	075a      	lsls	r2, r3, #29
 800cb34:	d505      	bpl.n	800cb42 <__sflush_r+0x46>
 800cb36:	6863      	ldr	r3, [r4, #4]
 800cb38:	1ac0      	subs	r0, r0, r3
 800cb3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb3c:	b10b      	cbz	r3, 800cb42 <__sflush_r+0x46>
 800cb3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb40:	1ac0      	subs	r0, r0, r3
 800cb42:	2300      	movs	r3, #0
 800cb44:	4602      	mov	r2, r0
 800cb46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb48:	6a21      	ldr	r1, [r4, #32]
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b0      	blx	r6
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	d106      	bne.n	800cb62 <__sflush_r+0x66>
 800cb54:	6829      	ldr	r1, [r5, #0]
 800cb56:	291d      	cmp	r1, #29
 800cb58:	d82c      	bhi.n	800cbb4 <__sflush_r+0xb8>
 800cb5a:	4a2a      	ldr	r2, [pc, #168]	; (800cc04 <__sflush_r+0x108>)
 800cb5c:	40ca      	lsrs	r2, r1
 800cb5e:	07d6      	lsls	r6, r2, #31
 800cb60:	d528      	bpl.n	800cbb4 <__sflush_r+0xb8>
 800cb62:	2200      	movs	r2, #0
 800cb64:	6062      	str	r2, [r4, #4]
 800cb66:	04d9      	lsls	r1, r3, #19
 800cb68:	6922      	ldr	r2, [r4, #16]
 800cb6a:	6022      	str	r2, [r4, #0]
 800cb6c:	d504      	bpl.n	800cb78 <__sflush_r+0x7c>
 800cb6e:	1c42      	adds	r2, r0, #1
 800cb70:	d101      	bne.n	800cb76 <__sflush_r+0x7a>
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	b903      	cbnz	r3, 800cb78 <__sflush_r+0x7c>
 800cb76:	6560      	str	r0, [r4, #84]	; 0x54
 800cb78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb7a:	602f      	str	r7, [r5, #0]
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	d0ca      	beq.n	800cb16 <__sflush_r+0x1a>
 800cb80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb84:	4299      	cmp	r1, r3
 800cb86:	d002      	beq.n	800cb8e <__sflush_r+0x92>
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7ff fc5f 	bl	800c44c <_free_r>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	6360      	str	r0, [r4, #52]	; 0x34
 800cb92:	e7c1      	b.n	800cb18 <__sflush_r+0x1c>
 800cb94:	6a21      	ldr	r1, [r4, #32]
 800cb96:	2301      	movs	r3, #1
 800cb98:	4628      	mov	r0, r5
 800cb9a:	47b0      	blx	r6
 800cb9c:	1c41      	adds	r1, r0, #1
 800cb9e:	d1c7      	bne.n	800cb30 <__sflush_r+0x34>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0c4      	beq.n	800cb30 <__sflush_r+0x34>
 800cba6:	2b1d      	cmp	r3, #29
 800cba8:	d001      	beq.n	800cbae <__sflush_r+0xb2>
 800cbaa:	2b16      	cmp	r3, #22
 800cbac:	d101      	bne.n	800cbb2 <__sflush_r+0xb6>
 800cbae:	602f      	str	r7, [r5, #0]
 800cbb0:	e7b1      	b.n	800cb16 <__sflush_r+0x1a>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	e7ad      	b.n	800cb18 <__sflush_r+0x1c>
 800cbbc:	690f      	ldr	r7, [r1, #16]
 800cbbe:	2f00      	cmp	r7, #0
 800cbc0:	d0a9      	beq.n	800cb16 <__sflush_r+0x1a>
 800cbc2:	0793      	lsls	r3, r2, #30
 800cbc4:	680e      	ldr	r6, [r1, #0]
 800cbc6:	bf08      	it	eq
 800cbc8:	694b      	ldreq	r3, [r1, #20]
 800cbca:	600f      	str	r7, [r1, #0]
 800cbcc:	bf18      	it	ne
 800cbce:	2300      	movne	r3, #0
 800cbd0:	eba6 0807 	sub.w	r8, r6, r7
 800cbd4:	608b      	str	r3, [r1, #8]
 800cbd6:	f1b8 0f00 	cmp.w	r8, #0
 800cbda:	dd9c      	ble.n	800cb16 <__sflush_r+0x1a>
 800cbdc:	6a21      	ldr	r1, [r4, #32]
 800cbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbe0:	4643      	mov	r3, r8
 800cbe2:	463a      	mov	r2, r7
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b0      	blx	r6
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	dc06      	bgt.n	800cbfa <__sflush_r+0xfe>
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	e78e      	b.n	800cb18 <__sflush_r+0x1c>
 800cbfa:	4407      	add	r7, r0
 800cbfc:	eba8 0800 	sub.w	r8, r8, r0
 800cc00:	e7e9      	b.n	800cbd6 <__sflush_r+0xda>
 800cc02:	bf00      	nop
 800cc04:	20400001 	.word	0x20400001

0800cc08 <_fflush_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	690b      	ldr	r3, [r1, #16]
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	b913      	cbnz	r3, 800cc18 <_fflush_r+0x10>
 800cc12:	2500      	movs	r5, #0
 800cc14:	4628      	mov	r0, r5
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	b118      	cbz	r0, 800cc22 <_fflush_r+0x1a>
 800cc1a:	6983      	ldr	r3, [r0, #24]
 800cc1c:	b90b      	cbnz	r3, 800cc22 <_fflush_r+0x1a>
 800cc1e:	f7fe ffcb 	bl	800bbb8 <__sinit>
 800cc22:	4b14      	ldr	r3, [pc, #80]	; (800cc74 <_fflush_r+0x6c>)
 800cc24:	429c      	cmp	r4, r3
 800cc26:	d11b      	bne.n	800cc60 <_fflush_r+0x58>
 800cc28:	686c      	ldr	r4, [r5, #4]
 800cc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0ef      	beq.n	800cc12 <_fflush_r+0xa>
 800cc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc34:	07d0      	lsls	r0, r2, #31
 800cc36:	d404      	bmi.n	800cc42 <_fflush_r+0x3a>
 800cc38:	0599      	lsls	r1, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_fflush_r+0x3a>
 800cc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc3e:	f7ff f85e 	bl	800bcfe <__retarget_lock_acquire_recursive>
 800cc42:	4628      	mov	r0, r5
 800cc44:	4621      	mov	r1, r4
 800cc46:	f7ff ff59 	bl	800cafc <__sflush_r>
 800cc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc4c:	07da      	lsls	r2, r3, #31
 800cc4e:	4605      	mov	r5, r0
 800cc50:	d4e0      	bmi.n	800cc14 <_fflush_r+0xc>
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	059b      	lsls	r3, r3, #22
 800cc56:	d4dd      	bmi.n	800cc14 <_fflush_r+0xc>
 800cc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc5a:	f7ff f851 	bl	800bd00 <__retarget_lock_release_recursive>
 800cc5e:	e7d9      	b.n	800cc14 <_fflush_r+0xc>
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <_fflush_r+0x70>)
 800cc62:	429c      	cmp	r4, r3
 800cc64:	d101      	bne.n	800cc6a <_fflush_r+0x62>
 800cc66:	68ac      	ldr	r4, [r5, #8]
 800cc68:	e7df      	b.n	800cc2a <_fflush_r+0x22>
 800cc6a:	4b04      	ldr	r3, [pc, #16]	; (800cc7c <_fflush_r+0x74>)
 800cc6c:	429c      	cmp	r4, r3
 800cc6e:	bf08      	it	eq
 800cc70:	68ec      	ldreq	r4, [r5, #12]
 800cc72:	e7da      	b.n	800cc2a <_fflush_r+0x22>
 800cc74:	0807a5c4 	.word	0x0807a5c4
 800cc78:	0807a5e4 	.word	0x0807a5e4
 800cc7c:	0807a5a4 	.word	0x0807a5a4

0800cc80 <fiprintf>:
 800cc80:	b40e      	push	{r1, r2, r3}
 800cc82:	b503      	push	{r0, r1, lr}
 800cc84:	4601      	mov	r1, r0
 800cc86:	ab03      	add	r3, sp, #12
 800cc88:	4805      	ldr	r0, [pc, #20]	; (800cca0 <fiprintf+0x20>)
 800cc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8e:	6800      	ldr	r0, [r0, #0]
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	f7ff fcaf 	bl	800c5f4 <_vfiprintf_r>
 800cc96:	b002      	add	sp, #8
 800cc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc9c:	b003      	add	sp, #12
 800cc9e:	4770      	bx	lr
 800cca0:	20000010 	.word	0x20000010

0800cca4 <_lseek_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	; (800ccc4 <_lseek_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f5 fa66 	bl	8002184 <_lseek>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_lseek_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_lseek_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	20000a68 	.word	0x20000a68

0800ccc8 <__swhatbuf_r>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	460e      	mov	r6, r1
 800cccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	b096      	sub	sp, #88	; 0x58
 800ccd4:	4614      	mov	r4, r2
 800ccd6:	461d      	mov	r5, r3
 800ccd8:	da07      	bge.n	800ccea <__swhatbuf_r+0x22>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	602b      	str	r3, [r5, #0]
 800ccde:	89b3      	ldrh	r3, [r6, #12]
 800cce0:	061a      	lsls	r2, r3, #24
 800cce2:	d410      	bmi.n	800cd06 <__swhatbuf_r+0x3e>
 800cce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cce8:	e00e      	b.n	800cd08 <__swhatbuf_r+0x40>
 800ccea:	466a      	mov	r2, sp
 800ccec:	f000 f894 	bl	800ce18 <_fstat_r>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	dbf2      	blt.n	800ccda <__swhatbuf_r+0x12>
 800ccf4:	9a01      	ldr	r2, [sp, #4]
 800ccf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccfe:	425a      	negs	r2, r3
 800cd00:	415a      	adcs	r2, r3
 800cd02:	602a      	str	r2, [r5, #0]
 800cd04:	e7ee      	b.n	800cce4 <__swhatbuf_r+0x1c>
 800cd06:	2340      	movs	r3, #64	; 0x40
 800cd08:	2000      	movs	r0, #0
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	b016      	add	sp, #88	; 0x58
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}

0800cd10 <__smakebuf_r>:
 800cd10:	898b      	ldrh	r3, [r1, #12]
 800cd12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd14:	079d      	lsls	r5, r3, #30
 800cd16:	4606      	mov	r6, r0
 800cd18:	460c      	mov	r4, r1
 800cd1a:	d507      	bpl.n	800cd2c <__smakebuf_r+0x1c>
 800cd1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	6123      	str	r3, [r4, #16]
 800cd24:	2301      	movs	r3, #1
 800cd26:	6163      	str	r3, [r4, #20]
 800cd28:	b002      	add	sp, #8
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	ab01      	add	r3, sp, #4
 800cd2e:	466a      	mov	r2, sp
 800cd30:	f7ff ffca 	bl	800ccc8 <__swhatbuf_r>
 800cd34:	9900      	ldr	r1, [sp, #0]
 800cd36:	4605      	mov	r5, r0
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f7ff fbd7 	bl	800c4ec <_malloc_r>
 800cd3e:	b948      	cbnz	r0, 800cd54 <__smakebuf_r+0x44>
 800cd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd44:	059a      	lsls	r2, r3, #22
 800cd46:	d4ef      	bmi.n	800cd28 <__smakebuf_r+0x18>
 800cd48:	f023 0303 	bic.w	r3, r3, #3
 800cd4c:	f043 0302 	orr.w	r3, r3, #2
 800cd50:	81a3      	strh	r3, [r4, #12]
 800cd52:	e7e3      	b.n	800cd1c <__smakebuf_r+0xc>
 800cd54:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <__smakebuf_r+0x7c>)
 800cd56:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	6020      	str	r0, [r4, #0]
 800cd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	9b00      	ldr	r3, [sp, #0]
 800cd64:	6163      	str	r3, [r4, #20]
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	6120      	str	r0, [r4, #16]
 800cd6a:	b15b      	cbz	r3, 800cd84 <__smakebuf_r+0x74>
 800cd6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd70:	4630      	mov	r0, r6
 800cd72:	f000 f863 	bl	800ce3c <_isatty_r>
 800cd76:	b128      	cbz	r0, 800cd84 <__smakebuf_r+0x74>
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	f023 0303 	bic.w	r3, r3, #3
 800cd7e:	f043 0301 	orr.w	r3, r3, #1
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	89a0      	ldrh	r0, [r4, #12]
 800cd86:	4305      	orrs	r5, r0
 800cd88:	81a5      	strh	r5, [r4, #12]
 800cd8a:	e7cd      	b.n	800cd28 <__smakebuf_r+0x18>
 800cd8c:	0800bb51 	.word	0x0800bb51

0800cd90 <__ascii_mbtowc>:
 800cd90:	b082      	sub	sp, #8
 800cd92:	b901      	cbnz	r1, 800cd96 <__ascii_mbtowc+0x6>
 800cd94:	a901      	add	r1, sp, #4
 800cd96:	b142      	cbz	r2, 800cdaa <__ascii_mbtowc+0x1a>
 800cd98:	b14b      	cbz	r3, 800cdae <__ascii_mbtowc+0x1e>
 800cd9a:	7813      	ldrb	r3, [r2, #0]
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	7812      	ldrb	r2, [r2, #0]
 800cda0:	1e10      	subs	r0, r2, #0
 800cda2:	bf18      	it	ne
 800cda4:	2001      	movne	r0, #1
 800cda6:	b002      	add	sp, #8
 800cda8:	4770      	bx	lr
 800cdaa:	4610      	mov	r0, r2
 800cdac:	e7fb      	b.n	800cda6 <__ascii_mbtowc+0x16>
 800cdae:	f06f 0001 	mvn.w	r0, #1
 800cdb2:	e7f8      	b.n	800cda6 <__ascii_mbtowc+0x16>

0800cdb4 <__malloc_lock>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	; (800cdbc <__malloc_lock+0x8>)
 800cdb6:	f7fe bfa2 	b.w	800bcfe <__retarget_lock_acquire_recursive>
 800cdba:	bf00      	nop
 800cdbc:	20000a60 	.word	0x20000a60

0800cdc0 <__malloc_unlock>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	; (800cdc8 <__malloc_unlock+0x8>)
 800cdc2:	f7fe bf9d 	b.w	800bd00 <__retarget_lock_release_recursive>
 800cdc6:	bf00      	nop
 800cdc8:	20000a60 	.word	0x20000a60

0800cdcc <_read_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d07      	ldr	r5, [pc, #28]	; (800cdec <_read_r+0x20>)
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	4608      	mov	r0, r1
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	f7f5 f972 	bl	80020c4 <_read>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_read_r+0x1e>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_read_r+0x1e>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	20000a68 	.word	0x20000a68

0800cdf0 <__ascii_wctomb>:
 800cdf0:	b149      	cbz	r1, 800ce06 <__ascii_wctomb+0x16>
 800cdf2:	2aff      	cmp	r2, #255	; 0xff
 800cdf4:	bf85      	ittet	hi
 800cdf6:	238a      	movhi	r3, #138	; 0x8a
 800cdf8:	6003      	strhi	r3, [r0, #0]
 800cdfa:	700a      	strbls	r2, [r1, #0]
 800cdfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce00:	bf98      	it	ls
 800ce02:	2001      	movls	r0, #1
 800ce04:	4770      	bx	lr
 800ce06:	4608      	mov	r0, r1
 800ce08:	4770      	bx	lr

0800ce0a <abort>:
 800ce0a:	b508      	push	{r3, lr}
 800ce0c:	2006      	movs	r0, #6
 800ce0e:	f000 f84d 	bl	800ceac <raise>
 800ce12:	2001      	movs	r0, #1
 800ce14:	f7f5 f94c 	bl	80020b0 <_exit>

0800ce18 <_fstat_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d07      	ldr	r5, [pc, #28]	; (800ce38 <_fstat_r+0x20>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	4611      	mov	r1, r2
 800ce24:	602b      	str	r3, [r5, #0]
 800ce26:	f7f5 f992 	bl	800214e <_fstat>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	d102      	bne.n	800ce34 <_fstat_r+0x1c>
 800ce2e:	682b      	ldr	r3, [r5, #0]
 800ce30:	b103      	cbz	r3, 800ce34 <_fstat_r+0x1c>
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	bd38      	pop	{r3, r4, r5, pc}
 800ce36:	bf00      	nop
 800ce38:	20000a68 	.word	0x20000a68

0800ce3c <_isatty_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d06      	ldr	r5, [pc, #24]	; (800ce58 <_isatty_r+0x1c>)
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	f7f5 f991 	bl	800216e <_isatty>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_isatty_r+0x1a>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_isatty_r+0x1a>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20000a68 	.word	0x20000a68

0800ce5c <_raise_r>:
 800ce5c:	291f      	cmp	r1, #31
 800ce5e:	b538      	push	{r3, r4, r5, lr}
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	d904      	bls.n	800ce70 <_raise_r+0x14>
 800ce66:	2316      	movs	r3, #22
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce72:	b112      	cbz	r2, 800ce7a <_raise_r+0x1e>
 800ce74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce78:	b94b      	cbnz	r3, 800ce8e <_raise_r+0x32>
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 f830 	bl	800cee0 <_getpid_r>
 800ce80:	462a      	mov	r2, r5
 800ce82:	4601      	mov	r1, r0
 800ce84:	4620      	mov	r0, r4
 800ce86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce8a:	f000 b817 	b.w	800cebc <_kill_r>
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d00a      	beq.n	800cea8 <_raise_r+0x4c>
 800ce92:	1c59      	adds	r1, r3, #1
 800ce94:	d103      	bne.n	800ce9e <_raise_r+0x42>
 800ce96:	2316      	movs	r3, #22
 800ce98:	6003      	str	r3, [r0, #0]
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7e7      	b.n	800ce6e <_raise_r+0x12>
 800ce9e:	2400      	movs	r4, #0
 800cea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cea4:	4628      	mov	r0, r5
 800cea6:	4798      	blx	r3
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e7e0      	b.n	800ce6e <_raise_r+0x12>

0800ceac <raise>:
 800ceac:	4b02      	ldr	r3, [pc, #8]	; (800ceb8 <raise+0xc>)
 800ceae:	4601      	mov	r1, r0
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f7ff bfd3 	b.w	800ce5c <_raise_r>
 800ceb6:	bf00      	nop
 800ceb8:	20000010 	.word	0x20000010

0800cebc <_kill_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_kill_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f5 f8e1 	bl	8002090 <_kill>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_kill_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_kill_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	20000a68 	.word	0x20000a68

0800cee0 <_getpid_r>:
 800cee0:	f7f5 b8ce 	b.w	8002080 <_getpid>

0800cee4 <_init>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr

0800cef0 <_fini>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	bf00      	nop
 800cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef6:	bc08      	pop	{r3}
 800cef8:	469e      	mov	lr, r3
 800cefa:	4770      	bx	lr
