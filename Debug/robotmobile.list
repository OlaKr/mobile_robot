
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800b6b0  0800b6b0  0001b6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb44  0800bb44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb44  0800bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb4c  0800bb4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001dc  0800bd30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800bd30  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a456  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c4  00000000  00000000  0003a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025100  00000000  00000000  0003fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c02  00000000  00000000  00064f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daaf2  00000000  00000000  0007db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015864c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc4  00000000  00000000  001586a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b694 	.word	0x0800b694

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800b694 	.word	0x0800b694

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <BH1750_Init>:
BH1750_mode 		Bh1750_Mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c1;
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <BH1750_Init+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	bh1750_i2c2 = hi2c2;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <BH1750_Init+0x40>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f16:	f000 f815 	bl	8000f44 <BH1750_Reset>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <BH1750_Init+0x34>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG))	// Set default value;
 8000f20:	2046      	movs	r0, #70	; 0x46
 8000f22:	f000 f867 	bl	8000ff4 <BH1750_SetMtreg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BH1750_Init+0x30>
		{
			return BH1750_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e001      	b.n	8000f34 <BH1750_Init+0x34>
		}

		return BH1750_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e7ff      	b.n	8000f34 <BH1750_Init+0x34>
	}

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000264 	.word	0x20000264
 8000f40:	20000260 	.word	0x20000260

08000f44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <BH1750_Reset+0x38>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	230a      	movs	r3, #10
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2146      	movs	r1, #70	; 0x46
 8000f5c:	f001 ff7a 	bl	8002e54 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp, 1, 10))
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <BH1750_Reset+0x3c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2146      	movs	r1, #70	; 0x46
 8000f6e:	f001 ff71 	bl	8002e54 <HAL_I2C_Master_Transmit>
	{
		//TODO:
	}
	return BH1750_OK;
 8000f72:	2300      	movs	r3, #0
//	return BH1750_ERROR;

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000264 	.word	0x20000264
 8000f80:	20000260 	.word	0x20000260

08000f84 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_mode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <BH1750_SetMode+0x22>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e01c      	b.n	8000fe0 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <BH1750_SetMode+0x30>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e015      	b.n	8000fe0 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <BH1750_SetMode+0x64>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <BH1750_SetMode+0x68>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2146      	movs	r1, #70	; 0x46
 8000fc8:	f001 ff44 	bl	8002e54 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &Mode, 1, 10))
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BH1750_SetMode+0x6c>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2146      	movs	r1, #70	; 0x46
 8000fda:	f001 ff3b 	bl	8002e54 <HAL_I2C_Master_Transmit>
	{
		//if() return BH1750_ERROR;
	}

	return BH1750_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000025c 	.word	0x2000025c
 8000fec:	20000264 	.word	0x20000264
 8000ff0:	20000260 	.word	0x20000260

08000ff4 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode, retCode2;
	if (Mtreg < 31 || Mtreg > 254) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b1e      	cmp	r3, #30
 8001002:	d902      	bls.n	800100a <BH1750_SetMtreg+0x16>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d101      	bne.n	800100e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e056      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	Bh1750_Mtreg = Mtreg;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <BH1750_SetMtreg+0xd0>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2146      	movs	r1, #70	; 0x46
 8001046:	f001 ff05 	bl	8002e54 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[0], 1, 10);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2146      	movs	r1, #70	; 0x46
 800105e:	f001 fef9 	bl	8002e54 <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK != retCode || HAL_OK != retCode2) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <BH1750_SetMtreg+0x7e>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BH1750_SetMtreg+0x82>
		return BH1750_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e022      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BH1750_SetMtreg+0xd4>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	230a      	movs	r3, #10
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	2146      	movs	r1, #70	; 0x46
 8001088:	f001 fee4 	bl	8002e54 <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	retCode2 = HAL_I2C_Master_Transmit(bh1750_i2c2, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <BH1750_SetMtreg+0xd8>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f001 fed7 	bl	8002e54 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73bb      	strb	r3, [r7, #14]

	if (HAL_OK == retCode && HAL_OK == retCode2) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <BH1750_SetMtreg+0xc6>
		return BH1750_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <BH1750_SetMtreg+0xc8>
	}

	return BH1750_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000268 	.word	0x20000268
 80010c8:	20000264 	.word	0x20000264
 80010cc:	20000260 	.word	0x20000260

080010d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <BH1750_ReadLight+0xa0>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	230a      	movs	r3, #10
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	f001 ffb2 	bl	8003050 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	7a7a      	ldrb	r2, [r7, #9]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b46      	cmp	r3, #70	; 0x46
 800110c:	d00f      	beq.n	800112e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <BH1750_ReadLight+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001178 <BH1750_ReadLight+0xa8>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	ed97 7a03 	vldr	s14, [r7, #12]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b21      	cmp	r3, #33	; 0x21
 8001134:	d003      	beq.n	800113e <BH1750_ReadLight+0x6e>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <BH1750_ReadLight+0xac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d107      	bne.n	800114e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800114e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001152:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001180 <BH1750_ReadLight+0xb0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000264 	.word	0x20000264
 8001174:	20000268 	.word	0x20000268
 8001178:	428c0000 	.word	0x428c0000
 800117c:	2000025c 	.word	0x2000025c
 8001180:	3f99999a 	.word	0x3f99999a

08001184 <BH1750_ReadLight2>:

BH1750_STATUS BH1750_ReadLight2(float *Result)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c2, BH1750_ADDRESS, tmp, 2, 10))
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <BH1750_ReadLight2+0xa0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	230a      	movs	r3, #10
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	2146      	movs	r1, #70	; 0x46
 800119c:	f001 ff58 	bl	8003050 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d138      	bne.n	8001218 <BH1750_ReadLight2+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	7a7a      	ldrb	r2, [r7, #9]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b46      	cmp	r3, #70	; 0x46
 80011c0:	d00f      	beq.n	80011e2 <BH1750_ReadLight2+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <BH1750_ReadLight2+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800122c <BH1750_ReadLight2+0xa8>
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b21      	cmp	r3, #33	; 0x21
 80011e8:	d003      	beq.n	80011f2 <BH1750_ReadLight2+0x6e>
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BH1750_ReadLight2+0xac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d107      	bne.n	8001202 <BH1750_ReadLight2+0x7e>
		{
			result /= 2.0;
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001202:	ed97 7a03 	vldr	s14, [r7, #12]
 8001206:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001234 <BH1750_ReadLight2+0xb0>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <BH1750_ReadLight2+0x96>
	}
	return BH1750_ERROR;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000260 	.word	0x20000260
 8001228:	20000268 	.word	0x20000268
 800122c:	428c0000 	.word	0x428c0000
 8001230:	2000025c 	.word	0x2000025c
 8001234:	3f99999a 	.word	0x3f99999a

08001238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <MX_GPIO_Init+0x120>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a40      	ldr	r2, [pc, #256]	; (8001358 <MX_GPIO_Init+0x120>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <MX_GPIO_Init+0x120>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <MX_GPIO_Init+0x120>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <MX_GPIO_Init+0x120>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <MX_GPIO_Init+0x120>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_GPIO_Init+0x120>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a32      	ldr	r2, [pc, #200]	; (8001358 <MX_GPIO_Init+0x120>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <MX_GPIO_Init+0x120>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_GPIO_Init+0x120>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <MX_GPIO_Init+0x120>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_GPIO_Init+0x120>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2120      	movs	r1, #32
 80012c2:	4826      	ldr	r0, [pc, #152]	; (800135c <MX_GPIO_Init+0x124>)
 80012c4:	f001 fc68 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012ce:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_GPIO_Init+0x128>)
 80012d0:	f001 fc62 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2118      	movs	r1, #24
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <MX_GPIO_Init+0x12c>)
 80012da:	f001 fc5d 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <MX_GPIO_Init+0x128>)
 80012f4:	f001 fabc 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f8:	2320      	movs	r3, #32
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x124>)
 8001310:	f001 faae 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8001314:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_GPIO_Init+0x128>)
 800132e:	f001 fa9f 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8001332:	2318      	movs	r3, #24
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_GPIO_Init+0x12c>)
 800134a:	f001 fa91 	bl	8002870 <HAL_GPIO_Init>

}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020800 	.word	0x40020800
 8001364:	40020400 	.word	0x40020400

08001368 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f001 fc11 	bl	8002bcc <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 fb36 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000026c 	.word	0x2000026c
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f001 fbe3 	bl	8002bcc <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f000 fb08 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002c0 	.word	0x200002c0
 8001418:	40005800 	.word	0x40005800
 800141c:	000186a0 	.word	0x000186a0

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_I2C_MspInit+0x148>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d13d      	bne.n	80014be <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_I2C_MspInit+0x14c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a48      	ldr	r2, [pc, #288]	; (800156c <HAL_I2C_MspInit+0x14c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_I2C_MspInit+0x14c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800145e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001464:	2312      	movs	r3, #18
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001470:	2304      	movs	r3, #4
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	483d      	ldr	r0, [pc, #244]	; (8001570 <HAL_I2C_MspInit+0x150>)
 800147c:	f001 f9f8 	bl	8002870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_I2C_MspInit+0x14c>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_I2C_MspInit+0x14c>)
 800148a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_I2C_MspInit+0x14c>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	201f      	movs	r0, #31
 80014a2:	f001 f90e 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a6:	201f      	movs	r0, #31
 80014a8:	f001 f927 	bl	80026fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2020      	movs	r0, #32
 80014b2:	f001 f906 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014b6:	2020      	movs	r0, #32
 80014b8:	f001 f91f 	bl	80026fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014bc:	e050      	b.n	8001560 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <HAL_I2C_MspInit+0x154>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d14b      	bne.n	8001560 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_I2C_MspInit+0x14c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001506:	2312      	movs	r3, #18
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001512:	2304      	movs	r3, #4
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <HAL_I2C_MspInit+0x150>)
 800151e:	f001 f9a7 	bl	8002870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001528:	2312      	movs	r3, #18
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001534:	2304      	movs	r3, #4
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <HAL_I2C_MspInit+0x158>)
 8001540:	f001 f996 	bl	8002870 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_I2C_MspInit+0x14c>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_I2C_MspInit+0x14c>)
 800154e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_I2C_MspInit+0x14c>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40005400 	.word	0x40005400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020400 	.word	0x40020400
 8001574:	40005800 	.word	0x40005800
 8001578:	40020800 	.word	0x40020800

0800157c <__io_putchar>:
//	}
//	else return false;
//}

int __io_putchar(int sign)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d109      	bne.n	800159e <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 800158a:	230d      	movs	r3, #13
 800158c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &sign2, 1, HAL_MAX_DELAY);
 800158e:	f107 010f 	add.w	r1, r7, #15
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	2201      	movs	r2, #1
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <__io_putchar+0x3c>)
 800159a:	f006 fa20 	bl	80079de <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 800159e:	1d39      	adds	r1, r7, #4
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	2201      	movs	r2, #1
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <__io_putchar+0x3c>)
 80015a8:	f006 fa19 	bl	80079de <HAL_UART_Transmit>
	return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000480 	.word	0x20000480

080015bc <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b0d      	cmp	r3, #13
 80015ca:	d003      	beq.n	80015d4 <line_append+0x18>
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	f040 80ae 	bne.w	8001730 <line_append+0x174>
	{
		if(line_length>0)
 80015d4:	4b60      	ldr	r3, [pc, #384]	; (8001758 <line_append+0x19c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80b9 	beq.w	8001750 <line_append+0x194>
		{
			line_buffer[line_length]='\0';
 80015de:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <line_append+0x19c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5e      	ldr	r2, [pc, #376]	; (800175c <line_append+0x1a0>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	54d1      	strb	r1, [r2, r3]
			if (strcmp(line_buffer, "on")==0){
 80015e8:	495d      	ldr	r1, [pc, #372]	; (8001760 <line_append+0x1a4>)
 80015ea:	485c      	ldr	r0, [pc, #368]	; (800175c <line_append+0x1a0>)
 80015ec:	f7fe fe10 	bl	8000210 <strcmp>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <line_append+0x4e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2120      	movs	r1, #32
 80015fa:	485a      	ldr	r0, [pc, #360]	; (8001764 <line_append+0x1a8>)
 80015fc:	f001 facc 	bl	8002b98 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8001600:	4956      	ldr	r1, [pc, #344]	; (800175c <line_append+0x1a0>)
 8001602:	4859      	ldr	r0, [pc, #356]	; (8001768 <line_append+0x1ac>)
 8001604:	f007 fe02 	bl	800920c <iprintf>
 8001608:	e08e      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "off")==0){
 800160a:	4958      	ldr	r1, [pc, #352]	; (800176c <line_append+0x1b0>)
 800160c:	4853      	ldr	r0, [pc, #332]	; (800175c <line_append+0x1a0>)
 800160e:	f7fe fdff 	bl	8000210 <strcmp>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <line_append+0x70>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4851      	ldr	r0, [pc, #324]	; (8001764 <line_append+0x1a8>)
 800161e:	f001 fabb 	bl	8002b98 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8001622:	494e      	ldr	r1, [pc, #312]	; (800175c <line_append+0x1a0>)
 8001624:	4850      	ldr	r0, [pc, #320]	; (8001768 <line_append+0x1ac>)
 8001626:	f007 fdf1 	bl	800920c <iprintf>
 800162a:	e07d      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "slow")==0){
 800162c:	4950      	ldr	r1, [pc, #320]	; (8001770 <line_append+0x1b4>)
 800162e:	484b      	ldr	r0, [pc, #300]	; (800175c <line_append+0x1a0>)
 8001630:	f7fe fdee 	bl	8000210 <strcmp>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10a      	bne.n	8001650 <line_append+0x94>
				tb6612_init(CW,CW,40,40);
 800163a:	2328      	movs	r3, #40	; 0x28
 800163c:	2228      	movs	r2, #40	; 0x28
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fc1b 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 8001646:	4945      	ldr	r1, [pc, #276]	; (800175c <line_append+0x1a0>)
 8001648:	4847      	ldr	r0, [pc, #284]	; (8001768 <line_append+0x1ac>)
 800164a:	f007 fddf 	bl	800920c <iprintf>
 800164e:	e06b      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "fast")==0){
 8001650:	4948      	ldr	r1, [pc, #288]	; (8001774 <line_append+0x1b8>)
 8001652:	4842      	ldr	r0, [pc, #264]	; (800175c <line_append+0x1a0>)
 8001654:	f7fe fddc 	bl	8000210 <strcmp>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10a      	bne.n	8001674 <line_append+0xb8>
				tb6612_init(CW,CW,99,99);
 800165e:	2363      	movs	r3, #99	; 0x63
 8001660:	2263      	movs	r2, #99	; 0x63
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fc09 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 800166a:	493c      	ldr	r1, [pc, #240]	; (800175c <line_append+0x1a0>)
 800166c:	483e      	ldr	r0, [pc, #248]	; (8001768 <line_append+0x1ac>)
 800166e:	f007 fdcd 	bl	800920c <iprintf>
 8001672:	e059      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "forward")==0){
 8001674:	4940      	ldr	r1, [pc, #256]	; (8001778 <line_append+0x1bc>)
 8001676:	4839      	ldr	r0, [pc, #228]	; (800175c <line_append+0x1a0>)
 8001678:	f7fe fdca 	bl	8000210 <strcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10a      	bne.n	8001698 <line_append+0xdc>
				tb6612_init(CW,CW,99,99);
 8001682:	2363      	movs	r3, #99	; 0x63
 8001684:	2263      	movs	r2, #99	; 0x63
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fbf7 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 800168e:	4933      	ldr	r1, [pc, #204]	; (800175c <line_append+0x1a0>)
 8001690:	4835      	ldr	r0, [pc, #212]	; (8001768 <line_append+0x1ac>)
 8001692:	f007 fdbb 	bl	800920c <iprintf>
 8001696:	e047      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "backward")==0){
 8001698:	4938      	ldr	r1, [pc, #224]	; (800177c <line_append+0x1c0>)
 800169a:	4830      	ldr	r0, [pc, #192]	; (800175c <line_append+0x1a0>)
 800169c:	f7fe fdb8 	bl	8000210 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <line_append+0x100>
				tb6612_init(CCW,CCW,99,99);
 80016a6:	2363      	movs	r3, #99	; 0x63
 80016a8:	2263      	movs	r2, #99	; 0x63
 80016aa:	2101      	movs	r1, #1
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fbe5 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <line_append+0x1a0>)
 80016b4:	482c      	ldr	r0, [pc, #176]	; (8001768 <line_append+0x1ac>)
 80016b6:	f007 fda9 	bl	800920c <iprintf>
 80016ba:	e035      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "left")==0){
 80016bc:	4930      	ldr	r1, [pc, #192]	; (8001780 <line_append+0x1c4>)
 80016be:	4827      	ldr	r0, [pc, #156]	; (800175c <line_append+0x1a0>)
 80016c0:	f7fe fda6 	bl	8000210 <strcmp>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <line_append+0x124>
				tb6612_init(CW,CW,30,99);
 80016ca:	2363      	movs	r3, #99	; 0x63
 80016cc:	221e      	movs	r2, #30
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 fbd3 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <line_append+0x1a0>)
 80016d8:	4823      	ldr	r0, [pc, #140]	; (8001768 <line_append+0x1ac>)
 80016da:	f007 fd97 	bl	800920c <iprintf>
 80016de:	e023      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "right")==0){
 80016e0:	4928      	ldr	r1, [pc, #160]	; (8001784 <line_append+0x1c8>)
 80016e2:	481e      	ldr	r0, [pc, #120]	; (800175c <line_append+0x1a0>)
 80016e4:	f7fe fd94 	bl	8000210 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <line_append+0x148>
				tb6612_init(CW,CW,99,30);
 80016ee:	231e      	movs	r3, #30
 80016f0:	2263      	movs	r2, #99	; 0x63
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f000 fbc1 	bl	8001e7c <tb6612_init>
				printf("Command: %s\n", line_buffer);
 80016fa:	4918      	ldr	r1, [pc, #96]	; (800175c <line_append+0x1a0>)
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <line_append+0x1ac>)
 80016fe:	f007 fd85 	bl	800920c <iprintf>
 8001702:	e011      	b.n	8001728 <line_append+0x16c>
			}
			else if(strcmp(line_buffer, "stopit")==0){
 8001704:	4920      	ldr	r1, [pc, #128]	; (8001788 <line_append+0x1cc>)
 8001706:	4815      	ldr	r0, [pc, #84]	; (800175c <line_append+0x1a0>)
 8001708:	f7fe fd82 	bl	8000210 <strcmp>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <line_append+0x164>
				tb6612_init(CW,CW,0,0);
 8001712:	2300      	movs	r3, #0
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2000      	movs	r0, #0
 800171a:	f000 fbaf 	bl	8001e7c <tb6612_init>
 800171e:	e003      	b.n	8001728 <line_append+0x16c>
			}
			else printf("Unrecognized command: %s\n", line_buffer);
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <line_append+0x1a0>)
 8001722:	481a      	ldr	r0, [pc, #104]	; (800178c <line_append+0x1d0>)
 8001724:	f007 fd72 	bl	800920c <iprintf>
			line_length=0;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <line_append+0x19c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 800172e:	e00f      	b.n	8001750 <line_append+0x194>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <line_append+0x19c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b4f      	cmp	r3, #79	; 0x4f
 8001736:	d902      	bls.n	800173e <line_append+0x182>
		{
			line_length=0;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <line_append+0x19c>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <line_append+0x19c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <line_append+0x19c>)
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <line_append+0x1a0>)
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	54ca      	strb	r2, [r1, r3]
	}
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000024c 	.word	0x2000024c
 800175c:	200001f8 	.word	0x200001f8
 8001760:	0800b6b0 	.word	0x0800b6b0
 8001764:	40020000 	.word	0x40020000
 8001768:	0800b6b4 	.word	0x0800b6b4
 800176c:	0800b6c4 	.word	0x0800b6c4
 8001770:	0800b6c8 	.word	0x0800b6c8
 8001774:	0800b6d0 	.word	0x0800b6d0
 8001778:	0800b6d8 	.word	0x0800b6d8
 800177c:	0800b6e0 	.word	0x0800b6e0
 8001780:	0800b6ec 	.word	0x0800b6ec
 8001784:	0800b6f4 	.word	0x0800b6f4
 8001788:	0800b6fc 	.word	0x0800b6fc
 800178c:	0800b704 	.word	0x0800b704

08001790 <HAL_UART_RxCpltCallback>:


uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_UART_RxCpltCallback+0x2c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d104      	bne.n	80017aa <HAL_UART_RxCpltCallback+0x1a>
	{
		line_append(uart_rx_buffer);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_UART_RxCpltCallback+0x30>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff09 	bl	80015bc <line_append>

	}
	HAL_UART_Receive_IT(&huart1, &uart_rx_buffer,1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	4904      	ldr	r1, [pc, #16]	; (80017c0 <HAL_UART_RxCpltCallback+0x30>)
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <HAL_UART_RxCpltCallback+0x2c>)
 80017b0:	f006 f9a7 	bl	8007b02 <HAL_UART_Receive_IT>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000480 	.word	0x20000480
 80017c0:	20000380 	.word	0x20000380

080017c4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d11f      	bne.n	8001814 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
 80017d4:	4824      	ldr	r0, [pc, #144]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017d6:	f7ff fc7b 	bl	80010d0 <BH1750_ReadLight>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d119      	bne.n	8001814 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			sprintf(buffer,"BH1750 Lux: %.2f\r\n", BH1750_lux);
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fedf 	bl	80005a8 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	491f      	ldr	r1, [pc, #124]	; (800186c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80017f0:	481f      	ldr	r0, [pc, #124]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80017f2:	f007 fd23 	bl	800923c <siprintf>
			len=strlen(buffer);
 80017f6:	481e      	ldr	r0, [pc, #120]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80017f8:	f7fe fd14 	bl	8000224 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001802:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	2364      	movs	r3, #100	; 0x64
 800180c:	4918      	ldr	r1, [pc, #96]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001810:	f006 f8e5 	bl	80079de <HAL_UART_Transmit>
		}
	}

	if(htim==&htim5)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d11f      	bne.n	800185c <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		if(BH1750_OK == BH1750_ReadLight2(&BH1750_lux2))
 800181c:	4818      	ldr	r0, [pc, #96]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800181e:	f7ff fcb1 	bl	8001184 <BH1750_ReadLight2>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d119      	bne.n	800185c <HAL_TIM_PeriodElapsedCallback+0x98>
		{
			sprintf(buffer,"BH1750 Lux2: %.2f\r\n", BH1750_lux2);
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe febb 	bl	80005a8 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4913      	ldr	r1, [pc, #76]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800183a:	f007 fcff 	bl	800923c <siprintf>
			len=strlen(buffer);
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001840:	f7fe fcf0 	bl	8000224 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800184a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,buffer,len,100);
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	4906      	ldr	r1, [pc, #24]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001858:	f006 f8c1 	bl	80079de <HAL_UART_Transmit>
		}
	}

}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000438 	.word	0x20000438
 8001868:	20000314 	.word	0x20000314
 800186c:	0800b720 	.word	0x0800b720
 8001870:	2000031c 	.word	0x2000031c
 8001874:	20000384 	.word	0x20000384
 8001878:	20000480 	.word	0x20000480
 800187c:	200003a8 	.word	0x200003a8
 8001880:	20000318 	.word	0x20000318
 8001884:	0800b734 	.word	0x0800b734

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f000 fdcc 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f830 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f7ff fcd0 	bl	8001238 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001898:	f000 fbca 	bl	8002030 <MX_TIM2_Init>
  MX_RTC_Init();
 800189c:	f000 f8c6 	bl	8001a2c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80018a0:	f000 fcfe 	bl	80022a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80018a4:	f000 fb18 	bl	8001ed8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80018a8:	f7ff fd5e 	bl	8001368 <MX_I2C1_Init>
  MX_I2C2_Init();
 80018ac:	f7ff fd8a 	bl	80013c4 <MX_I2C2_Init>
  MX_TIM5_Init();
 80018b0:	f000 fc0c 	bl	80020cc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  const char message[]="HEJA\n\r";
//  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
  HAL_UART_Receive_IT(&huart1,&uart_rx_buffer,1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	4909      	ldr	r1, [pc, #36]	; (80018dc <main+0x54>)
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <main+0x58>)
 80018ba:	f006 f922 	bl	8007b02 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <main+0x5c>)
 80018c0:	f005 f802 	bl	80068c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <main+0x60>)
 80018c6:	f004 ffff 	bl	80068c8 <HAL_TIM_Base_Start_IT>

  BH1750_Init(&hi2c1, &hi2c2);
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <main+0x64>)
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <main+0x68>)
 80018ce:	f7ff fb17 	bl	8000f00 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 80018d2:	2011      	movs	r0, #17
 80018d4:	f7ff fb56 	bl	8000f84 <BH1750_SetMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <main+0x50>
 80018da:	bf00      	nop
 80018dc:	20000380 	.word	0x20000380
 80018e0:	20000480 	.word	0x20000480
 80018e4:	20000438 	.word	0x20000438
 80018e8:	200003a8 	.word	0x200003a8
 80018ec:	200002c0 	.word	0x200002c0
 80018f0:	2000026c 	.word	0x2000026c

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ac      	sub	sp, #176	; 0xb0
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018fe:	2234      	movs	r2, #52	; 0x34
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f007 f810 	bl	8008928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	225c      	movs	r2, #92	; 0x5c
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f007 f801 	bl	8008928 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <SystemClock_Config+0x124>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <SystemClock_Config+0x124>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <SystemClock_Config+0x124>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <SystemClock_Config+0x128>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <SystemClock_Config+0x128>)
 800194c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <SystemClock_Config+0x128>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800195e:	2309      	movs	r3, #9
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800196a:	2301      	movs	r3, #1
 800196c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001984:	2304      	movs	r3, #4
 8001986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800198a:	23b4      	movs	r3, #180	; 0xb4
 800198c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fbbc 	bl	8006124 <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019b2:	f000 f835 	bl	8001a20 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019b6:	f003 fd6f 	bl	8005498 <HAL_PWREx_EnableOverDrive>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80019c0:	f000 f82e 	bl	8001a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c8:	2302      	movs	r3, #2
 80019ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019e0:	2105      	movs	r1, #5
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fda8 	bl	8005538 <HAL_RCC_ClockConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80019ee:	f000 f817 	bl	8001a20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019f2:	2320      	movs	r3, #32
 80019f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 feb3 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001a0c:	f000 f808 	bl	8001a20 <Error_Handler>
  }
}
 8001a10:	bf00      	nop
 8001a12:	37b0      	adds	r7, #176	; 0xb0
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <Error_Handler+0x8>
	...

08001a2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <MX_RTC_Init+0x48>)
 8001a34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a3e:	227f      	movs	r2, #127	; 0x7f
 8001a40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_RTC_Init+0x44>)
 8001a5c:	f004 fe00 	bl	8006660 <HAL_RTC_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001a66:	f7ff ffdb 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000388 	.word	0x20000388
 8001a74:	40002800 	.word	0x40002800

08001a78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_RTC_MspInit+0x24>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d102      	bne.n	8001a90 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RTC_MspInit+0x28>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40002800 	.word	0x40002800
 8001aa0:	42470e3c 	.word	0x42470e3c

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
//  if (clk_div >= 100) {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  clk_div = 0;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 fcc4 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b4e:	f005 f84d 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003f0 	.word	0x200003f0

08001b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM2_IRQHandler+0x10>)
 8001b62:	f005 f843 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000438 	.word	0x20000438

08001b70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <I2C1_EV_IRQHandler+0x10>)
 8001b76:	f001 fc91 	bl	800349c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000026c 	.word	0x2000026c

08001b84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <I2C1_ER_IRQHandler+0x10>)
 8001b8a:	f001 fdf8 	bl	800377e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000026c 	.word	0x2000026c

08001b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <USART1_IRQHandler+0x10>)
 8001b9e:	f005 ffe1 	bl	8007b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000480 	.word	0x20000480

08001bac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM5_IRQHandler+0x10>)
 8001bb2:	f005 f81b 	bl	8006bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003a8 	.word	0x200003a8

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
	return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bda:	f006 fe7b 	bl	80088d4 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2216      	movs	r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
	return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_exit>:

void _exit (int status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c02:	e7fe      	b.n	8001c02 <_exit+0x12>

08001c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e009      	b.n	8001c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc8f 	bl	800157c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf1      	blt.n	8001c50 <_write+0x12>
	}
	return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_close>:

int _close(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f006 fde0 	bl	80088d4 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	20000250 	.word	0x20000250
 8001d48:	200004d8 	.word	0x200004d8

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <set_motorA_direction>:
#include "tb6612fng.h"
#include "main.h"


void set_motorA_direction(TB6612_Direction dir)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	if (dir==CW)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <set_motorA_direction+0x26>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2108      	movs	r1, #8
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <set_motorA_direction+0x48>)
 8001d86:	f000 ff07 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <set_motorA_direction+0x48>)
 8001d90:	f000 ff02 	bl	8002b98 <HAL_GPIO_WritePin>
	else if (dir==CCW)
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
	}
}
 8001d94:	e00c      	b.n	8001db0 <set_motorA_direction+0x40>
	else if (dir==CCW)
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d109      	bne.n	8001db0 <set_motorA_direction+0x40>
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2108      	movs	r1, #8
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <set_motorA_direction+0x48>)
 8001da2:	f000 fef9 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2110      	movs	r1, #16
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <set_motorA_direction+0x48>)
 8001dac:	f000 fef4 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020400 	.word	0x40020400

08001dbc <set_motorB_direction>:

void set_motorB_direction(TB6612_Direction dir)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	if (dir==CW)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <set_motorB_direction+0x28>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2140      	movs	r1, #64	; 0x40
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <set_motorB_direction+0x4c>)
 8001dd2:	f000 fee1 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ddc:	480a      	ldr	r0, [pc, #40]	; (8001e08 <set_motorB_direction+0x4c>)
 8001dde:	f000 fedb 	bl	8002b98 <HAL_GPIO_WritePin>
	else if (dir==CCW)
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
	}
}
 8001de2:	e00d      	b.n	8001e00 <set_motorB_direction+0x44>
	else if (dir==CCW)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10a      	bne.n	8001e00 <set_motorB_direction+0x44>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <set_motorB_direction+0x4c>)
 8001df0:	f000 fed2 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <set_motorB_direction+0x4c>)
 8001dfc:	f000 fecc 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40020800 	.word	0x40020800

08001e0c <set_motorA_speed>:

void set_motorA_speed(uint8_t speed)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	if(speed>=htim1.Instance->ARR)
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <set_motorA_speed+0x34>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d303      	bcc.n	8001e2a <set_motorA_speed+0x1e>
		speed=htim1.Instance->ARR;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <set_motorA_speed+0x34>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, speed);
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <set_motorA_speed+0x34>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003f0 	.word	0x200003f0

08001e44 <set_motorB_speed>:

void set_motorB_speed(uint8_t speed)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	if(speed>=htim1.Instance->ARR)
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <set_motorB_speed+0x34>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d303      	bcc.n	8001e62 <set_motorB_speed+0x1e>
		speed=htim1.Instance->ARR;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <set_motorB_speed+0x34>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <set_motorB_speed+0x34>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	79fa      	ldrb	r2, [r7, #7]
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200003f0 	.word	0x200003f0

08001e7c <tb6612_init>:

void tb6612_init(TB6612_Direction dirA, TB6612_Direction dirB, uint8_t speedA, uint8_t speedB)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4604      	mov	r4, r0
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	460b      	mov	r3, r1
 8001e94:	717b      	strb	r3, [r7, #5]
 8001e96:	4613      	mov	r3, r2
 8001e98:	713b      	strb	r3, [r7, #4]
	set_motorA_direction(dirA);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff67 	bl	8001d70 <set_motorA_direction>
	set_motorA_speed(speedA);
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ffb1 	bl	8001e0c <set_motorA_speed>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <tb6612_init+0x58>)
 8001eae:	f004 fdd5 	bl	8006a5c <HAL_TIM_PWM_Start>
	set_motorB_direction(dirB);
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff81 	bl	8001dbc <set_motorB_direction>
	set_motorB_speed(speedB);
 8001eba:	793b      	ldrb	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ffc1 	bl	8001e44 <set_motorB_speed>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <tb6612_init+0x58>)
 8001ec6:	f004 fdc9 	bl	8006a5c <HAL_TIM_PWM_Start>
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200003f0 	.word	0x200003f0

08001ed8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b096      	sub	sp, #88	; 0x58
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 fd09 	bl	8008928 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f18:	4a44      	ldr	r2, [pc, #272]	; (800202c <MX_TIM1_Init+0x154>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f1e:	222c      	movs	r2, #44	; 0x2c
 8001f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f2a:	2263      	movs	r2, #99	; 0x63
 8001f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f40:	4839      	ldr	r0, [pc, #228]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f42:	f004 fc72 	bl	800682a <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f4c:	f7ff fd68 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4832      	ldr	r0, [pc, #200]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f5e:	f005 f80f 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f68:	f7ff fd5a 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6c:	482e      	ldr	r0, [pc, #184]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f6e:	f004 fd1b 	bl	80069a8 <HAL_TIM_PWM_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001f78:	f7ff fd52 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4827      	ldr	r0, [pc, #156]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f8c:	f005 fbf8 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001f96:	f7ff fd43 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9a:	2360      	movs	r3, #96	; 0x60
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481a      	ldr	r0, [pc, #104]	; (8002028 <MX_TIM1_Init+0x150>)
 8001fc0:	f004 ff1c 	bl	8006dfc <HAL_TIM_PWM_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001fca:	f7ff fd29 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <MX_TIM1_Init+0x150>)
 8001fd8:	f004 ff10 	bl	8006dfc <HAL_TIM_PWM_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001fe2:	f7ff fd1d 	bl	8001a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM1_Init+0x150>)
 800200a:	f005 fc35 	bl	8007878 <HAL_TIMEx_ConfigBreakDeadTime>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002014:	f7ff fd04 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM1_Init+0x150>)
 800201a:	f000 f907 	bl	800222c <HAL_TIM_MspPostInit>

}
 800201e:	bf00      	nop
 8002020:	3758      	adds	r7, #88	; 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200003f0 	.word	0x200003f0
 800202c:	40010000 	.word	0x40010000

08002030 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <MX_TIM2_Init+0x98>)
 800204e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002056:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800205a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM2_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002064:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_TIM2_Init+0x98>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002078:	f004 fbd7 	bl	800682a <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002082:	f7ff fccd 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002094:	f004 ff74 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800209e:	f7ff fcbf 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020a2:	2320      	movs	r3, #32
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM2_Init+0x98>)
 80020b0:	f005 fb66 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ba:	f7ff fcb1 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000438 	.word	0x20000438

080020cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	463b      	mov	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <MX_TIM5_Init+0x94>)
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <MX_TIM5_Init+0x98>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_TIM5_Init+0x94>)
 80020f0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80020f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_TIM5_Init+0x94>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_TIM5_Init+0x94>)
 80020fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002102:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <MX_TIM5_Init+0x94>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_TIM5_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <MX_TIM5_Init+0x94>)
 8002112:	f004 fb8a 	bl	800682a <HAL_TIM_Base_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800211c:	f7ff fc80 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	4619      	mov	r1, r3
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <MX_TIM5_Init+0x94>)
 800212e:	f004 ff27 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002138:	f7ff fc72 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800213c:	2320      	movs	r3, #32
 800213e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002144:	463b      	mov	r3, r7
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_TIM5_Init+0x94>)
 800214a:	f005 fb19 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002154:	f7ff fc64 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200003a8 	.word	0x200003a8
 8002164:	40000c00 	.word	0x40000c00

08002168 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <HAL_TIM_Base_MspInit+0xb8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d116      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2018      	movs	r0, #24
 800219c:	f000 fa91 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021a0:	2018      	movs	r0, #24
 80021a2:	f000 faaa 	bl	80026fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021a6:	e036      	b.n	8002216 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d116      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	201c      	movs	r0, #28
 80021d4:	f000 fa75 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d8:	201c      	movs	r0, #28
 80021da:	f000 fa8e 	bl	80026fa <HAL_NVIC_EnableIRQ>
}
 80021de:	e01a      	b.n	8002216 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_Base_MspInit+0xc0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d115      	bne.n	8002216 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_TIM_Base_MspInit+0xbc>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	2032      	movs	r0, #50	; 0x32
 800220c:	f000 fa59 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002210:	2032      	movs	r0, #50	; 0x32
 8002212:	f000 fa72 	bl	80026fa <HAL_NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40023800 	.word	0x40023800
 8002228:	40000c00 	.word	0x40000c00

0800222c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_TIM_MspPostInit+0x68>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d11e      	bne.n	800228c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_TIM_MspPostInit+0x6c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_TIM_MspPostInit+0x6c>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_TIM_MspPostInit+0x6c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin|PWM2_Pin;
 800226a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800226e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800227c:	2301      	movs	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4619      	mov	r1, r3
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <HAL_TIM_MspPostInit+0x70>)
 8002288:	f000 faf2 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010000 	.word	0x40010000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000

080022a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <MX_USART1_UART_Init+0x50>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART1_UART_Init+0x4c>)
 80022d8:	f005 fb34 	bl	8007944 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022e2:	f7ff fb9d 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000480 	.word	0x20000480
 80022f0:	40011000 	.word	0x40011000

080022f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <HAL_UART_MspInit+0xd0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d152      	bne.n	80023bc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_UART_MspInit+0xd4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237c:	2307      	movs	r3, #7
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4811      	ldr	r0, [pc, #68]	; (80023cc <HAL_UART_MspInit+0xd8>)
 8002388:	f000 fa72 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800238c:	2340      	movs	r3, #64	; 0x40
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800239c:	2307      	movs	r3, #7
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <HAL_UART_MspInit+0xdc>)
 80023a8:	f000 fa62 	bl	8002870 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2025      	movs	r0, #37	; 0x25
 80023b2:	f000 f986 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023b6:	2025      	movs	r0, #37	; 0x25
 80023b8:	f000 f99f 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fe:	f7ff fca5 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f006 fa6d 	bl	80088e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fa3f 	bl	8001888 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002418:	0800bb54 	.word	0x0800bb54
  ldr r2, =_sbss
 800241c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002420:	200004d8 	.word	0x200004d8

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f92b 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fb22 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f943 	bl	8002716 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f90b 	bl	80026c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000008 	.word	0x20000008
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000008 	.word	0x20000008
 80024f0:	200004c4 	.word	0x200004c4

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200004c4 	.word	0x200004c4

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f7ff ff8e 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff29 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff3e 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff8e 	bl	8002600 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5d 	bl	80025ac <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff31 	bl	8002570 <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffa2 	bl	8002668 <SysTick_Config>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff feda 	bl	80024f4 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d008      	beq.n	8002760 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e052      	b.n	8002806 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0216 	bic.w	r2, r2, #22
 800276e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_DMA_Abort+0x62>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b0:	e013      	b.n	80027da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b2:	f7ff fe9f 	bl	80024f4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d90c      	bls.n	80027da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e015      	b.n	8002806 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e4      	bne.n	80027b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	223f      	movs	r2, #63	; 0x3f
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d004      	beq.n	800282c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e00c      	b.n	8002846 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2205      	movs	r2, #5
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002860:	b2db      	uxtb	r3, r3
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e165      	b.n	8002b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8154 	bne.w	8002b52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80ae 	beq.w	8002b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_GPIO_Init+0x300>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <HAL_GPIO_Init+0x300>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_GPIO_Init+0x300>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4f      	ldr	r2, [pc, #316]	; (8002b78 <HAL_GPIO_Init+0x308>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x21a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	; (8002b7c <HAL_GPIO_Init+0x30c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x216>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <HAL_GPIO_Init+0x310>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x212>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_GPIO_Init+0x314>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_GPIO_Init+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x20a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <HAL_GPIO_Init+0x31c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x206>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_GPIO_Init+0x320>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x202>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ace:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b22:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b4c:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f ae96 	bls.w	800288c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40021400 	.word	0x40021400
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e12b      	b.n	8002e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fc14 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c30:	f002 fd74 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8002c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a81      	ldr	r2, [pc, #516]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d807      	bhi.n	8002c50 <HAL_I2C_Init+0x84>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a80      	ldr	r2, [pc, #512]	; (8002e44 <HAL_I2C_Init+0x278>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	bf94      	ite	ls
 8002c48:	2301      	movls	r3, #1
 8002c4a:	2300      	movhi	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e006      	b.n	8002c5e <HAL_I2C_Init+0x92>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_I2C_Init+0x27c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0e7      	b.n	8002e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a78      	ldr	r2, [pc, #480]	; (8002e4c <HAL_I2C_Init+0x280>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9b      	lsrs	r3, r3, #18
 8002c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a6a      	ldr	r2, [pc, #424]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d802      	bhi.n	8002ca0 <HAL_I2C_Init+0xd4>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	e009      	b.n	8002cb4 <HAL_I2C_Init+0xe8>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <HAL_I2C_Init+0x284>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	495c      	ldr	r1, [pc, #368]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d819      	bhi.n	8002d08 <HAL_I2C_Init+0x13c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e59      	subs	r1, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce8:	400b      	ands	r3, r1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_I2C_Init+0x138>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1e59      	subs	r1, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d02:	e051      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e04f      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <HAL_I2C_Init+0x168>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e012      	b.n	8002d5a <HAL_I2C_Init+0x18e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x196>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e022      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10e      	bne.n	8002d88 <HAL_I2C_Init+0x1bc>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e58      	subs	r0, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	e00f      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6809      	ldr	r1, [r1, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6911      	ldr	r1, [r2, #16]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68d2      	ldr	r2, [r2, #12]
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	000186a0 	.word	0x000186a0
 8002e44:	001e847f 	.word	0x001e847f
 8002e48:	003d08ff 	.word	0x003d08ff
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	10624dd3 	.word	0x10624dd3

08002e54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	460b      	mov	r3, r1
 8002e62:	817b      	strh	r3, [r7, #10]
 8002e64:	4613      	mov	r3, r2
 8002e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff fb44 	bl	80024f4 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	f040 80e0 	bne.w	800303c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	4970      	ldr	r1, [pc, #448]	; (8003048 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f002 f8dc 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0d3      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_I2C_Master_Transmit+0x50>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e0cc      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d007      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2221      	movs	r2, #33	; 0x21
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	893a      	ldrh	r2, [r7, #8]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a50      	ldr	r2, [pc, #320]	; (800304c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f001 fe9e 	bl	8004c54 <I2C_MasterRequestWrite>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08d      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f38:	e066      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f002 f956 	bl	80051f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d107      	bne.n	8002f62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06b      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d11b      	bne.n	8002fdc <HAL_I2C_Master_Transmit+0x188>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	6a39      	ldr	r1, [r7, #32]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f002 f946 	bl	8005272 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d107      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e01a      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d194      	bne.n	8002f3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	00100002 	.word	0x00100002
 800304c:	ffff0000 	.word	0xffff0000

08003050 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff fa46 	bl	80024f4 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	f040 820b 	bne.w	800348e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	497c      	ldr	r1, [pc, #496]	; (8003274 <HAL_I2C_Master_Receive+0x224>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f001 ffde 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	e1fe      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_I2C_Master_Receive+0x50>
 800309c:	2302      	movs	r3, #2
 800309e:	e1f7      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d007      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2222      	movs	r2, #34	; 0x22
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2210      	movs	r2, #16
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	893a      	ldrh	r2, [r7, #8]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_I2C_Master_Receive+0x228>)
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f001 fe22 	bl	8004d58 <I2C_MasterRequestRead>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1b8      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e18c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b01      	cmp	r3, #1
 8003154:	d11b      	bne.n	800318e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e16c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b02      	cmp	r3, #2
 8003194:	d11b      	bne.n	80031ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	e14c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031f4:	e138      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f200 80f1 	bhi.w	80033e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b01      	cmp	r3, #1
 8003206:	d123      	bne.n	8003250 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f002 f8a3 	bl	8005358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e139      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800324e:	e10b      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b02      	cmp	r3, #2
 8003256:	d14e      	bne.n	80032f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <HAL_I2C_Master_Receive+0x22c>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f001 feee 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e10e      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
 8003272:	bf00      	nop
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000
 800327c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f4:	e0b8      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2200      	movs	r2, #0
 80032fe:	4966      	ldr	r1, [pc, #408]	; (8003498 <HAL_I2C_Master_Receive+0x448>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f001 fe9f 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0bf      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	2200      	movs	r2, #0
 800335a:	494f      	ldr	r1, [pc, #316]	; (8003498 <HAL_I2C_Master_Receive+0x448>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f001 fe71 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e091      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e0:	e042      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f001 ffb6 	bl	8005358 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e04c      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d118      	bne.n	8003468 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f aec2 	bne.w	80031f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010004 	.word	0x00010004

0800349c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d003      	beq.n	80034d4 <HAL_I2C_EV_IRQHandler+0x38>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	f040 80c1 	bne.w	8003656 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <HAL_I2C_EV_IRQHandler+0x6e>
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034f4:	d003      	beq.n	80034fe <HAL_I2C_EV_IRQHandler+0x62>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_EV_IRQHandler+0x66>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x68>
 8003502:	2300      	movs	r3, #0
 8003504:	2b01      	cmp	r3, #1
 8003506:	f000 8132 	beq.w	800376e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x92>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	0a5b      	lsrs	r3, r3, #9
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f001 ff9e 	bl	8005462 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fd79 	bl	800401e <I2C_Master_SB>
 800352c:	e092      	b.n	8003654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_I2C_EV_IRQHandler+0xb2>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	0a5b      	lsrs	r3, r3, #9
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fdef 	bl	800412a <I2C_Master_ADD10>
 800354c:	e082      	b.n	8003654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0xd2>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0a5b      	lsrs	r3, r3, #9
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fe09 	bl	800417e <I2C_Master_ADDR>
 800356c:	e072      	b.n	8003654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03b      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	f000 80f3 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	09db      	lsrs	r3, r3, #7
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00f      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d103      	bne.n	80035b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9f3 	bl	800399c <I2C_MasterTransmit_TXE>
 80035b6:	e04d      	b.n	8003654 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80d6 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	0a5b      	lsrs	r3, r3, #9
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80cf 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	2b21      	cmp	r3, #33	; 0x21
 80035d8:	d103      	bne.n	80035e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa7a 	bl	8003ad4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e0:	e0c7      	b.n	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	f040 80c4 	bne.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fae8 	bl	8003bc0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f0:	e0bf      	b.n	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003600:	f000 80b7 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00f      	beq.n	8003630 <HAL_I2C_EV_IRQHandler+0x194>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_I2C_EV_IRQHandler+0x194>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb5d 	bl	8003ce8 <I2C_MasterReceive_RXNE>
 800362e:	e011      	b.n	8003654 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 809a 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0a5b      	lsrs	r3, r3, #9
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8093 	beq.w	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fbfc 	bl	8003e4a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003652:	e08e      	b.n	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003654:	e08d      	b.n	8003772 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e007      	b.n	8003678 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x20e>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	0a5b      	lsrs	r3, r3, #9
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ffba 	bl	800461c <I2C_Slave_ADDR>
 80036a8:	e066      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_I2C_EV_IRQHandler+0x22e>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0a5b      	lsrs	r3, r3, #9
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fff4 	bl	80046b0 <I2C_Slave_STOPF>
 80036c8:	e056      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036ca:	7bbb      	ldrb	r3, [r7, #14]
 80036cc:	2b21      	cmp	r3, #33	; 0x21
 80036ce:	d002      	beq.n	80036d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	2b29      	cmp	r3, #41	; 0x29
 80036d4:	d125      	bne.n	8003722 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	09db      	lsrs	r3, r3, #7
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00f      	beq.n	8003702 <HAL_I2C_EV_IRQHandler+0x266>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	0a9b      	lsrs	r3, r3, #10
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_I2C_EV_IRQHandler+0x266>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fed0 	bl	80044a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003700:	e039      	b.n	8003776 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d033      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x2da>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	0a5b      	lsrs	r3, r3, #9
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02d      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fefd 	bl	800451a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003720:	e029      	b.n	8003776 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00f      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x2b2>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	0a9b      	lsrs	r3, r3, #10
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x2b2>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 ff08 	bl	800455c <I2C_SlaveReceive_RXNE>
 800374c:	e014      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00e      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	0a5b      	lsrs	r3, r3, #9
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 ff36 	bl	80045d8 <I2C_SlaveReceive_BTF>
 800376c:	e004      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003776:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0x4e>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	0a5b      	lsrs	r3, r3, #9
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <HAL_I2C_ER_IRQHandler+0x78>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80037f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	0a9b      	lsrs	r3, r3, #10
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03f      	beq.n	8003882 <HAL_I2C_ER_IRQHandler+0x104>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d039      	beq.n	8003882 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003828:	7ebb      	ldrb	r3, [r7, #26]
 800382a:	2b20      	cmp	r3, #32
 800382c:	d112      	bne.n	8003854 <HAL_I2C_ER_IRQHandler+0xd6>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_I2C_ER_IRQHandler+0xd6>
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b21      	cmp	r3, #33	; 0x21
 8003838:	d008      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	2b29      	cmp	r3, #41	; 0x29
 800383e:	d005      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0xce>
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	d106      	bne.n	8003854 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b21      	cmp	r3, #33	; 0x21
 800384a:	d103      	bne.n	8003854 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f001 f85f 	bl	8004910 <I2C_Slave_AF>
 8003852:	e016      	b.n	8003882 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003866:	7efb      	ldrb	r3, [r7, #27]
 8003868:	2b10      	cmp	r3, #16
 800386a:	d002      	beq.n	8003872 <HAL_I2C_ER_IRQHandler+0xf4>
 800386c:	7efb      	ldrb	r3, [r7, #27]
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d107      	bne.n	8003882 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	0adb      	lsrs	r3, r3, #11
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_I2C_ER_IRQHandler+0x12e>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80038aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 f896 	bl	80049f0 <I2C_ITError>
  }
}
 80038c4:	bf00      	nop
 80038c6:	3728      	adds	r7, #40	; 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
 8003928:	4613      	mov	r3, r2
 800392a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d150      	bne.n	8003a64 <I2C_MasterTransmit_TXE+0xc8>
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b21      	cmp	r3, #33	; 0x21
 80039c6:	d14d      	bne.n	8003a64 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d01d      	beq.n	8003a0a <I2C_MasterTransmit_TXE+0x6e>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d01a      	beq.n	8003a0a <I2C_MasterTransmit_TXE+0x6e>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039da:	d016      	beq.n	8003a0a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2211      	movs	r2, #17
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ff62 	bl	80038cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a08:	e060      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a18:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d107      	bne.n	8003a54 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff7d 	bl	800394c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a52:	e03b      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff35 	bl	80038cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a62:	e033      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b21      	cmp	r3, #33	; 0x21
 8003a68:	d005      	beq.n	8003a76 <I2C_MasterTransmit_TXE+0xda>
 8003a6a:	7bbb      	ldrb	r3, [r7, #14]
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d12d      	bne.n	8003acc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b22      	cmp	r3, #34	; 0x22
 8003a74:	d12a      	bne.n	8003acc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d108      	bne.n	8003a92 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a90:	e01c      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d103      	bne.n	8003aa6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f88e 	bl	8003bc0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003aa4:	e012      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aca:	e7ff      	b.n	8003acc <I2C_MasterTransmit_TXE+0x130>
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b21      	cmp	r3, #33	; 0x21
 8003aec:	d164      	bne.n	8003bb8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b1c:	e04c      	b.n	8003bb8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d01d      	beq.n	8003b60 <I2C_MasterTransmit_BTF+0x8c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d01a      	beq.n	8003b60 <I2C_MasterTransmit_BTF+0x8c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b30:	d016      	beq.n	8003b60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2211      	movs	r2, #17
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff feb7 	bl	80038cc <HAL_I2C_MasterTxCpltCallback>
}
 8003b5e:	e02b      	b.n	8003bb8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d107      	bne.n	8003baa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fed2 	bl	800394c <HAL_I2C_MemTxCpltCallback>
}
 8003ba8:	e006      	b.n	8003bb8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fe8a 	bl	80038cc <HAL_I2C_MasterTxCpltCallback>
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11d      	bne.n	8003c14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10b      	bne.n	8003bf8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bf6:	e073      	b.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	121b      	asrs	r3, r3, #8
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c12:	e065      	b.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10b      	bne.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c32:	e055      	b.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d151      	bne.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b22      	cmp	r3, #34	; 0x22
 8003c40:	d10d      	bne.n	8003c5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c5c:	e040      	b.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b21      	cmp	r3, #33	; 0x21
 8003c6c:	d112      	bne.n	8003c94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c92:	e025      	b.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d120      	bne.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b21      	cmp	r3, #33	; 0x21
 8003ca2:	d11d      	bne.n	8003ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe36 	bl	800394c <HAL_I2C_MemTxCpltCallback>
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b22      	cmp	r3, #34	; 0x22
 8003cfa:	f040 80a2 	bne.w	8003e42 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d921      	bls.n	8003d50 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	f040 8082 	bne.w	8003e42 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003d4e:	e078      	b.n	8003e42 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d074      	beq.n	8003e42 <I2C_MasterReceive_RXNE+0x15a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <I2C_MasterReceive_RXNE+0x7c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d16e      	bne.n	8003e42 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 fac5 	bl	80052f4 <I2C_WaitOnSTOPRequestThroughIT>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d142      	bne.n	8003df6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d10a      	bne.n	8003de0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fdc1 	bl	8003960 <HAL_I2C_MemRxCpltCallback>
}
 8003dde:	e030      	b.n	8003e42 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2212      	movs	r2, #18
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fd76 	bl	80038e0 <HAL_I2C_MasterRxCpltCallback>
}
 8003df4:	e025      	b.n	8003e42 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fd99 	bl	8003974 <HAL_I2C_ErrorCallback>
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d11b      	bne.n	8003e9a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e98:	e0bd      	b.n	8004016 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d129      	bne.n	8003ef8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d00a      	beq.n	8003ed0 <I2C_MasterReceive_BTF+0x86>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d007      	beq.n	8003ed0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ece:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ef6:	e08e      	b.n	8004016 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d176      	bne.n	8003ff0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <I2C_MasterReceive_BTF+0xc4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d108      	bne.n	8003f20 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e019      	b.n	8003f54 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d002      	beq.n	8003f2c <I2C_MasterReceive_BTF+0xe2>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d108      	bne.n	8003f3e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e00a      	b.n	8003f54 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d007      	beq.n	8003f54 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d10a      	bne.n	8003fda <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fcc4 	bl	8003960 <HAL_I2C_MemRxCpltCallback>
}
 8003fd8:	e01d      	b.n	8004016 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2212      	movs	r2, #18
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fc79 	bl	80038e0 <HAL_I2C_MasterRxCpltCallback>
}
 8003fee:	e012      	b.n	8004016 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d117      	bne.n	8004062 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800404c:	e067      	b.n	800411e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	b2da      	uxtb	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
}
 8004060:	e05d      	b.n	800411e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406a:	d133      	bne.n	80040d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b21      	cmp	r3, #33	; 0x21
 8004076:	d109      	bne.n	800408c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004088:	611a      	str	r2, [r3, #16]
 800408a:	e008      	b.n	800409e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <I2C_Master_SB+0x92>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d108      	bne.n	80040c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d032      	beq.n	800411e <I2C_Master_SB+0x100>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02d      	beq.n	800411e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d0:	605a      	str	r2, [r3, #4]
}
 80040d2:	e024      	b.n	800411e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	11db      	asrs	r3, r3, #7
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f063 030f 	orn	r3, r3, #15
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]
}
 80040f8:	e011      	b.n	800411e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d10d      	bne.n	800411e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	b29b      	uxth	r3, r3
 8004108:	11db      	asrs	r3, r3, #7
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 0306 	and.w	r3, r3, #6
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f063 030e 	orn	r3, r3, #14
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	b2da      	uxtb	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <I2C_Master_ADD10+0x26>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d108      	bne.n	8004162 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00c      	beq.n	8004172 <I2C_Master_ADD10+0x48>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004170:	605a      	str	r2, [r3, #4]
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b091      	sub	sp, #68	; 0x44
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b22      	cmp	r3, #34	; 0x22
 80041a6:	f040 8169 	bne.w	800447c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <I2C_Master_ADDR+0x54>
 80041b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d10b      	bne.n	80041d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	e160      	b.n	8004494 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <I2C_Master_ADDR+0x98>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041e2:	d118      	bne.n	8004216 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	651a      	str	r2, [r3, #80]	; 0x50
 8004214:	e13e      	b.n	8004494 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d113      	bne.n	8004248 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e115      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	f040 808a 	bne.w	8004368 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800425a:	d137      	bne.n	80042cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d113      	bne.n	80042a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	e0e7      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a4:	2300      	movs	r3, #0
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e0d3      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d02e      	beq.n	8004330 <I2C_Master_ADDR+0x1b2>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d02b      	beq.n	8004330 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	2b12      	cmp	r3, #18
 80042dc:	d102      	bne.n	80042e4 <I2C_Master_ADDR+0x166>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d125      	bne.n	8004330 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00e      	beq.n	8004308 <I2C_Master_ADDR+0x18a>
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d00b      	beq.n	8004308 <I2C_Master_ADDR+0x18a>
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d008      	beq.n	8004308 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e007      	b.n	8004318 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004316:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	e0a1      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e085      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d14d      	bne.n	800440e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b04      	cmp	r3, #4
 8004376:	d016      	beq.n	80043a6 <I2C_Master_ADDR+0x228>
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	2b02      	cmp	r3, #2
 800437c:	d013      	beq.n	80043a6 <I2C_Master_ADDR+0x228>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2b10      	cmp	r3, #16
 8004382:	d010      	beq.n	80043a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e007      	b.n	80043b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c4:	d117      	bne.n	80043f6 <I2C_Master_ADDR+0x278>
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043cc:	d00b      	beq.n	80043e6 <I2C_Master_ADDR+0x268>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d008      	beq.n	80043e6 <I2C_Master_ADDR+0x268>
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d005      	beq.n	80043e6 <I2C_Master_ADDR+0x268>
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d002      	beq.n	80043e6 <I2C_Master_ADDR+0x268>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d107      	bne.n	80043f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	e032      	b.n	8004474 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442c:	d117      	bne.n	800445e <I2C_Master_ADDR+0x2e0>
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004434:	d00b      	beq.n	800444e <I2C_Master_ADDR+0x2d0>
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b01      	cmp	r3, #1
 800443a:	d008      	beq.n	800444e <I2C_Master_ADDR+0x2d0>
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b08      	cmp	r3, #8
 8004440:	d005      	beq.n	800444e <I2C_Master_ADDR+0x2d0>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b10      	cmp	r3, #16
 8004446:	d002      	beq.n	800444e <I2C_Master_ADDR+0x2d0>
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b20      	cmp	r3, #32
 800444c:	d107      	bne.n	800445e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800445c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800447a:	e00b      	b.n	8004494 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	e7ff      	b.n	8004494 <I2C_Master_ADDR+0x316>
 8004494:	bf00      	nop
 8004496:	3744      	adds	r7, #68	; 0x44
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02b      	beq.n	8004512 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d114      	bne.n	8004512 <I2C_SlaveTransmit_TXE+0x72>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b29      	cmp	r3, #41	; 0x29
 80044ec:	d111      	bne.n	8004512 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2228      	movs	r2, #40	; 0x28
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff f9f1 	bl	80038f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02c      	beq.n	80045d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d114      	bne.n	80045d0 <I2C_SlaveReceive_RXNE+0x74>
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b2a      	cmp	r3, #42	; 0x2a
 80045aa:	d111      	bne.n	80045d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2222      	movs	r2, #34	; 0x22
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2228      	movs	r2, #40	; 0x28
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff f99c 	bl	8003908 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004636:	2b28      	cmp	r3, #40	; 0x28
 8004638:	d127      	bne.n	800468a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004648:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	09db      	lsrs	r3, r3, #7
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	81bb      	strh	r3, [r7, #12]
 800466c:	e002      	b.n	8004674 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800467c:	89ba      	ldrh	r2, [r7, #12]
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff f94a 	bl	800391c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004688:	e00e      	b.n	80046a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470c:	d172      	bne.n	80047f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b22      	cmp	r3, #34	; 0x22
 8004712:	d002      	beq.n	800471a <I2C_Slave_STOPF+0x6a>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b2a      	cmp	r3, #42	; 0x2a
 8004718:	d135      	bne.n	8004786 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe f87d 	bl	8002852 <HAL_DMA_GetState>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d049      	beq.n	80047f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	4a69      	ldr	r2, [pc, #420]	; (8004908 <I2C_Slave_STOPF+0x258>)
 8004764:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe f84f 	bl	800280e <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d03d      	beq.n	80047f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004784:	e035      	b.n	80047f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0204 	orr.w	r2, r3, #4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe f847 	bl	8002852 <HAL_DMA_GetState>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d014      	beq.n	80047f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <I2C_Slave_STOPF+0x258>)
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f819 	bl	800280e <HAL_DMA_Abort_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
 80047f0:	e000      	b.n	80047f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03e      	beq.n	800487c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d112      	bne.n	8004832 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d112      	bne.n	8004866 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8b3 	bl	80049f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800488a:	e039      	b.n	8004900 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b2a      	cmp	r3, #42	; 0x2a
 8004890:	d109      	bne.n	80048a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2228      	movs	r2, #40	; 0x28
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff f831 	bl	8003908 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b28      	cmp	r3, #40	; 0x28
 80048b0:	d111      	bne.n	80048d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <I2C_Slave_STOPF+0x25c>)
 80048b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff f832 	bl	8003938 <HAL_I2C_ListenCpltCallback>
}
 80048d4:	e014      	b.n	8004900 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	2b22      	cmp	r3, #34	; 0x22
 80048dc:	d002      	beq.n	80048e4 <I2C_Slave_STOPF+0x234>
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b22      	cmp	r3, #34	; 0x22
 80048e2:	d10d      	bne.n	8004900 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff f804 	bl	8003908 <HAL_I2C_SlaveRxCpltCallback>
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	08004ef5 	.word	0x08004ef5
 800490c:	ffff0000 	.word	0xffff0000

08004910 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d002      	beq.n	8004932 <I2C_Slave_AF+0x22>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b20      	cmp	r3, #32
 8004930:	d129      	bne.n	8004986 <I2C_Slave_AF+0x76>
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b28      	cmp	r3, #40	; 0x28
 8004936:	d126      	bne.n	8004986 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <I2C_Slave_AF+0xdc>)
 800493c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004956:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe ffda 	bl	8003938 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004984:	e02e      	b.n	80049e4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b21      	cmp	r3, #33	; 0x21
 800498a:	d126      	bne.n	80049da <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <I2C_Slave_AF+0xdc>)
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2221      	movs	r2, #33	; 0x21
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fe ff8e 	bl	80038f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80049d8:	e004      	b.n	80049e4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049e2:	615a      	str	r2, [r3, #20]
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a08:	7bbb      	ldrb	r3, [r7, #14]
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d002      	beq.n	8004a14 <I2C_ITError+0x24>
 8004a0e:	7bbb      	ldrb	r3, [r7, #14]
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d10a      	bne.n	8004a2a <I2C_ITError+0x3a>
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b22      	cmp	r3, #34	; 0x22
 8004a18:	d107      	bne.n	8004a2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a30:	2b28      	cmp	r3, #40	; 0x28
 8004a32:	d107      	bne.n	8004a44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2228      	movs	r2, #40	; 0x28
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a42:	e015      	b.n	8004a70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a52:	d00a      	beq.n	8004a6a <I2C_ITError+0x7a>
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b60      	cmp	r3, #96	; 0x60
 8004a58:	d007      	beq.n	8004a6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	d162      	bne.n	8004b46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d020      	beq.n	8004ae0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	4a6a      	ldr	r2, [pc, #424]	; (8004c4c <I2C_ITError+0x25c>)
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd feaf 	bl	800280e <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8089 	beq.w	8004bca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ada:	4610      	mov	r0, r2
 8004adc:	4798      	blx	r3
 8004ade:	e074      	b.n	8004bca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	4a59      	ldr	r2, [pc, #356]	; (8004c4c <I2C_ITError+0x25c>)
 8004ae6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd fe8e 	bl	800280e <HAL_DMA_Abort_IT>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d068      	beq.n	8004bca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d10b      	bne.n	8004b1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0201 	bic.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	e041      	b.n	8004bca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b60      	cmp	r3, #96	; 0x60
 8004b50:	d125      	bne.n	8004b9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d10b      	bne.n	8004b86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fe fef6 	bl	8003988 <HAL_I2C_AbortCpltCallback>
 8004b9c:	e015      	b.n	8004bca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d10b      	bne.n	8004bc4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fe fed5 	bl	8003974 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10e      	bne.n	8004bf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d113      	bne.n	8004c44 <I2C_ITError+0x254>
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b28      	cmp	r3, #40	; 0x28
 8004c20:	d110      	bne.n	8004c44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <I2C_ITError+0x260>)
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe fe7a 	bl	8003938 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08004ef5 	.word	0x08004ef5
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	460b      	mov	r3, r1
 8004c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d006      	beq.n	8004c7e <I2C_MasterRequestWrite+0x2a>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d003      	beq.n	8004c7e <I2C_MasterRequestWrite+0x2a>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c7c:	d108      	bne.n	8004c90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e00b      	b.n	8004ca8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	2b12      	cmp	r3, #18
 8004c96:	d107      	bne.n	8004ca8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f9c5 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cce:	d103      	bne.n	8004cd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e035      	b.n	8004d48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce4:	d108      	bne.n	8004cf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cf4:	611a      	str	r2, [r3, #16]
 8004cf6:	e01b      	b.n	8004d30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cf8:	897b      	ldrh	r3, [r7, #10]
 8004cfa:	11db      	asrs	r3, r3, #7
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0306 	and.w	r3, r3, #6
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f063 030f 	orn	r3, r3, #15
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <I2C_MasterRequestWrite+0xfc>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f9eb 	bl	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e010      	b.n	8004d48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4907      	ldr	r1, [pc, #28]	; (8004d54 <I2C_MasterRequestWrite+0x100>)
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9db 	bl	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	00010008 	.word	0x00010008
 8004d54:	00010002 	.word	0x00010002

08004d58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	460b      	mov	r3, r1
 8004d66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d006      	beq.n	8004d92 <I2C_MasterRequestRead+0x3a>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d003      	beq.n	8004d92 <I2C_MasterRequestRead+0x3a>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d90:	d108      	bne.n	8004da4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e00b      	b.n	8004dbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	2b11      	cmp	r3, #17
 8004daa:	d107      	bne.n	8004dbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f93b 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	d103      	bne.n	8004dec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e079      	b.n	8004ee4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df8:	d108      	bne.n	8004e0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	e05f      	b.n	8004ecc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	11db      	asrs	r3, r3, #7
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0306 	and.w	r3, r3, #6
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f063 030f 	orn	r3, r3, #15
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4930      	ldr	r1, [pc, #192]	; (8004eec <I2C_MasterRequestRead+0x194>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f961 	bl	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e054      	b.n	8004ee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4929      	ldr	r1, [pc, #164]	; (8004ef0 <I2C_MasterRequestRead+0x198>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f951 	bl	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e044      	b.n	8004ee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f8d9 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d103      	bne.n	8004eb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e017      	b.n	8004ee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	11db      	asrs	r3, r3, #7
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0306 	and.w	r3, r3, #6
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f063 030e 	orn	r3, r3, #14
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <I2C_MasterRequestRead+0x198>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f90d 	bl	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	00010008 	.word	0x00010008
 8004ef0:	00010002 	.word	0x00010002

08004ef4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	; (800503c <I2C_DMAAbort+0x148>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	4a4a      	ldr	r2, [pc, #296]	; (8005040 <I2C_DMAAbort+0x14c>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0a1a      	lsrs	r2, r3, #8
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00da      	lsls	r2, r3, #3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f3a:	e00a      	b.n	8004f52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f50:	d0ea      	beq.n	8004f28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5e:	2200      	movs	r2, #0
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	2200      	movs	r2, #0
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d10e      	bne.n	8004fe2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7fe fcd4 	bl	8003988 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe0:	e027      	b.n	8005032 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fe8:	2b28      	cmp	r3, #40	; 0x28
 8004fea:	d117      	bne.n	800501c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800500a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2228      	movs	r2, #40	; 0x28
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800501a:	e007      	b.n	800502c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f7fe fca1 	bl	8003974 <HAL_I2C_ErrorCallback>
}
 8005032:	bf00      	nop
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000000 	.word	0x20000000
 8005040:	14f8b589 	.word	0x14f8b589

08005044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005054:	e025      	b.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d021      	beq.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fd fa49 	bl	80024f4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d116      	bne.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e023      	b.n	80050ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10d      	bne.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	e00c      	b.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d0b6      	beq.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005100:	e051      	b.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	d123      	bne.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800512a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f043 0204 	orr.w	r2, r3, #4
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e046      	b.n	80051e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d021      	beq.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fd f9c7 	bl	80024f4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d116      	bne.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e020      	b.n	80051e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10c      	bne.n	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	e00b      	b.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	43da      	mvns	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d18d      	bne.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051fc:	e02d      	b.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f900 	bl	8005404 <I2C_IsAcknowledgeFailed>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e02d      	b.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d021      	beq.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fd f96d 	bl	80024f4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d116      	bne.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d1ca      	bne.n	80051fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800527e:	e02d      	b.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f8bf 	bl	8005404 <I2C_IsAcknowledgeFailed>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e02d      	b.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d021      	beq.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005298:	f7fd f92c 	bl	80024f4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d116      	bne.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e007      	b.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d1ca      	bne.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	4a13      	ldr	r2, [pc, #76]	; (8005354 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	0a1a      	lsrs	r2, r3, #8
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b01      	subs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f043 0220 	orr.w	r2, r3, #32
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e008      	b.n	8005344 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800533c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005340:	d0e9      	beq.n	8005316 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000000 	.word	0x20000000
 8005354:	14f8b589 	.word	0x14f8b589

08005358 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005364:	e042      	b.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d119      	bne.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0210 	mvn.w	r2, #16
 800537c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e029      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fd f8a4 	bl	80024f4 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e007      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d1b5      	bne.n	8005366 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d11b      	bne.n	8005454 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005424:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0204 	orr.w	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005472:	d103      	bne.n	800547c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800547a:	e007      	b.n	800548c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005484:	d102      	bne.n	800548c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2208      	movs	r2, #8
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_PWREx_EnableOverDrive+0x90>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_PWREx_EnableOverDrive+0x90>)
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6413      	str	r3, [r2, #64]	; 0x40
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_PWREx_EnableOverDrive+0x90>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054be:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_PWREx_EnableOverDrive+0x94>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054c4:	f7fd f816 	bl	80024f4 <HAL_GetTick>
 80054c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054ca:	e009      	b.n	80054e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054cc:	f7fd f812 	bl	80024f4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054da:	d901      	bls.n	80054e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e01f      	b.n	8005520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054e0:	4b13      	ldr	r3, [pc, #76]	; (8005530 <HAL_PWREx_EnableOverDrive+0x98>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d1ee      	bne.n	80054cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f4:	f7fc fffe 	bl	80024f4 <HAL_GetTick>
 80054f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054fa:	e009      	b.n	8005510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054fc:	f7fc fffa 	bl	80024f4 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550a:	d901      	bls.n	8005510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e007      	b.n	8005520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_PWREx_EnableOverDrive+0x98>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800551c:	d1ee      	bne.n	80054fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	420e0040 	.word	0x420e0040
 8005530:	40007000 	.word	0x40007000
 8005534:	420e0044 	.word	0x420e0044

08005538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0cc      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800554c:	4b68      	ldr	r3, [pc, #416]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d90c      	bls.n	8005574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b65      	ldr	r3, [pc, #404]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b63      	ldr	r3, [pc, #396]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0b8      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800558c:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a58      	ldr	r2, [pc, #352]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a4:	4b53      	ldr	r3, [pc, #332]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4a52      	ldr	r2, [pc, #328]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b0:	4b50      	ldr	r3, [pc, #320]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	494d      	ldr	r1, [pc, #308]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d044      	beq.n	8005658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d107      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d119      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e07f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f6:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e06f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005606:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e067      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005616:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4934      	ldr	r1, [pc, #208]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005628:	f7fc ff64 	bl	80024f4 <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	e00a      	b.n	8005646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005630:	f7fc ff60 	bl	80024f4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	; 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e04f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 020c 	and.w	r2, r3, #12
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	429a      	cmp	r2, r3
 8005656:	d1eb      	bne.n	8005630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d20c      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b20      	ldr	r3, [pc, #128]	; (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e032      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4916      	ldr	r1, [pc, #88]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	490e      	ldr	r1, [pc, #56]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056be:	f000 fb7f 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 80056c2:	4602      	mov	r2, r0
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	490a      	ldr	r1, [pc, #40]	; (80056f8 <HAL_RCC_ClockConfig+0x1c0>)
 80056d0:	5ccb      	ldrb	r3, [r1, r3]
 80056d2:	fa22 f303 	lsr.w	r3, r2, r3
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <HAL_RCC_ClockConfig+0x1c4>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_RCC_ClockConfig+0x1c8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fc fec4 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023c00 	.word	0x40023c00
 80056f4:	40023800 	.word	0x40023800
 80056f8:	0800b748 	.word	0x0800b748
 80056fc:	20000000 	.word	0x20000000
 8005700:	20000004 	.word	0x20000004

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <HAL_RCC_GetHCLKFreq+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000000 	.word	0x20000000

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005720:	f7ff fff0 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	0800b758 	.word	0x0800b758

08005744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005748:	f7ff ffdc 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0b5b      	lsrs	r3, r3, #13
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4903      	ldr	r1, [pc, #12]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	0800b758 	.word	0x0800b758

0800576c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d010      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	496c      	ldr	r1, [pc, #432]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80057c2:	2301      	movs	r3, #1
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d010      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80057d2:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	4960      	ldr	r1, [pc, #384]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d017      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005800:	4b58      	ldr	r3, [pc, #352]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	4955      	ldr	r1, [pc, #340]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d101      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005820:	2301      	movs	r3, #1
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800582c:	2301      	movs	r3, #1
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d017      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800583c:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	4946      	ldr	r1, [pc, #280]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800585a:	d101      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005868:	2301      	movs	r3, #1
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 808a 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4a38      	ldr	r2, [pc, #224]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005888:	6413      	str	r3, [r2, #64]	; 0x40
 800588a:	4b36      	ldr	r3, [pc, #216]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005896:	4b34      	ldr	r3, [pc, #208]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a33      	ldr	r2, [pc, #204]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058a2:	f7fc fe27 	bl	80024f4 <HAL_GetTick>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fc fe23 	bl	80024f4 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e278      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02f      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d028      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e6:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f0:	4b1e      	ldr	r3, [pc, #120]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058fc:	4a19      	ldr	r2, [pc, #100]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005902:	4b18      	ldr	r3, [pc, #96]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d114      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800590e:	f7fc fdf1 	bl	80024f4 <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	e00a      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fc fded 	bl	80024f4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e240      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ee      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005944:	d114      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	4902      	ldr	r1, [pc, #8]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]
 8005960:	e00c      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000
 800596c:	42470e40 	.word	0x42470e40
 8005970:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a49      	ldr	r2, [pc, #292]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005976:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800597a:	6093      	str	r3, [r2, #8]
 800597c:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800597e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005988:	4944      	ldr	r1, [pc, #272]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800598a:	4313      	orrs	r3, r2
 800598c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d004      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80059a0:	4b3f      	ldr	r3, [pc, #252]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80059a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80059b0:	4b3a      	ldr	r3, [pc, #232]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	4937      	ldr	r1, [pc, #220]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059d2:	4b32      	ldr	r3, [pc, #200]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	492e      	ldr	r1, [pc, #184]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059f4:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	4926      	ldr	r1, [pc, #152]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a12:	d101      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005a14:	2301      	movs	r3, #1
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	491a      	ldr	r1, [pc, #104]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	4911      	ldr	r1, [pc, #68]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a64:	d101      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005a66:	2301      	movs	r3, #1
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a78:	f040 80ff 	bne.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a82:	f7fc fd37 	bl	80024f4 <HAL_GetTick>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a88:	e00e      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a8a:	f7fc fd33 	bl	80024f4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d907      	bls.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e188      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	424711e0 	.word	0x424711e0
 8005aa4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa8:	4b7e      	ldr	r3, [pc, #504]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ea      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d124      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005adc:	4b71      	ldr	r3, [pc, #452]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	3301      	adds	r3, #1
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aee:	4b6d      	ldr	r3, [pc, #436]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af4:	0e1b      	lsrs	r3, r3, #24
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	431a      	orrs	r2, r3
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	431a      	orrs	r2, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	061b      	lsls	r3, r3, #24
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	071b      	lsls	r3, r3, #28
 8005b1e:	4961      	ldr	r1, [pc, #388]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d035      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b50:	d130      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005b52:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b64:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	0f1b      	lsrs	r3, r3, #28
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	3b01      	subs	r3, #1
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	071b      	lsls	r3, r3, #28
 8005b94:	4943      	ldr	r1, [pc, #268]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b9c:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba2:	f023 021f 	bic.w	r2, r3, #31
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	493d      	ldr	r1, [pc, #244]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d029      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc8:	d124      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bca:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bdc:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be2:	0f1b      	lsrs	r3, r3, #28
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	019b      	lsls	r3, r3, #6
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	061b      	lsls	r3, r3, #24
 8005c06:	431a      	orrs	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	071b      	lsls	r3, r3, #28
 8005c0c:	4925      	ldr	r1, [pc, #148]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	3b01      	subs	r3, #1
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	071b      	lsls	r3, r3, #28
 8005c46:	4917      	ldr	r1, [pc, #92]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c54:	f7fc fc4e 	bl	80024f4 <HAL_GetTick>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c5c:	f7fc fc4a 	bl	80024f4 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e09f      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 8095 	bne.w	8005dac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c88:	f7fc fc34 	bl	80024f4 <HAL_GetTick>
 8005c8c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c8e:	e00f      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c90:	f7fc fc30 	bl	80024f4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d908      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e085      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	42470068 	.word	0x42470068
 8005cac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cb0:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbc:	d0e8      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02b      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d127      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	431a      	orrs	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	4928      	ldr	r1, [pc, #160]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	4922      	ldr	r1, [pc, #136]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d4a:	d118      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	0e1b      	lsrs	r3, r3, #24
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	019b      	lsls	r3, r3, #6
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	061b      	lsls	r3, r3, #24
 8005d76:	4910      	ldr	r1, [pc, #64]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d84:	f7fc fbb6 	bl	80024f4 <HAL_GetTick>
 8005d88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d8c:	f7fc fbb2 	bl	80024f4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e007      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005daa:	d1ef      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3730      	adds	r7, #48	; 0x30
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	42470070 	.word	0x42470070

08005dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ddc:	4bce      	ldr	r3, [pc, #824]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 030c 	and.w	r3, r3, #12
 8005de4:	2b0c      	cmp	r3, #12
 8005de6:	f200 818d 	bhi.w	8006104 <HAL_RCC_GetSysClockFreq+0x344>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <HAL_RCC_GetSysClockFreq+0x30>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08006105 	.word	0x08006105
 8005df8:	08006105 	.word	0x08006105
 8005dfc:	08006105 	.word	0x08006105
 8005e00:	08005e2b 	.word	0x08005e2b
 8005e04:	08006105 	.word	0x08006105
 8005e08:	08006105 	.word	0x08006105
 8005e0c:	08006105 	.word	0x08006105
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08006105 	.word	0x08006105
 8005e18:	08006105 	.word	0x08006105
 8005e1c:	08006105 	.word	0x08006105
 8005e20:	08005fa5 	.word	0x08005fa5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e24:	4bbd      	ldr	r3, [pc, #756]	; (800611c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e26:	61bb      	str	r3, [r7, #24]
       break;
 8005e28:	e16f      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e2a:	4bbd      	ldr	r3, [pc, #756]	; (8006120 <HAL_RCC_GetSysClockFreq+0x360>)
 8005e2c:	61bb      	str	r3, [r7, #24]
      break;
 8005e2e:	e16c      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e30:	4bb9      	ldr	r3, [pc, #740]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e38:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e3a:	4bb7      	ldr	r3, [pc, #732]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d053      	beq.n	8005eee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e46:	4bb4      	ldr	r3, [pc, #720]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	ea02 0400 	and.w	r4, r2, r0
 8005e5e:	603c      	str	r4, [r7, #0]
 8005e60:	400b      	ands	r3, r1
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	014b      	lsls	r3, r1, #5
 8005e76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e7a:	0142      	lsls	r2, r0, #5
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4623      	mov	r3, r4
 8005e82:	1ac0      	subs	r0, r0, r3
 8005e84:	462b      	mov	r3, r5
 8005e86:	eb61 0103 	sbc.w	r1, r1, r3
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	018b      	lsls	r3, r1, #6
 8005e94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e98:	0182      	lsls	r2, r0, #6
 8005e9a:	1a12      	subs	r2, r2, r0
 8005e9c:	eb63 0301 	sbc.w	r3, r3, r1
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	00d9      	lsls	r1, r3, #3
 8005eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eae:	00d0      	lsls	r0, r2, #3
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	1852      	adds	r2, r2, r1
 8005eb8:	4629      	mov	r1, r5
 8005eba:	eb43 0101 	adc.w	r1, r3, r1
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	f04f 0000 	mov.w	r0, #0
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	0259      	lsls	r1, r3, #9
 8005eca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ece:	0250      	lsls	r0, r2, #9
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	461a      	mov	r2, r3
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	f7fa fe92 	bl	8000c08 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4613      	mov	r3, r2
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e04c      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eee:	4b8a      	ldr	r3, [pc, #552]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	ea02 0a00 	and.w	sl, r2, r0
 8005f06:	ea03 0b01 	and.w	fp, r3, r1
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	014b      	lsls	r3, r1, #5
 8005f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f1c:	0142      	lsls	r2, r0, #5
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4619      	mov	r1, r3
 8005f22:	ebb0 000a 	subs.w	r0, r0, sl
 8005f26:	eb61 010b 	sbc.w	r1, r1, fp
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	018b      	lsls	r3, r1, #6
 8005f34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f38:	0182      	lsls	r2, r0, #6
 8005f3a:	1a12      	subs	r2, r2, r0
 8005f3c:	eb63 0301 	sbc.w	r3, r3, r1
 8005f40:	f04f 0000 	mov.w	r0, #0
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	00d9      	lsls	r1, r3, #3
 8005f4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f4e:	00d0      	lsls	r0, r2, #3
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	eb12 020a 	adds.w	r2, r2, sl
 8005f58:	eb43 030b 	adc.w	r3, r3, fp
 8005f5c:	f04f 0000 	mov.w	r0, #0
 8005f60:	f04f 0100 	mov.w	r1, #0
 8005f64:	0299      	lsls	r1, r3, #10
 8005f66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f6a:	0290      	lsls	r0, r2, #10
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f7fa fe44 	bl	8000c08 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f88:	4b63      	ldr	r3, [pc, #396]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	3301      	adds	r3, #1
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	61bb      	str	r3, [r7, #24]
      break;
 8005fa2:	e0b2      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa4:	4b5c      	ldr	r3, [pc, #368]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fae:	4b5a      	ldr	r3, [pc, #360]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d04d      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fba:	4b57      	ldr	r3, [pc, #348]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	ea02 0800 	and.w	r8, r2, r0
 8005fd2:	ea03 0901 	and.w	r9, r3, r1
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	014b      	lsls	r3, r1, #5
 8005fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fe8:	0142      	lsls	r2, r0, #5
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	ebb0 0008 	subs.w	r0, r0, r8
 8005ff2:	eb61 0109 	sbc.w	r1, r1, r9
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	018b      	lsls	r3, r1, #6
 8006000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006004:	0182      	lsls	r2, r0, #6
 8006006:	1a12      	subs	r2, r2, r0
 8006008:	eb63 0301 	sbc.w	r3, r3, r1
 800600c:	f04f 0000 	mov.w	r0, #0
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	00d9      	lsls	r1, r3, #3
 8006016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800601a:	00d0      	lsls	r0, r2, #3
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	eb12 0208 	adds.w	r2, r2, r8
 8006024:	eb43 0309 	adc.w	r3, r3, r9
 8006028:	f04f 0000 	mov.w	r0, #0
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	0259      	lsls	r1, r3, #9
 8006032:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006036:	0250      	lsls	r0, r2, #9
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	461a      	mov	r2, r3
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	f7fa fdde 	bl	8000c08 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e04a      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	099b      	lsrs	r3, r3, #6
 800605c:	461a      	mov	r2, r3
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	ea02 0400 	and.w	r4, r2, r0
 800606e:	ea03 0501 	and.w	r5, r3, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	014b      	lsls	r3, r1, #5
 8006080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006084:	0142      	lsls	r2, r0, #5
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	1b00      	subs	r0, r0, r4
 800608c:	eb61 0105 	sbc.w	r1, r1, r5
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	018b      	lsls	r3, r1, #6
 800609a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800609e:	0182      	lsls	r2, r0, #6
 80060a0:	1a12      	subs	r2, r2, r0
 80060a2:	eb63 0301 	sbc.w	r3, r3, r1
 80060a6:	f04f 0000 	mov.w	r0, #0
 80060aa:	f04f 0100 	mov.w	r1, #0
 80060ae:	00d9      	lsls	r1, r3, #3
 80060b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060b4:	00d0      	lsls	r0, r2, #3
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	1912      	adds	r2, r2, r4
 80060bc:	eb45 0303 	adc.w	r3, r5, r3
 80060c0:	f04f 0000 	mov.w	r0, #0
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	0299      	lsls	r1, r3, #10
 80060ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060ce:	0290      	lsls	r0, r2, #10
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	461a      	mov	r2, r3
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	f7fa fd92 	bl	8000c08 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	0f1b      	lsrs	r3, r3, #28
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	61bb      	str	r3, [r7, #24]
      break;
 8006102:	e002      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006106:	61bb      	str	r3, [r7, #24]
      break;
 8006108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800610a:	69bb      	ldr	r3, [r7, #24]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800
 800611c:	00f42400 	.word	0x00f42400
 8006120:	007a1200 	.word	0x007a1200

08006124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e28d      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8083 	beq.w	800624a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006144:	4b94      	ldr	r3, [pc, #592]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	2b04      	cmp	r3, #4
 800614e:	d019      	beq.n	8006184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006150:	4b91      	ldr	r3, [pc, #580]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006158:	2b08      	cmp	r3, #8
 800615a:	d106      	bne.n	800616a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800615c:	4b8e      	ldr	r3, [pc, #568]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006168:	d00c      	beq.n	8006184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800616a:	4b8b      	ldr	r3, [pc, #556]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d112      	bne.n	800619c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006176:	4b88      	ldr	r3, [pc, #544]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006182:	d10b      	bne.n	800619c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006184:	4b84      	ldr	r3, [pc, #528]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d05b      	beq.n	8006248 <HAL_RCC_OscConfig+0x124>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d157      	bne.n	8006248 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e25a      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d106      	bne.n	80061b4 <HAL_RCC_OscConfig+0x90>
 80061a6:	4b7c      	ldr	r3, [pc, #496]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7b      	ldr	r2, [pc, #492]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e01d      	b.n	80061f0 <HAL_RCC_OscConfig+0xcc>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCC_OscConfig+0xb4>
 80061be:	4b76      	ldr	r3, [pc, #472]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a75      	ldr	r2, [pc, #468]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4b73      	ldr	r3, [pc, #460]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a72      	ldr	r2, [pc, #456]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e00b      	b.n	80061f0 <HAL_RCC_OscConfig+0xcc>
 80061d8:	4b6f      	ldr	r3, [pc, #444]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6e      	ldr	r2, [pc, #440]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	4b6c      	ldr	r3, [pc, #432]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a6b      	ldr	r2, [pc, #428]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d013      	beq.n	8006220 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc f97c 	bl	80024f4 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006200:	f7fc f978 	bl	80024f4 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b64      	cmp	r3, #100	; 0x64
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e21f      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006212:	4b61      	ldr	r3, [pc, #388]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0xdc>
 800621e:	e014      	b.n	800624a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fc f968 	bl	80024f4 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006228:	f7fc f964 	bl	80024f4 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b64      	cmp	r3, #100	; 0x64
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e20b      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800623a:	4b57      	ldr	r3, [pc, #348]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x104>
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d06f      	beq.n	8006336 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006256:	4b50      	ldr	r3, [pc, #320]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	2b00      	cmp	r3, #0
 8006260:	d017      	beq.n	8006292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006262:	4b4d      	ldr	r3, [pc, #308]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800626a:	2b08      	cmp	r3, #8
 800626c:	d105      	bne.n	800627a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d11c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b44      	ldr	r3, [pc, #272]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d116      	bne.n	80062c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006292:	4b41      	ldr	r3, [pc, #260]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_RCC_OscConfig+0x186>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e1d3      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062aa:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4937      	ldr	r1, [pc, #220]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062be:	e03a      	b.n	8006336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062c8:	4b34      	ldr	r3, [pc, #208]	; (800639c <HAL_RCC_OscConfig+0x278>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fc f911 	bl	80024f4 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d6:	f7fc f90d 	bl	80024f4 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e1b4      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e8:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f4:	4b28      	ldr	r3, [pc, #160]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4925      	ldr	r1, [pc, #148]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
 8006308:	e015      	b.n	8006336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <HAL_RCC_OscConfig+0x278>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006310:	f7fc f8f0 	bl	80024f4 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006318:	f7fc f8ec 	bl	80024f4 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e193      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d036      	beq.n	80063b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <HAL_RCC_OscConfig+0x27c>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006350:	f7fc f8d0 	bl	80024f4 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006358:	f7fc f8cc 	bl	80024f4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e173      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x234>
 8006376:	e01b      	b.n	80063b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_RCC_OscConfig+0x27c>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637e:	f7fc f8b9 	bl	80024f4 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006384:	e00e      	b.n	80063a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006386:	f7fc f8b5 	bl	80024f4 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d907      	bls.n	80063a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e15c      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
 8006398:	40023800 	.word	0x40023800
 800639c:	42470000 	.word	0x42470000
 80063a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a4:	4b8a      	ldr	r3, [pc, #552]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ea      	bne.n	8006386 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8097 	beq.w	80064ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c2:	4b83      	ldr	r3, [pc, #524]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4a7e      	ldr	r2, [pc, #504]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6413      	str	r3, [r2, #64]	; 0x40
 80063de:	4b7c      	ldr	r3, [pc, #496]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ee:	4b79      	ldr	r3, [pc, #484]	; (80065d4 <HAL_RCC_OscConfig+0x4b0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d118      	bne.n	800642c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fa:	4b76      	ldr	r3, [pc, #472]	; (80065d4 <HAL_RCC_OscConfig+0x4b0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a75      	ldr	r2, [pc, #468]	; (80065d4 <HAL_RCC_OscConfig+0x4b0>)
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006406:	f7fc f875 	bl	80024f4 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640e:	f7fc f871 	bl	80024f4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e118      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006420:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <HAL_RCC_OscConfig+0x4b0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d106      	bne.n	8006442 <HAL_RCC_OscConfig+0x31e>
 8006434:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006438:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6713      	str	r3, [r2, #112]	; 0x70
 8006440:	e01c      	b.n	800647c <HAL_RCC_OscConfig+0x358>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b05      	cmp	r3, #5
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0x340>
 800644a:	4b61      	ldr	r3, [pc, #388]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a60      	ldr	r2, [pc, #384]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006450:	f043 0304 	orr.w	r3, r3, #4
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
 8006456:	4b5e      	ldr	r3, [pc, #376]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	4a5d      	ldr	r2, [pc, #372]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	6713      	str	r3, [r2, #112]	; 0x70
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0x358>
 8006464:	4b5a      	ldr	r3, [pc, #360]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4a59      	ldr	r2, [pc, #356]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6713      	str	r3, [r2, #112]	; 0x70
 8006470:	4b57      	ldr	r3, [pc, #348]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4a56      	ldr	r2, [pc, #344]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006476:	f023 0304 	bic.w	r3, r3, #4
 800647a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fc f836 	bl	80024f4 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648a:	e00a      	b.n	80064a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648c:	f7fc f832 	bl	80024f4 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	; 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0d7      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a2:	4b4b      	ldr	r3, [pc, #300]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0ee      	beq.n	800648c <HAL_RCC_OscConfig+0x368>
 80064ae:	e014      	b.n	80064da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fc f820 	bl	80024f4 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b8:	f7fc f81c 	bl	80024f4 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e0c1      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ce:	4b40      	ldr	r3, [pc, #256]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ee      	bne.n	80064b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e0:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	4a3a      	ldr	r2, [pc, #232]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ad 	beq.w	8006650 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064f6:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d060      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d145      	bne.n	8006596 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650a:	4b33      	ldr	r3, [pc, #204]	; (80065d8 <HAL_RCC_OscConfig+0x4b4>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fb fff0 	bl	80024f4 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006518:	f7fb ffec 	bl	80024f4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e093      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	019b      	lsls	r3, r3, #6
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	3b01      	subs	r3, #1
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	071b      	lsls	r3, r3, #28
 8006562:	491b      	ldr	r1, [pc, #108]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 8006564:	4313      	orrs	r3, r2
 8006566:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <HAL_RCC_OscConfig+0x4b4>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fb ffc1 	bl	80024f4 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006576:	f7fb ffbd 	bl	80024f4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e064      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCC_OscConfig+0x452>
 8006594:	e05c      	b.n	8006650 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <HAL_RCC_OscConfig+0x4b4>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fb ffaa 	bl	80024f4 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a4:	f7fb ffa6 	bl	80024f4 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e04d      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCC_OscConfig+0x4ac>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x480>
 80065c2:	e045      	b.n	8006650 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d107      	bne.n	80065dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e040      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40007000 	.word	0x40007000
 80065d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <HAL_RCC_OscConfig+0x538>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d030      	beq.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d129      	bne.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d122      	bne.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800660c:	4013      	ands	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006614:	4293      	cmp	r3, r2
 8006616:	d119      	bne.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	3b01      	subs	r3, #1
 8006626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d10f      	bne.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006638:	429a      	cmp	r2, r3
 800663a:	d107      	bne.n	800664c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40023800 	.word	0x40023800

08006660 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e083      	b.n	800677a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7f5b      	ldrb	r3, [r3, #29]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb f9f8 	bl	8001a78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	22ca      	movs	r2, #202	; 0xca
 8006694:	625a      	str	r2, [r3, #36]	; 0x24
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2253      	movs	r2, #83	; 0x53
 800669c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f897 	bl	80067d2 <RTC_EnterInitMode>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2204      	movs	r2, #4
 80066b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e05e      	b.n	800677a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68d2      	ldr	r2, [r2, #12]
 80066f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6919      	ldr	r1, [r3, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	041a      	lsls	r2, r3, #16
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f829 	bl	8006782 <HAL_RTC_WaitForSynchro>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e018      	b.n	800677a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	22ff      	movs	r2, #255	; 0xff
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006778:	2300      	movs	r3, #0
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800679c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800679e:	f7fb fea9 	bl	80024f4 <HAL_GetTick>
 80067a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067a4:	e009      	b.n	80067ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067a6:	f7fb fea5 	bl	80024f4 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b4:	d901      	bls.n	80067ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e007      	b.n	80067ca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0ee      	beq.n	80067a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d119      	bne.n	8006820 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fb fe7d 	bl	80024f4 <HAL_GetTick>
 80067fa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067fc:	e009      	b.n	8006812 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067fe:	f7fb fe79 	bl	80024f4 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680c:	d901      	bls.n	8006812 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e007      	b.n	8006822 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ee      	beq.n	80067fe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e041      	b.n	80068c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fb fc89 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 fc79 	bl	8007160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d001      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e04e      	b.n	800697e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a23      	ldr	r2, [pc, #140]	; (800698c <HAL_TIM_Base_Start_IT+0xc4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d022      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d01d      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <HAL_TIM_Base_Start_IT+0xc8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <HAL_TIM_Base_Start_IT+0xcc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1c      	ldr	r2, [pc, #112]	; (8006998 <HAL_TIM_Base_Start_IT+0xd0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1b      	ldr	r2, [pc, #108]	; (800699c <HAL_TIM_Base_Start_IT+0xd4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x80>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d111      	bne.n	800696c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d010      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e007      	b.n	800697c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40010400 	.word	0x40010400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40001800 	.word	0x40001800

080069a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e041      	b.n	8006a3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f839 	bl	8006a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f000 fbba 	bl	8007160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <HAL_TIM_PWM_Start+0x24>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e022      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x6a>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d109      	bne.n	8006a9a <HAL_TIM_PWM_Start+0x3e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e015      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x6a>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d109      	bne.n	8006ab4 <HAL_TIM_PWM_Start+0x58>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e008      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x6a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e07c      	b.n	8006bc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0x82>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006adc:	e013      	b.n	8006b06 <HAL_TIM_PWM_Start+0xaa>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Start+0x92>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aec:	e00b      	b.n	8006b06 <HAL_TIM_PWM_Start+0xaa>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_PWM_Start+0xa2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	e003      	b.n	8006b06 <HAL_TIM_PWM_Start+0xaa>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fe10 	bl	8007734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2d      	ldr	r2, [pc, #180]	; (8006bd0 <HAL_TIM_PWM_Start+0x174>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIM_PWM_Start+0xcc>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <HAL_TIM_PWM_Start+0x178>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d101      	bne.n	8006b2c <HAL_TIM_PWM_Start+0xd0>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <HAL_TIM_PWM_Start+0xd2>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <HAL_TIM_PWM_Start+0x174>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d01d      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_TIM_PWM_Start+0x17c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <HAL_TIM_PWM_Start+0x180>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <HAL_TIM_PWM_Start+0x184>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <HAL_TIM_PWM_Start+0x178>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIM_PWM_Start+0x188>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x136>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIM_PWM_Start+0x18c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d111      	bne.n	8006bb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b06      	cmp	r3, #6
 8006ba2:	d010      	beq.n	8006bc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb4:	e007      	b.n	8006bc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0201 	orr.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800

08006bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d122      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d11b      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0202 	mvn.w	r2, #2
 8006c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa77 	bl	8007122 <HAL_TIM_IC_CaptureCallback>
 8006c34:	e005      	b.n	8006c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa69 	bl	800710e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa7a 	bl	8007136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0204 	mvn.w	r2, #4
 8006c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa4d 	bl	8007122 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa3f 	bl	800710e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa50 	bl	8007136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0208 	mvn.w	r2, #8
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa23 	bl	8007122 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa15 	bl	800710e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa26 	bl	8007136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0210 	mvn.w	r2, #16
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9f9 	bl	8007122 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9eb 	bl	800710e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f9fc 	bl	8007136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10e      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d107      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0201 	mvn.w	r2, #1
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fd2a 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	2b80      	cmp	r3, #128	; 0x80
 8006d7c:	d10e      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b80      	cmp	r3, #128	; 0x80
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fdca 	bl	8007930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9c1 	bl	800714a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0220 	mvn.w	r2, #32
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fd94 	bl	800791c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e0ae      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	f200 809f 	bhi.w	8006f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e65 	.word	0x08006e65
 8006e34:	08006f69 	.word	0x08006f69
 8006e38:	08006f69 	.word	0x08006f69
 8006e3c:	08006f69 	.word	0x08006f69
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006f69 	.word	0x08006f69
 8006e48:	08006f69 	.word	0x08006f69
 8006e4c:	08006f69 	.word	0x08006f69
 8006e50:	08006ee7 	.word	0x08006ee7
 8006e54:	08006f69 	.word	0x08006f69
 8006e58:	08006f69 	.word	0x08006f69
 8006e5c:	08006f69 	.word	0x08006f69
 8006e60:	08006f27 	.word	0x08006f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fa18 	bl	80072a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0208 	orr.w	r2, r2, #8
 8006e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0204 	bic.w	r2, r2, #4
 8006e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6999      	ldr	r1, [r3, #24]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	619a      	str	r2, [r3, #24]
      break;
 8006ea2:	e064      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fa68 	bl	8007380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6999      	ldr	r1, [r3, #24]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	619a      	str	r2, [r3, #24]
      break;
 8006ee4:	e043      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fabd 	bl	800746c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0208 	orr.w	r2, r2, #8
 8006f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0204 	bic.w	r2, r2, #4
 8006f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69d9      	ldr	r1, [r3, #28]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	61da      	str	r2, [r3, #28]
      break;
 8006f24:	e023      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fb11 	bl	8007554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69da      	ldr	r2, [r3, #28]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69d9      	ldr	r1, [r3, #28]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	021a      	lsls	r2, r3, #8
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	61da      	str	r2, [r3, #28]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_ConfigClockSource+0x1c>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e0b4      	b.n	8007106 <HAL_TIM_ConfigClockSource+0x186>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd4:	d03e      	beq.n	8007054 <HAL_TIM_ConfigClockSource+0xd4>
 8006fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fda:	f200 8087 	bhi.w	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	f000 8086 	beq.w	80070f2 <HAL_TIM_ConfigClockSource+0x172>
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d87f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b70      	cmp	r3, #112	; 0x70
 8006fee:	d01a      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xa6>
 8006ff0:	2b70      	cmp	r3, #112	; 0x70
 8006ff2:	d87b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b60      	cmp	r3, #96	; 0x60
 8006ff6:	d050      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x11a>
 8006ff8:	2b60      	cmp	r3, #96	; 0x60
 8006ffa:	d877      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b50      	cmp	r3, #80	; 0x50
 8006ffe:	d03c      	beq.n	800707a <HAL_TIM_ConfigClockSource+0xfa>
 8007000:	2b50      	cmp	r3, #80	; 0x50
 8007002:	d873      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d058      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x13a>
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d86f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b30      	cmp	r3, #48	; 0x30
 800700e:	d064      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	2b30      	cmp	r3, #48	; 0x30
 8007012:	d86b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b20      	cmp	r3, #32
 8007016:	d060      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	2b20      	cmp	r3, #32
 800701a:	d867      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d05c      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007020:	2b10      	cmp	r3, #16
 8007022:	d05a      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007024:	e062      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f000 fb5d 	bl	80076f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	609a      	str	r2, [r3, #8]
      break;
 8007052:	e04f      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6899      	ldr	r1, [r3, #8]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f000 fb46 	bl	80076f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007076:	609a      	str	r2, [r3, #8]
      break;
 8007078:	e03c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	f000 faba 	bl	8007600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2150      	movs	r1, #80	; 0x50
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fb13 	bl	80076be <TIM_ITRx_SetConfig>
      break;
 8007098:	e02c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 fad9 	bl	800765e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2160      	movs	r1, #96	; 0x60
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fb03 	bl	80076be <TIM_ITRx_SetConfig>
      break;
 80070b8:	e01c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6859      	ldr	r1, [r3, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f000 fa9a 	bl	8007600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2140      	movs	r1, #64	; 0x40
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 faf3 	bl	80076be <TIM_ITRx_SetConfig>
      break;
 80070d8:	e00c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 faea 	bl	80076be <TIM_ITRx_SetConfig>
      break;
 80070ea:	e003      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	e000      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a40      	ldr	r2, [pc, #256]	; (8007274 <TIM_Base_SetConfig+0x114>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3d      	ldr	r2, [pc, #244]	; (8007278 <TIM_Base_SetConfig+0x118>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a3c      	ldr	r2, [pc, #240]	; (800727c <TIM_Base_SetConfig+0x11c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <TIM_Base_SetConfig+0x120>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <TIM_Base_SetConfig+0x124>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2f      	ldr	r2, [pc, #188]	; (8007274 <TIM_Base_SetConfig+0x114>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d02b      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c0:	d027      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <TIM_Base_SetConfig+0x118>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d023      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2b      	ldr	r2, [pc, #172]	; (800727c <TIM_Base_SetConfig+0x11c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01f      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <TIM_Base_SetConfig+0x120>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d01b      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a29      	ldr	r2, [pc, #164]	; (8007284 <TIM_Base_SetConfig+0x124>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d017      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a28      	ldr	r2, [pc, #160]	; (8007288 <TIM_Base_SetConfig+0x128>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a27      	ldr	r2, [pc, #156]	; (800728c <TIM_Base_SetConfig+0x12c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a26      	ldr	r2, [pc, #152]	; (8007290 <TIM_Base_SetConfig+0x130>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <TIM_Base_SetConfig+0x134>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a24      	ldr	r2, [pc, #144]	; (8007298 <TIM_Base_SetConfig+0x138>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a23      	ldr	r2, [pc, #140]	; (800729c <TIM_Base_SetConfig+0x13c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <TIM_Base_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_Base_SetConfig+0xf8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <TIM_Base_SetConfig+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d103      	bne.n	8007260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	615a      	str	r2, [r3, #20]
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40010400 	.word	0x40010400
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800
 8007294:	40001800 	.word	0x40001800
 8007298:	40001c00 	.word	0x40001c00
 800729c:	40002000 	.word	0x40002000

080072a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 0302 	bic.w	r3, r3, #2
 80072e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a20      	ldr	r2, [pc, #128]	; (8007378 <TIM_OC1_SetConfig+0xd8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC1_SetConfig+0x64>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	; (800737c <TIM_OC1_SetConfig+0xdc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10c      	bne.n	800731e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0308 	bic.w	r3, r3, #8
 800730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a15      	ldr	r2, [pc, #84]	; (8007378 <TIM_OC1_SetConfig+0xd8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC1_SetConfig+0x8e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <TIM_OC1_SetConfig+0xdc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d111      	bne.n	8007352 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800733c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400

08007380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0210 	bic.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0320 	bic.w	r3, r3, #32
 80073ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a22      	ldr	r2, [pc, #136]	; (8007464 <TIM_OC2_SetConfig+0xe4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_OC2_SetConfig+0x68>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a21      	ldr	r2, [pc, #132]	; (8007468 <TIM_OC2_SetConfig+0xe8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d10d      	bne.n	8007404 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <TIM_OC2_SetConfig+0xe4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC2_SetConfig+0x94>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <TIM_OC2_SetConfig+0xe8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d113      	bne.n	800743c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010000 	.word	0x40010000
 8007468:	40010400 	.word	0x40010400

0800746c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a21      	ldr	r2, [pc, #132]	; (800754c <TIM_OC3_SetConfig+0xe0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_OC3_SetConfig+0x66>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a20      	ldr	r2, [pc, #128]	; (8007550 <TIM_OC3_SetConfig+0xe4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10d      	bne.n	80074ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a16      	ldr	r2, [pc, #88]	; (800754c <TIM_OC3_SetConfig+0xe0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d003      	beq.n	80074fe <TIM_OC3_SetConfig+0x92>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a15      	ldr	r2, [pc, #84]	; (8007550 <TIM_OC3_SetConfig+0xe4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d113      	bne.n	8007526 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800750c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	621a      	str	r2, [r3, #32]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800759e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	031b      	lsls	r3, r3, #12
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <TIM_OC4_SetConfig+0xa4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC4_SetConfig+0x68>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a11      	ldr	r2, [pc, #68]	; (80075fc <TIM_OC4_SetConfig+0xa8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d109      	bne.n	80075d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40010400 	.word	0x40010400

08007600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800762a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 030a 	bic.w	r3, r3, #10
 800763c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	621a      	str	r2, [r3, #32]
}
 8007652:	bf00      	nop
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800765e:	b480      	push	{r7}
 8007660:	b087      	sub	sp, #28
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0210 	bic.w	r2, r3, #16
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800769a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	621a      	str	r2, [r3, #32]
}
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	f043 0307 	orr.w	r3, r3, #7
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	609a      	str	r2, [r3, #8]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800770e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	021a      	lsls	r2, r3, #8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	431a      	orrs	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4313      	orrs	r3, r2
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	609a      	str	r2, [r3, #8]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2201      	movs	r2, #1
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	43db      	mvns	r3, r3
 8007756:	401a      	ands	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a1a      	ldr	r2, [r3, #32]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	431a      	orrs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007794:	2302      	movs	r3, #2
 8007796:	e05a      	b.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d022      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d01d      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d018      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1a      	ldr	r2, [pc, #104]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a18      	ldr	r2, [pc, #96]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a17      	ldr	r2, [pc, #92]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a15      	ldr	r2, [pc, #84]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d10c      	bne.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4313      	orrs	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40010000 	.word	0x40010000
 8007860:	40000400 	.word	0x40000400
 8007864:	40000800 	.word	0x40000800
 8007868:	40000c00 	.word	0x40000c00
 800786c:	40010400 	.word	0x40010400
 8007870:	40014000 	.word	0x40014000
 8007874:	40001800 	.word	0x40001800

08007878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007890:	2302      	movs	r3, #2
 8007892:	e03d      	b.n	8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e03f      	b.n	80079d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fa fcc2 	bl	80022f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	; 0x24
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fddb 	bl	8008544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800799c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695a      	ldr	r2, [r3, #20]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08a      	sub	sp, #40	; 0x28
 80079e2:	af02      	add	r7, sp, #8
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d17c      	bne.n	8007af8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_UART_Transmit+0x2c>
 8007a04:	88fb      	ldrh	r3, [r7, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e075      	b.n	8007afa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Transmit+0x3e>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e06e      	b.n	8007afa <HAL_UART_Transmit+0x11c>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2221      	movs	r2, #33	; 0x21
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a32:	f7fa fd5f 	bl	80024f4 <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x82>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a70:	e02a      	b.n	8007ac8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fb1f 	bl	80080c0 <UART_WaitOnFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e036      	b.n	8007afa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e007      	b.n	8007aba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1cf      	bne.n	8007a72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2140      	movs	r1, #64	; 0x40
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 faef 	bl	80080c0 <UART_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e006      	b.n	8007afa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d11d      	bne.n	8007b58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_UART_Receive_IT+0x26>
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e016      	b.n	8007b5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Receive_IT+0x38>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e00f      	b.n	8007b5a <HAL_UART_Receive_IT+0x58>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fb24 	bl	800819c <UART_Start_Receive_IT>
 8007b54:	4603      	mov	r3, r0
 8007b56:	e000      	b.n	8007b5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
  }
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b0ba      	sub	sp, #232	; 0xe8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10f      	bne.n	8007bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_UART_IRQHandler+0x66>
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fc03 	bl	80083ce <UART_Receive_IT>
      return;
 8007bc8:	e256      	b.n	8008078 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 80de 	beq.w	8007d90 <HAL_UART_IRQHandler+0x22c>
 8007bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d106      	bne.n	8007bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80d1 	beq.w	8007d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00b      	beq.n	8007c12 <HAL_UART_IRQHandler+0xae>
 8007bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	f043 0201 	orr.w	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <HAL_UART_IRQHandler+0xd2>
 8007c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f043 0202 	orr.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <HAL_UART_IRQHandler+0xf6>
 8007c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d011      	beq.n	8007c8a <HAL_UART_IRQHandler+0x126>
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d105      	bne.n	8007c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f043 0208 	orr.w	r2, r3, #8
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 81ed 	beq.w	800806e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x14e>
 8007ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb8e 	bl	80083ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2301      	moveq	r3, #1
 8007cc2:	2300      	movne	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <HAL_UART_IRQHandler+0x17a>
 8007cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d04f      	beq.n	8007d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa96 	bl	8008210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d141      	bne.n	8007d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3314      	adds	r3, #20
 8007cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1d9      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d013      	beq.n	8007d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	4a7d      	ldr	r2, [pc, #500]	; (8007f40 <HAL_UART_IRQHandler+0x3dc>)
 8007d4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fa fd5b 	bl	800280e <HAL_DMA_Abort_IT>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	e00e      	b.n	8007d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f990 	bl	8008094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d74:	e00a      	b.n	8007d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f98c 	bl	8008094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7c:	e006      	b.n	8007d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f988 	bl	8008094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d8a:	e170      	b.n	800806e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	bf00      	nop
    return;
 8007d8e:	e16e      	b.n	800806e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	f040 814a 	bne.w	800802e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8143 	beq.w	800802e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 813c 	beq.w	800802e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007db6:	2300      	movs	r3, #0
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	60bb      	str	r3, [r7, #8]
 8007dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd6:	2b40      	cmp	r3, #64	; 0x40
 8007dd8:	f040 80b4 	bne.w	8007f44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8140 	beq.w	8008072 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	f080 8139 	bcs.w	8008072 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e12:	f000 8088 	beq.w	8007f26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1d9      	bne.n	8007e16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3314      	adds	r3, #20
 8007e68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3314      	adds	r3, #20
 8007e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e1      	bne.n	8007e62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3314      	adds	r3, #20
 8007ea4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3314      	adds	r3, #20
 8007ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ec4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e3      	bne.n	8007e9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	330c      	adds	r3, #12
 8007f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f08:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e3      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fa fc04 	bl	800272e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8b6 	bl	80080a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f3c:	e099      	b.n	8008072 <HAL_UART_IRQHandler+0x50e>
 8007f3e:	bf00      	nop
 8007f40:	080082d7 	.word	0x080082d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 808b 	beq.w	8008076 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8086 	beq.w	8008076 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e3      	bne.n	8007f6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e3      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	330c      	adds	r3, #12
 8008008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800800c:	61fa      	str	r2, [r7, #28]
 800800e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	617b      	str	r3, [r7, #20]
   return(result);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e3      	bne.n	8007fe8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f83e 	bl	80080a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800802c:	e023      	b.n	8008076 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_UART_IRQHandler+0x4ea>
 800803a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f959 	bl	80082fe <UART_Transmit_IT>
    return;
 800804c:	e014      	b.n	8008078 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <HAL_UART_IRQHandler+0x514>
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	d008      	beq.n	8008078 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f999 	bl	800839e <UART_EndTransmit_IT>
    return;
 800806c:	e004      	b.n	8008078 <HAL_UART_IRQHandler+0x514>
    return;
 800806e:	bf00      	nop
 8008070:	e002      	b.n	8008078 <HAL_UART_IRQHandler+0x514>
      return;
 8008072:	bf00      	nop
 8008074:	e000      	b.n	8008078 <HAL_UART_IRQHandler+0x514>
      return;
 8008076:	bf00      	nop
  }
}
 8008078:	37e8      	adds	r7, #232	; 0xe8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop

08008080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b090      	sub	sp, #64	; 0x40
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d0:	e050      	b.n	8008174 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d8:	d04c      	beq.n	8008174 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e0:	f7fa fa08 	bl	80024f4 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d241      	bcs.n	8008174 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008110:	637a      	str	r2, [r7, #52]	; 0x34
 8008112:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	613b      	str	r3, [r7, #16]
   return(result);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	63bb      	str	r3, [r7, #56]	; 0x38
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3314      	adds	r3, #20
 8008142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008144:	623a      	str	r2, [r7, #32]
 8008146:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	69f9      	ldr	r1, [r7, #28]
 800814a:	6a3a      	ldr	r2, [r7, #32]
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	61bb      	str	r3, [r7, #24]
   return(result);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e5      	bne.n	8008124 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e00f      	b.n	8008194 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	d09f      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3740      	adds	r7, #64	; 0x40
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2222      	movs	r2, #34	; 0x22
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695a      	ldr	r2, [r3, #20]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0220 	orr.w	r2, r2, #32
 8008200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b095      	sub	sp, #84	; 0x54
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800822e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	330c      	adds	r3, #12
 8008236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008238:	643a      	str	r2, [r7, #64]	; 0x40
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800823e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e5      	bne.n	8008218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3314      	adds	r3, #20
 8008252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	61fb      	str	r3, [r7, #28]
   return(result);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	64bb      	str	r3, [r7, #72]	; 0x48
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3314      	adds	r3, #20
 800826a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800826c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	2b01      	cmp	r3, #1
 8008286:	d119      	bne.n	80082bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60bb      	str	r3, [r7, #8]
   return(result);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	647b      	str	r3, [r7, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a8:	61ba      	str	r2, [r7, #24]
 80082aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	613b      	str	r3, [r7, #16]
   return(result);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082ca:	bf00      	nop
 80082cc:	3754      	adds	r7, #84	; 0x54
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fecf 	bl	8008094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b21      	cmp	r3, #33	; 0x21
 8008310:	d13e      	bne.n	8008390 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d114      	bne.n	8008346 <UART_Transmit_IT+0x48>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008338:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	621a      	str	r2, [r3, #32]
 8008344:	e008      	b.n	8008358 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	1c59      	adds	r1, r3, #1
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6211      	str	r1, [r2, #32]
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4619      	mov	r1, r3
 8008366:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10f      	bne.n	800838c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800837a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	e000      	b.n	8008392 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008390:	2302      	movs	r3, #2
  }
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fe5e 	bl	8008080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b08c      	sub	sp, #48	; 0x30
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b22      	cmp	r3, #34	; 0x22
 80083e0:	f040 80ab 	bne.w	800853a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ec:	d117      	bne.n	800841e <UART_Receive_IT+0x50>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d113      	bne.n	800841e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840c:	b29a      	uxth	r2, r3
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	1c9a      	adds	r2, r3, #2
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
 800841c:	e026      	b.n	800846c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008430:	d007      	beq.n	8008442 <UART_Receive_IT+0x74>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <UART_Receive_IT+0x82>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e008      	b.n	8008462 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800845c:	b2da      	uxtb	r2, r3
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4619      	mov	r1, r3
 800847a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800847c:	2b00      	cmp	r3, #0
 800847e:	d15a      	bne.n	8008536 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0220 	bic.w	r2, r2, #32
 800848e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800849e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695a      	ldr	r2, [r3, #20]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d135      	bne.n	800852c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	613b      	str	r3, [r7, #16]
   return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	623a      	str	r2, [r7, #32]
 80084e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	69f9      	ldr	r1, [r7, #28]
 80084ec:	6a3a      	ldr	r2, [r7, #32]
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b10      	cmp	r3, #16
 8008506:	d10a      	bne.n	800851e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fdbf 	bl	80080a8 <HAL_UARTEx_RxEventCallback>
 800852a:	e002      	b.n	8008532 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7f9 f92f 	bl	8001790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	e002      	b.n	800853c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3730      	adds	r7, #48	; 0x30
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	b09f      	sub	sp, #124	; 0x7c
 800854a:	af00      	add	r7, sp, #0
 800854c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800854e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855a:	68d9      	ldr	r1, [r3, #12]
 800855c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	ea40 0301 	orr.w	r3, r0, r1
 8008564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	431a      	orrs	r2, r3
 8008570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	431a      	orrs	r2, r3
 8008576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	4313      	orrs	r3, r2
 800857c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800857e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008588:	f021 010c 	bic.w	r1, r1, #12
 800858c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008592:	430b      	orrs	r3, r1
 8008594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a2:	6999      	ldr	r1, [r3, #24]
 80085a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	ea40 0301 	orr.w	r3, r0, r1
 80085ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4bc5      	ldr	r3, [pc, #788]	; (80088c8 <UART_SetConfig+0x384>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d004      	beq.n	80085c2 <UART_SetConfig+0x7e>
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	4bc3      	ldr	r3, [pc, #780]	; (80088cc <UART_SetConfig+0x388>)
 80085be:	429a      	cmp	r2, r3
 80085c0:	d103      	bne.n	80085ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c2:	f7fd f8bf 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 80085c6:	6778      	str	r0, [r7, #116]	; 0x74
 80085c8:	e002      	b.n	80085d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ca:	f7fd f8a7 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 80085ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d8:	f040 80b6 	bne.w	8008748 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085de:	461c      	mov	r4, r3
 80085e0:	f04f 0500 	mov.w	r5, #0
 80085e4:	4622      	mov	r2, r4
 80085e6:	462b      	mov	r3, r5
 80085e8:	1891      	adds	r1, r2, r2
 80085ea:	6439      	str	r1, [r7, #64]	; 0x40
 80085ec:	415b      	adcs	r3, r3
 80085ee:	647b      	str	r3, [r7, #68]	; 0x44
 80085f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085f4:	1912      	adds	r2, r2, r4
 80085f6:	eb45 0303 	adc.w	r3, r5, r3
 80085fa:	f04f 0000 	mov.w	r0, #0
 80085fe:	f04f 0100 	mov.w	r1, #0
 8008602:	00d9      	lsls	r1, r3, #3
 8008604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008608:	00d0      	lsls	r0, r2, #3
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	1911      	adds	r1, r2, r4
 8008610:	6639      	str	r1, [r7, #96]	; 0x60
 8008612:	416b      	adcs	r3, r5
 8008614:	667b      	str	r3, [r7, #100]	; 0x64
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	461a      	mov	r2, r3
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	1891      	adds	r1, r2, r2
 8008622:	63b9      	str	r1, [r7, #56]	; 0x38
 8008624:	415b      	adcs	r3, r3
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800862c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008630:	f7f8 faea 	bl	8000c08 <__aeabi_uldivmod>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4ba5      	ldr	r3, [pc, #660]	; (80088d0 <UART_SetConfig+0x38c>)
 800863a:	fba3 2302 	umull	r2, r3, r3, r2
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	011e      	lsls	r6, r3, #4
 8008642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008644:	461c      	mov	r4, r3
 8008646:	f04f 0500 	mov.w	r5, #0
 800864a:	4622      	mov	r2, r4
 800864c:	462b      	mov	r3, r5
 800864e:	1891      	adds	r1, r2, r2
 8008650:	6339      	str	r1, [r7, #48]	; 0x30
 8008652:	415b      	adcs	r3, r3
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
 8008656:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800865a:	1912      	adds	r2, r2, r4
 800865c:	eb45 0303 	adc.w	r3, r5, r3
 8008660:	f04f 0000 	mov.w	r0, #0
 8008664:	f04f 0100 	mov.w	r1, #0
 8008668:	00d9      	lsls	r1, r3, #3
 800866a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800866e:	00d0      	lsls	r0, r2, #3
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	1911      	adds	r1, r2, r4
 8008676:	65b9      	str	r1, [r7, #88]	; 0x58
 8008678:	416b      	adcs	r3, r5
 800867a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	461a      	mov	r2, r3
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	1891      	adds	r1, r2, r2
 8008688:	62b9      	str	r1, [r7, #40]	; 0x28
 800868a:	415b      	adcs	r3, r3
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800868e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008692:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008696:	f7f8 fab7 	bl	8000c08 <__aeabi_uldivmod>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4b8c      	ldr	r3, [pc, #560]	; (80088d0 <UART_SetConfig+0x38c>)
 80086a0:	fba3 1302 	umull	r1, r3, r3, r2
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	2164      	movs	r1, #100	; 0x64
 80086a8:	fb01 f303 	mul.w	r3, r1, r3
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	3332      	adds	r3, #50	; 0x32
 80086b2:	4a87      	ldr	r2, [pc, #540]	; (80088d0 <UART_SetConfig+0x38c>)
 80086b4:	fba2 2303 	umull	r2, r3, r2, r3
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086c0:	441e      	add	r6, r3
 80086c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c4:	4618      	mov	r0, r3
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	1894      	adds	r4, r2, r2
 80086d0:	623c      	str	r4, [r7, #32]
 80086d2:	415b      	adcs	r3, r3
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
 80086d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086da:	1812      	adds	r2, r2, r0
 80086dc:	eb41 0303 	adc.w	r3, r1, r3
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	f04f 0500 	mov.w	r5, #0
 80086e8:	00dd      	lsls	r5, r3, #3
 80086ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086ee:	00d4      	lsls	r4, r2, #3
 80086f0:	4622      	mov	r2, r4
 80086f2:	462b      	mov	r3, r5
 80086f4:	1814      	adds	r4, r2, r0
 80086f6:	653c      	str	r4, [r7, #80]	; 0x50
 80086f8:	414b      	adcs	r3, r1
 80086fa:	657b      	str	r3, [r7, #84]	; 0x54
 80086fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	461a      	mov	r2, r3
 8008702:	f04f 0300 	mov.w	r3, #0
 8008706:	1891      	adds	r1, r2, r2
 8008708:	61b9      	str	r1, [r7, #24]
 800870a:	415b      	adcs	r3, r3
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008712:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008716:	f7f8 fa77 	bl	8000c08 <__aeabi_uldivmod>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4b6c      	ldr	r3, [pc, #432]	; (80088d0 <UART_SetConfig+0x38c>)
 8008720:	fba3 1302 	umull	r1, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	2164      	movs	r1, #100	; 0x64
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	3332      	adds	r3, #50	; 0x32
 8008732:	4a67      	ldr	r2, [pc, #412]	; (80088d0 <UART_SetConfig+0x38c>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	f003 0207 	and.w	r2, r3, #7
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4432      	add	r2, r6
 8008744:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008746:	e0b9      	b.n	80088bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800874a:	461c      	mov	r4, r3
 800874c:	f04f 0500 	mov.w	r5, #0
 8008750:	4622      	mov	r2, r4
 8008752:	462b      	mov	r3, r5
 8008754:	1891      	adds	r1, r2, r2
 8008756:	6139      	str	r1, [r7, #16]
 8008758:	415b      	adcs	r3, r3
 800875a:	617b      	str	r3, [r7, #20]
 800875c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008760:	1912      	adds	r2, r2, r4
 8008762:	eb45 0303 	adc.w	r3, r5, r3
 8008766:	f04f 0000 	mov.w	r0, #0
 800876a:	f04f 0100 	mov.w	r1, #0
 800876e:	00d9      	lsls	r1, r3, #3
 8008770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008774:	00d0      	lsls	r0, r2, #3
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	eb12 0804 	adds.w	r8, r2, r4
 800877e:	eb43 0905 	adc.w	r9, r3, r5
 8008782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4618      	mov	r0, r3
 8008788:	f04f 0100 	mov.w	r1, #0
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	008b      	lsls	r3, r1, #2
 8008796:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800879a:	0082      	lsls	r2, r0, #2
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f8 fa32 	bl	8000c08 <__aeabi_uldivmod>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4b49      	ldr	r3, [pc, #292]	; (80088d0 <UART_SetConfig+0x38c>)
 80087aa:	fba3 2302 	umull	r2, r3, r3, r2
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	011e      	lsls	r6, r3, #4
 80087b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b4:	4618      	mov	r0, r3
 80087b6:	f04f 0100 	mov.w	r1, #0
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	1894      	adds	r4, r2, r2
 80087c0:	60bc      	str	r4, [r7, #8]
 80087c2:	415b      	adcs	r3, r3
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087ca:	1812      	adds	r2, r2, r0
 80087cc:	eb41 0303 	adc.w	r3, r1, r3
 80087d0:	f04f 0400 	mov.w	r4, #0
 80087d4:	f04f 0500 	mov.w	r5, #0
 80087d8:	00dd      	lsls	r5, r3, #3
 80087da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087de:	00d4      	lsls	r4, r2, #3
 80087e0:	4622      	mov	r2, r4
 80087e2:	462b      	mov	r3, r5
 80087e4:	1814      	adds	r4, r2, r0
 80087e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80087e8:	414b      	adcs	r3, r1
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f04f 0100 	mov.w	r1, #0
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	008b      	lsls	r3, r1, #2
 8008800:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008804:	0082      	lsls	r2, r0, #2
 8008806:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800880a:	f7f8 f9fd 	bl	8000c08 <__aeabi_uldivmod>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4b2f      	ldr	r3, [pc, #188]	; (80088d0 <UART_SetConfig+0x38c>)
 8008814:	fba3 1302 	umull	r1, r3, r3, r2
 8008818:	095b      	lsrs	r3, r3, #5
 800881a:	2164      	movs	r1, #100	; 0x64
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	3332      	adds	r3, #50	; 0x32
 8008826:	4a2a      	ldr	r2, [pc, #168]	; (80088d0 <UART_SetConfig+0x38c>)
 8008828:	fba2 2303 	umull	r2, r3, r2, r3
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008832:	441e      	add	r6, r3
 8008834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008836:	4618      	mov	r0, r3
 8008838:	f04f 0100 	mov.w	r1, #0
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	1894      	adds	r4, r2, r2
 8008842:	603c      	str	r4, [r7, #0]
 8008844:	415b      	adcs	r3, r3
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	1812      	adds	r2, r2, r0
 800884e:	eb41 0303 	adc.w	r3, r1, r3
 8008852:	f04f 0400 	mov.w	r4, #0
 8008856:	f04f 0500 	mov.w	r5, #0
 800885a:	00dd      	lsls	r5, r3, #3
 800885c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008860:	00d4      	lsls	r4, r2, #3
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	eb12 0a00 	adds.w	sl, r2, r0
 800886a:	eb43 0b01 	adc.w	fp, r3, r1
 800886e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4618      	mov	r0, r3
 8008874:	f04f 0100 	mov.w	r1, #0
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	008b      	lsls	r3, r1, #2
 8008882:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008886:	0082      	lsls	r2, r0, #2
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	f7f8 f9bc 	bl	8000c08 <__aeabi_uldivmod>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <UART_SetConfig+0x38c>)
 8008896:	fba3 1302 	umull	r1, r3, r3, r2
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2164      	movs	r1, #100	; 0x64
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	3332      	adds	r3, #50	; 0x32
 80088a8:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <UART_SetConfig+0x38c>)
 80088aa:	fba2 2303 	umull	r2, r3, r2, r3
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	f003 020f 	and.w	r2, r3, #15
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4432      	add	r2, r6
 80088ba:	609a      	str	r2, [r3, #8]
}
 80088bc:	bf00      	nop
 80088be:	377c      	adds	r7, #124	; 0x7c
 80088c0:	46bd      	mov	sp, r7
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	bf00      	nop
 80088c8:	40011000 	.word	0x40011000
 80088cc:	40011400 	.word	0x40011400
 80088d0:	51eb851f 	.word	0x51eb851f

080088d4 <__errno>:
 80088d4:	4b01      	ldr	r3, [pc, #4]	; (80088dc <__errno+0x8>)
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	2000000c 	.word	0x2000000c

080088e0 <__libc_init_array>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4d0d      	ldr	r5, [pc, #52]	; (8008918 <__libc_init_array+0x38>)
 80088e4:	4c0d      	ldr	r4, [pc, #52]	; (800891c <__libc_init_array+0x3c>)
 80088e6:	1b64      	subs	r4, r4, r5
 80088e8:	10a4      	asrs	r4, r4, #2
 80088ea:	2600      	movs	r6, #0
 80088ec:	42a6      	cmp	r6, r4
 80088ee:	d109      	bne.n	8008904 <__libc_init_array+0x24>
 80088f0:	4d0b      	ldr	r5, [pc, #44]	; (8008920 <__libc_init_array+0x40>)
 80088f2:	4c0c      	ldr	r4, [pc, #48]	; (8008924 <__libc_init_array+0x44>)
 80088f4:	f002 fece 	bl	800b694 <_init>
 80088f8:	1b64      	subs	r4, r4, r5
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	2600      	movs	r6, #0
 80088fe:	42a6      	cmp	r6, r4
 8008900:	d105      	bne.n	800890e <__libc_init_array+0x2e>
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	f855 3b04 	ldr.w	r3, [r5], #4
 8008908:	4798      	blx	r3
 800890a:	3601      	adds	r6, #1
 800890c:	e7ee      	b.n	80088ec <__libc_init_array+0xc>
 800890e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008912:	4798      	blx	r3
 8008914:	3601      	adds	r6, #1
 8008916:	e7f2      	b.n	80088fe <__libc_init_array+0x1e>
 8008918:	0800bb4c 	.word	0x0800bb4c
 800891c:	0800bb4c 	.word	0x0800bb4c
 8008920:	0800bb4c 	.word	0x0800bb4c
 8008924:	0800bb50 	.word	0x0800bb50

08008928 <memset>:
 8008928:	4402      	add	r2, r0
 800892a:	4603      	mov	r3, r0
 800892c:	4293      	cmp	r3, r2
 800892e:	d100      	bne.n	8008932 <memset+0xa>
 8008930:	4770      	bx	lr
 8008932:	f803 1b01 	strb.w	r1, [r3], #1
 8008936:	e7f9      	b.n	800892c <memset+0x4>

08008938 <__cvt>:
 8008938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	ec55 4b10 	vmov	r4, r5, d0
 8008940:	2d00      	cmp	r5, #0
 8008942:	460e      	mov	r6, r1
 8008944:	4619      	mov	r1, r3
 8008946:	462b      	mov	r3, r5
 8008948:	bfbb      	ittet	lt
 800894a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800894e:	461d      	movlt	r5, r3
 8008950:	2300      	movge	r3, #0
 8008952:	232d      	movlt	r3, #45	; 0x2d
 8008954:	700b      	strb	r3, [r1, #0]
 8008956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008958:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800895c:	4691      	mov	r9, r2
 800895e:	f023 0820 	bic.w	r8, r3, #32
 8008962:	bfbc      	itt	lt
 8008964:	4622      	movlt	r2, r4
 8008966:	4614      	movlt	r4, r2
 8008968:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800896c:	d005      	beq.n	800897a <__cvt+0x42>
 800896e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008972:	d100      	bne.n	8008976 <__cvt+0x3e>
 8008974:	3601      	adds	r6, #1
 8008976:	2102      	movs	r1, #2
 8008978:	e000      	b.n	800897c <__cvt+0x44>
 800897a:	2103      	movs	r1, #3
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	ab02      	add	r3, sp, #8
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	ec45 4b10 	vmov	d0, r4, r5
 8008988:	4653      	mov	r3, sl
 800898a:	4632      	mov	r2, r6
 800898c:	f000 fd04 	bl	8009398 <_dtoa_r>
 8008990:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008994:	4607      	mov	r7, r0
 8008996:	d102      	bne.n	800899e <__cvt+0x66>
 8008998:	f019 0f01 	tst.w	r9, #1
 800899c:	d022      	beq.n	80089e4 <__cvt+0xac>
 800899e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089a2:	eb07 0906 	add.w	r9, r7, r6
 80089a6:	d110      	bne.n	80089ca <__cvt+0x92>
 80089a8:	783b      	ldrb	r3, [r7, #0]
 80089aa:	2b30      	cmp	r3, #48	; 0x30
 80089ac:	d10a      	bne.n	80089c4 <__cvt+0x8c>
 80089ae:	2200      	movs	r2, #0
 80089b0:	2300      	movs	r3, #0
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f8 f8b7 	bl	8000b28 <__aeabi_dcmpeq>
 80089ba:	b918      	cbnz	r0, 80089c4 <__cvt+0x8c>
 80089bc:	f1c6 0601 	rsb	r6, r6, #1
 80089c0:	f8ca 6000 	str.w	r6, [sl]
 80089c4:	f8da 3000 	ldr.w	r3, [sl]
 80089c8:	4499      	add	r9, r3
 80089ca:	2200      	movs	r2, #0
 80089cc:	2300      	movs	r3, #0
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f8 f8a9 	bl	8000b28 <__aeabi_dcmpeq>
 80089d6:	b108      	cbz	r0, 80089dc <__cvt+0xa4>
 80089d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80089dc:	2230      	movs	r2, #48	; 0x30
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	454b      	cmp	r3, r9
 80089e2:	d307      	bcc.n	80089f4 <__cvt+0xbc>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e8:	1bdb      	subs	r3, r3, r7
 80089ea:	4638      	mov	r0, r7
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	b004      	add	sp, #16
 80089f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f4:	1c59      	adds	r1, r3, #1
 80089f6:	9103      	str	r1, [sp, #12]
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	e7f0      	b.n	80089de <__cvt+0xa6>

080089fc <__exponent>:
 80089fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089fe:	4603      	mov	r3, r0
 8008a00:	2900      	cmp	r1, #0
 8008a02:	bfb8      	it	lt
 8008a04:	4249      	neglt	r1, r1
 8008a06:	f803 2b02 	strb.w	r2, [r3], #2
 8008a0a:	bfb4      	ite	lt
 8008a0c:	222d      	movlt	r2, #45	; 0x2d
 8008a0e:	222b      	movge	r2, #43	; 0x2b
 8008a10:	2909      	cmp	r1, #9
 8008a12:	7042      	strb	r2, [r0, #1]
 8008a14:	dd2a      	ble.n	8008a6c <__exponent+0x70>
 8008a16:	f10d 0407 	add.w	r4, sp, #7
 8008a1a:	46a4      	mov	ip, r4
 8008a1c:	270a      	movs	r7, #10
 8008a1e:	46a6      	mov	lr, r4
 8008a20:	460a      	mov	r2, r1
 8008a22:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a26:	fb07 1516 	mls	r5, r7, r6, r1
 8008a2a:	3530      	adds	r5, #48	; 0x30
 8008a2c:	2a63      	cmp	r2, #99	; 0x63
 8008a2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a36:	4631      	mov	r1, r6
 8008a38:	dcf1      	bgt.n	8008a1e <__exponent+0x22>
 8008a3a:	3130      	adds	r1, #48	; 0x30
 8008a3c:	f1ae 0502 	sub.w	r5, lr, #2
 8008a40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a44:	1c44      	adds	r4, r0, #1
 8008a46:	4629      	mov	r1, r5
 8008a48:	4561      	cmp	r1, ip
 8008a4a:	d30a      	bcc.n	8008a62 <__exponent+0x66>
 8008a4c:	f10d 0209 	add.w	r2, sp, #9
 8008a50:	eba2 020e 	sub.w	r2, r2, lr
 8008a54:	4565      	cmp	r5, ip
 8008a56:	bf88      	it	hi
 8008a58:	2200      	movhi	r2, #0
 8008a5a:	4413      	add	r3, r2
 8008a5c:	1a18      	subs	r0, r3, r0
 8008a5e:	b003      	add	sp, #12
 8008a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a6a:	e7ed      	b.n	8008a48 <__exponent+0x4c>
 8008a6c:	2330      	movs	r3, #48	; 0x30
 8008a6e:	3130      	adds	r1, #48	; 0x30
 8008a70:	7083      	strb	r3, [r0, #2]
 8008a72:	70c1      	strb	r1, [r0, #3]
 8008a74:	1d03      	adds	r3, r0, #4
 8008a76:	e7f1      	b.n	8008a5c <__exponent+0x60>

08008a78 <_printf_float>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	ed2d 8b02 	vpush	{d8}
 8008a80:	b08d      	sub	sp, #52	; 0x34
 8008a82:	460c      	mov	r4, r1
 8008a84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a88:	4616      	mov	r6, r2
 8008a8a:	461f      	mov	r7, r3
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	f001 fb65 	bl	800a15c <_localeconv_r>
 8008a92:	f8d0 a000 	ldr.w	sl, [r0]
 8008a96:	4650      	mov	r0, sl
 8008a98:	f7f7 fbc4 	bl	8000224 <strlen>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008aac:	3307      	adds	r3, #7
 8008aae:	f023 0307 	bic.w	r3, r3, #7
 8008ab2:	f103 0208 	add.w	r2, r3, #8
 8008ab6:	f8c8 2000 	str.w	r2, [r8]
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ac2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ac6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008aca:	9307      	str	r3, [sp, #28]
 8008acc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ad0:	ee08 0a10 	vmov	s16, r0
 8008ad4:	4b9f      	ldr	r3, [pc, #636]	; (8008d54 <_printf_float+0x2dc>)
 8008ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	f7f8 f855 	bl	8000b8c <__aeabi_dcmpun>
 8008ae2:	bb88      	cbnz	r0, 8008b48 <_printf_float+0xd0>
 8008ae4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ae8:	4b9a      	ldr	r3, [pc, #616]	; (8008d54 <_printf_float+0x2dc>)
 8008aea:	f04f 32ff 	mov.w	r2, #4294967295
 8008aee:	f7f8 f82f 	bl	8000b50 <__aeabi_dcmple>
 8008af2:	bb48      	cbnz	r0, 8008b48 <_printf_float+0xd0>
 8008af4:	2200      	movs	r2, #0
 8008af6:	2300      	movs	r3, #0
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f8 f81e 	bl	8000b3c <__aeabi_dcmplt>
 8008b00:	b110      	cbz	r0, 8008b08 <_printf_float+0x90>
 8008b02:	232d      	movs	r3, #45	; 0x2d
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b08:	4b93      	ldr	r3, [pc, #588]	; (8008d58 <_printf_float+0x2e0>)
 8008b0a:	4894      	ldr	r0, [pc, #592]	; (8008d5c <_printf_float+0x2e4>)
 8008b0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b10:	bf94      	ite	ls
 8008b12:	4698      	movls	r8, r3
 8008b14:	4680      	movhi	r8, r0
 8008b16:	2303      	movs	r3, #3
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	9b05      	ldr	r3, [sp, #20]
 8008b1c:	f023 0204 	bic.w	r2, r3, #4
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	f04f 0900 	mov.w	r9, #0
 8008b26:	9700      	str	r7, [sp, #0]
 8008b28:	4633      	mov	r3, r6
 8008b2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f9d8 	bl	8008ee4 <_printf_common>
 8008b34:	3001      	adds	r0, #1
 8008b36:	f040 8090 	bne.w	8008c5a <_printf_float+0x1e2>
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	b00d      	add	sp, #52	; 0x34
 8008b40:	ecbd 8b02 	vpop	{d8}
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	4642      	mov	r2, r8
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	4649      	mov	r1, r9
 8008b50:	f7f8 f81c 	bl	8000b8c <__aeabi_dcmpun>
 8008b54:	b140      	cbz	r0, 8008b68 <_printf_float+0xf0>
 8008b56:	464b      	mov	r3, r9
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfbc      	itt	lt
 8008b5c:	232d      	movlt	r3, #45	; 0x2d
 8008b5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b62:	487f      	ldr	r0, [pc, #508]	; (8008d60 <_printf_float+0x2e8>)
 8008b64:	4b7f      	ldr	r3, [pc, #508]	; (8008d64 <_printf_float+0x2ec>)
 8008b66:	e7d1      	b.n	8008b0c <_printf_float+0x94>
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008b6e:	9206      	str	r2, [sp, #24]
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	d13f      	bne.n	8008bf4 <_printf_float+0x17c>
 8008b74:	2306      	movs	r3, #6
 8008b76:	6063      	str	r3, [r4, #4]
 8008b78:	9b05      	ldr	r3, [sp, #20]
 8008b7a:	6861      	ldr	r1, [r4, #4]
 8008b7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b80:	2300      	movs	r3, #0
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	ab0a      	add	r3, sp, #40	; 0x28
 8008b86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b8a:	ab09      	add	r3, sp, #36	; 0x24
 8008b8c:	ec49 8b10 	vmov	d0, r8, r9
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f7ff fecd 	bl	8008938 <__cvt>
 8008b9e:	9b06      	ldr	r3, [sp, #24]
 8008ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ba2:	2b47      	cmp	r3, #71	; 0x47
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	d108      	bne.n	8008bba <_printf_float+0x142>
 8008ba8:	1cc8      	adds	r0, r1, #3
 8008baa:	db02      	blt.n	8008bb2 <_printf_float+0x13a>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	dd41      	ble.n	8008c36 <_printf_float+0x1be>
 8008bb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008bb6:	fa5f fb8b 	uxtb.w	fp, fp
 8008bba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bbe:	d820      	bhi.n	8008c02 <_printf_float+0x18a>
 8008bc0:	3901      	subs	r1, #1
 8008bc2:	465a      	mov	r2, fp
 8008bc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008bca:	f7ff ff17 	bl	80089fc <__exponent>
 8008bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd0:	1813      	adds	r3, r2, r0
 8008bd2:	2a01      	cmp	r2, #1
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	6123      	str	r3, [r4, #16]
 8008bd8:	dc02      	bgt.n	8008be0 <_printf_float+0x168>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	07d2      	lsls	r2, r2, #31
 8008bde:	d501      	bpl.n	8008be4 <_printf_float+0x16c>
 8008be0:	3301      	adds	r3, #1
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d09c      	beq.n	8008b26 <_printf_float+0xae>
 8008bec:	232d      	movs	r3, #45	; 0x2d
 8008bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf2:	e798      	b.n	8008b26 <_printf_float+0xae>
 8008bf4:	9a06      	ldr	r2, [sp, #24]
 8008bf6:	2a47      	cmp	r2, #71	; 0x47
 8008bf8:	d1be      	bne.n	8008b78 <_printf_float+0x100>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1bc      	bne.n	8008b78 <_printf_float+0x100>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7b9      	b.n	8008b76 <_printf_float+0xfe>
 8008c02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c06:	d118      	bne.n	8008c3a <_printf_float+0x1c2>
 8008c08:	2900      	cmp	r1, #0
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	dd0b      	ble.n	8008c26 <_printf_float+0x1ae>
 8008c0e:	6121      	str	r1, [r4, #16]
 8008c10:	b913      	cbnz	r3, 8008c18 <_printf_float+0x1a0>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	07d0      	lsls	r0, r2, #31
 8008c16:	d502      	bpl.n	8008c1e <_printf_float+0x1a6>
 8008c18:	3301      	adds	r3, #1
 8008c1a:	440b      	add	r3, r1
 8008c1c:	6123      	str	r3, [r4, #16]
 8008c1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c20:	f04f 0900 	mov.w	r9, #0
 8008c24:	e7de      	b.n	8008be4 <_printf_float+0x16c>
 8008c26:	b913      	cbnz	r3, 8008c2e <_printf_float+0x1b6>
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	07d2      	lsls	r2, r2, #31
 8008c2c:	d501      	bpl.n	8008c32 <_printf_float+0x1ba>
 8008c2e:	3302      	adds	r3, #2
 8008c30:	e7f4      	b.n	8008c1c <_printf_float+0x1a4>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e7f2      	b.n	8008c1c <_printf_float+0x1a4>
 8008c36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	db05      	blt.n	8008c4c <_printf_float+0x1d4>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	6121      	str	r1, [r4, #16]
 8008c44:	07d8      	lsls	r0, r3, #31
 8008c46:	d5ea      	bpl.n	8008c1e <_printf_float+0x1a6>
 8008c48:	1c4b      	adds	r3, r1, #1
 8008c4a:	e7e7      	b.n	8008c1c <_printf_float+0x1a4>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bfd4      	ite	le
 8008c50:	f1c1 0202 	rsble	r2, r1, #2
 8008c54:	2201      	movgt	r2, #1
 8008c56:	4413      	add	r3, r2
 8008c58:	e7e0      	b.n	8008c1c <_printf_float+0x1a4>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	055a      	lsls	r2, r3, #21
 8008c5e:	d407      	bmi.n	8008c70 <_printf_float+0x1f8>
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	4642      	mov	r2, r8
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d12c      	bne.n	8008cc8 <_printf_float+0x250>
 8008c6e:	e764      	b.n	8008b3a <_printf_float+0xc2>
 8008c70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c74:	f240 80e0 	bls.w	8008e38 <_printf_float+0x3c0>
 8008c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f7f7 ff52 	bl	8000b28 <__aeabi_dcmpeq>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d034      	beq.n	8008cf2 <_printf_float+0x27a>
 8008c88:	4a37      	ldr	r2, [pc, #220]	; (8008d68 <_printf_float+0x2f0>)
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f af51 	beq.w	8008b3a <_printf_float+0xc2>
 8008c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	db02      	blt.n	8008ca6 <_printf_float+0x22e>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	07d8      	lsls	r0, r3, #31
 8008ca4:	d510      	bpl.n	8008cc8 <_printf_float+0x250>
 8008ca6:	ee18 3a10 	vmov	r3, s16
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f af41 	beq.w	8008b3a <_printf_float+0xc2>
 8008cb8:	f04f 0800 	mov.w	r8, #0
 8008cbc:	f104 091a 	add.w	r9, r4, #26
 8008cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	4543      	cmp	r3, r8
 8008cc6:	dc09      	bgt.n	8008cdc <_printf_float+0x264>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	079b      	lsls	r3, r3, #30
 8008ccc:	f100 8105 	bmi.w	8008eda <_printf_float+0x462>
 8008cd0:	68e0      	ldr	r0, [r4, #12]
 8008cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd4:	4298      	cmp	r0, r3
 8008cd6:	bfb8      	it	lt
 8008cd8:	4618      	movlt	r0, r3
 8008cda:	e730      	b.n	8008b3e <_printf_float+0xc6>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	464a      	mov	r2, r9
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	47b8      	blx	r7
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	f43f af27 	beq.w	8008b3a <_printf_float+0xc2>
 8008cec:	f108 0801 	add.w	r8, r8, #1
 8008cf0:	e7e6      	b.n	8008cc0 <_printf_float+0x248>
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc39      	bgt.n	8008d6c <_printf_float+0x2f4>
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <_printf_float+0x2f0>)
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	f43f af19 	beq.w	8008b3a <_printf_float+0xc2>
 8008d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	d102      	bne.n	8008d16 <_printf_float+0x29e>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	07d9      	lsls	r1, r3, #31
 8008d14:	d5d8      	bpl.n	8008cc8 <_printf_float+0x250>
 8008d16:	ee18 3a10 	vmov	r3, s16
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f af09 	beq.w	8008b3a <_printf_float+0xc2>
 8008d28:	f04f 0900 	mov.w	r9, #0
 8008d2c:	f104 0a1a 	add.w	sl, r4, #26
 8008d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d32:	425b      	negs	r3, r3
 8008d34:	454b      	cmp	r3, r9
 8008d36:	dc01      	bgt.n	8008d3c <_printf_float+0x2c4>
 8008d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3a:	e792      	b.n	8008c62 <_printf_float+0x1ea>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4652      	mov	r2, sl
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f aef7 	beq.w	8008b3a <_printf_float+0xc2>
 8008d4c:	f109 0901 	add.w	r9, r9, #1
 8008d50:	e7ee      	b.n	8008d30 <_printf_float+0x2b8>
 8008d52:	bf00      	nop
 8008d54:	7fefffff 	.word	0x7fefffff
 8008d58:	0800b764 	.word	0x0800b764
 8008d5c:	0800b768 	.word	0x0800b768
 8008d60:	0800b770 	.word	0x0800b770
 8008d64:	0800b76c 	.word	0x0800b76c
 8008d68:	0800b774 	.word	0x0800b774
 8008d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d70:	429a      	cmp	r2, r3
 8008d72:	bfa8      	it	ge
 8008d74:	461a      	movge	r2, r3
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	4691      	mov	r9, r2
 8008d7a:	dc37      	bgt.n	8008dec <_printf_float+0x374>
 8008d7c:	f04f 0b00 	mov.w	fp, #0
 8008d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d84:	f104 021a 	add.w	r2, r4, #26
 8008d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	eba3 0309 	sub.w	r3, r3, r9
 8008d90:	455b      	cmp	r3, fp
 8008d92:	dc33      	bgt.n	8008dfc <_printf_float+0x384>
 8008d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	db3b      	blt.n	8008e14 <_printf_float+0x39c>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	07da      	lsls	r2, r3, #31
 8008da0:	d438      	bmi.n	8008e14 <_printf_float+0x39c>
 8008da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da4:	9b05      	ldr	r3, [sp, #20]
 8008da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	eba2 0901 	sub.w	r9, r2, r1
 8008dae:	4599      	cmp	r9, r3
 8008db0:	bfa8      	it	ge
 8008db2:	4699      	movge	r9, r3
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	dc35      	bgt.n	8008e26 <_printf_float+0x3ae>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dc2:	f104 0a1a 	add.w	sl, r4, #26
 8008dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	eba3 0309 	sub.w	r3, r3, r9
 8008dd0:	4543      	cmp	r3, r8
 8008dd2:	f77f af79 	ble.w	8008cc8 <_printf_float+0x250>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f aeaa 	beq.w	8008b3a <_printf_float+0xc2>
 8008de6:	f108 0801 	add.w	r8, r8, #1
 8008dea:	e7ec      	b.n	8008dc6 <_printf_float+0x34e>
 8008dec:	4613      	mov	r3, r2
 8008dee:	4631      	mov	r1, r6
 8008df0:	4642      	mov	r2, r8
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	d1c0      	bne.n	8008d7c <_printf_float+0x304>
 8008dfa:	e69e      	b.n	8008b3a <_printf_float+0xc2>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	9205      	str	r2, [sp, #20]
 8008e04:	47b8      	blx	r7
 8008e06:	3001      	adds	r0, #1
 8008e08:	f43f ae97 	beq.w	8008b3a <_printf_float+0xc2>
 8008e0c:	9a05      	ldr	r2, [sp, #20]
 8008e0e:	f10b 0b01 	add.w	fp, fp, #1
 8008e12:	e7b9      	b.n	8008d88 <_printf_float+0x310>
 8008e14:	ee18 3a10 	vmov	r3, s16
 8008e18:	4652      	mov	r2, sl
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	d1be      	bne.n	8008da2 <_printf_float+0x32a>
 8008e24:	e689      	b.n	8008b3a <_printf_float+0xc2>
 8008e26:	9a05      	ldr	r2, [sp, #20]
 8008e28:	464b      	mov	r3, r9
 8008e2a:	4442      	add	r2, r8
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	d1c1      	bne.n	8008dba <_printf_float+0x342>
 8008e36:	e680      	b.n	8008b3a <_printf_float+0xc2>
 8008e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	dc01      	bgt.n	8008e42 <_printf_float+0x3ca>
 8008e3e:	07db      	lsls	r3, r3, #31
 8008e40:	d538      	bpl.n	8008eb4 <_printf_float+0x43c>
 8008e42:	2301      	movs	r3, #1
 8008e44:	4642      	mov	r2, r8
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b8      	blx	r7
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	f43f ae74 	beq.w	8008b3a <_printf_float+0xc2>
 8008e52:	ee18 3a10 	vmov	r3, s16
 8008e56:	4652      	mov	r2, sl
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f ae6b 	beq.w	8008b3a <_printf_float+0xc2>
 8008e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f7f7 fe5c 	bl	8000b28 <__aeabi_dcmpeq>
 8008e70:	b9d8      	cbnz	r0, 8008eaa <_printf_float+0x432>
 8008e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e74:	f108 0201 	add.w	r2, r8, #1
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	47b8      	blx	r7
 8008e80:	3001      	adds	r0, #1
 8008e82:	d10e      	bne.n	8008ea2 <_printf_float+0x42a>
 8008e84:	e659      	b.n	8008b3a <_printf_float+0xc2>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f ae52 	beq.w	8008b3a <_printf_float+0xc2>
 8008e96:	f108 0801 	add.w	r8, r8, #1
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	4543      	cmp	r3, r8
 8008ea0:	dcf1      	bgt.n	8008e86 <_printf_float+0x40e>
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ea8:	e6dc      	b.n	8008c64 <_printf_float+0x1ec>
 8008eaa:	f04f 0800 	mov.w	r8, #0
 8008eae:	f104 0a1a 	add.w	sl, r4, #26
 8008eb2:	e7f2      	b.n	8008e9a <_printf_float+0x422>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	e7df      	b.n	8008e7a <_printf_float+0x402>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	464a      	mov	r2, r9
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b8      	blx	r7
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f43f ae38 	beq.w	8008b3a <_printf_float+0xc2>
 8008eca:	f108 0801 	add.w	r8, r8, #1
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ed2:	1a5b      	subs	r3, r3, r1
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	dcf0      	bgt.n	8008eba <_printf_float+0x442>
 8008ed8:	e6fa      	b.n	8008cd0 <_printf_float+0x258>
 8008eda:	f04f 0800 	mov.w	r8, #0
 8008ede:	f104 0919 	add.w	r9, r4, #25
 8008ee2:	e7f4      	b.n	8008ece <_printf_float+0x456>

08008ee4 <_printf_common>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	4616      	mov	r6, r2
 8008eea:	4699      	mov	r9, r3
 8008eec:	688a      	ldr	r2, [r1, #8]
 8008eee:	690b      	ldr	r3, [r1, #16]
 8008ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	bfb8      	it	lt
 8008ef8:	4613      	movlt	r3, r2
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f00:	4607      	mov	r7, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	b10a      	cbz	r2, 8008f0a <_printf_common+0x26>
 8008f06:	3301      	adds	r3, #1
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	0699      	lsls	r1, r3, #26
 8008f0e:	bf42      	ittt	mi
 8008f10:	6833      	ldrmi	r3, [r6, #0]
 8008f12:	3302      	addmi	r3, #2
 8008f14:	6033      	strmi	r3, [r6, #0]
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	f015 0506 	ands.w	r5, r5, #6
 8008f1c:	d106      	bne.n	8008f2c <_printf_common+0x48>
 8008f1e:	f104 0a19 	add.w	sl, r4, #25
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	6832      	ldr	r2, [r6, #0]
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dc26      	bgt.n	8008f7a <_printf_common+0x96>
 8008f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f30:	1e13      	subs	r3, r2, #0
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	bf18      	it	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	0692      	lsls	r2, r2, #26
 8008f3a:	d42b      	bmi.n	8008f94 <_printf_common+0xb0>
 8008f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f40:	4649      	mov	r1, r9
 8008f42:	4638      	mov	r0, r7
 8008f44:	47c0      	blx	r8
 8008f46:	3001      	adds	r0, #1
 8008f48:	d01e      	beq.n	8008f88 <_printf_common+0xa4>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	68e5      	ldr	r5, [r4, #12]
 8008f4e:	6832      	ldr	r2, [r6, #0]
 8008f50:	f003 0306 	and.w	r3, r3, #6
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	bf08      	it	eq
 8008f58:	1aad      	subeq	r5, r5, r2
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	6922      	ldr	r2, [r4, #16]
 8008f5e:	bf0c      	ite	eq
 8008f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f64:	2500      	movne	r5, #0
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bfc4      	itt	gt
 8008f6a:	1a9b      	subgt	r3, r3, r2
 8008f6c:	18ed      	addgt	r5, r5, r3
 8008f6e:	2600      	movs	r6, #0
 8008f70:	341a      	adds	r4, #26
 8008f72:	42b5      	cmp	r5, r6
 8008f74:	d11a      	bne.n	8008fac <_printf_common+0xc8>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e008      	b.n	8008f8c <_printf_common+0xa8>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4638      	mov	r0, r7
 8008f82:	47c0      	blx	r8
 8008f84:	3001      	adds	r0, #1
 8008f86:	d103      	bne.n	8008f90 <_printf_common+0xac>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f90:	3501      	adds	r5, #1
 8008f92:	e7c6      	b.n	8008f22 <_printf_common+0x3e>
 8008f94:	18e1      	adds	r1, r4, r3
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	2030      	movs	r0, #48	; 0x30
 8008f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f9e:	4422      	add	r2, r4
 8008fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fa8:	3302      	adds	r3, #2
 8008faa:	e7c7      	b.n	8008f3c <_printf_common+0x58>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	47c0      	blx	r8
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d0e6      	beq.n	8008f88 <_printf_common+0xa4>
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7d9      	b.n	8008f72 <_printf_common+0x8e>
	...

08008fc0 <_printf_i>:
 8008fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4691      	mov	r9, r2
 8008fc8:	7e27      	ldrb	r7, [r4, #24]
 8008fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fcc:	2f78      	cmp	r7, #120	; 0x78
 8008fce:	4680      	mov	r8, r0
 8008fd0:	469a      	mov	sl, r3
 8008fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd6:	d807      	bhi.n	8008fe8 <_printf_i+0x28>
 8008fd8:	2f62      	cmp	r7, #98	; 0x62
 8008fda:	d80a      	bhi.n	8008ff2 <_printf_i+0x32>
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	f000 80d8 	beq.w	8009192 <_printf_i+0x1d2>
 8008fe2:	2f58      	cmp	r7, #88	; 0x58
 8008fe4:	f000 80a3 	beq.w	800912e <_printf_i+0x16e>
 8008fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ff0:	e03a      	b.n	8009068 <_printf_i+0xa8>
 8008ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ff6:	2b15      	cmp	r3, #21
 8008ff8:	d8f6      	bhi.n	8008fe8 <_printf_i+0x28>
 8008ffa:	a001      	add	r0, pc, #4	; (adr r0, 8009000 <_printf_i+0x40>)
 8008ffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009000:	08009059 	.word	0x08009059
 8009004:	0800906d 	.word	0x0800906d
 8009008:	08008fe9 	.word	0x08008fe9
 800900c:	08008fe9 	.word	0x08008fe9
 8009010:	08008fe9 	.word	0x08008fe9
 8009014:	08008fe9 	.word	0x08008fe9
 8009018:	0800906d 	.word	0x0800906d
 800901c:	08008fe9 	.word	0x08008fe9
 8009020:	08008fe9 	.word	0x08008fe9
 8009024:	08008fe9 	.word	0x08008fe9
 8009028:	08008fe9 	.word	0x08008fe9
 800902c:	08009179 	.word	0x08009179
 8009030:	0800909d 	.word	0x0800909d
 8009034:	0800915b 	.word	0x0800915b
 8009038:	08008fe9 	.word	0x08008fe9
 800903c:	08008fe9 	.word	0x08008fe9
 8009040:	0800919b 	.word	0x0800919b
 8009044:	08008fe9 	.word	0x08008fe9
 8009048:	0800909d 	.word	0x0800909d
 800904c:	08008fe9 	.word	0x08008fe9
 8009050:	08008fe9 	.word	0x08008fe9
 8009054:	08009163 	.word	0x08009163
 8009058:	680b      	ldr	r3, [r1, #0]
 800905a:	1d1a      	adds	r2, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	600a      	str	r2, [r1, #0]
 8009060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009068:	2301      	movs	r3, #1
 800906a:	e0a3      	b.n	80091b4 <_printf_i+0x1f4>
 800906c:	6825      	ldr	r5, [r4, #0]
 800906e:	6808      	ldr	r0, [r1, #0]
 8009070:	062e      	lsls	r6, r5, #24
 8009072:	f100 0304 	add.w	r3, r0, #4
 8009076:	d50a      	bpl.n	800908e <_printf_i+0xce>
 8009078:	6805      	ldr	r5, [r0, #0]
 800907a:	600b      	str	r3, [r1, #0]
 800907c:	2d00      	cmp	r5, #0
 800907e:	da03      	bge.n	8009088 <_printf_i+0xc8>
 8009080:	232d      	movs	r3, #45	; 0x2d
 8009082:	426d      	negs	r5, r5
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	485e      	ldr	r0, [pc, #376]	; (8009204 <_printf_i+0x244>)
 800908a:	230a      	movs	r3, #10
 800908c:	e019      	b.n	80090c2 <_printf_i+0x102>
 800908e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009092:	6805      	ldr	r5, [r0, #0]
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	bf18      	it	ne
 8009098:	b22d      	sxthne	r5, r5
 800909a:	e7ef      	b.n	800907c <_printf_i+0xbc>
 800909c:	680b      	ldr	r3, [r1, #0]
 800909e:	6825      	ldr	r5, [r4, #0]
 80090a0:	1d18      	adds	r0, r3, #4
 80090a2:	6008      	str	r0, [r1, #0]
 80090a4:	0628      	lsls	r0, r5, #24
 80090a6:	d501      	bpl.n	80090ac <_printf_i+0xec>
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	e002      	b.n	80090b2 <_printf_i+0xf2>
 80090ac:	0669      	lsls	r1, r5, #25
 80090ae:	d5fb      	bpl.n	80090a8 <_printf_i+0xe8>
 80090b0:	881d      	ldrh	r5, [r3, #0]
 80090b2:	4854      	ldr	r0, [pc, #336]	; (8009204 <_printf_i+0x244>)
 80090b4:	2f6f      	cmp	r7, #111	; 0x6f
 80090b6:	bf0c      	ite	eq
 80090b8:	2308      	moveq	r3, #8
 80090ba:	230a      	movne	r3, #10
 80090bc:	2100      	movs	r1, #0
 80090be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090c2:	6866      	ldr	r6, [r4, #4]
 80090c4:	60a6      	str	r6, [r4, #8]
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	bfa2      	ittt	ge
 80090ca:	6821      	ldrge	r1, [r4, #0]
 80090cc:	f021 0104 	bicge.w	r1, r1, #4
 80090d0:	6021      	strge	r1, [r4, #0]
 80090d2:	b90d      	cbnz	r5, 80090d8 <_printf_i+0x118>
 80090d4:	2e00      	cmp	r6, #0
 80090d6:	d04d      	beq.n	8009174 <_printf_i+0x1b4>
 80090d8:	4616      	mov	r6, r2
 80090da:	fbb5 f1f3 	udiv	r1, r5, r3
 80090de:	fb03 5711 	mls	r7, r3, r1, r5
 80090e2:	5dc7      	ldrb	r7, [r0, r7]
 80090e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090e8:	462f      	mov	r7, r5
 80090ea:	42bb      	cmp	r3, r7
 80090ec:	460d      	mov	r5, r1
 80090ee:	d9f4      	bls.n	80090da <_printf_i+0x11a>
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d10b      	bne.n	800910c <_printf_i+0x14c>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	07df      	lsls	r7, r3, #31
 80090f8:	d508      	bpl.n	800910c <_printf_i+0x14c>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	6861      	ldr	r1, [r4, #4]
 80090fe:	4299      	cmp	r1, r3
 8009100:	bfde      	ittt	le
 8009102:	2330      	movle	r3, #48	; 0x30
 8009104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800910c:	1b92      	subs	r2, r2, r6
 800910e:	6122      	str	r2, [r4, #16]
 8009110:	f8cd a000 	str.w	sl, [sp]
 8009114:	464b      	mov	r3, r9
 8009116:	aa03      	add	r2, sp, #12
 8009118:	4621      	mov	r1, r4
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff fee2 	bl	8008ee4 <_printf_common>
 8009120:	3001      	adds	r0, #1
 8009122:	d14c      	bne.n	80091be <_printf_i+0x1fe>
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	b004      	add	sp, #16
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	4835      	ldr	r0, [pc, #212]	; (8009204 <_printf_i+0x244>)
 8009130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	680e      	ldr	r6, [r1, #0]
 8009138:	061f      	lsls	r7, r3, #24
 800913a:	f856 5b04 	ldr.w	r5, [r6], #4
 800913e:	600e      	str	r6, [r1, #0]
 8009140:	d514      	bpl.n	800916c <_printf_i+0x1ac>
 8009142:	07d9      	lsls	r1, r3, #31
 8009144:	bf44      	itt	mi
 8009146:	f043 0320 	orrmi.w	r3, r3, #32
 800914a:	6023      	strmi	r3, [r4, #0]
 800914c:	b91d      	cbnz	r5, 8009156 <_printf_i+0x196>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f023 0320 	bic.w	r3, r3, #32
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	2310      	movs	r3, #16
 8009158:	e7b0      	b.n	80090bc <_printf_i+0xfc>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f043 0320 	orr.w	r3, r3, #32
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	2378      	movs	r3, #120	; 0x78
 8009164:	4828      	ldr	r0, [pc, #160]	; (8009208 <_printf_i+0x248>)
 8009166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800916a:	e7e3      	b.n	8009134 <_printf_i+0x174>
 800916c:	065e      	lsls	r6, r3, #25
 800916e:	bf48      	it	mi
 8009170:	b2ad      	uxthmi	r5, r5
 8009172:	e7e6      	b.n	8009142 <_printf_i+0x182>
 8009174:	4616      	mov	r6, r2
 8009176:	e7bb      	b.n	80090f0 <_printf_i+0x130>
 8009178:	680b      	ldr	r3, [r1, #0]
 800917a:	6826      	ldr	r6, [r4, #0]
 800917c:	6960      	ldr	r0, [r4, #20]
 800917e:	1d1d      	adds	r5, r3, #4
 8009180:	600d      	str	r5, [r1, #0]
 8009182:	0635      	lsls	r5, r6, #24
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	d501      	bpl.n	800918c <_printf_i+0x1cc>
 8009188:	6018      	str	r0, [r3, #0]
 800918a:	e002      	b.n	8009192 <_printf_i+0x1d2>
 800918c:	0671      	lsls	r1, r6, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0x1c8>
 8009190:	8018      	strh	r0, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	4616      	mov	r6, r2
 8009198:	e7ba      	b.n	8009110 <_printf_i+0x150>
 800919a:	680b      	ldr	r3, [r1, #0]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	600a      	str	r2, [r1, #0]
 80091a0:	681e      	ldr	r6, [r3, #0]
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7f7 f84a 	bl	8000240 <memchr>
 80091ac:	b108      	cbz	r0, 80091b2 <_printf_i+0x1f2>
 80091ae:	1b80      	subs	r0, r0, r6
 80091b0:	6060      	str	r0, [r4, #4]
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	2300      	movs	r3, #0
 80091b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091bc:	e7a8      	b.n	8009110 <_printf_i+0x150>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	4632      	mov	r2, r6
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d0ab      	beq.n	8009124 <_printf_i+0x164>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	d413      	bmi.n	80091fa <_printf_i+0x23a>
 80091d2:	68e0      	ldr	r0, [r4, #12]
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	4298      	cmp	r0, r3
 80091d8:	bfb8      	it	lt
 80091da:	4618      	movlt	r0, r3
 80091dc:	e7a4      	b.n	8009128 <_printf_i+0x168>
 80091de:	2301      	movs	r3, #1
 80091e0:	4632      	mov	r2, r6
 80091e2:	4649      	mov	r1, r9
 80091e4:	4640      	mov	r0, r8
 80091e6:	47d0      	blx	sl
 80091e8:	3001      	adds	r0, #1
 80091ea:	d09b      	beq.n	8009124 <_printf_i+0x164>
 80091ec:	3501      	adds	r5, #1
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	9903      	ldr	r1, [sp, #12]
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dcf2      	bgt.n	80091de <_printf_i+0x21e>
 80091f8:	e7eb      	b.n	80091d2 <_printf_i+0x212>
 80091fa:	2500      	movs	r5, #0
 80091fc:	f104 0619 	add.w	r6, r4, #25
 8009200:	e7f5      	b.n	80091ee <_printf_i+0x22e>
 8009202:	bf00      	nop
 8009204:	0800b776 	.word	0x0800b776
 8009208:	0800b787 	.word	0x0800b787

0800920c <iprintf>:
 800920c:	b40f      	push	{r0, r1, r2, r3}
 800920e:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <iprintf+0x2c>)
 8009210:	b513      	push	{r0, r1, r4, lr}
 8009212:	681c      	ldr	r4, [r3, #0]
 8009214:	b124      	cbz	r4, 8009220 <iprintf+0x14>
 8009216:	69a3      	ldr	r3, [r4, #24]
 8009218:	b913      	cbnz	r3, 8009220 <iprintf+0x14>
 800921a:	4620      	mov	r0, r4
 800921c:	f000 ff00 	bl	800a020 <__sinit>
 8009220:	ab05      	add	r3, sp, #20
 8009222:	9a04      	ldr	r2, [sp, #16]
 8009224:	68a1      	ldr	r1, [r4, #8]
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	4620      	mov	r0, r4
 800922a:	f001 fd73 	bl	800ad14 <_vfiprintf_r>
 800922e:	b002      	add	sp, #8
 8009230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009234:	b004      	add	sp, #16
 8009236:	4770      	bx	lr
 8009238:	2000000c 	.word	0x2000000c

0800923c <siprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b500      	push	{lr}
 8009240:	b09c      	sub	sp, #112	; 0x70
 8009242:	ab1d      	add	r3, sp, #116	; 0x74
 8009244:	9002      	str	r0, [sp, #8]
 8009246:	9006      	str	r0, [sp, #24]
 8009248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800924c:	4809      	ldr	r0, [pc, #36]	; (8009274 <siprintf+0x38>)
 800924e:	9107      	str	r1, [sp, #28]
 8009250:	9104      	str	r1, [sp, #16]
 8009252:	4909      	ldr	r1, [pc, #36]	; (8009278 <siprintf+0x3c>)
 8009254:	f853 2b04 	ldr.w	r2, [r3], #4
 8009258:	9105      	str	r1, [sp, #20]
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	a902      	add	r1, sp, #8
 8009260:	f001 fc2e 	bl	800aac0 <_svfiprintf_r>
 8009264:	9b02      	ldr	r3, [sp, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	b01c      	add	sp, #112	; 0x70
 800926c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009270:	b003      	add	sp, #12
 8009272:	4770      	bx	lr
 8009274:	2000000c 	.word	0x2000000c
 8009278:	ffff0208 	.word	0xffff0208

0800927c <quorem>:
 800927c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	6903      	ldr	r3, [r0, #16]
 8009282:	690c      	ldr	r4, [r1, #16]
 8009284:	42a3      	cmp	r3, r4
 8009286:	4607      	mov	r7, r0
 8009288:	f2c0 8081 	blt.w	800938e <quorem+0x112>
 800928c:	3c01      	subs	r4, #1
 800928e:	f101 0814 	add.w	r8, r1, #20
 8009292:	f100 0514 	add.w	r5, r0, #20
 8009296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092a4:	3301      	adds	r3, #1
 80092a6:	429a      	cmp	r2, r3
 80092a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80092b4:	d331      	bcc.n	800931a <quorem+0x9e>
 80092b6:	f04f 0e00 	mov.w	lr, #0
 80092ba:	4640      	mov	r0, r8
 80092bc:	46ac      	mov	ip, r5
 80092be:	46f2      	mov	sl, lr
 80092c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80092c4:	b293      	uxth	r3, r2
 80092c6:	fb06 e303 	mla	r3, r6, r3, lr
 80092ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	ebaa 0303 	sub.w	r3, sl, r3
 80092d4:	0c12      	lsrs	r2, r2, #16
 80092d6:	f8dc a000 	ldr.w	sl, [ip]
 80092da:	fb06 e202 	mla	r2, r6, r2, lr
 80092de:	fa13 f38a 	uxtah	r3, r3, sl
 80092e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092e6:	fa1f fa82 	uxth.w	sl, r2
 80092ea:	f8dc 2000 	ldr.w	r2, [ip]
 80092ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80092f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fc:	4581      	cmp	r9, r0
 80092fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009302:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009306:	d2db      	bcs.n	80092c0 <quorem+0x44>
 8009308:	f855 300b 	ldr.w	r3, [r5, fp]
 800930c:	b92b      	cbnz	r3, 800931a <quorem+0x9e>
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	3b04      	subs	r3, #4
 8009312:	429d      	cmp	r5, r3
 8009314:	461a      	mov	r2, r3
 8009316:	d32e      	bcc.n	8009376 <quorem+0xfa>
 8009318:	613c      	str	r4, [r7, #16]
 800931a:	4638      	mov	r0, r7
 800931c:	f001 f9ba 	bl	800a694 <__mcmp>
 8009320:	2800      	cmp	r0, #0
 8009322:	db24      	blt.n	800936e <quorem+0xf2>
 8009324:	3601      	adds	r6, #1
 8009326:	4628      	mov	r0, r5
 8009328:	f04f 0c00 	mov.w	ip, #0
 800932c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009330:	f8d0 e000 	ldr.w	lr, [r0]
 8009334:	b293      	uxth	r3, r2
 8009336:	ebac 0303 	sub.w	r3, ip, r3
 800933a:	0c12      	lsrs	r2, r2, #16
 800933c:	fa13 f38e 	uxtah	r3, r3, lr
 8009340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009348:	b29b      	uxth	r3, r3
 800934a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800934e:	45c1      	cmp	r9, r8
 8009350:	f840 3b04 	str.w	r3, [r0], #4
 8009354:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009358:	d2e8      	bcs.n	800932c <quorem+0xb0>
 800935a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800935e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009362:	b922      	cbnz	r2, 800936e <quorem+0xf2>
 8009364:	3b04      	subs	r3, #4
 8009366:	429d      	cmp	r5, r3
 8009368:	461a      	mov	r2, r3
 800936a:	d30a      	bcc.n	8009382 <quorem+0x106>
 800936c:	613c      	str	r4, [r7, #16]
 800936e:	4630      	mov	r0, r6
 8009370:	b003      	add	sp, #12
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	3b04      	subs	r3, #4
 800937a:	2a00      	cmp	r2, #0
 800937c:	d1cc      	bne.n	8009318 <quorem+0x9c>
 800937e:	3c01      	subs	r4, #1
 8009380:	e7c7      	b.n	8009312 <quorem+0x96>
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	3b04      	subs	r3, #4
 8009386:	2a00      	cmp	r2, #0
 8009388:	d1f0      	bne.n	800936c <quorem+0xf0>
 800938a:	3c01      	subs	r4, #1
 800938c:	e7eb      	b.n	8009366 <quorem+0xea>
 800938e:	2000      	movs	r0, #0
 8009390:	e7ee      	b.n	8009370 <quorem+0xf4>
 8009392:	0000      	movs	r0, r0
 8009394:	0000      	movs	r0, r0
	...

08009398 <_dtoa_r>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	ed2d 8b02 	vpush	{d8}
 80093a0:	ec57 6b10 	vmov	r6, r7, d0
 80093a4:	b095      	sub	sp, #84	; 0x54
 80093a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093ac:	9105      	str	r1, [sp, #20]
 80093ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80093b2:	4604      	mov	r4, r0
 80093b4:	9209      	str	r2, [sp, #36]	; 0x24
 80093b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b8:	b975      	cbnz	r5, 80093d8 <_dtoa_r+0x40>
 80093ba:	2010      	movs	r0, #16
 80093bc:	f000 fed6 	bl	800a16c <malloc>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6260      	str	r0, [r4, #36]	; 0x24
 80093c4:	b920      	cbnz	r0, 80093d0 <_dtoa_r+0x38>
 80093c6:	4bb2      	ldr	r3, [pc, #712]	; (8009690 <_dtoa_r+0x2f8>)
 80093c8:	21ea      	movs	r1, #234	; 0xea
 80093ca:	48b2      	ldr	r0, [pc, #712]	; (8009694 <_dtoa_r+0x2fc>)
 80093cc:	f001 fef8 	bl	800b1c0 <__assert_func>
 80093d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093d4:	6005      	str	r5, [r0, #0]
 80093d6:	60c5      	str	r5, [r0, #12]
 80093d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	b151      	cbz	r1, 80093f4 <_dtoa_r+0x5c>
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	604a      	str	r2, [r1, #4]
 80093e2:	2301      	movs	r3, #1
 80093e4:	4093      	lsls	r3, r2
 80093e6:	608b      	str	r3, [r1, #8]
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 ff15 	bl	800a218 <_Bfree>
 80093ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	1e3b      	subs	r3, r7, #0
 80093f6:	bfb9      	ittee	lt
 80093f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093fc:	9303      	strlt	r3, [sp, #12]
 80093fe:	2300      	movge	r3, #0
 8009400:	f8c8 3000 	strge.w	r3, [r8]
 8009404:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009408:	4ba3      	ldr	r3, [pc, #652]	; (8009698 <_dtoa_r+0x300>)
 800940a:	bfbc      	itt	lt
 800940c:	2201      	movlt	r2, #1
 800940e:	f8c8 2000 	strlt.w	r2, [r8]
 8009412:	ea33 0309 	bics.w	r3, r3, r9
 8009416:	d11b      	bne.n	8009450 <_dtoa_r+0xb8>
 8009418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800941a:	f242 730f 	movw	r3, #9999	; 0x270f
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009424:	4333      	orrs	r3, r6
 8009426:	f000 857a 	beq.w	8009f1e <_dtoa_r+0xb86>
 800942a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800942c:	b963      	cbnz	r3, 8009448 <_dtoa_r+0xb0>
 800942e:	4b9b      	ldr	r3, [pc, #620]	; (800969c <_dtoa_r+0x304>)
 8009430:	e024      	b.n	800947c <_dtoa_r+0xe4>
 8009432:	4b9b      	ldr	r3, [pc, #620]	; (80096a0 <_dtoa_r+0x308>)
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	3308      	adds	r3, #8
 8009438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	9800      	ldr	r0, [sp, #0]
 800943e:	b015      	add	sp, #84	; 0x54
 8009440:	ecbd 8b02 	vpop	{d8}
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	4b94      	ldr	r3, [pc, #592]	; (800969c <_dtoa_r+0x304>)
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	3303      	adds	r3, #3
 800944e:	e7f3      	b.n	8009438 <_dtoa_r+0xa0>
 8009450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009454:	2200      	movs	r2, #0
 8009456:	ec51 0b17 	vmov	r0, r1, d7
 800945a:	2300      	movs	r3, #0
 800945c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009460:	f7f7 fb62 	bl	8000b28 <__aeabi_dcmpeq>
 8009464:	4680      	mov	r8, r0
 8009466:	b158      	cbz	r0, 8009480 <_dtoa_r+0xe8>
 8009468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800946a:	2301      	movs	r3, #1
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8551 	beq.w	8009f18 <_dtoa_r+0xb80>
 8009476:	488b      	ldr	r0, [pc, #556]	; (80096a4 <_dtoa_r+0x30c>)
 8009478:	6018      	str	r0, [r3, #0]
 800947a:	1e43      	subs	r3, r0, #1
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	e7dd      	b.n	800943c <_dtoa_r+0xa4>
 8009480:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009484:	aa12      	add	r2, sp, #72	; 0x48
 8009486:	a913      	add	r1, sp, #76	; 0x4c
 8009488:	4620      	mov	r0, r4
 800948a:	f001 f9a7 	bl	800a7dc <__d2b>
 800948e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009492:	4683      	mov	fp, r0
 8009494:	2d00      	cmp	r5, #0
 8009496:	d07c      	beq.n	8009592 <_dtoa_r+0x1fa>
 8009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800949e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80094a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094b2:	4b7d      	ldr	r3, [pc, #500]	; (80096a8 <_dtoa_r+0x310>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f6 ff15 	bl	80002e8 <__aeabi_dsub>
 80094be:	a36e      	add	r3, pc, #440	; (adr r3, 8009678 <_dtoa_r+0x2e0>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f7 f8c8 	bl	8000658 <__aeabi_dmul>
 80094c8:	a36d      	add	r3, pc, #436	; (adr r3, 8009680 <_dtoa_r+0x2e8>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f6 ff0d 	bl	80002ec <__adddf3>
 80094d2:	4606      	mov	r6, r0
 80094d4:	4628      	mov	r0, r5
 80094d6:	460f      	mov	r7, r1
 80094d8:	f7f7 f854 	bl	8000584 <__aeabi_i2d>
 80094dc:	a36a      	add	r3, pc, #424	; (adr r3, 8009688 <_dtoa_r+0x2f0>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f7 f8b9 	bl	8000658 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4630      	mov	r0, r6
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f6 fefd 	bl	80002ec <__adddf3>
 80094f2:	4606      	mov	r6, r0
 80094f4:	460f      	mov	r7, r1
 80094f6:	f7f7 fb5f 	bl	8000bb8 <__aeabi_d2iz>
 80094fa:	2200      	movs	r2, #0
 80094fc:	4682      	mov	sl, r0
 80094fe:	2300      	movs	r3, #0
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	f7f7 fb1a 	bl	8000b3c <__aeabi_dcmplt>
 8009508:	b148      	cbz	r0, 800951e <_dtoa_r+0x186>
 800950a:	4650      	mov	r0, sl
 800950c:	f7f7 f83a 	bl	8000584 <__aeabi_i2d>
 8009510:	4632      	mov	r2, r6
 8009512:	463b      	mov	r3, r7
 8009514:	f7f7 fb08 	bl	8000b28 <__aeabi_dcmpeq>
 8009518:	b908      	cbnz	r0, 800951e <_dtoa_r+0x186>
 800951a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800951e:	f1ba 0f16 	cmp.w	sl, #22
 8009522:	d854      	bhi.n	80095ce <_dtoa_r+0x236>
 8009524:	4b61      	ldr	r3, [pc, #388]	; (80096ac <_dtoa_r+0x314>)
 8009526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009532:	f7f7 fb03 	bl	8000b3c <__aeabi_dcmplt>
 8009536:	2800      	cmp	r0, #0
 8009538:	d04b      	beq.n	80095d2 <_dtoa_r+0x23a>
 800953a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800953e:	2300      	movs	r3, #0
 8009540:	930e      	str	r3, [sp, #56]	; 0x38
 8009542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009544:	1b5d      	subs	r5, r3, r5
 8009546:	1e6b      	subs	r3, r5, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	bf43      	ittte	mi
 800954c:	2300      	movmi	r3, #0
 800954e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009552:	9304      	strmi	r3, [sp, #16]
 8009554:	f04f 0800 	movpl.w	r8, #0
 8009558:	f1ba 0f00 	cmp.w	sl, #0
 800955c:	db3b      	blt.n	80095d6 <_dtoa_r+0x23e>
 800955e:	9b04      	ldr	r3, [sp, #16]
 8009560:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009564:	4453      	add	r3, sl
 8009566:	9304      	str	r3, [sp, #16]
 8009568:	2300      	movs	r3, #0
 800956a:	9306      	str	r3, [sp, #24]
 800956c:	9b05      	ldr	r3, [sp, #20]
 800956e:	2b09      	cmp	r3, #9
 8009570:	d869      	bhi.n	8009646 <_dtoa_r+0x2ae>
 8009572:	2b05      	cmp	r3, #5
 8009574:	bfc4      	itt	gt
 8009576:	3b04      	subgt	r3, #4
 8009578:	9305      	strgt	r3, [sp, #20]
 800957a:	9b05      	ldr	r3, [sp, #20]
 800957c:	f1a3 0302 	sub.w	r3, r3, #2
 8009580:	bfcc      	ite	gt
 8009582:	2500      	movgt	r5, #0
 8009584:	2501      	movle	r5, #1
 8009586:	2b03      	cmp	r3, #3
 8009588:	d869      	bhi.n	800965e <_dtoa_r+0x2c6>
 800958a:	e8df f003 	tbb	[pc, r3]
 800958e:	4e2c      	.short	0x4e2c
 8009590:	5a4c      	.short	0x5a4c
 8009592:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009596:	441d      	add	r5, r3
 8009598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800959c:	2b20      	cmp	r3, #32
 800959e:	bfc1      	itttt	gt
 80095a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80095ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095b0:	bfda      	itte	le
 80095b2:	f1c3 0320 	rsble	r3, r3, #32
 80095b6:	fa06 f003 	lslle.w	r0, r6, r3
 80095ba:	4318      	orrgt	r0, r3
 80095bc:	f7f6 ffd2 	bl	8000564 <__aeabi_ui2d>
 80095c0:	2301      	movs	r3, #1
 80095c2:	4606      	mov	r6, r0
 80095c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095c8:	3d01      	subs	r5, #1
 80095ca:	9310      	str	r3, [sp, #64]	; 0x40
 80095cc:	e771      	b.n	80094b2 <_dtoa_r+0x11a>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e7b6      	b.n	8009540 <_dtoa_r+0x1a8>
 80095d2:	900e      	str	r0, [sp, #56]	; 0x38
 80095d4:	e7b5      	b.n	8009542 <_dtoa_r+0x1aa>
 80095d6:	f1ca 0300 	rsb	r3, sl, #0
 80095da:	9306      	str	r3, [sp, #24]
 80095dc:	2300      	movs	r3, #0
 80095de:	eba8 080a 	sub.w	r8, r8, sl
 80095e2:	930d      	str	r3, [sp, #52]	; 0x34
 80095e4:	e7c2      	b.n	800956c <_dtoa_r+0x1d4>
 80095e6:	2300      	movs	r3, #0
 80095e8:	9308      	str	r3, [sp, #32]
 80095ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc39      	bgt.n	8009664 <_dtoa_r+0x2cc>
 80095f0:	f04f 0901 	mov.w	r9, #1
 80095f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80095f8:	464b      	mov	r3, r9
 80095fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80095fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009600:	2200      	movs	r2, #0
 8009602:	6042      	str	r2, [r0, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	f102 0614 	add.w	r6, r2, #20
 800960a:	429e      	cmp	r6, r3
 800960c:	6841      	ldr	r1, [r0, #4]
 800960e:	d92f      	bls.n	8009670 <_dtoa_r+0x2d8>
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fdc1 	bl	800a198 <_Balloc>
 8009616:	9000      	str	r0, [sp, #0]
 8009618:	2800      	cmp	r0, #0
 800961a:	d14b      	bne.n	80096b4 <_dtoa_r+0x31c>
 800961c:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <_dtoa_r+0x318>)
 800961e:	4602      	mov	r2, r0
 8009620:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009624:	e6d1      	b.n	80093ca <_dtoa_r+0x32>
 8009626:	2301      	movs	r3, #1
 8009628:	e7de      	b.n	80095e8 <_dtoa_r+0x250>
 800962a:	2300      	movs	r3, #0
 800962c:	9308      	str	r3, [sp, #32]
 800962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009630:	eb0a 0903 	add.w	r9, sl, r3
 8009634:	f109 0301 	add.w	r3, r9, #1
 8009638:	2b01      	cmp	r3, #1
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	bfb8      	it	lt
 800963e:	2301      	movlt	r3, #1
 8009640:	e7dd      	b.n	80095fe <_dtoa_r+0x266>
 8009642:	2301      	movs	r3, #1
 8009644:	e7f2      	b.n	800962c <_dtoa_r+0x294>
 8009646:	2501      	movs	r5, #1
 8009648:	2300      	movs	r3, #0
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	9508      	str	r5, [sp, #32]
 800964e:	f04f 39ff 	mov.w	r9, #4294967295
 8009652:	2200      	movs	r2, #0
 8009654:	f8cd 9004 	str.w	r9, [sp, #4]
 8009658:	2312      	movs	r3, #18
 800965a:	9209      	str	r2, [sp, #36]	; 0x24
 800965c:	e7cf      	b.n	80095fe <_dtoa_r+0x266>
 800965e:	2301      	movs	r3, #1
 8009660:	9308      	str	r3, [sp, #32]
 8009662:	e7f4      	b.n	800964e <_dtoa_r+0x2b6>
 8009664:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009668:	f8cd 9004 	str.w	r9, [sp, #4]
 800966c:	464b      	mov	r3, r9
 800966e:	e7c6      	b.n	80095fe <_dtoa_r+0x266>
 8009670:	3101      	adds	r1, #1
 8009672:	6041      	str	r1, [r0, #4]
 8009674:	0052      	lsls	r2, r2, #1
 8009676:	e7c6      	b.n	8009606 <_dtoa_r+0x26e>
 8009678:	636f4361 	.word	0x636f4361
 800967c:	3fd287a7 	.word	0x3fd287a7
 8009680:	8b60c8b3 	.word	0x8b60c8b3
 8009684:	3fc68a28 	.word	0x3fc68a28
 8009688:	509f79fb 	.word	0x509f79fb
 800968c:	3fd34413 	.word	0x3fd34413
 8009690:	0800b7a5 	.word	0x0800b7a5
 8009694:	0800b7bc 	.word	0x0800b7bc
 8009698:	7ff00000 	.word	0x7ff00000
 800969c:	0800b7a1 	.word	0x0800b7a1
 80096a0:	0800b798 	.word	0x0800b798
 80096a4:	0800b775 	.word	0x0800b775
 80096a8:	3ff80000 	.word	0x3ff80000
 80096ac:	0800b918 	.word	0x0800b918
 80096b0:	0800b81b 	.word	0x0800b81b
 80096b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b6:	9a00      	ldr	r2, [sp, #0]
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	2b0e      	cmp	r3, #14
 80096be:	f200 80ad 	bhi.w	800981c <_dtoa_r+0x484>
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	f000 80aa 	beq.w	800981c <_dtoa_r+0x484>
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	dd36      	ble.n	800973c <_dtoa_r+0x3a4>
 80096ce:	4ac3      	ldr	r2, [pc, #780]	; (80099dc <_dtoa_r+0x644>)
 80096d0:	f00a 030f 	and.w	r3, sl, #15
 80096d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096d8:	ed93 7b00 	vldr	d7, [r3]
 80096dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80096e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80096e4:	eeb0 8a47 	vmov.f32	s16, s14
 80096e8:	eef0 8a67 	vmov.f32	s17, s15
 80096ec:	d016      	beq.n	800971c <_dtoa_r+0x384>
 80096ee:	4bbc      	ldr	r3, [pc, #752]	; (80099e0 <_dtoa_r+0x648>)
 80096f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096f8:	f7f7 f8d8 	bl	80008ac <__aeabi_ddiv>
 80096fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009700:	f007 070f 	and.w	r7, r7, #15
 8009704:	2503      	movs	r5, #3
 8009706:	4eb6      	ldr	r6, [pc, #728]	; (80099e0 <_dtoa_r+0x648>)
 8009708:	b957      	cbnz	r7, 8009720 <_dtoa_r+0x388>
 800970a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970e:	ec53 2b18 	vmov	r2, r3, d8
 8009712:	f7f7 f8cb 	bl	80008ac <__aeabi_ddiv>
 8009716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800971a:	e029      	b.n	8009770 <_dtoa_r+0x3d8>
 800971c:	2502      	movs	r5, #2
 800971e:	e7f2      	b.n	8009706 <_dtoa_r+0x36e>
 8009720:	07f9      	lsls	r1, r7, #31
 8009722:	d508      	bpl.n	8009736 <_dtoa_r+0x39e>
 8009724:	ec51 0b18 	vmov	r0, r1, d8
 8009728:	e9d6 2300 	ldrd	r2, r3, [r6]
 800972c:	f7f6 ff94 	bl	8000658 <__aeabi_dmul>
 8009730:	ec41 0b18 	vmov	d8, r0, r1
 8009734:	3501      	adds	r5, #1
 8009736:	107f      	asrs	r7, r7, #1
 8009738:	3608      	adds	r6, #8
 800973a:	e7e5      	b.n	8009708 <_dtoa_r+0x370>
 800973c:	f000 80a6 	beq.w	800988c <_dtoa_r+0x4f4>
 8009740:	f1ca 0600 	rsb	r6, sl, #0
 8009744:	4ba5      	ldr	r3, [pc, #660]	; (80099dc <_dtoa_r+0x644>)
 8009746:	4fa6      	ldr	r7, [pc, #664]	; (80099e0 <_dtoa_r+0x648>)
 8009748:	f006 020f 	and.w	r2, r6, #15
 800974c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009758:	f7f6 ff7e 	bl	8000658 <__aeabi_dmul>
 800975c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009760:	1136      	asrs	r6, r6, #4
 8009762:	2300      	movs	r3, #0
 8009764:	2502      	movs	r5, #2
 8009766:	2e00      	cmp	r6, #0
 8009768:	f040 8085 	bne.w	8009876 <_dtoa_r+0x4de>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1d2      	bne.n	8009716 <_dtoa_r+0x37e>
 8009770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 808c 	beq.w	8009890 <_dtoa_r+0x4f8>
 8009778:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800977c:	4b99      	ldr	r3, [pc, #612]	; (80099e4 <_dtoa_r+0x64c>)
 800977e:	2200      	movs	r2, #0
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 f9da 	bl	8000b3c <__aeabi_dcmplt>
 8009788:	2800      	cmp	r0, #0
 800978a:	f000 8081 	beq.w	8009890 <_dtoa_r+0x4f8>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d07d      	beq.n	8009890 <_dtoa_r+0x4f8>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	dd3c      	ble.n	8009814 <_dtoa_r+0x47c>
 800979a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	2200      	movs	r2, #0
 80097a2:	4b91      	ldr	r3, [pc, #580]	; (80099e8 <_dtoa_r+0x650>)
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f6 ff56 	bl	8000658 <__aeabi_dmul>
 80097ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097b0:	3501      	adds	r5, #1
 80097b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80097b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7f6 fee2 	bl	8000584 <__aeabi_i2d>
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	f7f6 ff48 	bl	8000658 <__aeabi_dmul>
 80097c8:	4b88      	ldr	r3, [pc, #544]	; (80099ec <_dtoa_r+0x654>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	f7f6 fd8e 	bl	80002ec <__adddf3>
 80097d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80097d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d8:	9303      	str	r3, [sp, #12]
 80097da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d15c      	bne.n	800989a <_dtoa_r+0x502>
 80097e0:	4b83      	ldr	r3, [pc, #524]	; (80099f0 <_dtoa_r+0x658>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f6 fd7e 	bl	80002e8 <__aeabi_dsub>
 80097ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097f0:	4606      	mov	r6, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	f7f7 f9c0 	bl	8000b78 <__aeabi_dcmpgt>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f040 8296 	bne.w	8009d2a <_dtoa_r+0x992>
 80097fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009802:	4630      	mov	r0, r6
 8009804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009808:	4639      	mov	r1, r7
 800980a:	f7f7 f997 	bl	8000b3c <__aeabi_dcmplt>
 800980e:	2800      	cmp	r0, #0
 8009810:	f040 8288 	bne.w	8009d24 <_dtoa_r+0x98c>
 8009814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800981c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800981e:	2b00      	cmp	r3, #0
 8009820:	f2c0 8158 	blt.w	8009ad4 <_dtoa_r+0x73c>
 8009824:	f1ba 0f0e 	cmp.w	sl, #14
 8009828:	f300 8154 	bgt.w	8009ad4 <_dtoa_r+0x73c>
 800982c:	4b6b      	ldr	r3, [pc, #428]	; (80099dc <_dtoa_r+0x644>)
 800982e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009832:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009838:	2b00      	cmp	r3, #0
 800983a:	f280 80e3 	bge.w	8009a04 <_dtoa_r+0x66c>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f300 80df 	bgt.w	8009a04 <_dtoa_r+0x66c>
 8009846:	f040 826d 	bne.w	8009d24 <_dtoa_r+0x98c>
 800984a:	4b69      	ldr	r3, [pc, #420]	; (80099f0 <_dtoa_r+0x658>)
 800984c:	2200      	movs	r2, #0
 800984e:	4640      	mov	r0, r8
 8009850:	4649      	mov	r1, r9
 8009852:	f7f6 ff01 	bl	8000658 <__aeabi_dmul>
 8009856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800985a:	f7f7 f983 	bl	8000b64 <__aeabi_dcmpge>
 800985e:	9e01      	ldr	r6, [sp, #4]
 8009860:	4637      	mov	r7, r6
 8009862:	2800      	cmp	r0, #0
 8009864:	f040 8243 	bne.w	8009cee <_dtoa_r+0x956>
 8009868:	9d00      	ldr	r5, [sp, #0]
 800986a:	2331      	movs	r3, #49	; 0x31
 800986c:	f805 3b01 	strb.w	r3, [r5], #1
 8009870:	f10a 0a01 	add.w	sl, sl, #1
 8009874:	e23f      	b.n	8009cf6 <_dtoa_r+0x95e>
 8009876:	07f2      	lsls	r2, r6, #31
 8009878:	d505      	bpl.n	8009886 <_dtoa_r+0x4ee>
 800987a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800987e:	f7f6 feeb 	bl	8000658 <__aeabi_dmul>
 8009882:	3501      	adds	r5, #1
 8009884:	2301      	movs	r3, #1
 8009886:	1076      	asrs	r6, r6, #1
 8009888:	3708      	adds	r7, #8
 800988a:	e76c      	b.n	8009766 <_dtoa_r+0x3ce>
 800988c:	2502      	movs	r5, #2
 800988e:	e76f      	b.n	8009770 <_dtoa_r+0x3d8>
 8009890:	9b01      	ldr	r3, [sp, #4]
 8009892:	f8cd a01c 	str.w	sl, [sp, #28]
 8009896:	930c      	str	r3, [sp, #48]	; 0x30
 8009898:	e78d      	b.n	80097b6 <_dtoa_r+0x41e>
 800989a:	9900      	ldr	r1, [sp, #0]
 800989c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800989e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a0:	4b4e      	ldr	r3, [pc, #312]	; (80099dc <_dtoa_r+0x644>)
 80098a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098a6:	4401      	add	r1, r0
 80098a8:	9102      	str	r1, [sp, #8]
 80098aa:	9908      	ldr	r1, [sp, #32]
 80098ac:	eeb0 8a47 	vmov.f32	s16, s14
 80098b0:	eef0 8a67 	vmov.f32	s17, s15
 80098b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098bc:	2900      	cmp	r1, #0
 80098be:	d045      	beq.n	800994c <_dtoa_r+0x5b4>
 80098c0:	494c      	ldr	r1, [pc, #304]	; (80099f4 <_dtoa_r+0x65c>)
 80098c2:	2000      	movs	r0, #0
 80098c4:	f7f6 fff2 	bl	80008ac <__aeabi_ddiv>
 80098c8:	ec53 2b18 	vmov	r2, r3, d8
 80098cc:	f7f6 fd0c 	bl	80002e8 <__aeabi_dsub>
 80098d0:	9d00      	ldr	r5, [sp, #0]
 80098d2:	ec41 0b18 	vmov	d8, r0, r1
 80098d6:	4639      	mov	r1, r7
 80098d8:	4630      	mov	r0, r6
 80098da:	f7f7 f96d 	bl	8000bb8 <__aeabi_d2iz>
 80098de:	900c      	str	r0, [sp, #48]	; 0x30
 80098e0:	f7f6 fe50 	bl	8000584 <__aeabi_i2d>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f6 fcfc 	bl	80002e8 <__aeabi_dsub>
 80098f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f2:	3330      	adds	r3, #48	; 0x30
 80098f4:	f805 3b01 	strb.w	r3, [r5], #1
 80098f8:	ec53 2b18 	vmov	r2, r3, d8
 80098fc:	4606      	mov	r6, r0
 80098fe:	460f      	mov	r7, r1
 8009900:	f7f7 f91c 	bl	8000b3c <__aeabi_dcmplt>
 8009904:	2800      	cmp	r0, #0
 8009906:	d165      	bne.n	80099d4 <_dtoa_r+0x63c>
 8009908:	4632      	mov	r2, r6
 800990a:	463b      	mov	r3, r7
 800990c:	4935      	ldr	r1, [pc, #212]	; (80099e4 <_dtoa_r+0x64c>)
 800990e:	2000      	movs	r0, #0
 8009910:	f7f6 fcea 	bl	80002e8 <__aeabi_dsub>
 8009914:	ec53 2b18 	vmov	r2, r3, d8
 8009918:	f7f7 f910 	bl	8000b3c <__aeabi_dcmplt>
 800991c:	2800      	cmp	r0, #0
 800991e:	f040 80b9 	bne.w	8009a94 <_dtoa_r+0x6fc>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	429d      	cmp	r5, r3
 8009926:	f43f af75 	beq.w	8009814 <_dtoa_r+0x47c>
 800992a:	4b2f      	ldr	r3, [pc, #188]	; (80099e8 <_dtoa_r+0x650>)
 800992c:	ec51 0b18 	vmov	r0, r1, d8
 8009930:	2200      	movs	r2, #0
 8009932:	f7f6 fe91 	bl	8000658 <__aeabi_dmul>
 8009936:	4b2c      	ldr	r3, [pc, #176]	; (80099e8 <_dtoa_r+0x650>)
 8009938:	ec41 0b18 	vmov	d8, r0, r1
 800993c:	2200      	movs	r2, #0
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fe89 	bl	8000658 <__aeabi_dmul>
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	e7c4      	b.n	80098d6 <_dtoa_r+0x53e>
 800994c:	ec51 0b17 	vmov	r0, r1, d7
 8009950:	f7f6 fe82 	bl	8000658 <__aeabi_dmul>
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	9d00      	ldr	r5, [sp, #0]
 8009958:	930c      	str	r3, [sp, #48]	; 0x30
 800995a:	ec41 0b18 	vmov	d8, r0, r1
 800995e:	4639      	mov	r1, r7
 8009960:	4630      	mov	r0, r6
 8009962:	f7f7 f929 	bl	8000bb8 <__aeabi_d2iz>
 8009966:	9011      	str	r0, [sp, #68]	; 0x44
 8009968:	f7f6 fe0c 	bl	8000584 <__aeabi_i2d>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f6 fcb8 	bl	80002e8 <__aeabi_dsub>
 8009978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800997a:	3330      	adds	r3, #48	; 0x30
 800997c:	f805 3b01 	strb.w	r3, [r5], #1
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	429d      	cmp	r5, r3
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	d134      	bne.n	80099f8 <_dtoa_r+0x660>
 800998e:	4b19      	ldr	r3, [pc, #100]	; (80099f4 <_dtoa_r+0x65c>)
 8009990:	ec51 0b18 	vmov	r0, r1, d8
 8009994:	f7f6 fcaa 	bl	80002ec <__adddf3>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4630      	mov	r0, r6
 800999e:	4639      	mov	r1, r7
 80099a0:	f7f7 f8ea 	bl	8000b78 <__aeabi_dcmpgt>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d175      	bne.n	8009a94 <_dtoa_r+0x6fc>
 80099a8:	ec53 2b18 	vmov	r2, r3, d8
 80099ac:	4911      	ldr	r1, [pc, #68]	; (80099f4 <_dtoa_r+0x65c>)
 80099ae:	2000      	movs	r0, #0
 80099b0:	f7f6 fc9a 	bl	80002e8 <__aeabi_dsub>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4630      	mov	r0, r6
 80099ba:	4639      	mov	r1, r7
 80099bc:	f7f7 f8be 	bl	8000b3c <__aeabi_dcmplt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f43f af27 	beq.w	8009814 <_dtoa_r+0x47c>
 80099c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099c8:	1e6b      	subs	r3, r5, #1
 80099ca:	930c      	str	r3, [sp, #48]	; 0x30
 80099cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d0f8      	beq.n	80099c6 <_dtoa_r+0x62e>
 80099d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099d8:	e04a      	b.n	8009a70 <_dtoa_r+0x6d8>
 80099da:	bf00      	nop
 80099dc:	0800b918 	.word	0x0800b918
 80099e0:	0800b8f0 	.word	0x0800b8f0
 80099e4:	3ff00000 	.word	0x3ff00000
 80099e8:	40240000 	.word	0x40240000
 80099ec:	401c0000 	.word	0x401c0000
 80099f0:	40140000 	.word	0x40140000
 80099f4:	3fe00000 	.word	0x3fe00000
 80099f8:	4baf      	ldr	r3, [pc, #700]	; (8009cb8 <_dtoa_r+0x920>)
 80099fa:	f7f6 fe2d 	bl	8000658 <__aeabi_dmul>
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	e7ac      	b.n	800995e <_dtoa_r+0x5c6>
 8009a04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a08:	9d00      	ldr	r5, [sp, #0]
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 ff4b 	bl	80008ac <__aeabi_ddiv>
 8009a16:	f7f7 f8cf 	bl	8000bb8 <__aeabi_d2iz>
 8009a1a:	9002      	str	r0, [sp, #8]
 8009a1c:	f7f6 fdb2 	bl	8000584 <__aeabi_i2d>
 8009a20:	4642      	mov	r2, r8
 8009a22:	464b      	mov	r3, r9
 8009a24:	f7f6 fe18 	bl	8000658 <__aeabi_dmul>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f6 fc5a 	bl	80002e8 <__aeabi_dsub>
 8009a34:	9e02      	ldr	r6, [sp, #8]
 8009a36:	9f01      	ldr	r7, [sp, #4]
 8009a38:	3630      	adds	r6, #48	; 0x30
 8009a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a3e:	9e00      	ldr	r6, [sp, #0]
 8009a40:	1bae      	subs	r6, r5, r6
 8009a42:	42b7      	cmp	r7, r6
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	d137      	bne.n	8009aba <_dtoa_r+0x722>
 8009a4a:	f7f6 fc4f 	bl	80002ec <__adddf3>
 8009a4e:	4642      	mov	r2, r8
 8009a50:	464b      	mov	r3, r9
 8009a52:	4606      	mov	r6, r0
 8009a54:	460f      	mov	r7, r1
 8009a56:	f7f7 f88f 	bl	8000b78 <__aeabi_dcmpgt>
 8009a5a:	b9c8      	cbnz	r0, 8009a90 <_dtoa_r+0x6f8>
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f7f7 f860 	bl	8000b28 <__aeabi_dcmpeq>
 8009a68:	b110      	cbz	r0, 8009a70 <_dtoa_r+0x6d8>
 8009a6a:	9b02      	ldr	r3, [sp, #8]
 8009a6c:	07d9      	lsls	r1, r3, #31
 8009a6e:	d40f      	bmi.n	8009a90 <_dtoa_r+0x6f8>
 8009a70:	4620      	mov	r0, r4
 8009a72:	4659      	mov	r1, fp
 8009a74:	f000 fbd0 	bl	800a218 <_Bfree>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	702b      	strb	r3, [r5, #0]
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a7e:	f10a 0001 	add.w	r0, sl, #1
 8009a82:	6018      	str	r0, [r3, #0]
 8009a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f43f acd8 	beq.w	800943c <_dtoa_r+0xa4>
 8009a8c:	601d      	str	r5, [r3, #0]
 8009a8e:	e4d5      	b.n	800943c <_dtoa_r+0xa4>
 8009a90:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a94:	462b      	mov	r3, r5
 8009a96:	461d      	mov	r5, r3
 8009a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a9c:	2a39      	cmp	r2, #57	; 0x39
 8009a9e:	d108      	bne.n	8009ab2 <_dtoa_r+0x71a>
 8009aa0:	9a00      	ldr	r2, [sp, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d1f7      	bne.n	8009a96 <_dtoa_r+0x6fe>
 8009aa6:	9a07      	ldr	r2, [sp, #28]
 8009aa8:	9900      	ldr	r1, [sp, #0]
 8009aaa:	3201      	adds	r2, #1
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	2230      	movs	r2, #48	; 0x30
 8009ab0:	700a      	strb	r2, [r1, #0]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	3201      	adds	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	e78c      	b.n	80099d4 <_dtoa_r+0x63c>
 8009aba:	4b7f      	ldr	r3, [pc, #508]	; (8009cb8 <_dtoa_r+0x920>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	f7f6 fdcb 	bl	8000658 <__aeabi_dmul>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	f7f7 f82d 	bl	8000b28 <__aeabi_dcmpeq>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d09b      	beq.n	8009a0a <_dtoa_r+0x672>
 8009ad2:	e7cd      	b.n	8009a70 <_dtoa_r+0x6d8>
 8009ad4:	9a08      	ldr	r2, [sp, #32]
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	f000 80c4 	beq.w	8009c64 <_dtoa_r+0x8cc>
 8009adc:	9a05      	ldr	r2, [sp, #20]
 8009ade:	2a01      	cmp	r2, #1
 8009ae0:	f300 80a8 	bgt.w	8009c34 <_dtoa_r+0x89c>
 8009ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	f000 80a0 	beq.w	8009c2c <_dtoa_r+0x894>
 8009aec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009af0:	9e06      	ldr	r6, [sp, #24]
 8009af2:	4645      	mov	r5, r8
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	2101      	movs	r1, #1
 8009af8:	441a      	add	r2, r3
 8009afa:	4620      	mov	r0, r4
 8009afc:	4498      	add	r8, r3
 8009afe:	9204      	str	r2, [sp, #16]
 8009b00:	f000 fc46 	bl	800a390 <__i2b>
 8009b04:	4607      	mov	r7, r0
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	dd0b      	ble.n	8009b22 <_dtoa_r+0x78a>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd08      	ble.n	8009b22 <_dtoa_r+0x78a>
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	bfa8      	it	ge
 8009b16:	462b      	movge	r3, r5
 8009b18:	eba8 0803 	sub.w	r8, r8, r3
 8009b1c:	1aed      	subs	r5, r5, r3
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	b1fb      	cbz	r3, 8009b66 <_dtoa_r+0x7ce>
 8009b26:	9b08      	ldr	r3, [sp, #32]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 809f 	beq.w	8009c6c <_dtoa_r+0x8d4>
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	dd11      	ble.n	8009b56 <_dtoa_r+0x7be>
 8009b32:	4639      	mov	r1, r7
 8009b34:	4632      	mov	r2, r6
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 fce6 	bl	800a508 <__pow5mult>
 8009b3c:	465a      	mov	r2, fp
 8009b3e:	4601      	mov	r1, r0
 8009b40:	4607      	mov	r7, r0
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 fc3a 	bl	800a3bc <__multiply>
 8009b48:	4659      	mov	r1, fp
 8009b4a:	9007      	str	r0, [sp, #28]
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fb63 	bl	800a218 <_Bfree>
 8009b52:	9b07      	ldr	r3, [sp, #28]
 8009b54:	469b      	mov	fp, r3
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	1b9a      	subs	r2, r3, r6
 8009b5a:	d004      	beq.n	8009b66 <_dtoa_r+0x7ce>
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 fcd2 	bl	800a508 <__pow5mult>
 8009b64:	4683      	mov	fp, r0
 8009b66:	2101      	movs	r1, #1
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fc11 	bl	800a390 <__i2b>
 8009b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	4606      	mov	r6, r0
 8009b74:	dd7c      	ble.n	8009c70 <_dtoa_r+0x8d8>
 8009b76:	461a      	mov	r2, r3
 8009b78:	4601      	mov	r1, r0
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 fcc4 	bl	800a508 <__pow5mult>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	4606      	mov	r6, r0
 8009b86:	dd76      	ble.n	8009c76 <_dtoa_r+0x8de>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9306      	str	r3, [sp, #24]
 8009b8c:	6933      	ldr	r3, [r6, #16]
 8009b8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b92:	6918      	ldr	r0, [r3, #16]
 8009b94:	f000 fbac 	bl	800a2f0 <__hi0bits>
 8009b98:	f1c0 0020 	rsb	r0, r0, #32
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4418      	add	r0, r3
 8009ba0:	f010 001f 	ands.w	r0, r0, #31
 8009ba4:	f000 8086 	beq.w	8009cb4 <_dtoa_r+0x91c>
 8009ba8:	f1c0 0320 	rsb	r3, r0, #32
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	dd7f      	ble.n	8009cb0 <_dtoa_r+0x918>
 8009bb0:	f1c0 001c 	rsb	r0, r0, #28
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	4403      	add	r3, r0
 8009bb8:	4480      	add	r8, r0
 8009bba:	4405      	add	r5, r0
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	f1b8 0f00 	cmp.w	r8, #0
 8009bc2:	dd05      	ble.n	8009bd0 <_dtoa_r+0x838>
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fcf7 	bl	800a5bc <__lshift>
 8009bce:	4683      	mov	fp, r0
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd05      	ble.n	8009be2 <_dtoa_r+0x84a>
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	461a      	mov	r2, r3
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fcee 	bl	800a5bc <__lshift>
 8009be0:	4606      	mov	r6, r0
 8009be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d069      	beq.n	8009cbc <_dtoa_r+0x924>
 8009be8:	4631      	mov	r1, r6
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fd52 	bl	800a694 <__mcmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	da63      	bge.n	8009cbc <_dtoa_r+0x924>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4659      	mov	r1, fp
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 fb2e 	bl	800a25c <__multadd>
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c06:	4683      	mov	fp, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 818f 	beq.w	8009f2c <_dtoa_r+0xb94>
 8009c0e:	4639      	mov	r1, r7
 8009c10:	2300      	movs	r3, #0
 8009c12:	220a      	movs	r2, #10
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fb21 	bl	800a25c <__multadd>
 8009c1a:	f1b9 0f00 	cmp.w	r9, #0
 8009c1e:	4607      	mov	r7, r0
 8009c20:	f300 808e 	bgt.w	8009d40 <_dtoa_r+0x9a8>
 8009c24:	9b05      	ldr	r3, [sp, #20]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dc50      	bgt.n	8009ccc <_dtoa_r+0x934>
 8009c2a:	e089      	b.n	8009d40 <_dtoa_r+0x9a8>
 8009c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c32:	e75d      	b.n	8009af0 <_dtoa_r+0x758>
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	1e5e      	subs	r6, r3, #1
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	42b3      	cmp	r3, r6
 8009c3c:	bfbf      	itttt	lt
 8009c3e:	9b06      	ldrlt	r3, [sp, #24]
 8009c40:	9606      	strlt	r6, [sp, #24]
 8009c42:	1af2      	sublt	r2, r6, r3
 8009c44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009c46:	bfb6      	itet	lt
 8009c48:	189b      	addlt	r3, r3, r2
 8009c4a:	1b9e      	subge	r6, r3, r6
 8009c4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	bfb8      	it	lt
 8009c52:	2600      	movlt	r6, #0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfb5      	itete	lt
 8009c58:	eba8 0503 	sublt.w	r5, r8, r3
 8009c5c:	9b01      	ldrge	r3, [sp, #4]
 8009c5e:	2300      	movlt	r3, #0
 8009c60:	4645      	movge	r5, r8
 8009c62:	e747      	b.n	8009af4 <_dtoa_r+0x75c>
 8009c64:	9e06      	ldr	r6, [sp, #24]
 8009c66:	9f08      	ldr	r7, [sp, #32]
 8009c68:	4645      	mov	r5, r8
 8009c6a:	e74c      	b.n	8009b06 <_dtoa_r+0x76e>
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	e775      	b.n	8009b5c <_dtoa_r+0x7c4>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	dc18      	bgt.n	8009ca8 <_dtoa_r+0x910>
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	b9b3      	cbnz	r3, 8009ca8 <_dtoa_r+0x910>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c80:	b9a3      	cbnz	r3, 8009cac <_dtoa_r+0x914>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	051b      	lsls	r3, r3, #20
 8009c8c:	b12b      	cbz	r3, 8009c9a <_dtoa_r+0x902>
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f47f af74 	bne.w	8009b8c <_dtoa_r+0x7f4>
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	e779      	b.n	8009b9c <_dtoa_r+0x804>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e7f6      	b.n	8009c9a <_dtoa_r+0x902>
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	e7f4      	b.n	8009c9a <_dtoa_r+0x902>
 8009cb0:	d085      	beq.n	8009bbe <_dtoa_r+0x826>
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	301c      	adds	r0, #28
 8009cb6:	e77d      	b.n	8009bb4 <_dtoa_r+0x81c>
 8009cb8:	40240000 	.word	0x40240000
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dc38      	bgt.n	8009d34 <_dtoa_r+0x99c>
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	dd35      	ble.n	8009d34 <_dtoa_r+0x99c>
 8009cc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ccc:	f1b9 0f00 	cmp.w	r9, #0
 8009cd0:	d10d      	bne.n	8009cee <_dtoa_r+0x956>
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fabf 	bl	800a25c <__multadd>
 8009cde:	4601      	mov	r1, r0
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fcd6 	bl	800a694 <__mcmp>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f73f adbd 	bgt.w	8009868 <_dtoa_r+0x4d0>
 8009cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf0:	9d00      	ldr	r5, [sp, #0]
 8009cf2:	ea6f 0a03 	mvn.w	sl, r3
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 fa8b 	bl	800a218 <_Bfree>
 8009d02:	2f00      	cmp	r7, #0
 8009d04:	f43f aeb4 	beq.w	8009a70 <_dtoa_r+0x6d8>
 8009d08:	f1b8 0f00 	cmp.w	r8, #0
 8009d0c:	d005      	beq.n	8009d1a <_dtoa_r+0x982>
 8009d0e:	45b8      	cmp	r8, r7
 8009d10:	d003      	beq.n	8009d1a <_dtoa_r+0x982>
 8009d12:	4641      	mov	r1, r8
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 fa7f 	bl	800a218 <_Bfree>
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f000 fa7b 	bl	800a218 <_Bfree>
 8009d22:	e6a5      	b.n	8009a70 <_dtoa_r+0x6d8>
 8009d24:	2600      	movs	r6, #0
 8009d26:	4637      	mov	r7, r6
 8009d28:	e7e1      	b.n	8009cee <_dtoa_r+0x956>
 8009d2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d30:	4637      	mov	r7, r6
 8009d32:	e599      	b.n	8009868 <_dtoa_r+0x4d0>
 8009d34:	9b08      	ldr	r3, [sp, #32]
 8009d36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 80fd 	beq.w	8009f3a <_dtoa_r+0xba2>
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	dd05      	ble.n	8009d50 <_dtoa_r+0x9b8>
 8009d44:	4639      	mov	r1, r7
 8009d46:	462a      	mov	r2, r5
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fc37 	bl	800a5bc <__lshift>
 8009d4e:	4607      	mov	r7, r0
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d05c      	beq.n	8009e10 <_dtoa_r+0xa78>
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fa1d 	bl	800a198 <_Balloc>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b928      	cbnz	r0, 8009d6e <_dtoa_r+0x9d6>
 8009d62:	4b80      	ldr	r3, [pc, #512]	; (8009f64 <_dtoa_r+0xbcc>)
 8009d64:	4602      	mov	r2, r0
 8009d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d6a:	f7ff bb2e 	b.w	80093ca <_dtoa_r+0x32>
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	3202      	adds	r2, #2
 8009d72:	0092      	lsls	r2, r2, #2
 8009d74:	f107 010c 	add.w	r1, r7, #12
 8009d78:	300c      	adds	r0, #12
 8009d7a:	f000 f9ff 	bl	800a17c <memcpy>
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4629      	mov	r1, r5
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fc1a 	bl	800a5bc <__lshift>
 8009d88:	9b00      	ldr	r3, [sp, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	444b      	add	r3, r9
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	46b8      	mov	r8, r7
 8009d9c:	9306      	str	r3, [sp, #24]
 8009d9e:	4607      	mov	r7, r0
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	4631      	mov	r1, r6
 8009da4:	3b01      	subs	r3, #1
 8009da6:	4658      	mov	r0, fp
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	f7ff fa67 	bl	800927c <quorem>
 8009dae:	4603      	mov	r3, r0
 8009db0:	3330      	adds	r3, #48	; 0x30
 8009db2:	9004      	str	r0, [sp, #16]
 8009db4:	4641      	mov	r1, r8
 8009db6:	4658      	mov	r0, fp
 8009db8:	9308      	str	r3, [sp, #32]
 8009dba:	f000 fc6b 	bl	800a694 <__mcmp>
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4681      	mov	r9, r0
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fc81 	bl	800a6cc <__mdiff>
 8009dca:	68c2      	ldr	r2, [r0, #12]
 8009dcc:	9b08      	ldr	r3, [sp, #32]
 8009dce:	4605      	mov	r5, r0
 8009dd0:	bb02      	cbnz	r2, 8009e14 <_dtoa_r+0xa7c>
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	4658      	mov	r0, fp
 8009dd6:	f000 fc5d 	bl	800a694 <__mcmp>
 8009dda:	9b08      	ldr	r3, [sp, #32]
 8009ddc:	4602      	mov	r2, r0
 8009dde:	4629      	mov	r1, r5
 8009de0:	4620      	mov	r0, r4
 8009de2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009de6:	f000 fa17 	bl	800a218 <_Bfree>
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dee:	9d01      	ldr	r5, [sp, #4]
 8009df0:	ea43 0102 	orr.w	r1, r3, r2
 8009df4:	9b06      	ldr	r3, [sp, #24]
 8009df6:	430b      	orrs	r3, r1
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	d10d      	bne.n	8009e18 <_dtoa_r+0xa80>
 8009dfc:	2b39      	cmp	r3, #57	; 0x39
 8009dfe:	d029      	beq.n	8009e54 <_dtoa_r+0xabc>
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	dd01      	ble.n	8009e0a <_dtoa_r+0xa72>
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	3331      	adds	r3, #49	; 0x31
 8009e0a:	9a02      	ldr	r2, [sp, #8]
 8009e0c:	7013      	strb	r3, [r2, #0]
 8009e0e:	e774      	b.n	8009cfa <_dtoa_r+0x962>
 8009e10:	4638      	mov	r0, r7
 8009e12:	e7b9      	b.n	8009d88 <_dtoa_r+0x9f0>
 8009e14:	2201      	movs	r2, #1
 8009e16:	e7e2      	b.n	8009dde <_dtoa_r+0xa46>
 8009e18:	f1b9 0f00 	cmp.w	r9, #0
 8009e1c:	db06      	blt.n	8009e2c <_dtoa_r+0xa94>
 8009e1e:	9905      	ldr	r1, [sp, #20]
 8009e20:	ea41 0909 	orr.w	r9, r1, r9
 8009e24:	9906      	ldr	r1, [sp, #24]
 8009e26:	ea59 0101 	orrs.w	r1, r9, r1
 8009e2a:	d120      	bne.n	8009e6e <_dtoa_r+0xad6>
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	ddec      	ble.n	8009e0a <_dtoa_r+0xa72>
 8009e30:	4659      	mov	r1, fp
 8009e32:	2201      	movs	r2, #1
 8009e34:	4620      	mov	r0, r4
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	f000 fbc0 	bl	800a5bc <__lshift>
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4683      	mov	fp, r0
 8009e40:	f000 fc28 	bl	800a694 <__mcmp>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	dc02      	bgt.n	8009e50 <_dtoa_r+0xab8>
 8009e4a:	d1de      	bne.n	8009e0a <_dtoa_r+0xa72>
 8009e4c:	07da      	lsls	r2, r3, #31
 8009e4e:	d5dc      	bpl.n	8009e0a <_dtoa_r+0xa72>
 8009e50:	2b39      	cmp	r3, #57	; 0x39
 8009e52:	d1d8      	bne.n	8009e06 <_dtoa_r+0xa6e>
 8009e54:	9a02      	ldr	r2, [sp, #8]
 8009e56:	2339      	movs	r3, #57	; 0x39
 8009e58:	7013      	strb	r3, [r2, #0]
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	461d      	mov	r5, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e64:	2a39      	cmp	r2, #57	; 0x39
 8009e66:	d050      	beq.n	8009f0a <_dtoa_r+0xb72>
 8009e68:	3201      	adds	r2, #1
 8009e6a:	701a      	strb	r2, [r3, #0]
 8009e6c:	e745      	b.n	8009cfa <_dtoa_r+0x962>
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	dd03      	ble.n	8009e7a <_dtoa_r+0xae2>
 8009e72:	2b39      	cmp	r3, #57	; 0x39
 8009e74:	d0ee      	beq.n	8009e54 <_dtoa_r+0xabc>
 8009e76:	3301      	adds	r3, #1
 8009e78:	e7c7      	b.n	8009e0a <_dtoa_r+0xa72>
 8009e7a:	9a01      	ldr	r2, [sp, #4]
 8009e7c:	9907      	ldr	r1, [sp, #28]
 8009e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e82:	428a      	cmp	r2, r1
 8009e84:	d02a      	beq.n	8009edc <_dtoa_r+0xb44>
 8009e86:	4659      	mov	r1, fp
 8009e88:	2300      	movs	r3, #0
 8009e8a:	220a      	movs	r2, #10
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 f9e5 	bl	800a25c <__multadd>
 8009e92:	45b8      	cmp	r8, r7
 8009e94:	4683      	mov	fp, r0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 020a 	mov.w	r2, #10
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	d107      	bne.n	8009eb4 <_dtoa_r+0xb1c>
 8009ea4:	f000 f9da 	bl	800a25c <__multadd>
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4607      	mov	r7, r0
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	e775      	b.n	8009da0 <_dtoa_r+0xa08>
 8009eb4:	f000 f9d2 	bl	800a25c <__multadd>
 8009eb8:	4639      	mov	r1, r7
 8009eba:	4680      	mov	r8, r0
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	220a      	movs	r2, #10
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 f9cb 	bl	800a25c <__multadd>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	e7f0      	b.n	8009eac <_dtoa_r+0xb14>
 8009eca:	f1b9 0f00 	cmp.w	r9, #0
 8009ece:	9a00      	ldr	r2, [sp, #0]
 8009ed0:	bfcc      	ite	gt
 8009ed2:	464d      	movgt	r5, r9
 8009ed4:	2501      	movle	r5, #1
 8009ed6:	4415      	add	r5, r2
 8009ed8:	f04f 0800 	mov.w	r8, #0
 8009edc:	4659      	mov	r1, fp
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	f000 fb6a 	bl	800a5bc <__lshift>
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4683      	mov	fp, r0
 8009eec:	f000 fbd2 	bl	800a694 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	dcb2      	bgt.n	8009e5a <_dtoa_r+0xac2>
 8009ef4:	d102      	bne.n	8009efc <_dtoa_r+0xb64>
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	07db      	lsls	r3, r3, #31
 8009efa:	d4ae      	bmi.n	8009e5a <_dtoa_r+0xac2>
 8009efc:	462b      	mov	r3, r5
 8009efe:	461d      	mov	r5, r3
 8009f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f04:	2a30      	cmp	r2, #48	; 0x30
 8009f06:	d0fa      	beq.n	8009efe <_dtoa_r+0xb66>
 8009f08:	e6f7      	b.n	8009cfa <_dtoa_r+0x962>
 8009f0a:	9a00      	ldr	r2, [sp, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d1a5      	bne.n	8009e5c <_dtoa_r+0xac4>
 8009f10:	f10a 0a01 	add.w	sl, sl, #1
 8009f14:	2331      	movs	r3, #49	; 0x31
 8009f16:	e779      	b.n	8009e0c <_dtoa_r+0xa74>
 8009f18:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <_dtoa_r+0xbd0>)
 8009f1a:	f7ff baaf 	b.w	800947c <_dtoa_r+0xe4>
 8009f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f47f aa86 	bne.w	8009432 <_dtoa_r+0x9a>
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <_dtoa_r+0xbd4>)
 8009f28:	f7ff baa8 	b.w	800947c <_dtoa_r+0xe4>
 8009f2c:	f1b9 0f00 	cmp.w	r9, #0
 8009f30:	dc03      	bgt.n	8009f3a <_dtoa_r+0xba2>
 8009f32:	9b05      	ldr	r3, [sp, #20]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	f73f aec9 	bgt.w	8009ccc <_dtoa_r+0x934>
 8009f3a:	9d00      	ldr	r5, [sp, #0]
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4658      	mov	r0, fp
 8009f40:	f7ff f99c 	bl	800927c <quorem>
 8009f44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f48:	f805 3b01 	strb.w	r3, [r5], #1
 8009f4c:	9a00      	ldr	r2, [sp, #0]
 8009f4e:	1aaa      	subs	r2, r5, r2
 8009f50:	4591      	cmp	r9, r2
 8009f52:	ddba      	ble.n	8009eca <_dtoa_r+0xb32>
 8009f54:	4659      	mov	r1, fp
 8009f56:	2300      	movs	r3, #0
 8009f58:	220a      	movs	r2, #10
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f97e 	bl	800a25c <__multadd>
 8009f60:	4683      	mov	fp, r0
 8009f62:	e7eb      	b.n	8009f3c <_dtoa_r+0xba4>
 8009f64:	0800b81b 	.word	0x0800b81b
 8009f68:	0800b774 	.word	0x0800b774
 8009f6c:	0800b798 	.word	0x0800b798

08009f70 <std>:
 8009f70:	2300      	movs	r3, #0
 8009f72:	b510      	push	{r4, lr}
 8009f74:	4604      	mov	r4, r0
 8009f76:	e9c0 3300 	strd	r3, r3, [r0]
 8009f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f7e:	6083      	str	r3, [r0, #8]
 8009f80:	8181      	strh	r1, [r0, #12]
 8009f82:	6643      	str	r3, [r0, #100]	; 0x64
 8009f84:	81c2      	strh	r2, [r0, #14]
 8009f86:	6183      	str	r3, [r0, #24]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	305c      	adds	r0, #92	; 0x5c
 8009f8e:	f7fe fccb 	bl	8008928 <memset>
 8009f92:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <std+0x38>)
 8009f94:	6263      	str	r3, [r4, #36]	; 0x24
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <std+0x3c>)
 8009f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f9a:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <std+0x40>)
 8009f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <std+0x44>)
 8009fa0:	6224      	str	r4, [r4, #32]
 8009fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8009fa4:	bd10      	pop	{r4, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0800af95 	.word	0x0800af95
 8009fac:	0800afb7 	.word	0x0800afb7
 8009fb0:	0800afef 	.word	0x0800afef
 8009fb4:	0800b013 	.word	0x0800b013

08009fb8 <_cleanup_r>:
 8009fb8:	4901      	ldr	r1, [pc, #4]	; (8009fc0 <_cleanup_r+0x8>)
 8009fba:	f000 b8af 	b.w	800a11c <_fwalk_reent>
 8009fbe:	bf00      	nop
 8009fc0:	0800b329 	.word	0x0800b329

08009fc4 <__sfmoreglue>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	1e4a      	subs	r2, r1, #1
 8009fc8:	2568      	movs	r5, #104	; 0x68
 8009fca:	4355      	muls	r5, r2
 8009fcc:	460e      	mov	r6, r1
 8009fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fd2:	f000 fcbf 	bl	800a954 <_malloc_r>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	b140      	cbz	r0, 8009fec <__sfmoreglue+0x28>
 8009fda:	2100      	movs	r1, #0
 8009fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8009fe0:	300c      	adds	r0, #12
 8009fe2:	60a0      	str	r0, [r4, #8]
 8009fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fe8:	f7fe fc9e 	bl	8008928 <memset>
 8009fec:	4620      	mov	r0, r4
 8009fee:	bd70      	pop	{r4, r5, r6, pc}

08009ff0 <__sfp_lock_acquire>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	; (8009ff8 <__sfp_lock_acquire+0x8>)
 8009ff2:	f000 b8b8 	b.w	800a166 <__retarget_lock_acquire_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	200004d0 	.word	0x200004d0

08009ffc <__sfp_lock_release>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__sfp_lock_release+0x8>)
 8009ffe:	f000 b8b3 	b.w	800a168 <__retarget_lock_release_recursive>
 800a002:	bf00      	nop
 800a004:	200004d0 	.word	0x200004d0

0800a008 <__sinit_lock_acquire>:
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <__sinit_lock_acquire+0x8>)
 800a00a:	f000 b8ac 	b.w	800a166 <__retarget_lock_acquire_recursive>
 800a00e:	bf00      	nop
 800a010:	200004cb 	.word	0x200004cb

0800a014 <__sinit_lock_release>:
 800a014:	4801      	ldr	r0, [pc, #4]	; (800a01c <__sinit_lock_release+0x8>)
 800a016:	f000 b8a7 	b.w	800a168 <__retarget_lock_release_recursive>
 800a01a:	bf00      	nop
 800a01c:	200004cb 	.word	0x200004cb

0800a020 <__sinit>:
 800a020:	b510      	push	{r4, lr}
 800a022:	4604      	mov	r4, r0
 800a024:	f7ff fff0 	bl	800a008 <__sinit_lock_acquire>
 800a028:	69a3      	ldr	r3, [r4, #24]
 800a02a:	b11b      	cbz	r3, 800a034 <__sinit+0x14>
 800a02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a030:	f7ff bff0 	b.w	800a014 <__sinit_lock_release>
 800a034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a038:	6523      	str	r3, [r4, #80]	; 0x50
 800a03a:	4b13      	ldr	r3, [pc, #76]	; (800a088 <__sinit+0x68>)
 800a03c:	4a13      	ldr	r2, [pc, #76]	; (800a08c <__sinit+0x6c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	62a2      	str	r2, [r4, #40]	; 0x28
 800a042:	42a3      	cmp	r3, r4
 800a044:	bf04      	itt	eq
 800a046:	2301      	moveq	r3, #1
 800a048:	61a3      	streq	r3, [r4, #24]
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 f820 	bl	800a090 <__sfp>
 800a050:	6060      	str	r0, [r4, #4]
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f81c 	bl	800a090 <__sfp>
 800a058:	60a0      	str	r0, [r4, #8]
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 f818 	bl	800a090 <__sfp>
 800a060:	2200      	movs	r2, #0
 800a062:	60e0      	str	r0, [r4, #12]
 800a064:	2104      	movs	r1, #4
 800a066:	6860      	ldr	r0, [r4, #4]
 800a068:	f7ff ff82 	bl	8009f70 <std>
 800a06c:	68a0      	ldr	r0, [r4, #8]
 800a06e:	2201      	movs	r2, #1
 800a070:	2109      	movs	r1, #9
 800a072:	f7ff ff7d 	bl	8009f70 <std>
 800a076:	68e0      	ldr	r0, [r4, #12]
 800a078:	2202      	movs	r2, #2
 800a07a:	2112      	movs	r1, #18
 800a07c:	f7ff ff78 	bl	8009f70 <std>
 800a080:	2301      	movs	r3, #1
 800a082:	61a3      	str	r3, [r4, #24]
 800a084:	e7d2      	b.n	800a02c <__sinit+0xc>
 800a086:	bf00      	nop
 800a088:	0800b760 	.word	0x0800b760
 800a08c:	08009fb9 	.word	0x08009fb9

0800a090 <__sfp>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	4607      	mov	r7, r0
 800a094:	f7ff ffac 	bl	8009ff0 <__sfp_lock_acquire>
 800a098:	4b1e      	ldr	r3, [pc, #120]	; (800a114 <__sfp+0x84>)
 800a09a:	681e      	ldr	r6, [r3, #0]
 800a09c:	69b3      	ldr	r3, [r6, #24]
 800a09e:	b913      	cbnz	r3, 800a0a6 <__sfp+0x16>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff ffbd 	bl	800a020 <__sinit>
 800a0a6:	3648      	adds	r6, #72	; 0x48
 800a0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	d503      	bpl.n	800a0b8 <__sfp+0x28>
 800a0b0:	6833      	ldr	r3, [r6, #0]
 800a0b2:	b30b      	cbz	r3, 800a0f8 <__sfp+0x68>
 800a0b4:	6836      	ldr	r6, [r6, #0]
 800a0b6:	e7f7      	b.n	800a0a8 <__sfp+0x18>
 800a0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0bc:	b9d5      	cbnz	r5, 800a0f4 <__sfp+0x64>
 800a0be:	4b16      	ldr	r3, [pc, #88]	; (800a118 <__sfp+0x88>)
 800a0c0:	60e3      	str	r3, [r4, #12]
 800a0c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a0c8:	f000 f84c 	bl	800a164 <__retarget_lock_init_recursive>
 800a0cc:	f7ff ff96 	bl	8009ffc <__sfp_lock_release>
 800a0d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0d8:	6025      	str	r5, [r4, #0]
 800a0da:	61a5      	str	r5, [r4, #24]
 800a0dc:	2208      	movs	r2, #8
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0e4:	f7fe fc20 	bl	8008928 <memset>
 800a0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f4:	3468      	adds	r4, #104	; 0x68
 800a0f6:	e7d9      	b.n	800a0ac <__sfp+0x1c>
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	f7ff ff62 	bl	8009fc4 <__sfmoreglue>
 800a100:	4604      	mov	r4, r0
 800a102:	6030      	str	r0, [r6, #0]
 800a104:	2800      	cmp	r0, #0
 800a106:	d1d5      	bne.n	800a0b4 <__sfp+0x24>
 800a108:	f7ff ff78 	bl	8009ffc <__sfp_lock_release>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	e7ee      	b.n	800a0f0 <__sfp+0x60>
 800a112:	bf00      	nop
 800a114:	0800b760 	.word	0x0800b760
 800a118:	ffff0001 	.word	0xffff0001

0800a11c <_fwalk_reent>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	4606      	mov	r6, r0
 800a122:	4688      	mov	r8, r1
 800a124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a128:	2700      	movs	r7, #0
 800a12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a12e:	f1b9 0901 	subs.w	r9, r9, #1
 800a132:	d505      	bpl.n	800a140 <_fwalk_reent+0x24>
 800a134:	6824      	ldr	r4, [r4, #0]
 800a136:	2c00      	cmp	r4, #0
 800a138:	d1f7      	bne.n	800a12a <_fwalk_reent+0xe>
 800a13a:	4638      	mov	r0, r7
 800a13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a140:	89ab      	ldrh	r3, [r5, #12]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d907      	bls.n	800a156 <_fwalk_reent+0x3a>
 800a146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a14a:	3301      	adds	r3, #1
 800a14c:	d003      	beq.n	800a156 <_fwalk_reent+0x3a>
 800a14e:	4629      	mov	r1, r5
 800a150:	4630      	mov	r0, r6
 800a152:	47c0      	blx	r8
 800a154:	4307      	orrs	r7, r0
 800a156:	3568      	adds	r5, #104	; 0x68
 800a158:	e7e9      	b.n	800a12e <_fwalk_reent+0x12>
	...

0800a15c <_localeconv_r>:
 800a15c:	4800      	ldr	r0, [pc, #0]	; (800a160 <_localeconv_r+0x4>)
 800a15e:	4770      	bx	lr
 800a160:	20000160 	.word	0x20000160

0800a164 <__retarget_lock_init_recursive>:
 800a164:	4770      	bx	lr

0800a166 <__retarget_lock_acquire_recursive>:
 800a166:	4770      	bx	lr

0800a168 <__retarget_lock_release_recursive>:
 800a168:	4770      	bx	lr
	...

0800a16c <malloc>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <malloc+0xc>)
 800a16e:	4601      	mov	r1, r0
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	f000 bbef 	b.w	800a954 <_malloc_r>
 800a176:	bf00      	nop
 800a178:	2000000c 	.word	0x2000000c

0800a17c <memcpy>:
 800a17c:	440a      	add	r2, r1
 800a17e:	4291      	cmp	r1, r2
 800a180:	f100 33ff 	add.w	r3, r0, #4294967295
 800a184:	d100      	bne.n	800a188 <memcpy+0xc>
 800a186:	4770      	bx	lr
 800a188:	b510      	push	{r4, lr}
 800a18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a192:	4291      	cmp	r1, r2
 800a194:	d1f9      	bne.n	800a18a <memcpy+0xe>
 800a196:	bd10      	pop	{r4, pc}

0800a198 <_Balloc>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	b976      	cbnz	r6, 800a1c0 <_Balloc+0x28>
 800a1a2:	2010      	movs	r0, #16
 800a1a4:	f7ff ffe2 	bl	800a16c <malloc>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a1ac:	b920      	cbnz	r0, 800a1b8 <_Balloc+0x20>
 800a1ae:	4b18      	ldr	r3, [pc, #96]	; (800a210 <_Balloc+0x78>)
 800a1b0:	4818      	ldr	r0, [pc, #96]	; (800a214 <_Balloc+0x7c>)
 800a1b2:	2166      	movs	r1, #102	; 0x66
 800a1b4:	f001 f804 	bl	800b1c0 <__assert_func>
 800a1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1bc:	6006      	str	r6, [r0, #0]
 800a1be:	60c6      	str	r6, [r0, #12]
 800a1c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1c2:	68f3      	ldr	r3, [r6, #12]
 800a1c4:	b183      	cbz	r3, 800a1e8 <_Balloc+0x50>
 800a1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ce:	b9b8      	cbnz	r0, 800a200 <_Balloc+0x68>
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1d6:	1d72      	adds	r2, r6, #5
 800a1d8:	0092      	lsls	r2, r2, #2
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb5a 	bl	800a894 <_calloc_r>
 800a1e0:	b160      	cbz	r0, 800a1fc <_Balloc+0x64>
 800a1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1e6:	e00e      	b.n	800a206 <_Balloc+0x6e>
 800a1e8:	2221      	movs	r2, #33	; 0x21
 800a1ea:	2104      	movs	r1, #4
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fb51 	bl	800a894 <_calloc_r>
 800a1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f4:	60f0      	str	r0, [r6, #12]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e4      	bne.n	800a1c6 <_Balloc+0x2e>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	6802      	ldr	r2, [r0, #0]
 800a202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a206:	2300      	movs	r3, #0
 800a208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a20c:	e7f7      	b.n	800a1fe <_Balloc+0x66>
 800a20e:	bf00      	nop
 800a210:	0800b7a5 	.word	0x0800b7a5
 800a214:	0800b88c 	.word	0x0800b88c

0800a218 <_Bfree>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	b976      	cbnz	r6, 800a240 <_Bfree+0x28>
 800a222:	2010      	movs	r0, #16
 800a224:	f7ff ffa2 	bl	800a16c <malloc>
 800a228:	4602      	mov	r2, r0
 800a22a:	6268      	str	r0, [r5, #36]	; 0x24
 800a22c:	b920      	cbnz	r0, 800a238 <_Bfree+0x20>
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <_Bfree+0x3c>)
 800a230:	4809      	ldr	r0, [pc, #36]	; (800a258 <_Bfree+0x40>)
 800a232:	218a      	movs	r1, #138	; 0x8a
 800a234:	f000 ffc4 	bl	800b1c0 <__assert_func>
 800a238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a23c:	6006      	str	r6, [r0, #0]
 800a23e:	60c6      	str	r6, [r0, #12]
 800a240:	b13c      	cbz	r4, 800a252 <_Bfree+0x3a>
 800a242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a244:	6862      	ldr	r2, [r4, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a24c:	6021      	str	r1, [r4, #0]
 800a24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	0800b7a5 	.word	0x0800b7a5
 800a258:	0800b88c 	.word	0x0800b88c

0800a25c <__multadd>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	690e      	ldr	r6, [r1, #16]
 800a262:	4607      	mov	r7, r0
 800a264:	4698      	mov	r8, r3
 800a266:	460c      	mov	r4, r1
 800a268:	f101 0014 	add.w	r0, r1, #20
 800a26c:	2300      	movs	r3, #0
 800a26e:	6805      	ldr	r5, [r0, #0]
 800a270:	b2a9      	uxth	r1, r5
 800a272:	fb02 8101 	mla	r1, r2, r1, r8
 800a276:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a27a:	0c2d      	lsrs	r5, r5, #16
 800a27c:	fb02 c505 	mla	r5, r2, r5, ip
 800a280:	b289      	uxth	r1, r1
 800a282:	3301      	adds	r3, #1
 800a284:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a288:	429e      	cmp	r6, r3
 800a28a:	f840 1b04 	str.w	r1, [r0], #4
 800a28e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a292:	dcec      	bgt.n	800a26e <__multadd+0x12>
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	d022      	beq.n	800a2e0 <__multadd+0x84>
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	42b3      	cmp	r3, r6
 800a29e:	dc19      	bgt.n	800a2d4 <__multadd+0x78>
 800a2a0:	6861      	ldr	r1, [r4, #4]
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	f7ff ff77 	bl	800a198 <_Balloc>
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	b928      	cbnz	r0, 800a2ba <__multadd+0x5e>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <__multadd+0x8c>)
 800a2b2:	480e      	ldr	r0, [pc, #56]	; (800a2ec <__multadd+0x90>)
 800a2b4:	21b5      	movs	r1, #181	; 0xb5
 800a2b6:	f000 ff83 	bl	800b1c0 <__assert_func>
 800a2ba:	6922      	ldr	r2, [r4, #16]
 800a2bc:	3202      	adds	r2, #2
 800a2be:	f104 010c 	add.w	r1, r4, #12
 800a2c2:	0092      	lsls	r2, r2, #2
 800a2c4:	300c      	adds	r0, #12
 800a2c6:	f7ff ff59 	bl	800a17c <memcpy>
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7ff ffa3 	bl	800a218 <_Bfree>
 800a2d2:	462c      	mov	r4, r5
 800a2d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a2d8:	3601      	adds	r6, #1
 800a2da:	f8c3 8014 	str.w	r8, [r3, #20]
 800a2de:	6126      	str	r6, [r4, #16]
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0800b81b 	.word	0x0800b81b
 800a2ec:	0800b88c 	.word	0x0800b88c

0800a2f0 <__hi0bits>:
 800a2f0:	0c03      	lsrs	r3, r0, #16
 800a2f2:	041b      	lsls	r3, r3, #16
 800a2f4:	b9d3      	cbnz	r3, 800a32c <__hi0bits+0x3c>
 800a2f6:	0400      	lsls	r0, r0, #16
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2fe:	bf04      	itt	eq
 800a300:	0200      	lsleq	r0, r0, #8
 800a302:	3308      	addeq	r3, #8
 800a304:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a308:	bf04      	itt	eq
 800a30a:	0100      	lsleq	r0, r0, #4
 800a30c:	3304      	addeq	r3, #4
 800a30e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a312:	bf04      	itt	eq
 800a314:	0080      	lsleq	r0, r0, #2
 800a316:	3302      	addeq	r3, #2
 800a318:	2800      	cmp	r0, #0
 800a31a:	db05      	blt.n	800a328 <__hi0bits+0x38>
 800a31c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a320:	f103 0301 	add.w	r3, r3, #1
 800a324:	bf08      	it	eq
 800a326:	2320      	moveq	r3, #32
 800a328:	4618      	mov	r0, r3
 800a32a:	4770      	bx	lr
 800a32c:	2300      	movs	r3, #0
 800a32e:	e7e4      	b.n	800a2fa <__hi0bits+0xa>

0800a330 <__lo0bits>:
 800a330:	6803      	ldr	r3, [r0, #0]
 800a332:	f013 0207 	ands.w	r2, r3, #7
 800a336:	4601      	mov	r1, r0
 800a338:	d00b      	beq.n	800a352 <__lo0bits+0x22>
 800a33a:	07da      	lsls	r2, r3, #31
 800a33c:	d424      	bmi.n	800a388 <__lo0bits+0x58>
 800a33e:	0798      	lsls	r0, r3, #30
 800a340:	bf49      	itett	mi
 800a342:	085b      	lsrmi	r3, r3, #1
 800a344:	089b      	lsrpl	r3, r3, #2
 800a346:	2001      	movmi	r0, #1
 800a348:	600b      	strmi	r3, [r1, #0]
 800a34a:	bf5c      	itt	pl
 800a34c:	600b      	strpl	r3, [r1, #0]
 800a34e:	2002      	movpl	r0, #2
 800a350:	4770      	bx	lr
 800a352:	b298      	uxth	r0, r3
 800a354:	b9b0      	cbnz	r0, 800a384 <__lo0bits+0x54>
 800a356:	0c1b      	lsrs	r3, r3, #16
 800a358:	2010      	movs	r0, #16
 800a35a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a35e:	bf04      	itt	eq
 800a360:	0a1b      	lsreq	r3, r3, #8
 800a362:	3008      	addeq	r0, #8
 800a364:	071a      	lsls	r2, r3, #28
 800a366:	bf04      	itt	eq
 800a368:	091b      	lsreq	r3, r3, #4
 800a36a:	3004      	addeq	r0, #4
 800a36c:	079a      	lsls	r2, r3, #30
 800a36e:	bf04      	itt	eq
 800a370:	089b      	lsreq	r3, r3, #2
 800a372:	3002      	addeq	r0, #2
 800a374:	07da      	lsls	r2, r3, #31
 800a376:	d403      	bmi.n	800a380 <__lo0bits+0x50>
 800a378:	085b      	lsrs	r3, r3, #1
 800a37a:	f100 0001 	add.w	r0, r0, #1
 800a37e:	d005      	beq.n	800a38c <__lo0bits+0x5c>
 800a380:	600b      	str	r3, [r1, #0]
 800a382:	4770      	bx	lr
 800a384:	4610      	mov	r0, r2
 800a386:	e7e8      	b.n	800a35a <__lo0bits+0x2a>
 800a388:	2000      	movs	r0, #0
 800a38a:	4770      	bx	lr
 800a38c:	2020      	movs	r0, #32
 800a38e:	4770      	bx	lr

0800a390 <__i2b>:
 800a390:	b510      	push	{r4, lr}
 800a392:	460c      	mov	r4, r1
 800a394:	2101      	movs	r1, #1
 800a396:	f7ff feff 	bl	800a198 <_Balloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	b928      	cbnz	r0, 800a3aa <__i2b+0x1a>
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <__i2b+0x24>)
 800a3a0:	4805      	ldr	r0, [pc, #20]	; (800a3b8 <__i2b+0x28>)
 800a3a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3a6:	f000 ff0b 	bl	800b1c0 <__assert_func>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	6144      	str	r4, [r0, #20]
 800a3ae:	6103      	str	r3, [r0, #16]
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800b81b 	.word	0x0800b81b
 800a3b8:	0800b88c 	.word	0x0800b88c

0800a3bc <__multiply>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	690a      	ldr	r2, [r1, #16]
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	bfb8      	it	lt
 800a3ca:	460b      	movlt	r3, r1
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	bfbc      	itt	lt
 800a3d0:	4625      	movlt	r5, r4
 800a3d2:	461c      	movlt	r4, r3
 800a3d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a3d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a3dc:	68ab      	ldr	r3, [r5, #8]
 800a3de:	6869      	ldr	r1, [r5, #4]
 800a3e0:	eb0a 0709 	add.w	r7, sl, r9
 800a3e4:	42bb      	cmp	r3, r7
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	bfb8      	it	lt
 800a3ea:	3101      	addlt	r1, #1
 800a3ec:	f7ff fed4 	bl	800a198 <_Balloc>
 800a3f0:	b930      	cbnz	r0, 800a400 <__multiply+0x44>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b42      	ldr	r3, [pc, #264]	; (800a500 <__multiply+0x144>)
 800a3f6:	4843      	ldr	r0, [pc, #268]	; (800a504 <__multiply+0x148>)
 800a3f8:	f240 115d 	movw	r1, #349	; 0x15d
 800a3fc:	f000 fee0 	bl	800b1c0 <__assert_func>
 800a400:	f100 0614 	add.w	r6, r0, #20
 800a404:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a408:	4633      	mov	r3, r6
 800a40a:	2200      	movs	r2, #0
 800a40c:	4543      	cmp	r3, r8
 800a40e:	d31e      	bcc.n	800a44e <__multiply+0x92>
 800a410:	f105 0c14 	add.w	ip, r5, #20
 800a414:	f104 0314 	add.w	r3, r4, #20
 800a418:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a41c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a420:	9202      	str	r2, [sp, #8]
 800a422:	ebac 0205 	sub.w	r2, ip, r5
 800a426:	3a15      	subs	r2, #21
 800a428:	f022 0203 	bic.w	r2, r2, #3
 800a42c:	3204      	adds	r2, #4
 800a42e:	f105 0115 	add.w	r1, r5, #21
 800a432:	458c      	cmp	ip, r1
 800a434:	bf38      	it	cc
 800a436:	2204      	movcc	r2, #4
 800a438:	9201      	str	r2, [sp, #4]
 800a43a:	9a02      	ldr	r2, [sp, #8]
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d808      	bhi.n	800a454 <__multiply+0x98>
 800a442:	2f00      	cmp	r7, #0
 800a444:	dc55      	bgt.n	800a4f2 <__multiply+0x136>
 800a446:	6107      	str	r7, [r0, #16]
 800a448:	b005      	add	sp, #20
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	f843 2b04 	str.w	r2, [r3], #4
 800a452:	e7db      	b.n	800a40c <__multiply+0x50>
 800a454:	f8b3 a000 	ldrh.w	sl, [r3]
 800a458:	f1ba 0f00 	cmp.w	sl, #0
 800a45c:	d020      	beq.n	800a4a0 <__multiply+0xe4>
 800a45e:	f105 0e14 	add.w	lr, r5, #20
 800a462:	46b1      	mov	r9, r6
 800a464:	2200      	movs	r2, #0
 800a466:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a46a:	f8d9 b000 	ldr.w	fp, [r9]
 800a46e:	b2a1      	uxth	r1, r4
 800a470:	fa1f fb8b 	uxth.w	fp, fp
 800a474:	fb0a b101 	mla	r1, sl, r1, fp
 800a478:	4411      	add	r1, r2
 800a47a:	f8d9 2000 	ldr.w	r2, [r9]
 800a47e:	0c24      	lsrs	r4, r4, #16
 800a480:	0c12      	lsrs	r2, r2, #16
 800a482:	fb0a 2404 	mla	r4, sl, r4, r2
 800a486:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a48a:	b289      	uxth	r1, r1
 800a48c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a490:	45f4      	cmp	ip, lr
 800a492:	f849 1b04 	str.w	r1, [r9], #4
 800a496:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a49a:	d8e4      	bhi.n	800a466 <__multiply+0xaa>
 800a49c:	9901      	ldr	r1, [sp, #4]
 800a49e:	5072      	str	r2, [r6, r1]
 800a4a0:	9a03      	ldr	r2, [sp, #12]
 800a4a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	f1b9 0f00 	cmp.w	r9, #0
 800a4ac:	d01f      	beq.n	800a4ee <__multiply+0x132>
 800a4ae:	6834      	ldr	r4, [r6, #0]
 800a4b0:	f105 0114 	add.w	r1, r5, #20
 800a4b4:	46b6      	mov	lr, r6
 800a4b6:	f04f 0a00 	mov.w	sl, #0
 800a4ba:	880a      	ldrh	r2, [r1, #0]
 800a4bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a4c0:	fb09 b202 	mla	r2, r9, r2, fp
 800a4c4:	4492      	add	sl, r2
 800a4c6:	b2a4      	uxth	r4, r4
 800a4c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a4cc:	f84e 4b04 	str.w	r4, [lr], #4
 800a4d0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a4d4:	f8be 2000 	ldrh.w	r2, [lr]
 800a4d8:	0c24      	lsrs	r4, r4, #16
 800a4da:	fb09 2404 	mla	r4, r9, r4, r2
 800a4de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a4e2:	458c      	cmp	ip, r1
 800a4e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4e8:	d8e7      	bhi.n	800a4ba <__multiply+0xfe>
 800a4ea:	9a01      	ldr	r2, [sp, #4]
 800a4ec:	50b4      	str	r4, [r6, r2]
 800a4ee:	3604      	adds	r6, #4
 800a4f0:	e7a3      	b.n	800a43a <__multiply+0x7e>
 800a4f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1a5      	bne.n	800a446 <__multiply+0x8a>
 800a4fa:	3f01      	subs	r7, #1
 800a4fc:	e7a1      	b.n	800a442 <__multiply+0x86>
 800a4fe:	bf00      	nop
 800a500:	0800b81b 	.word	0x0800b81b
 800a504:	0800b88c 	.word	0x0800b88c

0800a508 <__pow5mult>:
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4615      	mov	r5, r2
 800a50e:	f012 0203 	ands.w	r2, r2, #3
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	d007      	beq.n	800a528 <__pow5mult+0x20>
 800a518:	4c25      	ldr	r4, [pc, #148]	; (800a5b0 <__pow5mult+0xa8>)
 800a51a:	3a01      	subs	r2, #1
 800a51c:	2300      	movs	r3, #0
 800a51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a522:	f7ff fe9b 	bl	800a25c <__multadd>
 800a526:	4607      	mov	r7, r0
 800a528:	10ad      	asrs	r5, r5, #2
 800a52a:	d03d      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a52c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a52e:	b97c      	cbnz	r4, 800a550 <__pow5mult+0x48>
 800a530:	2010      	movs	r0, #16
 800a532:	f7ff fe1b 	bl	800a16c <malloc>
 800a536:	4602      	mov	r2, r0
 800a538:	6270      	str	r0, [r6, #36]	; 0x24
 800a53a:	b928      	cbnz	r0, 800a548 <__pow5mult+0x40>
 800a53c:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <__pow5mult+0xac>)
 800a53e:	481e      	ldr	r0, [pc, #120]	; (800a5b8 <__pow5mult+0xb0>)
 800a540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a544:	f000 fe3c 	bl	800b1c0 <__assert_func>
 800a548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a54c:	6004      	str	r4, [r0, #0]
 800a54e:	60c4      	str	r4, [r0, #12]
 800a550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a558:	b94c      	cbnz	r4, 800a56e <__pow5mult+0x66>
 800a55a:	f240 2171 	movw	r1, #625	; 0x271
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ff16 	bl	800a390 <__i2b>
 800a564:	2300      	movs	r3, #0
 800a566:	f8c8 0008 	str.w	r0, [r8, #8]
 800a56a:	4604      	mov	r4, r0
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 0900 	mov.w	r9, #0
 800a572:	07eb      	lsls	r3, r5, #31
 800a574:	d50a      	bpl.n	800a58c <__pow5mult+0x84>
 800a576:	4639      	mov	r1, r7
 800a578:	4622      	mov	r2, r4
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7ff ff1e 	bl	800a3bc <__multiply>
 800a580:	4639      	mov	r1, r7
 800a582:	4680      	mov	r8, r0
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff fe47 	bl	800a218 <_Bfree>
 800a58a:	4647      	mov	r7, r8
 800a58c:	106d      	asrs	r5, r5, #1
 800a58e:	d00b      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	b938      	cbnz	r0, 800a5a4 <__pow5mult+0x9c>
 800a594:	4622      	mov	r2, r4
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f7ff ff0f 	bl	800a3bc <__multiply>
 800a59e:	6020      	str	r0, [r4, #0]
 800a5a0:	f8c0 9000 	str.w	r9, [r0]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e7e4      	b.n	800a572 <__pow5mult+0x6a>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800b9e0 	.word	0x0800b9e0
 800a5b4:	0800b7a5 	.word	0x0800b7a5
 800a5b8:	0800b88c 	.word	0x0800b88c

0800a5bc <__lshift>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	6849      	ldr	r1, [r1, #4]
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	4691      	mov	r9, r2
 800a5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d4:	f108 0601 	add.w	r6, r8, #1
 800a5d8:	42b3      	cmp	r3, r6
 800a5da:	db0b      	blt.n	800a5f4 <__lshift+0x38>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f7ff fddb 	bl	800a198 <_Balloc>
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b948      	cbnz	r0, 800a5fa <__lshift+0x3e>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b28      	ldr	r3, [pc, #160]	; (800a68c <__lshift+0xd0>)
 800a5ea:	4829      	ldr	r0, [pc, #164]	; (800a690 <__lshift+0xd4>)
 800a5ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5f0:	f000 fde6 	bl	800b1c0 <__assert_func>
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__lshift+0x1c>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f100 0114 	add.w	r1, r0, #20
 800a600:	f100 0210 	add.w	r2, r0, #16
 800a604:	4618      	mov	r0, r3
 800a606:	4553      	cmp	r3, sl
 800a608:	db33      	blt.n	800a672 <__lshift+0xb6>
 800a60a:	6920      	ldr	r0, [r4, #16]
 800a60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	f019 091f 	ands.w	r9, r9, #31
 800a618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a61c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a620:	d02b      	beq.n	800a67a <__lshift+0xbe>
 800a622:	f1c9 0e20 	rsb	lr, r9, #32
 800a626:	468a      	mov	sl, r1
 800a628:	2200      	movs	r2, #0
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	fa00 f009 	lsl.w	r0, r0, r9
 800a630:	4302      	orrs	r2, r0
 800a632:	f84a 2b04 	str.w	r2, [sl], #4
 800a636:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63a:	459c      	cmp	ip, r3
 800a63c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a640:	d8f3      	bhi.n	800a62a <__lshift+0x6e>
 800a642:	ebac 0304 	sub.w	r3, ip, r4
 800a646:	3b15      	subs	r3, #21
 800a648:	f023 0303 	bic.w	r3, r3, #3
 800a64c:	3304      	adds	r3, #4
 800a64e:	f104 0015 	add.w	r0, r4, #21
 800a652:	4584      	cmp	ip, r0
 800a654:	bf38      	it	cc
 800a656:	2304      	movcc	r3, #4
 800a658:	50ca      	str	r2, [r1, r3]
 800a65a:	b10a      	cbz	r2, 800a660 <__lshift+0xa4>
 800a65c:	f108 0602 	add.w	r6, r8, #2
 800a660:	3e01      	subs	r6, #1
 800a662:	4638      	mov	r0, r7
 800a664:	612e      	str	r6, [r5, #16]
 800a666:	4621      	mov	r1, r4
 800a668:	f7ff fdd6 	bl	800a218 <_Bfree>
 800a66c:	4628      	mov	r0, r5
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	f842 0f04 	str.w	r0, [r2, #4]!
 800a676:	3301      	adds	r3, #1
 800a678:	e7c5      	b.n	800a606 <__lshift+0x4a>
 800a67a:	3904      	subs	r1, #4
 800a67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a680:	f841 2f04 	str.w	r2, [r1, #4]!
 800a684:	459c      	cmp	ip, r3
 800a686:	d8f9      	bhi.n	800a67c <__lshift+0xc0>
 800a688:	e7ea      	b.n	800a660 <__lshift+0xa4>
 800a68a:	bf00      	nop
 800a68c:	0800b81b 	.word	0x0800b81b
 800a690:	0800b88c 	.word	0x0800b88c

0800a694 <__mcmp>:
 800a694:	b530      	push	{r4, r5, lr}
 800a696:	6902      	ldr	r2, [r0, #16]
 800a698:	690c      	ldr	r4, [r1, #16]
 800a69a:	1b12      	subs	r2, r2, r4
 800a69c:	d10e      	bne.n	800a6bc <__mcmp+0x28>
 800a69e:	f100 0314 	add.w	r3, r0, #20
 800a6a2:	3114      	adds	r1, #20
 800a6a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6b4:	42a5      	cmp	r5, r4
 800a6b6:	d003      	beq.n	800a6c0 <__mcmp+0x2c>
 800a6b8:	d305      	bcc.n	800a6c6 <__mcmp+0x32>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	4610      	mov	r0, r2
 800a6be:	bd30      	pop	{r4, r5, pc}
 800a6c0:	4283      	cmp	r3, r0
 800a6c2:	d3f3      	bcc.n	800a6ac <__mcmp+0x18>
 800a6c4:	e7fa      	b.n	800a6bc <__mcmp+0x28>
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	e7f7      	b.n	800a6bc <__mcmp+0x28>

0800a6cc <__mdiff>:
 800a6cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4617      	mov	r7, r2
 800a6da:	f7ff ffdb 	bl	800a694 <__mcmp>
 800a6de:	1e05      	subs	r5, r0, #0
 800a6e0:	d110      	bne.n	800a704 <__mdiff+0x38>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff fd57 	bl	800a198 <_Balloc>
 800a6ea:	b930      	cbnz	r0, 800a6fa <__mdiff+0x2e>
 800a6ec:	4b39      	ldr	r3, [pc, #228]	; (800a7d4 <__mdiff+0x108>)
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f240 2132 	movw	r1, #562	; 0x232
 800a6f4:	4838      	ldr	r0, [pc, #224]	; (800a7d8 <__mdiff+0x10c>)
 800a6f6:	f000 fd63 	bl	800b1c0 <__assert_func>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	bfa4      	itt	ge
 800a706:	463b      	movge	r3, r7
 800a708:	4627      	movge	r7, r4
 800a70a:	4630      	mov	r0, r6
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	bfa6      	itte	ge
 800a710:	461c      	movge	r4, r3
 800a712:	2500      	movge	r5, #0
 800a714:	2501      	movlt	r5, #1
 800a716:	f7ff fd3f 	bl	800a198 <_Balloc>
 800a71a:	b920      	cbnz	r0, 800a726 <__mdiff+0x5a>
 800a71c:	4b2d      	ldr	r3, [pc, #180]	; (800a7d4 <__mdiff+0x108>)
 800a71e:	4602      	mov	r2, r0
 800a720:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a724:	e7e6      	b.n	800a6f4 <__mdiff+0x28>
 800a726:	693e      	ldr	r6, [r7, #16]
 800a728:	60c5      	str	r5, [r0, #12]
 800a72a:	6925      	ldr	r5, [r4, #16]
 800a72c:	f107 0114 	add.w	r1, r7, #20
 800a730:	f104 0914 	add.w	r9, r4, #20
 800a734:	f100 0e14 	add.w	lr, r0, #20
 800a738:	f107 0210 	add.w	r2, r7, #16
 800a73c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a740:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a744:	46f2      	mov	sl, lr
 800a746:	2700      	movs	r7, #0
 800a748:	f859 3b04 	ldr.w	r3, [r9], #4
 800a74c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a750:	fa1f f883 	uxth.w	r8, r3
 800a754:	fa17 f78b 	uxtah	r7, r7, fp
 800a758:	0c1b      	lsrs	r3, r3, #16
 800a75a:	eba7 0808 	sub.w	r8, r7, r8
 800a75e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a762:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a766:	fa1f f888 	uxth.w	r8, r8
 800a76a:	141f      	asrs	r7, r3, #16
 800a76c:	454d      	cmp	r5, r9
 800a76e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a772:	f84a 3b04 	str.w	r3, [sl], #4
 800a776:	d8e7      	bhi.n	800a748 <__mdiff+0x7c>
 800a778:	1b2b      	subs	r3, r5, r4
 800a77a:	3b15      	subs	r3, #21
 800a77c:	f023 0303 	bic.w	r3, r3, #3
 800a780:	3304      	adds	r3, #4
 800a782:	3415      	adds	r4, #21
 800a784:	42a5      	cmp	r5, r4
 800a786:	bf38      	it	cc
 800a788:	2304      	movcc	r3, #4
 800a78a:	4419      	add	r1, r3
 800a78c:	4473      	add	r3, lr
 800a78e:	469e      	mov	lr, r3
 800a790:	460d      	mov	r5, r1
 800a792:	4565      	cmp	r5, ip
 800a794:	d30e      	bcc.n	800a7b4 <__mdiff+0xe8>
 800a796:	f10c 0203 	add.w	r2, ip, #3
 800a79a:	1a52      	subs	r2, r2, r1
 800a79c:	f022 0203 	bic.w	r2, r2, #3
 800a7a0:	3903      	subs	r1, #3
 800a7a2:	458c      	cmp	ip, r1
 800a7a4:	bf38      	it	cc
 800a7a6:	2200      	movcc	r2, #0
 800a7a8:	441a      	add	r2, r3
 800a7aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7ae:	b17b      	cbz	r3, 800a7d0 <__mdiff+0x104>
 800a7b0:	6106      	str	r6, [r0, #16]
 800a7b2:	e7a5      	b.n	800a700 <__mdiff+0x34>
 800a7b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a7b8:	fa17 f488 	uxtah	r4, r7, r8
 800a7bc:	1422      	asrs	r2, r4, #16
 800a7be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a7c2:	b2a4      	uxth	r4, r4
 800a7c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a7c8:	f84e 4b04 	str.w	r4, [lr], #4
 800a7cc:	1417      	asrs	r7, r2, #16
 800a7ce:	e7e0      	b.n	800a792 <__mdiff+0xc6>
 800a7d0:	3e01      	subs	r6, #1
 800a7d2:	e7ea      	b.n	800a7aa <__mdiff+0xde>
 800a7d4:	0800b81b 	.word	0x0800b81b
 800a7d8:	0800b88c 	.word	0x0800b88c

0800a7dc <__d2b>:
 800a7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	4689      	mov	r9, r1
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	ec57 6b10 	vmov	r6, r7, d0
 800a7e8:	4690      	mov	r8, r2
 800a7ea:	f7ff fcd5 	bl	800a198 <_Balloc>
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	b930      	cbnz	r0, 800a800 <__d2b+0x24>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <__d2b+0xb0>)
 800a7f6:	4826      	ldr	r0, [pc, #152]	; (800a890 <__d2b+0xb4>)
 800a7f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a7fc:	f000 fce0 	bl	800b1c0 <__assert_func>
 800a800:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a808:	bb35      	cbnz	r5, 800a858 <__d2b+0x7c>
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	d028      	beq.n	800a862 <__d2b+0x86>
 800a810:	4668      	mov	r0, sp
 800a812:	9600      	str	r6, [sp, #0]
 800a814:	f7ff fd8c 	bl	800a330 <__lo0bits>
 800a818:	9900      	ldr	r1, [sp, #0]
 800a81a:	b300      	cbz	r0, 800a85e <__d2b+0x82>
 800a81c:	9a01      	ldr	r2, [sp, #4]
 800a81e:	f1c0 0320 	rsb	r3, r0, #32
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	430b      	orrs	r3, r1
 800a828:	40c2      	lsrs	r2, r0
 800a82a:	6163      	str	r3, [r4, #20]
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	61a3      	str	r3, [r4, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	bf14      	ite	ne
 800a836:	2202      	movne	r2, #2
 800a838:	2201      	moveq	r2, #1
 800a83a:	6122      	str	r2, [r4, #16]
 800a83c:	b1d5      	cbz	r5, 800a874 <__d2b+0x98>
 800a83e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a842:	4405      	add	r5, r0
 800a844:	f8c9 5000 	str.w	r5, [r9]
 800a848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a84c:	f8c8 0000 	str.w	r0, [r8]
 800a850:	4620      	mov	r0, r4
 800a852:	b003      	add	sp, #12
 800a854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a85c:	e7d5      	b.n	800a80a <__d2b+0x2e>
 800a85e:	6161      	str	r1, [r4, #20]
 800a860:	e7e5      	b.n	800a82e <__d2b+0x52>
 800a862:	a801      	add	r0, sp, #4
 800a864:	f7ff fd64 	bl	800a330 <__lo0bits>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	6163      	str	r3, [r4, #20]
 800a86c:	2201      	movs	r2, #1
 800a86e:	6122      	str	r2, [r4, #16]
 800a870:	3020      	adds	r0, #32
 800a872:	e7e3      	b.n	800a83c <__d2b+0x60>
 800a874:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a878:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a87c:	f8c9 0000 	str.w	r0, [r9]
 800a880:	6918      	ldr	r0, [r3, #16]
 800a882:	f7ff fd35 	bl	800a2f0 <__hi0bits>
 800a886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a88a:	e7df      	b.n	800a84c <__d2b+0x70>
 800a88c:	0800b81b 	.word	0x0800b81b
 800a890:	0800b88c 	.word	0x0800b88c

0800a894 <_calloc_r>:
 800a894:	b513      	push	{r0, r1, r4, lr}
 800a896:	434a      	muls	r2, r1
 800a898:	4611      	mov	r1, r2
 800a89a:	9201      	str	r2, [sp, #4]
 800a89c:	f000 f85a 	bl	800a954 <_malloc_r>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	b118      	cbz	r0, 800a8ac <_calloc_r+0x18>
 800a8a4:	9a01      	ldr	r2, [sp, #4]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f7fe f83e 	bl	8008928 <memset>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	b002      	add	sp, #8
 800a8b0:	bd10      	pop	{r4, pc}
	...

0800a8b4 <_free_r>:
 800a8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8b6:	2900      	cmp	r1, #0
 800a8b8:	d048      	beq.n	800a94c <_free_r+0x98>
 800a8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8be:	9001      	str	r0, [sp, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a8c6:	bfb8      	it	lt
 800a8c8:	18e4      	addlt	r4, r4, r3
 800a8ca:	f000 fe1d 	bl	800b508 <__malloc_lock>
 800a8ce:	4a20      	ldr	r2, [pc, #128]	; (800a950 <_free_r+0x9c>)
 800a8d0:	9801      	ldr	r0, [sp, #4]
 800a8d2:	6813      	ldr	r3, [r2, #0]
 800a8d4:	4615      	mov	r5, r2
 800a8d6:	b933      	cbnz	r3, 800a8e6 <_free_r+0x32>
 800a8d8:	6063      	str	r3, [r4, #4]
 800a8da:	6014      	str	r4, [r2, #0]
 800a8dc:	b003      	add	sp, #12
 800a8de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e2:	f000 be17 	b.w	800b514 <__malloc_unlock>
 800a8e6:	42a3      	cmp	r3, r4
 800a8e8:	d90b      	bls.n	800a902 <_free_r+0x4e>
 800a8ea:	6821      	ldr	r1, [r4, #0]
 800a8ec:	1862      	adds	r2, r4, r1
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	bf04      	itt	eq
 800a8f2:	681a      	ldreq	r2, [r3, #0]
 800a8f4:	685b      	ldreq	r3, [r3, #4]
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	bf04      	itt	eq
 800a8fa:	1852      	addeq	r2, r2, r1
 800a8fc:	6022      	streq	r2, [r4, #0]
 800a8fe:	602c      	str	r4, [r5, #0]
 800a900:	e7ec      	b.n	800a8dc <_free_r+0x28>
 800a902:	461a      	mov	r2, r3
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	b10b      	cbz	r3, 800a90c <_free_r+0x58>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d9fa      	bls.n	800a902 <_free_r+0x4e>
 800a90c:	6811      	ldr	r1, [r2, #0]
 800a90e:	1855      	adds	r5, r2, r1
 800a910:	42a5      	cmp	r5, r4
 800a912:	d10b      	bne.n	800a92c <_free_r+0x78>
 800a914:	6824      	ldr	r4, [r4, #0]
 800a916:	4421      	add	r1, r4
 800a918:	1854      	adds	r4, r2, r1
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	d1dd      	bne.n	800a8dc <_free_r+0x28>
 800a920:	681c      	ldr	r4, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	6053      	str	r3, [r2, #4]
 800a926:	4421      	add	r1, r4
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	e7d7      	b.n	800a8dc <_free_r+0x28>
 800a92c:	d902      	bls.n	800a934 <_free_r+0x80>
 800a92e:	230c      	movs	r3, #12
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	e7d3      	b.n	800a8dc <_free_r+0x28>
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1961      	adds	r1, r4, r5
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf04      	itt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	bf04      	itt	eq
 800a944:	1949      	addeq	r1, r1, r5
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	6054      	str	r4, [r2, #4]
 800a94a:	e7c7      	b.n	800a8dc <_free_r+0x28>
 800a94c:	b003      	add	sp, #12
 800a94e:	bd30      	pop	{r4, r5, pc}
 800a950:	20000254 	.word	0x20000254

0800a954 <_malloc_r>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	1ccd      	adds	r5, r1, #3
 800a958:	f025 0503 	bic.w	r5, r5, #3
 800a95c:	3508      	adds	r5, #8
 800a95e:	2d0c      	cmp	r5, #12
 800a960:	bf38      	it	cc
 800a962:	250c      	movcc	r5, #12
 800a964:	2d00      	cmp	r5, #0
 800a966:	4606      	mov	r6, r0
 800a968:	db01      	blt.n	800a96e <_malloc_r+0x1a>
 800a96a:	42a9      	cmp	r1, r5
 800a96c:	d903      	bls.n	800a976 <_malloc_r+0x22>
 800a96e:	230c      	movs	r3, #12
 800a970:	6033      	str	r3, [r6, #0]
 800a972:	2000      	movs	r0, #0
 800a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a976:	f000 fdc7 	bl	800b508 <__malloc_lock>
 800a97a:	4921      	ldr	r1, [pc, #132]	; (800aa00 <_malloc_r+0xac>)
 800a97c:	680a      	ldr	r2, [r1, #0]
 800a97e:	4614      	mov	r4, r2
 800a980:	b99c      	cbnz	r4, 800a9aa <_malloc_r+0x56>
 800a982:	4f20      	ldr	r7, [pc, #128]	; (800aa04 <_malloc_r+0xb0>)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	b923      	cbnz	r3, 800a992 <_malloc_r+0x3e>
 800a988:	4621      	mov	r1, r4
 800a98a:	4630      	mov	r0, r6
 800a98c:	f000 faf2 	bl	800af74 <_sbrk_r>
 800a990:	6038      	str	r0, [r7, #0]
 800a992:	4629      	mov	r1, r5
 800a994:	4630      	mov	r0, r6
 800a996:	f000 faed 	bl	800af74 <_sbrk_r>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	d123      	bne.n	800a9e6 <_malloc_r+0x92>
 800a99e:	230c      	movs	r3, #12
 800a9a0:	6033      	str	r3, [r6, #0]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f000 fdb6 	bl	800b514 <__malloc_unlock>
 800a9a8:	e7e3      	b.n	800a972 <_malloc_r+0x1e>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	1b5b      	subs	r3, r3, r5
 800a9ae:	d417      	bmi.n	800a9e0 <_malloc_r+0x8c>
 800a9b0:	2b0b      	cmp	r3, #11
 800a9b2:	d903      	bls.n	800a9bc <_malloc_r+0x68>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	441c      	add	r4, r3
 800a9b8:	6025      	str	r5, [r4, #0]
 800a9ba:	e004      	b.n	800a9c6 <_malloc_r+0x72>
 800a9bc:	6863      	ldr	r3, [r4, #4]
 800a9be:	42a2      	cmp	r2, r4
 800a9c0:	bf0c      	ite	eq
 800a9c2:	600b      	streq	r3, [r1, #0]
 800a9c4:	6053      	strne	r3, [r2, #4]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 fda4 	bl	800b514 <__malloc_unlock>
 800a9cc:	f104 000b 	add.w	r0, r4, #11
 800a9d0:	1d23      	adds	r3, r4, #4
 800a9d2:	f020 0007 	bic.w	r0, r0, #7
 800a9d6:	1ac2      	subs	r2, r0, r3
 800a9d8:	d0cc      	beq.n	800a974 <_malloc_r+0x20>
 800a9da:	1a1b      	subs	r3, r3, r0
 800a9dc:	50a3      	str	r3, [r4, r2]
 800a9de:	e7c9      	b.n	800a974 <_malloc_r+0x20>
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	6864      	ldr	r4, [r4, #4]
 800a9e4:	e7cc      	b.n	800a980 <_malloc_r+0x2c>
 800a9e6:	1cc4      	adds	r4, r0, #3
 800a9e8:	f024 0403 	bic.w	r4, r4, #3
 800a9ec:	42a0      	cmp	r0, r4
 800a9ee:	d0e3      	beq.n	800a9b8 <_malloc_r+0x64>
 800a9f0:	1a21      	subs	r1, r4, r0
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 fabe 	bl	800af74 <_sbrk_r>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d1dd      	bne.n	800a9b8 <_malloc_r+0x64>
 800a9fc:	e7cf      	b.n	800a99e <_malloc_r+0x4a>
 800a9fe:	bf00      	nop
 800aa00:	20000254 	.word	0x20000254
 800aa04:	20000258 	.word	0x20000258

0800aa08 <__ssputs_r>:
 800aa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	688e      	ldr	r6, [r1, #8]
 800aa0e:	429e      	cmp	r6, r3
 800aa10:	4682      	mov	sl, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	4690      	mov	r8, r2
 800aa16:	461f      	mov	r7, r3
 800aa18:	d838      	bhi.n	800aa8c <__ssputs_r+0x84>
 800aa1a:	898a      	ldrh	r2, [r1, #12]
 800aa1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa20:	d032      	beq.n	800aa88 <__ssputs_r+0x80>
 800aa22:	6825      	ldr	r5, [r4, #0]
 800aa24:	6909      	ldr	r1, [r1, #16]
 800aa26:	eba5 0901 	sub.w	r9, r5, r1
 800aa2a:	6965      	ldr	r5, [r4, #20]
 800aa2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa34:	3301      	adds	r3, #1
 800aa36:	444b      	add	r3, r9
 800aa38:	106d      	asrs	r5, r5, #1
 800aa3a:	429d      	cmp	r5, r3
 800aa3c:	bf38      	it	cc
 800aa3e:	461d      	movcc	r5, r3
 800aa40:	0553      	lsls	r3, r2, #21
 800aa42:	d531      	bpl.n	800aaa8 <__ssputs_r+0xa0>
 800aa44:	4629      	mov	r1, r5
 800aa46:	f7ff ff85 	bl	800a954 <_malloc_r>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	b950      	cbnz	r0, 800aa64 <__ssputs_r+0x5c>
 800aa4e:	230c      	movs	r3, #12
 800aa50:	f8ca 3000 	str.w	r3, [sl]
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa64:	6921      	ldr	r1, [r4, #16]
 800aa66:	464a      	mov	r2, r9
 800aa68:	f7ff fb88 	bl	800a17c <memcpy>
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	6126      	str	r6, [r4, #16]
 800aa7a:	6165      	str	r5, [r4, #20]
 800aa7c:	444e      	add	r6, r9
 800aa7e:	eba5 0509 	sub.w	r5, r5, r9
 800aa82:	6026      	str	r6, [r4, #0]
 800aa84:	60a5      	str	r5, [r4, #8]
 800aa86:	463e      	mov	r6, r7
 800aa88:	42be      	cmp	r6, r7
 800aa8a:	d900      	bls.n	800aa8e <__ssputs_r+0x86>
 800aa8c:	463e      	mov	r6, r7
 800aa8e:	4632      	mov	r2, r6
 800aa90:	6820      	ldr	r0, [r4, #0]
 800aa92:	4641      	mov	r1, r8
 800aa94:	f000 fd1e 	bl	800b4d4 <memmove>
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	1b9b      	subs	r3, r3, r6
 800aa9e:	4432      	add	r2, r6
 800aaa0:	60a3      	str	r3, [r4, #8]
 800aaa2:	6022      	str	r2, [r4, #0]
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e7db      	b.n	800aa60 <__ssputs_r+0x58>
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	f000 fd39 	bl	800b520 <_realloc_r>
 800aaae:	4606      	mov	r6, r0
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d1e1      	bne.n	800aa78 <__ssputs_r+0x70>
 800aab4:	6921      	ldr	r1, [r4, #16]
 800aab6:	4650      	mov	r0, sl
 800aab8:	f7ff fefc 	bl	800a8b4 <_free_r>
 800aabc:	e7c7      	b.n	800aa4e <__ssputs_r+0x46>
	...

0800aac0 <_svfiprintf_r>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	4698      	mov	r8, r3
 800aac6:	898b      	ldrh	r3, [r1, #12]
 800aac8:	061b      	lsls	r3, r3, #24
 800aaca:	b09d      	sub	sp, #116	; 0x74
 800aacc:	4607      	mov	r7, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	4614      	mov	r4, r2
 800aad2:	d50e      	bpl.n	800aaf2 <_svfiprintf_r+0x32>
 800aad4:	690b      	ldr	r3, [r1, #16]
 800aad6:	b963      	cbnz	r3, 800aaf2 <_svfiprintf_r+0x32>
 800aad8:	2140      	movs	r1, #64	; 0x40
 800aada:	f7ff ff3b 	bl	800a954 <_malloc_r>
 800aade:	6028      	str	r0, [r5, #0]
 800aae0:	6128      	str	r0, [r5, #16]
 800aae2:	b920      	cbnz	r0, 800aaee <_svfiprintf_r+0x2e>
 800aae4:	230c      	movs	r3, #12
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaec:	e0d1      	b.n	800ac92 <_svfiprintf_r+0x1d2>
 800aaee:	2340      	movs	r3, #64	; 0x40
 800aaf0:	616b      	str	r3, [r5, #20]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf6:	2320      	movs	r3, #32
 800aaf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab00:	2330      	movs	r3, #48	; 0x30
 800ab02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acac <_svfiprintf_r+0x1ec>
 800ab06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab0a:	f04f 0901 	mov.w	r9, #1
 800ab0e:	4623      	mov	r3, r4
 800ab10:	469a      	mov	sl, r3
 800ab12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab16:	b10a      	cbz	r2, 800ab1c <_svfiprintf_r+0x5c>
 800ab18:	2a25      	cmp	r2, #37	; 0x25
 800ab1a:	d1f9      	bne.n	800ab10 <_svfiprintf_r+0x50>
 800ab1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab20:	d00b      	beq.n	800ab3a <_svfiprintf_r+0x7a>
 800ab22:	465b      	mov	r3, fp
 800ab24:	4622      	mov	r2, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff ff6d 	bl	800aa08 <__ssputs_r>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	f000 80aa 	beq.w	800ac88 <_svfiprintf_r+0x1c8>
 800ab34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab36:	445a      	add	r2, fp
 800ab38:	9209      	str	r2, [sp, #36]	; 0x24
 800ab3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80a2 	beq.w	800ac88 <_svfiprintf_r+0x1c8>
 800ab44:	2300      	movs	r3, #0
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4e:	f10a 0a01 	add.w	sl, sl, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	9307      	str	r3, [sp, #28]
 800ab56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	2205      	movs	r2, #5
 800ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab64:	4851      	ldr	r0, [pc, #324]	; (800acac <_svfiprintf_r+0x1ec>)
 800ab66:	f7f5 fb6b 	bl	8000240 <memchr>
 800ab6a:	9a04      	ldr	r2, [sp, #16]
 800ab6c:	b9d8      	cbnz	r0, 800aba6 <_svfiprintf_r+0xe6>
 800ab6e:	06d0      	lsls	r0, r2, #27
 800ab70:	bf44      	itt	mi
 800ab72:	2320      	movmi	r3, #32
 800ab74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab78:	0711      	lsls	r1, r2, #28
 800ab7a:	bf44      	itt	mi
 800ab7c:	232b      	movmi	r3, #43	; 0x2b
 800ab7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab82:	f89a 3000 	ldrb.w	r3, [sl]
 800ab86:	2b2a      	cmp	r3, #42	; 0x2a
 800ab88:	d015      	beq.n	800abb6 <_svfiprintf_r+0xf6>
 800ab8a:	9a07      	ldr	r2, [sp, #28]
 800ab8c:	4654      	mov	r4, sl
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f04f 0c0a 	mov.w	ip, #10
 800ab94:	4621      	mov	r1, r4
 800ab96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9a:	3b30      	subs	r3, #48	; 0x30
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d94e      	bls.n	800ac3e <_svfiprintf_r+0x17e>
 800aba0:	b1b0      	cbz	r0, 800abd0 <_svfiprintf_r+0x110>
 800aba2:	9207      	str	r2, [sp, #28]
 800aba4:	e014      	b.n	800abd0 <_svfiprintf_r+0x110>
 800aba6:	eba0 0308 	sub.w	r3, r0, r8
 800abaa:	fa09 f303 	lsl.w	r3, r9, r3
 800abae:	4313      	orrs	r3, r2
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	46a2      	mov	sl, r4
 800abb4:	e7d2      	b.n	800ab5c <_svfiprintf_r+0x9c>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	9103      	str	r1, [sp, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfbb      	ittet	lt
 800abc2:	425b      	neglt	r3, r3
 800abc4:	f042 0202 	orrlt.w	r2, r2, #2
 800abc8:	9307      	strge	r3, [sp, #28]
 800abca:	9307      	strlt	r3, [sp, #28]
 800abcc:	bfb8      	it	lt
 800abce:	9204      	strlt	r2, [sp, #16]
 800abd0:	7823      	ldrb	r3, [r4, #0]
 800abd2:	2b2e      	cmp	r3, #46	; 0x2e
 800abd4:	d10c      	bne.n	800abf0 <_svfiprintf_r+0x130>
 800abd6:	7863      	ldrb	r3, [r4, #1]
 800abd8:	2b2a      	cmp	r3, #42	; 0x2a
 800abda:	d135      	bne.n	800ac48 <_svfiprintf_r+0x188>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1d1a      	adds	r2, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9203      	str	r2, [sp, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfb8      	it	lt
 800abe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800abec:	3402      	adds	r4, #2
 800abee:	9305      	str	r3, [sp, #20]
 800abf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acbc <_svfiprintf_r+0x1fc>
 800abf4:	7821      	ldrb	r1, [r4, #0]
 800abf6:	2203      	movs	r2, #3
 800abf8:	4650      	mov	r0, sl
 800abfa:	f7f5 fb21 	bl	8000240 <memchr>
 800abfe:	b140      	cbz	r0, 800ac12 <_svfiprintf_r+0x152>
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	eba0 000a 	sub.w	r0, r0, sl
 800ac06:	fa03 f000 	lsl.w	r0, r3, r0
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	4303      	orrs	r3, r0
 800ac0e:	3401      	adds	r4, #1
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac16:	4826      	ldr	r0, [pc, #152]	; (800acb0 <_svfiprintf_r+0x1f0>)
 800ac18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac1c:	2206      	movs	r2, #6
 800ac1e:	f7f5 fb0f 	bl	8000240 <memchr>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d038      	beq.n	800ac98 <_svfiprintf_r+0x1d8>
 800ac26:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <_svfiprintf_r+0x1f4>)
 800ac28:	bb1b      	cbnz	r3, 800ac72 <_svfiprintf_r+0x1b2>
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	3307      	adds	r3, #7
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	3308      	adds	r3, #8
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac38:	4433      	add	r3, r6
 800ac3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3c:	e767      	b.n	800ab0e <_svfiprintf_r+0x4e>
 800ac3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac42:	460c      	mov	r4, r1
 800ac44:	2001      	movs	r0, #1
 800ac46:	e7a5      	b.n	800ab94 <_svfiprintf_r+0xd4>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	3401      	adds	r4, #1
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	f04f 0c0a 	mov.w	ip, #10
 800ac54:	4620      	mov	r0, r4
 800ac56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac5a:	3a30      	subs	r2, #48	; 0x30
 800ac5c:	2a09      	cmp	r2, #9
 800ac5e:	d903      	bls.n	800ac68 <_svfiprintf_r+0x1a8>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0c5      	beq.n	800abf0 <_svfiprintf_r+0x130>
 800ac64:	9105      	str	r1, [sp, #20]
 800ac66:	e7c3      	b.n	800abf0 <_svfiprintf_r+0x130>
 800ac68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e7f0      	b.n	800ac54 <_svfiprintf_r+0x194>
 800ac72:	ab03      	add	r3, sp, #12
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	462a      	mov	r2, r5
 800ac78:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <_svfiprintf_r+0x1f8>)
 800ac7a:	a904      	add	r1, sp, #16
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7fd fefb 	bl	8008a78 <_printf_float>
 800ac82:	1c42      	adds	r2, r0, #1
 800ac84:	4606      	mov	r6, r0
 800ac86:	d1d6      	bne.n	800ac36 <_svfiprintf_r+0x176>
 800ac88:	89ab      	ldrh	r3, [r5, #12]
 800ac8a:	065b      	lsls	r3, r3, #25
 800ac8c:	f53f af2c 	bmi.w	800aae8 <_svfiprintf_r+0x28>
 800ac90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac92:	b01d      	add	sp, #116	; 0x74
 800ac94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac98:	ab03      	add	r3, sp, #12
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <_svfiprintf_r+0x1f8>)
 800aca0:	a904      	add	r1, sp, #16
 800aca2:	4638      	mov	r0, r7
 800aca4:	f7fe f98c 	bl	8008fc0 <_printf_i>
 800aca8:	e7eb      	b.n	800ac82 <_svfiprintf_r+0x1c2>
 800acaa:	bf00      	nop
 800acac:	0800b9ec 	.word	0x0800b9ec
 800acb0:	0800b9f6 	.word	0x0800b9f6
 800acb4:	08008a79 	.word	0x08008a79
 800acb8:	0800aa09 	.word	0x0800aa09
 800acbc:	0800b9f2 	.word	0x0800b9f2

0800acc0 <__sfputc_r>:
 800acc0:	6893      	ldr	r3, [r2, #8]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	b410      	push	{r4}
 800acc8:	6093      	str	r3, [r2, #8]
 800acca:	da08      	bge.n	800acde <__sfputc_r+0x1e>
 800accc:	6994      	ldr	r4, [r2, #24]
 800acce:	42a3      	cmp	r3, r4
 800acd0:	db01      	blt.n	800acd6 <__sfputc_r+0x16>
 800acd2:	290a      	cmp	r1, #10
 800acd4:	d103      	bne.n	800acde <__sfputc_r+0x1e>
 800acd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acda:	f000 b99f 	b.w	800b01c <__swbuf_r>
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	1c58      	adds	r0, r3, #1
 800ace2:	6010      	str	r0, [r2, #0]
 800ace4:	7019      	strb	r1, [r3, #0]
 800ace6:	4608      	mov	r0, r1
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acec:	4770      	bx	lr

0800acee <__sfputs_r>:
 800acee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf0:	4606      	mov	r6, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	18d5      	adds	r5, r2, r3
 800acf8:	42ac      	cmp	r4, r5
 800acfa:	d101      	bne.n	800ad00 <__sfputs_r+0x12>
 800acfc:	2000      	movs	r0, #0
 800acfe:	e007      	b.n	800ad10 <__sfputs_r+0x22>
 800ad00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad04:	463a      	mov	r2, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7ff ffda 	bl	800acc0 <__sfputc_r>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d1f3      	bne.n	800acf8 <__sfputs_r+0xa>
 800ad10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad14 <_vfiprintf_r>:
 800ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	460d      	mov	r5, r1
 800ad1a:	b09d      	sub	sp, #116	; 0x74
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4698      	mov	r8, r3
 800ad20:	4606      	mov	r6, r0
 800ad22:	b118      	cbz	r0, 800ad2c <_vfiprintf_r+0x18>
 800ad24:	6983      	ldr	r3, [r0, #24]
 800ad26:	b90b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x18>
 800ad28:	f7ff f97a 	bl	800a020 <__sinit>
 800ad2c:	4b89      	ldr	r3, [pc, #548]	; (800af54 <_vfiprintf_r+0x240>)
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	d11b      	bne.n	800ad6a <_vfiprintf_r+0x56>
 800ad32:	6875      	ldr	r5, [r6, #4]
 800ad34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad36:	07d9      	lsls	r1, r3, #31
 800ad38:	d405      	bmi.n	800ad46 <_vfiprintf_r+0x32>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	059a      	lsls	r2, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_vfiprintf_r+0x32>
 800ad40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad42:	f7ff fa10 	bl	800a166 <__retarget_lock_acquire_recursive>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	071b      	lsls	r3, r3, #28
 800ad4a:	d501      	bpl.n	800ad50 <_vfiprintf_r+0x3c>
 800ad4c:	692b      	ldr	r3, [r5, #16]
 800ad4e:	b9eb      	cbnz	r3, 800ad8c <_vfiprintf_r+0x78>
 800ad50:	4629      	mov	r1, r5
 800ad52:	4630      	mov	r0, r6
 800ad54:	f000 f9c6 	bl	800b0e4 <__swsetup_r>
 800ad58:	b1c0      	cbz	r0, 800ad8c <_vfiprintf_r+0x78>
 800ad5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad5c:	07dc      	lsls	r4, r3, #31
 800ad5e:	d50e      	bpl.n	800ad7e <_vfiprintf_r+0x6a>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	b01d      	add	sp, #116	; 0x74
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	4b7b      	ldr	r3, [pc, #492]	; (800af58 <_vfiprintf_r+0x244>)
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	d101      	bne.n	800ad74 <_vfiprintf_r+0x60>
 800ad70:	68b5      	ldr	r5, [r6, #8]
 800ad72:	e7df      	b.n	800ad34 <_vfiprintf_r+0x20>
 800ad74:	4b79      	ldr	r3, [pc, #484]	; (800af5c <_vfiprintf_r+0x248>)
 800ad76:	429d      	cmp	r5, r3
 800ad78:	bf08      	it	eq
 800ad7a:	68f5      	ldreq	r5, [r6, #12]
 800ad7c:	e7da      	b.n	800ad34 <_vfiprintf_r+0x20>
 800ad7e:	89ab      	ldrh	r3, [r5, #12]
 800ad80:	0598      	lsls	r0, r3, #22
 800ad82:	d4ed      	bmi.n	800ad60 <_vfiprintf_r+0x4c>
 800ad84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad86:	f7ff f9ef 	bl	800a168 <__retarget_lock_release_recursive>
 800ad8a:	e7e9      	b.n	800ad60 <_vfiprintf_r+0x4c>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad90:	2320      	movs	r3, #32
 800ad92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad9a:	2330      	movs	r3, #48	; 0x30
 800ad9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af60 <_vfiprintf_r+0x24c>
 800ada0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada4:	f04f 0901 	mov.w	r9, #1
 800ada8:	4623      	mov	r3, r4
 800adaa:	469a      	mov	sl, r3
 800adac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb0:	b10a      	cbz	r2, 800adb6 <_vfiprintf_r+0xa2>
 800adb2:	2a25      	cmp	r2, #37	; 0x25
 800adb4:	d1f9      	bne.n	800adaa <_vfiprintf_r+0x96>
 800adb6:	ebba 0b04 	subs.w	fp, sl, r4
 800adba:	d00b      	beq.n	800add4 <_vfiprintf_r+0xc0>
 800adbc:	465b      	mov	r3, fp
 800adbe:	4622      	mov	r2, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ff93 	bl	800acee <__sfputs_r>
 800adc8:	3001      	adds	r0, #1
 800adca:	f000 80aa 	beq.w	800af22 <_vfiprintf_r+0x20e>
 800adce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add0:	445a      	add	r2, fp
 800add2:	9209      	str	r2, [sp, #36]	; 0x24
 800add4:	f89a 3000 	ldrb.w	r3, [sl]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 80a2 	beq.w	800af22 <_vfiprintf_r+0x20e>
 800adde:	2300      	movs	r3, #0
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295
 800ade4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade8:	f10a 0a01 	add.w	sl, sl, #1
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	9307      	str	r3, [sp, #28]
 800adf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf4:	931a      	str	r3, [sp, #104]	; 0x68
 800adf6:	4654      	mov	r4, sl
 800adf8:	2205      	movs	r2, #5
 800adfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfe:	4858      	ldr	r0, [pc, #352]	; (800af60 <_vfiprintf_r+0x24c>)
 800ae00:	f7f5 fa1e 	bl	8000240 <memchr>
 800ae04:	9a04      	ldr	r2, [sp, #16]
 800ae06:	b9d8      	cbnz	r0, 800ae40 <_vfiprintf_r+0x12c>
 800ae08:	06d1      	lsls	r1, r2, #27
 800ae0a:	bf44      	itt	mi
 800ae0c:	2320      	movmi	r3, #32
 800ae0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae12:	0713      	lsls	r3, r2, #28
 800ae14:	bf44      	itt	mi
 800ae16:	232b      	movmi	r3, #43	; 0x2b
 800ae18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae20:	2b2a      	cmp	r3, #42	; 0x2a
 800ae22:	d015      	beq.n	800ae50 <_vfiprintf_r+0x13c>
 800ae24:	9a07      	ldr	r2, [sp, #28]
 800ae26:	4654      	mov	r4, sl
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f04f 0c0a 	mov.w	ip, #10
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae34:	3b30      	subs	r3, #48	; 0x30
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	d94e      	bls.n	800aed8 <_vfiprintf_r+0x1c4>
 800ae3a:	b1b0      	cbz	r0, 800ae6a <_vfiprintf_r+0x156>
 800ae3c:	9207      	str	r2, [sp, #28]
 800ae3e:	e014      	b.n	800ae6a <_vfiprintf_r+0x156>
 800ae40:	eba0 0308 	sub.w	r3, r0, r8
 800ae44:	fa09 f303 	lsl.w	r3, r9, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	46a2      	mov	sl, r4
 800ae4e:	e7d2      	b.n	800adf6 <_vfiprintf_r+0xe2>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	1d19      	adds	r1, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	9103      	str	r1, [sp, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfbb      	ittet	lt
 800ae5c:	425b      	neglt	r3, r3
 800ae5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae62:	9307      	strge	r3, [sp, #28]
 800ae64:	9307      	strlt	r3, [sp, #28]
 800ae66:	bfb8      	it	lt
 800ae68:	9204      	strlt	r2, [sp, #16]
 800ae6a:	7823      	ldrb	r3, [r4, #0]
 800ae6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae6e:	d10c      	bne.n	800ae8a <_vfiprintf_r+0x176>
 800ae70:	7863      	ldrb	r3, [r4, #1]
 800ae72:	2b2a      	cmp	r3, #42	; 0x2a
 800ae74:	d135      	bne.n	800aee2 <_vfiprintf_r+0x1ce>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9203      	str	r2, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae86:	3402      	adds	r4, #2
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af70 <_vfiprintf_r+0x25c>
 800ae8e:	7821      	ldrb	r1, [r4, #0]
 800ae90:	2203      	movs	r2, #3
 800ae92:	4650      	mov	r0, sl
 800ae94:	f7f5 f9d4 	bl	8000240 <memchr>
 800ae98:	b140      	cbz	r0, 800aeac <_vfiprintf_r+0x198>
 800ae9a:	2340      	movs	r3, #64	; 0x40
 800ae9c:	eba0 000a 	sub.w	r0, r0, sl
 800aea0:	fa03 f000 	lsl.w	r0, r3, r0
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	4303      	orrs	r3, r0
 800aea8:	3401      	adds	r4, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb0:	482c      	ldr	r0, [pc, #176]	; (800af64 <_vfiprintf_r+0x250>)
 800aeb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeb6:	2206      	movs	r2, #6
 800aeb8:	f7f5 f9c2 	bl	8000240 <memchr>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d03f      	beq.n	800af40 <_vfiprintf_r+0x22c>
 800aec0:	4b29      	ldr	r3, [pc, #164]	; (800af68 <_vfiprintf_r+0x254>)
 800aec2:	bb1b      	cbnz	r3, 800af0c <_vfiprintf_r+0x1f8>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	3307      	adds	r3, #7
 800aec8:	f023 0307 	bic.w	r3, r3, #7
 800aecc:	3308      	adds	r3, #8
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed2:	443b      	add	r3, r7
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	e767      	b.n	800ada8 <_vfiprintf_r+0x94>
 800aed8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aedc:	460c      	mov	r4, r1
 800aede:	2001      	movs	r0, #1
 800aee0:	e7a5      	b.n	800ae2e <_vfiprintf_r+0x11a>
 800aee2:	2300      	movs	r3, #0
 800aee4:	3401      	adds	r4, #1
 800aee6:	9305      	str	r3, [sp, #20]
 800aee8:	4619      	mov	r1, r3
 800aeea:	f04f 0c0a 	mov.w	ip, #10
 800aeee:	4620      	mov	r0, r4
 800aef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef4:	3a30      	subs	r2, #48	; 0x30
 800aef6:	2a09      	cmp	r2, #9
 800aef8:	d903      	bls.n	800af02 <_vfiprintf_r+0x1ee>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0c5      	beq.n	800ae8a <_vfiprintf_r+0x176>
 800aefe:	9105      	str	r1, [sp, #20]
 800af00:	e7c3      	b.n	800ae8a <_vfiprintf_r+0x176>
 800af02:	fb0c 2101 	mla	r1, ip, r1, r2
 800af06:	4604      	mov	r4, r0
 800af08:	2301      	movs	r3, #1
 800af0a:	e7f0      	b.n	800aeee <_vfiprintf_r+0x1da>
 800af0c:	ab03      	add	r3, sp, #12
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	462a      	mov	r2, r5
 800af12:	4b16      	ldr	r3, [pc, #88]	; (800af6c <_vfiprintf_r+0x258>)
 800af14:	a904      	add	r1, sp, #16
 800af16:	4630      	mov	r0, r6
 800af18:	f7fd fdae 	bl	8008a78 <_printf_float>
 800af1c:	4607      	mov	r7, r0
 800af1e:	1c78      	adds	r0, r7, #1
 800af20:	d1d6      	bne.n	800aed0 <_vfiprintf_r+0x1bc>
 800af22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af24:	07d9      	lsls	r1, r3, #31
 800af26:	d405      	bmi.n	800af34 <_vfiprintf_r+0x220>
 800af28:	89ab      	ldrh	r3, [r5, #12]
 800af2a:	059a      	lsls	r2, r3, #22
 800af2c:	d402      	bmi.n	800af34 <_vfiprintf_r+0x220>
 800af2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af30:	f7ff f91a 	bl	800a168 <__retarget_lock_release_recursive>
 800af34:	89ab      	ldrh	r3, [r5, #12]
 800af36:	065b      	lsls	r3, r3, #25
 800af38:	f53f af12 	bmi.w	800ad60 <_vfiprintf_r+0x4c>
 800af3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af3e:	e711      	b.n	800ad64 <_vfiprintf_r+0x50>
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <_vfiprintf_r+0x258>)
 800af48:	a904      	add	r1, sp, #16
 800af4a:	4630      	mov	r0, r6
 800af4c:	f7fe f838 	bl	8008fc0 <_printf_i>
 800af50:	e7e4      	b.n	800af1c <_vfiprintf_r+0x208>
 800af52:	bf00      	nop
 800af54:	0800b84c 	.word	0x0800b84c
 800af58:	0800b86c 	.word	0x0800b86c
 800af5c:	0800b82c 	.word	0x0800b82c
 800af60:	0800b9ec 	.word	0x0800b9ec
 800af64:	0800b9f6 	.word	0x0800b9f6
 800af68:	08008a79 	.word	0x08008a79
 800af6c:	0800acef 	.word	0x0800acef
 800af70:	0800b9f2 	.word	0x0800b9f2

0800af74 <_sbrk_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d06      	ldr	r5, [pc, #24]	; (800af90 <_sbrk_r+0x1c>)
 800af78:	2300      	movs	r3, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	f7f6 feae 	bl	8001ce0 <_sbrk>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_sbrk_r+0x1a>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_sbrk_r+0x1a>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	200004d4 	.word	0x200004d4

0800af94 <__sread>:
 800af94:	b510      	push	{r4, lr}
 800af96:	460c      	mov	r4, r1
 800af98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9c:	f000 fae6 	bl	800b56c <_read_r>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	bfab      	itete	ge
 800afa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afa6:	89a3      	ldrhlt	r3, [r4, #12]
 800afa8:	181b      	addge	r3, r3, r0
 800afaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afae:	bfac      	ite	ge
 800afb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800afb2:	81a3      	strhlt	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__swrite>:
 800afb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afba:	461f      	mov	r7, r3
 800afbc:	898b      	ldrh	r3, [r1, #12]
 800afbe:	05db      	lsls	r3, r3, #23
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	4616      	mov	r6, r2
 800afc6:	d505      	bpl.n	800afd4 <__swrite+0x1e>
 800afc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afcc:	2302      	movs	r3, #2
 800afce:	2200      	movs	r2, #0
 800afd0:	f000 f9f8 	bl	800b3c4 <_lseek_r>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	4628      	mov	r0, r5
 800afe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	f000 b869 	b.w	800b0c0 <_write_r>

0800afee <__sseek>:
 800afee:	b510      	push	{r4, lr}
 800aff0:	460c      	mov	r4, r1
 800aff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff6:	f000 f9e5 	bl	800b3c4 <_lseek_r>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	bf15      	itete	ne
 800b000:	6560      	strne	r0, [r4, #84]	; 0x54
 800b002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b00a:	81a3      	strheq	r3, [r4, #12]
 800b00c:	bf18      	it	ne
 800b00e:	81a3      	strhne	r3, [r4, #12]
 800b010:	bd10      	pop	{r4, pc}

0800b012 <__sclose>:
 800b012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b016:	f000 b8f1 	b.w	800b1fc <_close_r>
	...

0800b01c <__swbuf_r>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	4614      	mov	r4, r2
 800b022:	4605      	mov	r5, r0
 800b024:	b118      	cbz	r0, 800b02e <__swbuf_r+0x12>
 800b026:	6983      	ldr	r3, [r0, #24]
 800b028:	b90b      	cbnz	r3, 800b02e <__swbuf_r+0x12>
 800b02a:	f7fe fff9 	bl	800a020 <__sinit>
 800b02e:	4b21      	ldr	r3, [pc, #132]	; (800b0b4 <__swbuf_r+0x98>)
 800b030:	429c      	cmp	r4, r3
 800b032:	d12b      	bne.n	800b08c <__swbuf_r+0x70>
 800b034:	686c      	ldr	r4, [r5, #4]
 800b036:	69a3      	ldr	r3, [r4, #24]
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	071a      	lsls	r2, r3, #28
 800b03e:	d52f      	bpl.n	800b0a0 <__swbuf_r+0x84>
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	b36b      	cbz	r3, 800b0a0 <__swbuf_r+0x84>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	1ac0      	subs	r0, r0, r3
 800b04a:	6963      	ldr	r3, [r4, #20]
 800b04c:	b2f6      	uxtb	r6, r6
 800b04e:	4283      	cmp	r3, r0
 800b050:	4637      	mov	r7, r6
 800b052:	dc04      	bgt.n	800b05e <__swbuf_r+0x42>
 800b054:	4621      	mov	r1, r4
 800b056:	4628      	mov	r0, r5
 800b058:	f000 f966 	bl	800b328 <_fflush_r>
 800b05c:	bb30      	cbnz	r0, 800b0ac <__swbuf_r+0x90>
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	3b01      	subs	r3, #1
 800b062:	60a3      	str	r3, [r4, #8]
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	6022      	str	r2, [r4, #0]
 800b06a:	701e      	strb	r6, [r3, #0]
 800b06c:	6963      	ldr	r3, [r4, #20]
 800b06e:	3001      	adds	r0, #1
 800b070:	4283      	cmp	r3, r0
 800b072:	d004      	beq.n	800b07e <__swbuf_r+0x62>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	07db      	lsls	r3, r3, #31
 800b078:	d506      	bpl.n	800b088 <__swbuf_r+0x6c>
 800b07a:	2e0a      	cmp	r6, #10
 800b07c:	d104      	bne.n	800b088 <__swbuf_r+0x6c>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	f000 f951 	bl	800b328 <_fflush_r>
 800b086:	b988      	cbnz	r0, 800b0ac <__swbuf_r+0x90>
 800b088:	4638      	mov	r0, r7
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <__swbuf_r+0x9c>)
 800b08e:	429c      	cmp	r4, r3
 800b090:	d101      	bne.n	800b096 <__swbuf_r+0x7a>
 800b092:	68ac      	ldr	r4, [r5, #8]
 800b094:	e7cf      	b.n	800b036 <__swbuf_r+0x1a>
 800b096:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <__swbuf_r+0xa0>)
 800b098:	429c      	cmp	r4, r3
 800b09a:	bf08      	it	eq
 800b09c:	68ec      	ldreq	r4, [r5, #12]
 800b09e:	e7ca      	b.n	800b036 <__swbuf_r+0x1a>
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f81e 	bl	800b0e4 <__swsetup_r>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d0cb      	beq.n	800b044 <__swbuf_r+0x28>
 800b0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b0b0:	e7ea      	b.n	800b088 <__swbuf_r+0x6c>
 800b0b2:	bf00      	nop
 800b0b4:	0800b84c 	.word	0x0800b84c
 800b0b8:	0800b86c 	.word	0x0800b86c
 800b0bc:	0800b82c 	.word	0x0800b82c

0800b0c0 <_write_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d07      	ldr	r5, [pc, #28]	; (800b0e0 <_write_r+0x20>)
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f7f6 fdb5 	bl	8001c3e <_write>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_write_r+0x1e>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_write_r+0x1e>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	200004d4 	.word	0x200004d4

0800b0e4 <__swsetup_r>:
 800b0e4:	4b32      	ldr	r3, [pc, #200]	; (800b1b0 <__swsetup_r+0xcc>)
 800b0e6:	b570      	push	{r4, r5, r6, lr}
 800b0e8:	681d      	ldr	r5, [r3, #0]
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	b125      	cbz	r5, 800b0fa <__swsetup_r+0x16>
 800b0f0:	69ab      	ldr	r3, [r5, #24]
 800b0f2:	b913      	cbnz	r3, 800b0fa <__swsetup_r+0x16>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7fe ff93 	bl	800a020 <__sinit>
 800b0fa:	4b2e      	ldr	r3, [pc, #184]	; (800b1b4 <__swsetup_r+0xd0>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d10f      	bne.n	800b120 <__swsetup_r+0x3c>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b108:	0719      	lsls	r1, r3, #28
 800b10a:	d42c      	bmi.n	800b166 <__swsetup_r+0x82>
 800b10c:	06dd      	lsls	r5, r3, #27
 800b10e:	d411      	bmi.n	800b134 <__swsetup_r+0x50>
 800b110:	2309      	movs	r3, #9
 800b112:	6033      	str	r3, [r6, #0]
 800b114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295
 800b11e:	e03e      	b.n	800b19e <__swsetup_r+0xba>
 800b120:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <__swsetup_r+0xd4>)
 800b122:	429c      	cmp	r4, r3
 800b124:	d101      	bne.n	800b12a <__swsetup_r+0x46>
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	e7eb      	b.n	800b102 <__swsetup_r+0x1e>
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <__swsetup_r+0xd8>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	bf08      	it	eq
 800b130:	68ec      	ldreq	r4, [r5, #12]
 800b132:	e7e6      	b.n	800b102 <__swsetup_r+0x1e>
 800b134:	0758      	lsls	r0, r3, #29
 800b136:	d512      	bpl.n	800b15e <__swsetup_r+0x7a>
 800b138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b13a:	b141      	cbz	r1, 800b14e <__swsetup_r+0x6a>
 800b13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b140:	4299      	cmp	r1, r3
 800b142:	d002      	beq.n	800b14a <__swsetup_r+0x66>
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff fbb5 	bl	800a8b4 <_free_r>
 800b14a:	2300      	movs	r3, #0
 800b14c:	6363      	str	r3, [r4, #52]	; 0x34
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	2300      	movs	r3, #0
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f043 0308 	orr.w	r3, r3, #8
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	b94b      	cbnz	r3, 800b17e <__swsetup_r+0x9a>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b174:	d003      	beq.n	800b17e <__swsetup_r+0x9a>
 800b176:	4621      	mov	r1, r4
 800b178:	4630      	mov	r0, r6
 800b17a:	f000 f959 	bl	800b430 <__smakebuf_r>
 800b17e:	89a0      	ldrh	r0, [r4, #12]
 800b180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b184:	f010 0301 	ands.w	r3, r0, #1
 800b188:	d00a      	beq.n	800b1a0 <__swsetup_r+0xbc>
 800b18a:	2300      	movs	r3, #0
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	6963      	ldr	r3, [r4, #20]
 800b190:	425b      	negs	r3, r3
 800b192:	61a3      	str	r3, [r4, #24]
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	b943      	cbnz	r3, 800b1aa <__swsetup_r+0xc6>
 800b198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b19c:	d1ba      	bne.n	800b114 <__swsetup_r+0x30>
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	0781      	lsls	r1, r0, #30
 800b1a2:	bf58      	it	pl
 800b1a4:	6963      	ldrpl	r3, [r4, #20]
 800b1a6:	60a3      	str	r3, [r4, #8]
 800b1a8:	e7f4      	b.n	800b194 <__swsetup_r+0xb0>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	e7f7      	b.n	800b19e <__swsetup_r+0xba>
 800b1ae:	bf00      	nop
 800b1b0:	2000000c 	.word	0x2000000c
 800b1b4:	0800b84c 	.word	0x0800b84c
 800b1b8:	0800b86c 	.word	0x0800b86c
 800b1bc:	0800b82c 	.word	0x0800b82c

0800b1c0 <__assert_func>:
 800b1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1c2:	4614      	mov	r4, r2
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <__assert_func+0x2c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	68d8      	ldr	r0, [r3, #12]
 800b1ce:	b14c      	cbz	r4, 800b1e4 <__assert_func+0x24>
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <__assert_func+0x30>)
 800b1d2:	9100      	str	r1, [sp, #0]
 800b1d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1d8:	4906      	ldr	r1, [pc, #24]	; (800b1f4 <__assert_func+0x34>)
 800b1da:	462b      	mov	r3, r5
 800b1dc:	f000 f8e0 	bl	800b3a0 <fiprintf>
 800b1e0:	f000 f9e3 	bl	800b5aa <abort>
 800b1e4:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <__assert_func+0x38>)
 800b1e6:	461c      	mov	r4, r3
 800b1e8:	e7f3      	b.n	800b1d2 <__assert_func+0x12>
 800b1ea:	bf00      	nop
 800b1ec:	2000000c 	.word	0x2000000c
 800b1f0:	0800b9fd 	.word	0x0800b9fd
 800b1f4:	0800ba0a 	.word	0x0800ba0a
 800b1f8:	0800ba38 	.word	0x0800ba38

0800b1fc <_close_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d06      	ldr	r5, [pc, #24]	; (800b218 <_close_r+0x1c>)
 800b200:	2300      	movs	r3, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	602b      	str	r3, [r5, #0]
 800b208:	f7f6 fd35 	bl	8001c76 <_close>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_close_r+0x1a>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_close_r+0x1a>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	200004d4 	.word	0x200004d4

0800b21c <__sflush_r>:
 800b21c:	898a      	ldrh	r2, [r1, #12]
 800b21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b222:	4605      	mov	r5, r0
 800b224:	0710      	lsls	r0, r2, #28
 800b226:	460c      	mov	r4, r1
 800b228:	d458      	bmi.n	800b2dc <__sflush_r+0xc0>
 800b22a:	684b      	ldr	r3, [r1, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dc05      	bgt.n	800b23c <__sflush_r+0x20>
 800b230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b232:	2b00      	cmp	r3, #0
 800b234:	dc02      	bgt.n	800b23c <__sflush_r+0x20>
 800b236:	2000      	movs	r0, #0
 800b238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b23c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b23e:	2e00      	cmp	r6, #0
 800b240:	d0f9      	beq.n	800b236 <__sflush_r+0x1a>
 800b242:	2300      	movs	r3, #0
 800b244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b248:	682f      	ldr	r7, [r5, #0]
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	d032      	beq.n	800b2b4 <__sflush_r+0x98>
 800b24e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	075a      	lsls	r2, r3, #29
 800b254:	d505      	bpl.n	800b262 <__sflush_r+0x46>
 800b256:	6863      	ldr	r3, [r4, #4]
 800b258:	1ac0      	subs	r0, r0, r3
 800b25a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b25c:	b10b      	cbz	r3, 800b262 <__sflush_r+0x46>
 800b25e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b260:	1ac0      	subs	r0, r0, r3
 800b262:	2300      	movs	r3, #0
 800b264:	4602      	mov	r2, r0
 800b266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b268:	6a21      	ldr	r1, [r4, #32]
 800b26a:	4628      	mov	r0, r5
 800b26c:	47b0      	blx	r6
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	d106      	bne.n	800b282 <__sflush_r+0x66>
 800b274:	6829      	ldr	r1, [r5, #0]
 800b276:	291d      	cmp	r1, #29
 800b278:	d82c      	bhi.n	800b2d4 <__sflush_r+0xb8>
 800b27a:	4a2a      	ldr	r2, [pc, #168]	; (800b324 <__sflush_r+0x108>)
 800b27c:	40ca      	lsrs	r2, r1
 800b27e:	07d6      	lsls	r6, r2, #31
 800b280:	d528      	bpl.n	800b2d4 <__sflush_r+0xb8>
 800b282:	2200      	movs	r2, #0
 800b284:	6062      	str	r2, [r4, #4]
 800b286:	04d9      	lsls	r1, r3, #19
 800b288:	6922      	ldr	r2, [r4, #16]
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	d504      	bpl.n	800b298 <__sflush_r+0x7c>
 800b28e:	1c42      	adds	r2, r0, #1
 800b290:	d101      	bne.n	800b296 <__sflush_r+0x7a>
 800b292:	682b      	ldr	r3, [r5, #0]
 800b294:	b903      	cbnz	r3, 800b298 <__sflush_r+0x7c>
 800b296:	6560      	str	r0, [r4, #84]	; 0x54
 800b298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b29a:	602f      	str	r7, [r5, #0]
 800b29c:	2900      	cmp	r1, #0
 800b29e:	d0ca      	beq.n	800b236 <__sflush_r+0x1a>
 800b2a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2a4:	4299      	cmp	r1, r3
 800b2a6:	d002      	beq.n	800b2ae <__sflush_r+0x92>
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7ff fb03 	bl	800a8b4 <_free_r>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b2b2:	e7c1      	b.n	800b238 <__sflush_r+0x1c>
 800b2b4:	6a21      	ldr	r1, [r4, #32]
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b0      	blx	r6
 800b2bc:	1c41      	adds	r1, r0, #1
 800b2be:	d1c7      	bne.n	800b250 <__sflush_r+0x34>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0c4      	beq.n	800b250 <__sflush_r+0x34>
 800b2c6:	2b1d      	cmp	r3, #29
 800b2c8:	d001      	beq.n	800b2ce <__sflush_r+0xb2>
 800b2ca:	2b16      	cmp	r3, #22
 800b2cc:	d101      	bne.n	800b2d2 <__sflush_r+0xb6>
 800b2ce:	602f      	str	r7, [r5, #0]
 800b2d0:	e7b1      	b.n	800b236 <__sflush_r+0x1a>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	e7ad      	b.n	800b238 <__sflush_r+0x1c>
 800b2dc:	690f      	ldr	r7, [r1, #16]
 800b2de:	2f00      	cmp	r7, #0
 800b2e0:	d0a9      	beq.n	800b236 <__sflush_r+0x1a>
 800b2e2:	0793      	lsls	r3, r2, #30
 800b2e4:	680e      	ldr	r6, [r1, #0]
 800b2e6:	bf08      	it	eq
 800b2e8:	694b      	ldreq	r3, [r1, #20]
 800b2ea:	600f      	str	r7, [r1, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	2300      	movne	r3, #0
 800b2f0:	eba6 0807 	sub.w	r8, r6, r7
 800b2f4:	608b      	str	r3, [r1, #8]
 800b2f6:	f1b8 0f00 	cmp.w	r8, #0
 800b2fa:	dd9c      	ble.n	800b236 <__sflush_r+0x1a>
 800b2fc:	6a21      	ldr	r1, [r4, #32]
 800b2fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b300:	4643      	mov	r3, r8
 800b302:	463a      	mov	r2, r7
 800b304:	4628      	mov	r0, r5
 800b306:	47b0      	blx	r6
 800b308:	2800      	cmp	r0, #0
 800b30a:	dc06      	bgt.n	800b31a <__sflush_r+0xfe>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	e78e      	b.n	800b238 <__sflush_r+0x1c>
 800b31a:	4407      	add	r7, r0
 800b31c:	eba8 0800 	sub.w	r8, r8, r0
 800b320:	e7e9      	b.n	800b2f6 <__sflush_r+0xda>
 800b322:	bf00      	nop
 800b324:	20400001 	.word	0x20400001

0800b328 <_fflush_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	690b      	ldr	r3, [r1, #16]
 800b32c:	4605      	mov	r5, r0
 800b32e:	460c      	mov	r4, r1
 800b330:	b913      	cbnz	r3, 800b338 <_fflush_r+0x10>
 800b332:	2500      	movs	r5, #0
 800b334:	4628      	mov	r0, r5
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	b118      	cbz	r0, 800b342 <_fflush_r+0x1a>
 800b33a:	6983      	ldr	r3, [r0, #24]
 800b33c:	b90b      	cbnz	r3, 800b342 <_fflush_r+0x1a>
 800b33e:	f7fe fe6f 	bl	800a020 <__sinit>
 800b342:	4b14      	ldr	r3, [pc, #80]	; (800b394 <_fflush_r+0x6c>)
 800b344:	429c      	cmp	r4, r3
 800b346:	d11b      	bne.n	800b380 <_fflush_r+0x58>
 800b348:	686c      	ldr	r4, [r5, #4]
 800b34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d0ef      	beq.n	800b332 <_fflush_r+0xa>
 800b352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b354:	07d0      	lsls	r0, r2, #31
 800b356:	d404      	bmi.n	800b362 <_fflush_r+0x3a>
 800b358:	0599      	lsls	r1, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_fflush_r+0x3a>
 800b35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b35e:	f7fe ff02 	bl	800a166 <__retarget_lock_acquire_recursive>
 800b362:	4628      	mov	r0, r5
 800b364:	4621      	mov	r1, r4
 800b366:	f7ff ff59 	bl	800b21c <__sflush_r>
 800b36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b36c:	07da      	lsls	r2, r3, #31
 800b36e:	4605      	mov	r5, r0
 800b370:	d4e0      	bmi.n	800b334 <_fflush_r+0xc>
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	059b      	lsls	r3, r3, #22
 800b376:	d4dd      	bmi.n	800b334 <_fflush_r+0xc>
 800b378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b37a:	f7fe fef5 	bl	800a168 <__retarget_lock_release_recursive>
 800b37e:	e7d9      	b.n	800b334 <_fflush_r+0xc>
 800b380:	4b05      	ldr	r3, [pc, #20]	; (800b398 <_fflush_r+0x70>)
 800b382:	429c      	cmp	r4, r3
 800b384:	d101      	bne.n	800b38a <_fflush_r+0x62>
 800b386:	68ac      	ldr	r4, [r5, #8]
 800b388:	e7df      	b.n	800b34a <_fflush_r+0x22>
 800b38a:	4b04      	ldr	r3, [pc, #16]	; (800b39c <_fflush_r+0x74>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	bf08      	it	eq
 800b390:	68ec      	ldreq	r4, [r5, #12]
 800b392:	e7da      	b.n	800b34a <_fflush_r+0x22>
 800b394:	0800b84c 	.word	0x0800b84c
 800b398:	0800b86c 	.word	0x0800b86c
 800b39c:	0800b82c 	.word	0x0800b82c

0800b3a0 <fiprintf>:
 800b3a0:	b40e      	push	{r1, r2, r3}
 800b3a2:	b503      	push	{r0, r1, lr}
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	ab03      	add	r3, sp, #12
 800b3a8:	4805      	ldr	r0, [pc, #20]	; (800b3c0 <fiprintf+0x20>)
 800b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ae:	6800      	ldr	r0, [r0, #0]
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	f7ff fcaf 	bl	800ad14 <_vfiprintf_r>
 800b3b6:	b002      	add	sp, #8
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	b003      	add	sp, #12
 800b3be:	4770      	bx	lr
 800b3c0:	2000000c 	.word	0x2000000c

0800b3c4 <_lseek_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_lseek_r+0x20>)
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f7f6 fc76 	bl	8001cc4 <_lseek>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_lseek_r+0x1e>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_lseek_r+0x1e>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	200004d4 	.word	0x200004d4

0800b3e8 <__swhatbuf_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	b096      	sub	sp, #88	; 0x58
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	da07      	bge.n	800b40a <__swhatbuf_r+0x22>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	89b3      	ldrh	r3, [r6, #12]
 800b400:	061a      	lsls	r2, r3, #24
 800b402:	d410      	bmi.n	800b426 <__swhatbuf_r+0x3e>
 800b404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b408:	e00e      	b.n	800b428 <__swhatbuf_r+0x40>
 800b40a:	466a      	mov	r2, sp
 800b40c:	f000 f8d4 	bl	800b5b8 <_fstat_r>
 800b410:	2800      	cmp	r0, #0
 800b412:	dbf2      	blt.n	800b3fa <__swhatbuf_r+0x12>
 800b414:	9a01      	ldr	r2, [sp, #4]
 800b416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b41a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b41e:	425a      	negs	r2, r3
 800b420:	415a      	adcs	r2, r3
 800b422:	602a      	str	r2, [r5, #0]
 800b424:	e7ee      	b.n	800b404 <__swhatbuf_r+0x1c>
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	2000      	movs	r0, #0
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	b016      	add	sp, #88	; 0x58
 800b42e:	bd70      	pop	{r4, r5, r6, pc}

0800b430 <__smakebuf_r>:
 800b430:	898b      	ldrh	r3, [r1, #12]
 800b432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b434:	079d      	lsls	r5, r3, #30
 800b436:	4606      	mov	r6, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	d507      	bpl.n	800b44c <__smakebuf_r+0x1c>
 800b43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	2301      	movs	r3, #1
 800b446:	6163      	str	r3, [r4, #20]
 800b448:	b002      	add	sp, #8
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	ab01      	add	r3, sp, #4
 800b44e:	466a      	mov	r2, sp
 800b450:	f7ff ffca 	bl	800b3e8 <__swhatbuf_r>
 800b454:	9900      	ldr	r1, [sp, #0]
 800b456:	4605      	mov	r5, r0
 800b458:	4630      	mov	r0, r6
 800b45a:	f7ff fa7b 	bl	800a954 <_malloc_r>
 800b45e:	b948      	cbnz	r0, 800b474 <__smakebuf_r+0x44>
 800b460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b464:	059a      	lsls	r2, r3, #22
 800b466:	d4ef      	bmi.n	800b448 <__smakebuf_r+0x18>
 800b468:	f023 0303 	bic.w	r3, r3, #3
 800b46c:	f043 0302 	orr.w	r3, r3, #2
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	e7e3      	b.n	800b43c <__smakebuf_r+0xc>
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <__smakebuf_r+0x7c>)
 800b476:	62b3      	str	r3, [r6, #40]	; 0x28
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	6020      	str	r0, [r4, #0]
 800b47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	6163      	str	r3, [r4, #20]
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	6120      	str	r0, [r4, #16]
 800b48a:	b15b      	cbz	r3, 800b4a4 <__smakebuf_r+0x74>
 800b48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b490:	4630      	mov	r0, r6
 800b492:	f000 f8a3 	bl	800b5dc <_isatty_r>
 800b496:	b128      	cbz	r0, 800b4a4 <__smakebuf_r+0x74>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	89a0      	ldrh	r0, [r4, #12]
 800b4a6:	4305      	orrs	r5, r0
 800b4a8:	81a5      	strh	r5, [r4, #12]
 800b4aa:	e7cd      	b.n	800b448 <__smakebuf_r+0x18>
 800b4ac:	08009fb9 	.word	0x08009fb9

0800b4b0 <__ascii_mbtowc>:
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	b901      	cbnz	r1, 800b4b6 <__ascii_mbtowc+0x6>
 800b4b4:	a901      	add	r1, sp, #4
 800b4b6:	b142      	cbz	r2, 800b4ca <__ascii_mbtowc+0x1a>
 800b4b8:	b14b      	cbz	r3, 800b4ce <__ascii_mbtowc+0x1e>
 800b4ba:	7813      	ldrb	r3, [r2, #0]
 800b4bc:	600b      	str	r3, [r1, #0]
 800b4be:	7812      	ldrb	r2, [r2, #0]
 800b4c0:	1e10      	subs	r0, r2, #0
 800b4c2:	bf18      	it	ne
 800b4c4:	2001      	movne	r0, #1
 800b4c6:	b002      	add	sp, #8
 800b4c8:	4770      	bx	lr
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	e7fb      	b.n	800b4c6 <__ascii_mbtowc+0x16>
 800b4ce:	f06f 0001 	mvn.w	r0, #1
 800b4d2:	e7f8      	b.n	800b4c6 <__ascii_mbtowc+0x16>

0800b4d4 <memmove>:
 800b4d4:	4288      	cmp	r0, r1
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	eb01 0402 	add.w	r4, r1, r2
 800b4dc:	d902      	bls.n	800b4e4 <memmove+0x10>
 800b4de:	4284      	cmp	r4, r0
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	d807      	bhi.n	800b4f4 <memmove+0x20>
 800b4e4:	1e43      	subs	r3, r0, #1
 800b4e6:	42a1      	cmp	r1, r4
 800b4e8:	d008      	beq.n	800b4fc <memmove+0x28>
 800b4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4f2:	e7f8      	b.n	800b4e6 <memmove+0x12>
 800b4f4:	4402      	add	r2, r0
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	428a      	cmp	r2, r1
 800b4fa:	d100      	bne.n	800b4fe <memmove+0x2a>
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b506:	e7f7      	b.n	800b4f8 <memmove+0x24>

0800b508 <__malloc_lock>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__malloc_lock+0x8>)
 800b50a:	f7fe be2c 	b.w	800a166 <__retarget_lock_acquire_recursive>
 800b50e:	bf00      	nop
 800b510:	200004cc 	.word	0x200004cc

0800b514 <__malloc_unlock>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__malloc_unlock+0x8>)
 800b516:	f7fe be27 	b.w	800a168 <__retarget_lock_release_recursive>
 800b51a:	bf00      	nop
 800b51c:	200004cc 	.word	0x200004cc

0800b520 <_realloc_r>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	4607      	mov	r7, r0
 800b524:	4614      	mov	r4, r2
 800b526:	460e      	mov	r6, r1
 800b528:	b921      	cbnz	r1, 800b534 <_realloc_r+0x14>
 800b52a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b52e:	4611      	mov	r1, r2
 800b530:	f7ff ba10 	b.w	800a954 <_malloc_r>
 800b534:	b922      	cbnz	r2, 800b540 <_realloc_r+0x20>
 800b536:	f7ff f9bd 	bl	800a8b4 <_free_r>
 800b53a:	4625      	mov	r5, r4
 800b53c:	4628      	mov	r0, r5
 800b53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b540:	f000 f85c 	bl	800b5fc <_malloc_usable_size_r>
 800b544:	42a0      	cmp	r0, r4
 800b546:	d20f      	bcs.n	800b568 <_realloc_r+0x48>
 800b548:	4621      	mov	r1, r4
 800b54a:	4638      	mov	r0, r7
 800b54c:	f7ff fa02 	bl	800a954 <_malloc_r>
 800b550:	4605      	mov	r5, r0
 800b552:	2800      	cmp	r0, #0
 800b554:	d0f2      	beq.n	800b53c <_realloc_r+0x1c>
 800b556:	4631      	mov	r1, r6
 800b558:	4622      	mov	r2, r4
 800b55a:	f7fe fe0f 	bl	800a17c <memcpy>
 800b55e:	4631      	mov	r1, r6
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff f9a7 	bl	800a8b4 <_free_r>
 800b566:	e7e9      	b.n	800b53c <_realloc_r+0x1c>
 800b568:	4635      	mov	r5, r6
 800b56a:	e7e7      	b.n	800b53c <_realloc_r+0x1c>

0800b56c <_read_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4d07      	ldr	r5, [pc, #28]	; (800b58c <_read_r+0x20>)
 800b570:	4604      	mov	r4, r0
 800b572:	4608      	mov	r0, r1
 800b574:	4611      	mov	r1, r2
 800b576:	2200      	movs	r2, #0
 800b578:	602a      	str	r2, [r5, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f7f6 fb42 	bl	8001c04 <_read>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	d102      	bne.n	800b58a <_read_r+0x1e>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	b103      	cbz	r3, 800b58a <_read_r+0x1e>
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	200004d4 	.word	0x200004d4

0800b590 <__ascii_wctomb>:
 800b590:	b149      	cbz	r1, 800b5a6 <__ascii_wctomb+0x16>
 800b592:	2aff      	cmp	r2, #255	; 0xff
 800b594:	bf85      	ittet	hi
 800b596:	238a      	movhi	r3, #138	; 0x8a
 800b598:	6003      	strhi	r3, [r0, #0]
 800b59a:	700a      	strbls	r2, [r1, #0]
 800b59c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5a0:	bf98      	it	ls
 800b5a2:	2001      	movls	r0, #1
 800b5a4:	4770      	bx	lr
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4770      	bx	lr

0800b5aa <abort>:
 800b5aa:	b508      	push	{r3, lr}
 800b5ac:	2006      	movs	r0, #6
 800b5ae:	f000 f855 	bl	800b65c <raise>
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	f7f6 fb1c 	bl	8001bf0 <_exit>

0800b5b8 <_fstat_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	; (800b5d8 <_fstat_r+0x20>)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	f7f6 fb62 	bl	8001c8e <_fstat>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d102      	bne.n	800b5d4 <_fstat_r+0x1c>
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	b103      	cbz	r3, 800b5d4 <_fstat_r+0x1c>
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200004d4 	.word	0x200004d4

0800b5dc <_isatty_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_isatty_r+0x1c>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7f6 fb61 	bl	8001cae <_isatty>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_isatty_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_isatty_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	200004d4 	.word	0x200004d4

0800b5fc <_malloc_usable_size_r>:
 800b5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b600:	1f18      	subs	r0, r3, #4
 800b602:	2b00      	cmp	r3, #0
 800b604:	bfbc      	itt	lt
 800b606:	580b      	ldrlt	r3, [r1, r0]
 800b608:	18c0      	addlt	r0, r0, r3
 800b60a:	4770      	bx	lr

0800b60c <_raise_r>:
 800b60c:	291f      	cmp	r1, #31
 800b60e:	b538      	push	{r3, r4, r5, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	460d      	mov	r5, r1
 800b614:	d904      	bls.n	800b620 <_raise_r+0x14>
 800b616:	2316      	movs	r3, #22
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b622:	b112      	cbz	r2, 800b62a <_raise_r+0x1e>
 800b624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b628:	b94b      	cbnz	r3, 800b63e <_raise_r+0x32>
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f830 	bl	800b690 <_getpid_r>
 800b630:	462a      	mov	r2, r5
 800b632:	4601      	mov	r1, r0
 800b634:	4620      	mov	r0, r4
 800b636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63a:	f000 b817 	b.w	800b66c <_kill_r>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d00a      	beq.n	800b658 <_raise_r+0x4c>
 800b642:	1c59      	adds	r1, r3, #1
 800b644:	d103      	bne.n	800b64e <_raise_r+0x42>
 800b646:	2316      	movs	r3, #22
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	2001      	movs	r0, #1
 800b64c:	e7e7      	b.n	800b61e <_raise_r+0x12>
 800b64e:	2400      	movs	r4, #0
 800b650:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b654:	4628      	mov	r0, r5
 800b656:	4798      	blx	r3
 800b658:	2000      	movs	r0, #0
 800b65a:	e7e0      	b.n	800b61e <_raise_r+0x12>

0800b65c <raise>:
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <raise+0xc>)
 800b65e:	4601      	mov	r1, r0
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	f7ff bfd3 	b.w	800b60c <_raise_r>
 800b666:	bf00      	nop
 800b668:	2000000c 	.word	0x2000000c

0800b66c <_kill_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	; (800b68c <_kill_r+0x20>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	602b      	str	r3, [r5, #0]
 800b67a:	f7f6 faa9 	bl	8001bd0 <_kill>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d102      	bne.n	800b688 <_kill_r+0x1c>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	b103      	cbz	r3, 800b688 <_kill_r+0x1c>
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	bf00      	nop
 800b68c:	200004d4 	.word	0x200004d4

0800b690 <_getpid_r>:
 800b690:	f7f6 ba96 	b.w	8001bc0 <_getpid>

0800b694 <_init>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	bf00      	nop
 800b698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69a:	bc08      	pop	{r3}
 800b69c:	469e      	mov	lr, r3
 800b69e:	4770      	bx	lr

0800b6a0 <_fini>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr
