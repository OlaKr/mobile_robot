
robotmobile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006c50  08006c50  00016c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800708c  0800708c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007094  08007094  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800709c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001dc  08007278  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007278  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001087f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002143  00000000  00000000  00030a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00032bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022db1  00000000  00000000  000345a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa66  00000000  00000000  00057359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d23dc  00000000  00000000  00066dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013919b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004884  00000000  00000000  001391f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c34 	.word	0x08006c34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006c34 	.word	0x08006c34

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__io_putchar>:
//	}
//	else return false;
//}

int __io_putchar(int sign)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if(sign=='\n')
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d109      	bne.n	8000f22 <__io_putchar+0x22>
	{
		uint8_t sign2='\r';
 8000f0e:	230d      	movs	r3, #13
 8000f10:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &sign2, 1, HAL_MAX_DELAY);
 8000f12:	f107 010f 	add.w	r1, r7, #15
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <__io_putchar+0x3c>)
 8000f1e:	f002 f952 	bl	80031c6 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&sign, 1, HAL_MAX_DELAY);
 8000f22:	1d39      	adds	r1, r7, #4
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <__io_putchar+0x3c>)
 8000f2c:	f002 f94b 	bl	80031c6 <HAL_UART_Transmit>
	return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200002a8 	.word	0x200002a8

08000f40 <line_append>:

static char line_buffer[LINE_MAX_LENGTH+1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	if(value=='\r'||value=='\n')
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b0d      	cmp	r3, #13
 8000f4e:	d002      	beq.n	8000f56 <line_append+0x16>
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b0a      	cmp	r3, #10
 8000f54:	d132      	bne.n	8000fbc <line_append+0x7c>
	{
		if(line_length>0)
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <line_append+0xa4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03e      	beq.n	8000fdc <line_append+0x9c>
		{
			line_buffer[line_length]='\0';
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <line_append+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <line_append+0xa8>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	54d1      	strb	r1, [r2, r3]
			if (strcmp(line_buffer, "turn on")==0){
 8000f68:	4920      	ldr	r1, [pc, #128]	; (8000fec <line_append+0xac>)
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <line_append+0xa8>)
 8000f6c:	f7ff f950 	bl	8000210 <strcmp>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <line_append+0x4a>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <line_append+0xb0>)
 8000f7c:	f000 ff74 	bl	8001e68 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8000f80:	4919      	ldr	r1, [pc, #100]	; (8000fe8 <line_append+0xa8>)
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <line_append+0xb4>)
 8000f84:	f003 fdd8 	bl	8004b38 <iprintf>
 8000f88:	e014      	b.n	8000fb4 <line_append+0x74>
			}
			else if(strcmp(line_buffer, "turn off")==0){
 8000f8a:	491b      	ldr	r1, [pc, #108]	; (8000ff8 <line_append+0xb8>)
 8000f8c:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <line_append+0xa8>)
 8000f8e:	f7ff f93f 	bl	8000210 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <line_append+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <line_append+0xb0>)
 8000f9e:	f000 ff63 	bl	8001e68 <HAL_GPIO_WritePin>
				printf("Command: %s\n", line_buffer);
 8000fa2:	4911      	ldr	r1, [pc, #68]	; (8000fe8 <line_append+0xa8>)
 8000fa4:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <line_append+0xb4>)
 8000fa6:	f003 fdc7 	bl	8004b38 <iprintf>
 8000faa:	e003      	b.n	8000fb4 <line_append+0x74>
			}
//			else if(strcmp(line_buffer, "haha")==0){
//				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
//			}
			else printf("Unrecognized command: %s\n", line_buffer);
 8000fac:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <line_append+0xa8>)
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <line_append+0xbc>)
 8000fb0:	f003 fdc2 	bl	8004b38 <iprintf>
			line_length=0;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <line_append+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		if(line_length>0)
 8000fba:	e00f      	b.n	8000fdc <line_append+0x9c>
		}
	}
	else
	{
		if(line_length>=LINE_MAX_LENGTH)
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <line_append+0xa4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b4f      	cmp	r3, #79	; 0x4f
 8000fc2:	d902      	bls.n	8000fca <line_append+0x8a>
		{
			line_length=0;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <line_append+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++]=value;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <line_append+0xa4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <line_append+0xa4>)
 8000fd2:	600a      	str	r2, [r1, #0]
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <line_append+0xa8>)
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	54ca      	strb	r2, [r1, r3]
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000024c 	.word	0x2000024c
 8000fe8:	200001f8 	.word	0x200001f8
 8000fec:	08006c50 	.word	0x08006c50
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	08006c58 	.word	0x08006c58
 8000ff8:	08006c68 	.word	0x08006c68
 8000ffc:	08006c74 	.word	0x08006c74

08001000 <HAL_UART_RxCpltCallback>:

uint8_t uart_rx_buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_UART_RxCpltCallback+0x2c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d109      	bne.n	8001024 <HAL_UART_RxCpltCallback+0x24>
//			str1[a]=uart_rx_buffer;
//			a++;
//			flag=1;
//			line_append(uart_rx_buffer);
//		}
		line_append(uart_rx_buffer);
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_UART_RxCpltCallback+0x30>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff93 	bl	8000f40 <line_append>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buffer,1);
 800101a:	2201      	movs	r2, #1
 800101c:	4904      	ldr	r1, [pc, #16]	; (8001030 <HAL_UART_RxCpltCallback+0x30>)
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <HAL_UART_RxCpltCallback+0x2c>)
 8001020:	f002 fa05 	bl	800342e <HAL_UART_Receive_IT>
	}
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002a8 	.word	0x200002a8
 8001030:	200002ec 	.word	0x200002ec

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f000 fb6b 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f817 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 f8f9 	bl	8001238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001046:	f000 f8cd 	bl	80011e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800104a:	f000 f87d 	bl	8001148 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("systick=%lu\n", HAL_GetTick());
	  uint8_t value;
	  if(HAL_UART_Receive(&huart2, &value, 1, 0)==HAL_OK) line_append(value);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	2300      	movs	r3, #0
 8001052:	2201      	movs	r2, #1
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <main+0x38>)
 8001056:	f002 f948 	bl	80032ea <HAL_UART_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f6      	bne.n	800104e <main+0x1a>
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff6c 	bl	8000f40 <line_append>
  {
 8001068:	e7f1      	b.n	800104e <main+0x1a>
 800106a:	bf00      	nop
 800106c:	200002a8 	.word	0x200002a8

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 f8e8 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemClock_Config+0xd0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <SystemClock_Config+0xd0>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <SystemClock_Config+0xd0>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <SystemClock_Config+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <SystemClock_Config+0xd4>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <SystemClock_Config+0xd4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80010e8:	2350      	movs	r3, #80	; 0x50
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f95d 	bl	80023bc <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001108:	f000 f8fc 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fed1 	bl	8001ed0 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001134:	f000 f8e6 	bl	8001304 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	; 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_TIM2_Init+0x98>)
 8001166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM2_Init+0x98>)
 800116e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001172:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM2_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM2_Init+0x98>)
 800117c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001180:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_TIM2_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800118e:	4814      	ldr	r0, [pc, #80]	; (80011e0 <MX_TIM2_Init+0x98>)
 8001190:	f001 fbb2 	bl	80028f8 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800119a:	f000 f8b3 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_TIM2_Init+0x98>)
 80011ac:	f001 fcfb 	bl	8002ba6 <HAL_TIM_ConfigClockSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011b6:	f000 f8a5 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM2_Init+0x98>)
 80011c8:	f001 ff20 	bl	800300c <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011d2:	f000 f897 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000260 	.word	0x20000260

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f001 ff86 	bl	800312c <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f86d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002a8 	.word	0x200002a8
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_GPIO_Init+0xc0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <MX_GPIO_Init+0xc4>)
 800128e:	f000 fdeb 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2120      	movs	r1, #32
 8001296:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_GPIO_Init+0xc8>)
 8001298:	f000 fde6 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_GPIO_Init+0xc4>)
 80012b2:	f000 fc45 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 80012b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xc4>)
 80012d0:	f000 fc36 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0xc8>)
 80012ec:	f000 fc28 	bl	8001b40 <HAL_GPIO_Init>

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020000 	.word	0x40020000

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d115      	bne.n	800139e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_TIM_Base_MspInit+0x48>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_TIM_Base_MspInit+0x48>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0x48>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	201c      	movs	r0, #28
 8001394:	f000 fb0b 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001398:	201c      	movs	r0, #28
 800139a:	f000 fb24 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_UART_MspInit+0xb4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d143      	bne.n	8001456 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_UART_MspInit+0xb8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001406:	2304      	movs	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <HAL_UART_MspInit+0xbc>)
 8001422:	f000 fb8d 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001426:	2308      	movs	r3, #8
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <HAL_UART_MspInit+0xbc>)
 8001442:	f000 fb7d 	bl	8001b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2026      	movs	r0, #38	; 0x26
 800144c:	f000 faaf 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001450:	2026      	movs	r0, #38	; 0x26
 8001452:	f000 fac8 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static int clk_div;
  clk_div++;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <SysTick_Handler+0x2c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <SysTick_Handler+0x2c>)
 80014c0:	6013      	str	r3, [r2, #0]
  if (clk_div >= 100) {
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <SysTick_Handler+0x2c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b63      	cmp	r3, #99	; 0x63
 80014c8:	dd06      	ble.n	80014d8 <SysTick_Handler+0x24>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014ca:	2120      	movs	r1, #32
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <SysTick_Handler+0x30>)
 80014ce:	f000 fce4 	bl	8001e9a <HAL_GPIO_TogglePin>
	  clk_div = 0;
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <SysTick_Handler+0x2c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f96e 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000250 	.word	0x20000250
 80014e4:	40020000 	.word	0x40020000

080014e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM2_IRQHandler+0x10>)
 80014ee:	f001 fa52 	bl	8002996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000260 	.word	0x20000260

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART2_IRQHandler+0x10>)
 8001502:	f001 ffc5 	bl	8003490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002a8 	.word	0x200002a8

08001510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_kill>:

int _kill(int pid, int sig)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800152a:	f002 fe69 	bl	8004200 <__errno>
 800152e:	4603      	mov	r3, r0
 8001530:	2216      	movs	r2, #22
 8001532:	601a      	str	r2, [r3, #0]
	return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_exit>:

void _exit (int status)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ffe7 	bl	8001520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001552:	e7fe      	b.n	8001552 <_exit+0x12>

08001554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e00a      	b.n	800157c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001566:	f3af 8000 	nop.w
 800156a:	4601      	mov	r1, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf0      	blt.n	8001566 <_read+0x12>
	}

return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e009      	b.n	80015b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fca9 	bl	8000f00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf1      	blt.n	80015a0 <_write+0x12>
	}
	return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_close>:

int _close(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ee:	605a      	str	r2, [r3, #4]
	return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f002 fdce 	bl	8004200 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20020000 	.word	0x20020000
 8001690:	00000400 	.word	0x00000400
 8001694:	20000254 	.word	0x20000254
 8001698:	20000308 	.word	0x20000308

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ea:	f7ff ffd7 	bl	800169c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f002 fd8d 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff fc9f 	bl	8001034 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001704:	0800709c 	.word	0x0800709c
  ldr r2, =_sbss
 8001708:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800170c:	20000304 	.word	0x20000304

08001710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_Init+0x40>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_Init+0x40>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_Init+0x40>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f92b 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f808 	bl	8001758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fde2 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_InitTick+0x54>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x58>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f943 	bl	8001a02 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f90b 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <HAL_InitTick+0x5c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008
 80017dc:	200002f0 	.word	0x200002f0

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200002f0 	.word	0x200002f0

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff3e 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff31 	bl	800185c <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff feda 	bl	80017e0 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d008      	beq.n	8001a4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e052      	b.n	8001af2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0216 	bic.w	r2, r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_DMA_Abort+0x62>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0208 	bic.w	r2, r2, #8
 8001a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9c:	e013      	b.n	8001ac6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9e:	f7ff fe9f 	bl	80017e0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d90c      	bls.n	8001ac6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e015      	b.n	8001af2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e4      	bne.n	8001a9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	223f      	movs	r2, #63	; 0x3f
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d004      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e00c      	b.n	8001b32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e165      	b.n	8001e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8154 	bne.w	8001e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ae 	beq.w	8001e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_GPIO_Init+0x310>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x314>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x318>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x20a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x206>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x320>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae96 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0cc      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d90c      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d044      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e067      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4934      	ldr	r1, [pc, #208]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fc0e 	bl	80017e0 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff fc0a 	bl	80017e0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d20c      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f855 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb6e 	bl	8001758 <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00
 800208c:	40023800 	.word	0x40023800
 8002090:	08006c90 	.word	0x08006c90
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08006ca0 	.word	0x08006ca0

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08006ca0 	.word	0x08006ca0

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800210c:	2600      	movs	r6, #0
 800210e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002110:	2600      	movs	r6, #0
 8002112:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002114:	2600      	movs	r6, #0
 8002116:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002118:	2600      	movs	r6, #0
 800211a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211c:	2600      	movs	r6, #0
 800211e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002120:	4ea3      	ldr	r6, [pc, #652]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002122:	68b6      	ldr	r6, [r6, #8]
 8002124:	f006 060c 	and.w	r6, r6, #12
 8002128:	2e0c      	cmp	r6, #12
 800212a:	f200 8137 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x298>
 800212e:	f20f 0c08 	addw	ip, pc, #8
 8002132:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002136:	bf00      	nop
 8002138:	0800216d 	.word	0x0800216d
 800213c:	0800239d 	.word	0x0800239d
 8002140:	0800239d 	.word	0x0800239d
 8002144:	0800239d 	.word	0x0800239d
 8002148:	08002173 	.word	0x08002173
 800214c:	0800239d 	.word	0x0800239d
 8002150:	0800239d 	.word	0x0800239d
 8002154:	0800239d 	.word	0x0800239d
 8002158:	08002179 	.word	0x08002179
 800215c:	0800239d 	.word	0x0800239d
 8002160:	0800239d 	.word	0x0800239d
 8002164:	0800239d 	.word	0x0800239d
 8002168:	0800228f 	.word	0x0800228f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800216e:	613b      	str	r3, [r7, #16]
       break;
 8002170:	e117      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002172:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e114      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002180:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002182:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d024      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218e:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	461a      	mov	r2, r3
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800219e:	f04f 0500 	mov.w	r5, #0
 80021a2:	ea02 0004 	and.w	r0, r2, r4
 80021a6:	ea03 0105 	and.w	r1, r3, r5
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021ac:	fb03 f201 	mul.w	r2, r3, r1
 80021b0:	2300      	movs	r3, #0
 80021b2:	fb03 f300 	mul.w	r3, r3, r0
 80021b6:	4413      	add	r3, r2
 80021b8:	4a7f      	ldr	r2, [pc, #508]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021ba:	fba0 0102 	umull	r0, r1, r0, r2
 80021be:	440b      	add	r3, r1
 80021c0:	4619      	mov	r1, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f7fe fd1d 	bl	8000c08 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4613      	mov	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e04c      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	461a      	mov	r2, r3
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	ea02 0800 	and.w	r8, r2, r0
 80021f0:	ea03 0901 	and.w	r9, r3, r1
 80021f4:	4640      	mov	r0, r8
 80021f6:	4649      	mov	r1, r9
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	014b      	lsls	r3, r1, #5
 8002202:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002206:	0142      	lsls	r2, r0, #5
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	ebb0 0008 	subs.w	r0, r0, r8
 8002210:	eb61 0109 	sbc.w	r1, r1, r9
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	018b      	lsls	r3, r1, #6
 800221e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002222:	0182      	lsls	r2, r0, #6
 8002224:	1a12      	subs	r2, r2, r0
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	00d9      	lsls	r1, r3, #3
 8002234:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002238:	00d0      	lsls	r0, r2, #3
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	eb12 0208 	adds.w	r2, r2, r8
 8002242:	eb43 0309 	adc.w	r3, r3, r9
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0299      	lsls	r1, r3, #10
 8002250:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002254:	0290      	lsls	r0, r2, #10
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f7fe fccf 	bl	8000c08 <__aeabi_uldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4613      	mov	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0c1b      	lsrs	r3, r3, #16
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	3301      	adds	r3, #1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	613b      	str	r3, [r7, #16]
      break;
 800228c:	e089      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228e:	4948      	ldr	r1, [pc, #288]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002290:	6849      	ldr	r1, [r1, #4]
 8002292:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002296:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002298:	4945      	ldr	r1, [pc, #276]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800229a:	6849      	ldr	r1, [r1, #4]
 800229c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022a0:	2900      	cmp	r1, #0
 80022a2:	d024      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a4:	4942      	ldr	r1, [pc, #264]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022a6:	6849      	ldr	r1, [r1, #4]
 80022a8:	0989      	lsrs	r1, r1, #6
 80022aa:	4608      	mov	r0, r1
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022b4:	f04f 0500 	mov.w	r5, #0
 80022b8:	ea00 0204 	and.w	r2, r0, r4
 80022bc:	ea01 0305 	and.w	r3, r1, r5
 80022c0:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80022c2:	fb01 f003 	mul.w	r0, r1, r3
 80022c6:	2100      	movs	r1, #0
 80022c8:	fb01 f102 	mul.w	r1, r1, r2
 80022cc:	1844      	adds	r4, r0, r1
 80022ce:	493a      	ldr	r1, [pc, #232]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80022d0:	fba2 0101 	umull	r0, r1, r2, r1
 80022d4:	1863      	adds	r3, r4, r1
 80022d6:	4619      	mov	r1, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	461a      	mov	r2, r3
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f7fe fc92 	bl	8000c08 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e04a      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	461a      	mov	r2, r3
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	ea02 0400 	and.w	r4, r2, r0
 8002306:	ea03 0501 	and.w	r5, r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	014b      	lsls	r3, r1, #5
 8002318:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800231c:	0142      	lsls	r2, r0, #5
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	1b00      	subs	r0, r0, r4
 8002324:	eb61 0105 	sbc.w	r1, r1, r5
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	018b      	lsls	r3, r1, #6
 8002332:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002336:	0182      	lsls	r2, r0, #6
 8002338:	1a12      	subs	r2, r2, r0
 800233a:	eb63 0301 	sbc.w	r3, r3, r1
 800233e:	f04f 0000 	mov.w	r0, #0
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	00d9      	lsls	r1, r3, #3
 8002348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800234c:	00d0      	lsls	r0, r2, #3
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	1912      	adds	r2, r2, r4
 8002354:	eb45 0303 	adc.w	r3, r5, r3
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	0299      	lsls	r1, r3, #10
 8002362:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002366:	0290      	lsls	r0, r2, #10
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	461a      	mov	r2, r3
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f7fe fc46 	bl	8000c08 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4613      	mov	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0f1b      	lsrs	r3, r3, #28
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	613b      	str	r3, [r7, #16]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800239e:	613b      	str	r3, [r7, #16]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	693b      	ldr	r3, [r7, #16]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	017d7840 	.word	0x017d7840

080023bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e28d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8083 	beq.w	80024e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d019      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e8:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023f4:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x124>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e25a      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x90>
 800243e:	4b7c      	ldr	r3, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7b      	ldr	r2, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xb4>
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6c      	ldr	r3, [pc, #432]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6b      	ldr	r2, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff f9a6 	bl	80017e0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f9a2 	bl	80017e0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e21f      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xdc>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff f992 	bl	80017e0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f98e 	bl	80017e0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e20b      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06f      	beq.n	80025ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002506:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1d3      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x278>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f93b 	bl	80017e0 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff f937 	bl	80017e0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1b4      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x278>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff f91a 	bl	80017e0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff f916 	bl	80017e0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e193      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f8fa 	bl	80017e0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff f8f6 	bl	80017e0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e173      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x234>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x27c>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff f8e3 	bl	80017e0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f8df 	bl	80017e0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e15c      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a7e      	ldr	r2, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b7c      	ldr	r3, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b79      	ldr	r3, [pc, #484]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7ff f89f 	bl	80017e0 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7ff f89b 	bl	80017e0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e118      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x31e>
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x340>
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a60      	ldr	r2, [pc, #384]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5d      	ldr	r2, [pc, #372]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026fc:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7ff f860 	bl	80017e0 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7ff f85c 	bl	80017e0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0d7      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x368>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f84a 	bl	80017e0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff f846 	bl	80017e0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0c1      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b40      	ldr	r3, [pc, #256]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ad 	beq.w	80028e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d145      	bne.n	800282e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f81a 	bl	80017e0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f816 	bl	80017e0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e093      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe ffeb 	bl	80017e0 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe ffe7 	bl	80017e0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e064      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
 800282c:	e05c      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe ffd4 	bl	80017e0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe ffd0 	bl	80017e0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e040      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_RCC_OscConfig+0x538>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d030      	beq.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d129      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d119      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10f      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fd1e 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fa2e 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d122      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11b      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0202 	mvn.w	r2, #2
 80029c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9bf 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 80029de:	e005      	b.n	80029ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f9b1 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9c2 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d122      	bne.n	8002a46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0204 	mvn.w	r2, #4
 8002a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f995 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f987 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f998 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d122      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11b      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0208 	mvn.w	r2, #8
 8002a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f96b 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f95d 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f96e 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d122      	bne.n	8002aee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0210 	mvn.w	r2, #16
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f941 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f933 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f944 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0201 	mvn.w	r2, #1
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f90d 	bl	8002d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fae9 	bl	8003118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f909 	bl	8002d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d10e      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0220 	mvn.w	r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fab3 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_ConfigClockSource+0x1c>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0b4      	b.n	8002d2c <HAL_TIM_ConfigClockSource+0x186>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfa:	d03e      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xd4>
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	f200 8087 	bhi.w	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	f000 8086 	beq.w	8002d18 <HAL_TIM_ConfigClockSource+0x172>
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c10:	d87f      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c12:	2b70      	cmp	r3, #112	; 0x70
 8002c14:	d01a      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0xa6>
 8002c16:	2b70      	cmp	r3, #112	; 0x70
 8002c18:	d87b      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1a:	2b60      	cmp	r3, #96	; 0x60
 8002c1c:	d050      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0x11a>
 8002c1e:	2b60      	cmp	r3, #96	; 0x60
 8002c20:	d877      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c22:	2b50      	cmp	r3, #80	; 0x50
 8002c24:	d03c      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xfa>
 8002c26:	2b50      	cmp	r3, #80	; 0x50
 8002c28:	d873      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d058      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x13a>
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d86f      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d064      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x15a>
 8002c36:	2b30      	cmp	r3, #48	; 0x30
 8002c38:	d86b      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d060      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d867      	bhi.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d05c      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x15a>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d05a      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x15a>
 8002c4a:	e062      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f000 f9b6 	bl	8002fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
      break;
 8002c78:	e04f      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f000 f99f 	bl	8002fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9c:	609a      	str	r2, [r3, #8]
      break;
 8002c9e:	e03c      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f000 f913 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2150      	movs	r1, #80	; 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f96c 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e02c      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f000 f932 	bl	8002f36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2160      	movs	r1, #96	; 0x60
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f95c 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002cde:	e01c      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f000 f8f3 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f94c 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002cfe:	e00c      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 f943 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002d10:	e003      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      break;
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d00f      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3d      	ldr	r2, [pc, #244]	; (8002eb0 <TIM_Base_SetConfig+0x118>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <TIM_Base_SetConfig+0x11c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <TIM_Base_SetConfig+0x120>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d027      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <TIM_Base_SetConfig+0x118>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d023      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <TIM_Base_SetConfig+0x11c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <TIM_Base_SetConfig+0x120>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <TIM_Base_SetConfig+0x128>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0x134>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40010400 	.word	0x40010400
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800
 8002ecc:	40001800 	.word	0x40001800
 8002ed0:	40001c00 	.word	0x40001c00
 8002ed4:	40002000 	.word	0x40002000

08002ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 030a 	bic.w	r3, r3, #10
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0210 	bic.w	r2, r3, #16
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	031b      	lsls	r3, r3, #12
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f043 0307 	orr.w	r3, r3, #7
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003020:	2302      	movs	r3, #2
 8003022:	e05a      	b.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d022      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d01d      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d018      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d009      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10c      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40010400 	.word	0x40010400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40001800 	.word	0x40001800

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03f      	b.n	80031be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f92a 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fe7d 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	; 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d17c      	bne.n	80032e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Transmit+0x2c>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e075      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x3e>
 8003200:	2302      	movs	r3, #2
 8003202:	e06e      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321a:	f7fe fae1 	bl	80017e0 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003234:	d108      	bne.n	8003248 <HAL_UART_Transmit+0x82>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003258:	e02a      	b.n	80032b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fbc1 	bl	80039ec <UART_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e036      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cf      	bne.n	800325a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fb91 	bl	80039ec <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08a      	sub	sp, #40	; 0x28
 80032ee:	af02      	add	r7, sp, #8
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 808c 	bne.w	8003424 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Receive+0x2e>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e084      	b.n	8003426 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_UART_Receive+0x40>
 8003326:	2302      	movs	r3, #2
 8003328:	e07d      	b.n	8003426 <HAL_UART_Receive+0x13c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2222      	movs	r2, #34	; 0x22
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fe fa4b 	bl	80017e0 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d108      	bne.n	8003374 <HAL_UART_Receive+0x8a>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e003      	b.n	800337c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003384:	e043      	b.n	800340e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	2120      	movs	r1, #32
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fb2b 	bl	80039ec <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e042      	b.n	8003426 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	3302      	adds	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e01f      	b.n	8003400 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d007      	beq.n	80033da <HAL_UART_Receive+0xf0>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_UART_Receive+0xfe>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e008      	b.n	80033fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3301      	adds	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1b6      	bne.n	8003386 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	d11d      	bne.n	8003484 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_UART_Receive_IT+0x26>
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e016      	b.n	8003486 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_UART_Receive_IT+0x38>
 8003462:	2302      	movs	r3, #2
 8003464:	e00f      	b.n	8003486 <HAL_UART_Receive_IT+0x58>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	461a      	mov	r2, r3
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fb24 	bl	8003ac8 <UART_Start_Receive_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	e000      	b.n	8003486 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	; 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_UART_IRQHandler+0x66>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fc03 	bl	8003cfa <UART_Receive_IT>
      return;
 80034f4:	e256      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80de 	beq.w	80036bc <HAL_UART_IRQHandler+0x22c>
 8003500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80d1 	beq.w	80036bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xae>
 8003526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xd2>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xf6>
 800356e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d011      	beq.n	80035b6 <HAL_UART_IRQHandler+0x126>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 81ed 	beq.w	800399a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x14e>
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb8e 	bl	8003cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_UART_IRQHandler+0x17a>
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04f      	beq.n	80036aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa96 	bl	8003b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d141      	bne.n	80036a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800364a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800364e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1d9      	bne.n	800361e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4a7d      	ldr	r2, [pc, #500]	; (800386c <HAL_UART_IRQHandler+0x3dc>)
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fa3b 	bl	8001afa <HAL_DMA_Abort_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00e      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f990 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e00a      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f98c 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e006      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f988 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036b6:	e170      	b.n	800399a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	bf00      	nop
    return;
 80036ba:	e16e      	b.n	800399a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	f040 814a 	bne.w	800395a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8143 	beq.w	800395a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 813c 	beq.w	800395a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	f040 80b4 	bne.w	8003870 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8140 	beq.w	800399e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003726:	429a      	cmp	r2, r3
 8003728:	f080 8139 	bcs.w	800399e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003732:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	f000 8088 	beq.w	8003852 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800376e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1d9      	bne.n	8003742 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800379e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e1      	bne.n	800378e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003834:	65ba      	str	r2, [r7, #88]	; 0x58
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800383a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe f8e4 	bl	8001a1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8b6 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003868:	e099      	b.n	800399e <HAL_UART_IRQHandler+0x50e>
 800386a:	bf00      	nop
 800386c:	08003c03 	.word	0x08003c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 808b 	beq.w	80039a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800388c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8086 	beq.w	80039a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ba:	647a      	str	r2, [r7, #68]	; 0x44
 80038bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e3      	bne.n	8003896 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	623b      	str	r3, [r7, #32]
   return(result);
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038f2:	633a      	str	r2, [r7, #48]	; 0x30
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	60fb      	str	r3, [r7, #12]
   return(result);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003938:	61fa      	str	r2, [r7, #28]
 800393a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	617b      	str	r3, [r7, #20]
   return(result);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e3      	bne.n	8003914 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800394c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f83e 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003958:	e023      	b.n	80039a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_UART_IRQHandler+0x4ea>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f959 	bl	8003c2a <UART_Transmit_IT>
    return;
 8003978:	e014      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <HAL_UART_IRQHandler+0x514>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f999 	bl	8003cca <UART_EndTransmit_IT>
    return;
 8003998:	e004      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
    return;
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
      return;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
      return;
 80039a2:	bf00      	nop
  }
}
 80039a4:	37e8      	adds	r7, #232	; 0xe8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b090      	sub	sp, #64	; 0x40
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fc:	e050      	b.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d04c      	beq.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0c:	f7fd fee8 	bl	80017e0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d241      	bcs.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a70:	623a      	str	r2, [r7, #32]
 8003a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	69f9      	ldr	r1, [r7, #28]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e00f      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d09f      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3740      	adds	r7, #64	; 0x40
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2222      	movs	r2, #34	; 0x22
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b095      	sub	sp, #84	; 0x54
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b64:	643a      	str	r2, [r7, #64]	; 0x40
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3314      	adds	r3, #20
 8003b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d119      	bne.n	8003be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd4:	61ba      	str	r2, [r7, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	613b      	str	r3, [r7, #16]
   return(result);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bf6:	bf00      	nop
 8003bf8:	3754      	adds	r7, #84	; 0x54
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fecf 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b21      	cmp	r3, #33	; 0x21
 8003c3c:	d13e      	bne.n	8003cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d114      	bne.n	8003c72 <UART_Transmit_IT+0x48>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d110      	bne.n	8003c72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]
 8003c70:	e008      	b.n	8003c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6211      	str	r1, [r2, #32]
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4619      	mov	r1, r3
 8003c92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10f      	bne.n	8003cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fe5e 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b08c      	sub	sp, #48	; 0x30
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b22      	cmp	r3, #34	; 0x22
 8003d0c:	f040 80ab 	bne.w	8003e66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d117      	bne.n	8003d4a <UART_Receive_IT+0x50>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
 8003d48:	e026      	b.n	8003d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d007      	beq.n	8003d6e <UART_Receive_IT+0x74>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <UART_Receive_IT+0x82>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e008      	b.n	8003d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d15a      	bne.n	8003e62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0220 	bic.w	r2, r2, #32
 8003dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d135      	bne.n	8003e58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	613b      	str	r3, [r7, #16]
   return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f023 0310 	bic.w	r3, r3, #16
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	623a      	str	r2, [r7, #32]
 8003e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	69f9      	ldr	r1, [r7, #28]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d10a      	bne.n	8003e4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fdbf 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
 8003e56:	e002      	b.n	8003e5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fd f8d1 	bl	8001000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e002      	b.n	8003e68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3730      	adds	r7, #48	; 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	b09f      	sub	sp, #124	; 0x7c
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	68d9      	ldr	r1, [r3, #12]
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	ea40 0301 	orr.w	r3, r0, r1
 8003e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eb4:	f021 010c 	bic.w	r1, r1, #12
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	ea40 0301 	orr.w	r3, r0, r1
 8003ed8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4bc5      	ldr	r3, [pc, #788]	; (80041f4 <UART_SetConfig+0x384>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d004      	beq.n	8003eee <UART_SetConfig+0x7e>
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4bc3      	ldr	r3, [pc, #780]	; (80041f8 <UART_SetConfig+0x388>)
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d103      	bne.n	8003ef6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eee:	f7fe f8f5 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8003ef2:	6778      	str	r0, [r7, #116]	; 0x74
 8003ef4:	e002      	b.n	8003efc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7fe f8dd 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003efa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	f040 80b6 	bne.w	8004074 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0a:	461c      	mov	r4, r3
 8003f0c:	f04f 0500 	mov.w	r5, #0
 8003f10:	4622      	mov	r2, r4
 8003f12:	462b      	mov	r3, r5
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	6439      	str	r1, [r7, #64]	; 0x40
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f20:	1912      	adds	r2, r2, r4
 8003f22:	eb45 0303 	adc.w	r3, r5, r3
 8003f26:	f04f 0000 	mov.w	r0, #0
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	00d9      	lsls	r1, r3, #3
 8003f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f34:	00d0      	lsls	r0, r2, #3
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	1911      	adds	r1, r2, r4
 8003f3c:	6639      	str	r1, [r7, #96]	; 0x60
 8003f3e:	416b      	adcs	r3, r5
 8003f40:	667b      	str	r3, [r7, #100]	; 0x64
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f50:	415b      	adcs	r3, r3
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f5c:	f7fc fe54 	bl	8000c08 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4ba5      	ldr	r3, [pc, #660]	; (80041fc <UART_SetConfig+0x38c>)
 8003f66:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	011e      	lsls	r6, r3, #4
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	461c      	mov	r4, r3
 8003f72:	f04f 0500 	mov.w	r5, #0
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
 8003f82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f86:	1912      	adds	r2, r2, r4
 8003f88:	eb45 0303 	adc.w	r3, r5, r3
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	00d9      	lsls	r1, r3, #3
 8003f96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f9a:	00d0      	lsls	r0, r2, #3
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	1911      	adds	r1, r2, r4
 8003fa2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fa4:	416b      	adcs	r3, r5
 8003fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fc2:	f7fc fe21 	bl	8000c08 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b8c      	ldr	r3, [pc, #560]	; (80041fc <UART_SetConfig+0x38c>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a87      	ldr	r2, [pc, #540]	; (80041fc <UART_SetConfig+0x38c>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fec:	441e      	add	r6, r3
 8003fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	1894      	adds	r4, r2, r2
 8003ffc:	623c      	str	r4, [r7, #32]
 8003ffe:	415b      	adcs	r3, r3
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004006:	1812      	adds	r2, r2, r0
 8004008:	eb41 0303 	adc.w	r3, r1, r3
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	f04f 0500 	mov.w	r5, #0
 8004014:	00dd      	lsls	r5, r3, #3
 8004016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800401a:	00d4      	lsls	r4, r2, #3
 800401c:	4622      	mov	r2, r4
 800401e:	462b      	mov	r3, r5
 8004020:	1814      	adds	r4, r2, r0
 8004022:	653c      	str	r4, [r7, #80]	; 0x50
 8004024:	414b      	adcs	r3, r1
 8004026:	657b      	str	r3, [r7, #84]	; 0x54
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	461a      	mov	r2, r3
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	1891      	adds	r1, r2, r2
 8004034:	61b9      	str	r1, [r7, #24]
 8004036:	415b      	adcs	r3, r3
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004042:	f7fc fde1 	bl	8000c08 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <UART_SetConfig+0x38c>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a67      	ldr	r2, [pc, #412]	; (80041fc <UART_SetConfig+0x38c>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 0207 	and.w	r2, r3, #7
 800406a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4432      	add	r2, r6
 8004070:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004072:	e0b9      	b.n	80041e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	461c      	mov	r4, r3
 8004078:	f04f 0500 	mov.w	r5, #0
 800407c:	4622      	mov	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	1891      	adds	r1, r2, r2
 8004082:	6139      	str	r1, [r7, #16]
 8004084:	415b      	adcs	r3, r3
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800408c:	1912      	adds	r2, r2, r4
 800408e:	eb45 0303 	adc.w	r3, r5, r3
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040a0:	00d0      	lsls	r0, r2, #3
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	eb12 0804 	adds.w	r8, r2, r4
 80040aa:	eb43 0905 	adc.w	r9, r3, r5
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	008b      	lsls	r3, r1, #2
 80040c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040c6:	0082      	lsls	r2, r0, #2
 80040c8:	4640      	mov	r0, r8
 80040ca:	4649      	mov	r1, r9
 80040cc:	f7fc fd9c 	bl	8000c08 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <UART_SetConfig+0x38c>)
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	011e      	lsls	r6, r3, #4
 80040de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e0:	4618      	mov	r0, r3
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	1894      	adds	r4, r2, r2
 80040ec:	60bc      	str	r4, [r7, #8]
 80040ee:	415b      	adcs	r3, r3
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f6:	1812      	adds	r2, r2, r0
 80040f8:	eb41 0303 	adc.w	r3, r1, r3
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	f04f 0500 	mov.w	r5, #0
 8004104:	00dd      	lsls	r5, r3, #3
 8004106:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800410a:	00d4      	lsls	r4, r2, #3
 800410c:	4622      	mov	r2, r4
 800410e:	462b      	mov	r3, r5
 8004110:	1814      	adds	r4, r2, r0
 8004112:	64bc      	str	r4, [r7, #72]	; 0x48
 8004114:	414b      	adcs	r3, r1
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004130:	0082      	lsls	r2, r0, #2
 8004132:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004136:	f7fc fd67 	bl	8000c08 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <UART_SetConfig+0x38c>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <UART_SetConfig+0x38c>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415e:	441e      	add	r6, r3
 8004160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004162:	4618      	mov	r0, r3
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	1894      	adds	r4, r2, r2
 800416e:	603c      	str	r4, [r7, #0]
 8004170:	415b      	adcs	r3, r3
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004178:	1812      	adds	r2, r2, r0
 800417a:	eb41 0303 	adc.w	r3, r1, r3
 800417e:	f04f 0400 	mov.w	r4, #0
 8004182:	f04f 0500 	mov.w	r5, #0
 8004186:	00dd      	lsls	r5, r3, #3
 8004188:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800418c:	00d4      	lsls	r4, r2, #3
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	eb12 0a00 	adds.w	sl, r2, r0
 8004196:	eb43 0b01 	adc.w	fp, r3, r1
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4618      	mov	r0, r3
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041b2:	0082      	lsls	r2, r0, #2
 80041b4:	4650      	mov	r0, sl
 80041b6:	4659      	mov	r1, fp
 80041b8:	f7fc fd26 	bl	8000c08 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <UART_SetConfig+0x38c>)
 80041c2:	fba3 1302 	umull	r1, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2164      	movs	r1, #100	; 0x64
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	; 0x32
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <UART_SetConfig+0x38c>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4432      	add	r2, r6
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	bf00      	nop
 80041ea:	377c      	adds	r7, #124	; 0x7c
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	40011000 	.word	0x40011000
 80041f8:	40011400 	.word	0x40011400
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <__errno>:
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <__errno+0x8>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000000c 	.word	0x2000000c

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4d0d      	ldr	r5, [pc, #52]	; (8004244 <__libc_init_array+0x38>)
 8004210:	4c0d      	ldr	r4, [pc, #52]	; (8004248 <__libc_init_array+0x3c>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	2600      	movs	r6, #0
 8004218:	42a6      	cmp	r6, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	4d0b      	ldr	r5, [pc, #44]	; (800424c <__libc_init_array+0x40>)
 800421e:	4c0c      	ldr	r4, [pc, #48]	; (8004250 <__libc_init_array+0x44>)
 8004220:	f002 fd08 	bl	8006c34 <_init>
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	2600      	movs	r6, #0
 800422a:	42a6      	cmp	r6, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f855 3b04 	ldr.w	r3, [r5], #4
 8004234:	4798      	blx	r3
 8004236:	3601      	adds	r6, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f855 3b04 	ldr.w	r3, [r5], #4
 800423e:	4798      	blx	r3
 8004240:	3601      	adds	r6, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	08007094 	.word	0x08007094
 8004248:	08007094 	.word	0x08007094
 800424c:	08007094 	.word	0x08007094
 8004250:	08007098 	.word	0x08007098

08004254 <memset>:
 8004254:	4402      	add	r2, r0
 8004256:	4603      	mov	r3, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__cvt>:
 8004264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	ec55 4b10 	vmov	r4, r5, d0
 800426c:	2d00      	cmp	r5, #0
 800426e:	460e      	mov	r6, r1
 8004270:	4619      	mov	r1, r3
 8004272:	462b      	mov	r3, r5
 8004274:	bfbb      	ittet	lt
 8004276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800427a:	461d      	movlt	r5, r3
 800427c:	2300      	movge	r3, #0
 800427e:	232d      	movlt	r3, #45	; 0x2d
 8004280:	700b      	strb	r3, [r1, #0]
 8004282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004288:	4691      	mov	r9, r2
 800428a:	f023 0820 	bic.w	r8, r3, #32
 800428e:	bfbc      	itt	lt
 8004290:	4622      	movlt	r2, r4
 8004292:	4614      	movlt	r4, r2
 8004294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004298:	d005      	beq.n	80042a6 <__cvt+0x42>
 800429a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800429e:	d100      	bne.n	80042a2 <__cvt+0x3e>
 80042a0:	3601      	adds	r6, #1
 80042a2:	2102      	movs	r1, #2
 80042a4:	e000      	b.n	80042a8 <__cvt+0x44>
 80042a6:	2103      	movs	r1, #3
 80042a8:	ab03      	add	r3, sp, #12
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	ab02      	add	r3, sp, #8
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	ec45 4b10 	vmov	d0, r4, r5
 80042b4:	4653      	mov	r3, sl
 80042b6:	4632      	mov	r2, r6
 80042b8:	f000 fce2 	bl	8004c80 <_dtoa_r>
 80042bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042c0:	4607      	mov	r7, r0
 80042c2:	d102      	bne.n	80042ca <__cvt+0x66>
 80042c4:	f019 0f01 	tst.w	r9, #1
 80042c8:	d022      	beq.n	8004310 <__cvt+0xac>
 80042ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042ce:	eb07 0906 	add.w	r9, r7, r6
 80042d2:	d110      	bne.n	80042f6 <__cvt+0x92>
 80042d4:	783b      	ldrb	r3, [r7, #0]
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	d10a      	bne.n	80042f0 <__cvt+0x8c>
 80042da:	2200      	movs	r2, #0
 80042dc:	2300      	movs	r3, #0
 80042de:	4620      	mov	r0, r4
 80042e0:	4629      	mov	r1, r5
 80042e2:	f7fc fc21 	bl	8000b28 <__aeabi_dcmpeq>
 80042e6:	b918      	cbnz	r0, 80042f0 <__cvt+0x8c>
 80042e8:	f1c6 0601 	rsb	r6, r6, #1
 80042ec:	f8ca 6000 	str.w	r6, [sl]
 80042f0:	f8da 3000 	ldr.w	r3, [sl]
 80042f4:	4499      	add	r9, r3
 80042f6:	2200      	movs	r2, #0
 80042f8:	2300      	movs	r3, #0
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f7fc fc13 	bl	8000b28 <__aeabi_dcmpeq>
 8004302:	b108      	cbz	r0, 8004308 <__cvt+0xa4>
 8004304:	f8cd 900c 	str.w	r9, [sp, #12]
 8004308:	2230      	movs	r2, #48	; 0x30
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	454b      	cmp	r3, r9
 800430e:	d307      	bcc.n	8004320 <__cvt+0xbc>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004314:	1bdb      	subs	r3, r3, r7
 8004316:	4638      	mov	r0, r7
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	b004      	add	sp, #16
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	9103      	str	r1, [sp, #12]
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e7f0      	b.n	800430a <__cvt+0xa6>

08004328 <__exponent>:
 8004328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800432a:	4603      	mov	r3, r0
 800432c:	2900      	cmp	r1, #0
 800432e:	bfb8      	it	lt
 8004330:	4249      	neglt	r1, r1
 8004332:	f803 2b02 	strb.w	r2, [r3], #2
 8004336:	bfb4      	ite	lt
 8004338:	222d      	movlt	r2, #45	; 0x2d
 800433a:	222b      	movge	r2, #43	; 0x2b
 800433c:	2909      	cmp	r1, #9
 800433e:	7042      	strb	r2, [r0, #1]
 8004340:	dd2a      	ble.n	8004398 <__exponent+0x70>
 8004342:	f10d 0407 	add.w	r4, sp, #7
 8004346:	46a4      	mov	ip, r4
 8004348:	270a      	movs	r7, #10
 800434a:	46a6      	mov	lr, r4
 800434c:	460a      	mov	r2, r1
 800434e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004352:	fb07 1516 	mls	r5, r7, r6, r1
 8004356:	3530      	adds	r5, #48	; 0x30
 8004358:	2a63      	cmp	r2, #99	; 0x63
 800435a:	f104 34ff 	add.w	r4, r4, #4294967295
 800435e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004362:	4631      	mov	r1, r6
 8004364:	dcf1      	bgt.n	800434a <__exponent+0x22>
 8004366:	3130      	adds	r1, #48	; 0x30
 8004368:	f1ae 0502 	sub.w	r5, lr, #2
 800436c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004370:	1c44      	adds	r4, r0, #1
 8004372:	4629      	mov	r1, r5
 8004374:	4561      	cmp	r1, ip
 8004376:	d30a      	bcc.n	800438e <__exponent+0x66>
 8004378:	f10d 0209 	add.w	r2, sp, #9
 800437c:	eba2 020e 	sub.w	r2, r2, lr
 8004380:	4565      	cmp	r5, ip
 8004382:	bf88      	it	hi
 8004384:	2200      	movhi	r2, #0
 8004386:	4413      	add	r3, r2
 8004388:	1a18      	subs	r0, r3, r0
 800438a:	b003      	add	sp, #12
 800438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004392:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004396:	e7ed      	b.n	8004374 <__exponent+0x4c>
 8004398:	2330      	movs	r3, #48	; 0x30
 800439a:	3130      	adds	r1, #48	; 0x30
 800439c:	7083      	strb	r3, [r0, #2]
 800439e:	70c1      	strb	r1, [r0, #3]
 80043a0:	1d03      	adds	r3, r0, #4
 80043a2:	e7f1      	b.n	8004388 <__exponent+0x60>

080043a4 <_printf_float>:
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	ed2d 8b02 	vpush	{d8}
 80043ac:	b08d      	sub	sp, #52	; 0x34
 80043ae:	460c      	mov	r4, r1
 80043b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043b4:	4616      	mov	r6, r2
 80043b6:	461f      	mov	r7, r3
 80043b8:	4605      	mov	r5, r0
 80043ba:	f001 fb43 	bl	8005a44 <_localeconv_r>
 80043be:	f8d0 a000 	ldr.w	sl, [r0]
 80043c2:	4650      	mov	r0, sl
 80043c4:	f7fb ff2e 	bl	8000224 <strlen>
 80043c8:	2300      	movs	r3, #0
 80043ca:	930a      	str	r3, [sp, #40]	; 0x28
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	9305      	str	r3, [sp, #20]
 80043d0:	f8d8 3000 	ldr.w	r3, [r8]
 80043d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043d8:	3307      	adds	r3, #7
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	f103 0208 	add.w	r2, r3, #8
 80043e2:	f8c8 2000 	str.w	r2, [r8]
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043f6:	9307      	str	r3, [sp, #28]
 80043f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043fc:	ee08 0a10 	vmov	s16, r0
 8004400:	4b9f      	ldr	r3, [pc, #636]	; (8004680 <_printf_float+0x2dc>)
 8004402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004406:	f04f 32ff 	mov.w	r2, #4294967295
 800440a:	f7fc fbbf 	bl	8000b8c <__aeabi_dcmpun>
 800440e:	bb88      	cbnz	r0, 8004474 <_printf_float+0xd0>
 8004410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004414:	4b9a      	ldr	r3, [pc, #616]	; (8004680 <_printf_float+0x2dc>)
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	f7fc fb99 	bl	8000b50 <__aeabi_dcmple>
 800441e:	bb48      	cbnz	r0, 8004474 <_printf_float+0xd0>
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	4640      	mov	r0, r8
 8004426:	4649      	mov	r1, r9
 8004428:	f7fc fb88 	bl	8000b3c <__aeabi_dcmplt>
 800442c:	b110      	cbz	r0, 8004434 <_printf_float+0x90>
 800442e:	232d      	movs	r3, #45	; 0x2d
 8004430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <_printf_float+0x2e0>)
 8004436:	4894      	ldr	r0, [pc, #592]	; (8004688 <_printf_float+0x2e4>)
 8004438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800443c:	bf94      	ite	ls
 800443e:	4698      	movls	r8, r3
 8004440:	4680      	movhi	r8, r0
 8004442:	2303      	movs	r3, #3
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	9b05      	ldr	r3, [sp, #20]
 8004448:	f023 0204 	bic.w	r2, r3, #4
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	f04f 0900 	mov.w	r9, #0
 8004452:	9700      	str	r7, [sp, #0]
 8004454:	4633      	mov	r3, r6
 8004456:	aa0b      	add	r2, sp, #44	; 0x2c
 8004458:	4621      	mov	r1, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f9d8 	bl	8004810 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	f040 8090 	bne.w	8004586 <_printf_float+0x1e2>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	b00d      	add	sp, #52	; 0x34
 800446c:	ecbd 8b02 	vpop	{d8}
 8004470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	4640      	mov	r0, r8
 800447a:	4649      	mov	r1, r9
 800447c:	f7fc fb86 	bl	8000b8c <__aeabi_dcmpun>
 8004480:	b140      	cbz	r0, 8004494 <_printf_float+0xf0>
 8004482:	464b      	mov	r3, r9
 8004484:	2b00      	cmp	r3, #0
 8004486:	bfbc      	itt	lt
 8004488:	232d      	movlt	r3, #45	; 0x2d
 800448a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800448e:	487f      	ldr	r0, [pc, #508]	; (800468c <_printf_float+0x2e8>)
 8004490:	4b7f      	ldr	r3, [pc, #508]	; (8004690 <_printf_float+0x2ec>)
 8004492:	e7d1      	b.n	8004438 <_printf_float+0x94>
 8004494:	6863      	ldr	r3, [r4, #4]
 8004496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800449a:	9206      	str	r2, [sp, #24]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	d13f      	bne.n	8004520 <_printf_float+0x17c>
 80044a0:	2306      	movs	r3, #6
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	9b05      	ldr	r3, [sp, #20]
 80044a6:	6861      	ldr	r1, [r4, #4]
 80044a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044ac:	2300      	movs	r3, #0
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	ab0a      	add	r3, sp, #40	; 0x28
 80044b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044b6:	ab09      	add	r3, sp, #36	; 0x24
 80044b8:	ec49 8b10 	vmov	d0, r8, r9
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	6022      	str	r2, [r4, #0]
 80044c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7ff fecd 	bl	8004264 <__cvt>
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ce:	2b47      	cmp	r3, #71	; 0x47
 80044d0:	4680      	mov	r8, r0
 80044d2:	d108      	bne.n	80044e6 <_printf_float+0x142>
 80044d4:	1cc8      	adds	r0, r1, #3
 80044d6:	db02      	blt.n	80044de <_printf_float+0x13a>
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	4299      	cmp	r1, r3
 80044dc:	dd41      	ble.n	8004562 <_printf_float+0x1be>
 80044de:	f1ab 0b02 	sub.w	fp, fp, #2
 80044e2:	fa5f fb8b 	uxtb.w	fp, fp
 80044e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044ea:	d820      	bhi.n	800452e <_printf_float+0x18a>
 80044ec:	3901      	subs	r1, #1
 80044ee:	465a      	mov	r2, fp
 80044f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044f4:	9109      	str	r1, [sp, #36]	; 0x24
 80044f6:	f7ff ff17 	bl	8004328 <__exponent>
 80044fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044fc:	1813      	adds	r3, r2, r0
 80044fe:	2a01      	cmp	r2, #1
 8004500:	4681      	mov	r9, r0
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	dc02      	bgt.n	800450c <_printf_float+0x168>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	07d2      	lsls	r2, r2, #31
 800450a:	d501      	bpl.n	8004510 <_printf_float+0x16c>
 800450c:	3301      	adds	r3, #1
 800450e:	6123      	str	r3, [r4, #16]
 8004510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004514:	2b00      	cmp	r3, #0
 8004516:	d09c      	beq.n	8004452 <_printf_float+0xae>
 8004518:	232d      	movs	r3, #45	; 0x2d
 800451a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451e:	e798      	b.n	8004452 <_printf_float+0xae>
 8004520:	9a06      	ldr	r2, [sp, #24]
 8004522:	2a47      	cmp	r2, #71	; 0x47
 8004524:	d1be      	bne.n	80044a4 <_printf_float+0x100>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1bc      	bne.n	80044a4 <_printf_float+0x100>
 800452a:	2301      	movs	r3, #1
 800452c:	e7b9      	b.n	80044a2 <_printf_float+0xfe>
 800452e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004532:	d118      	bne.n	8004566 <_printf_float+0x1c2>
 8004534:	2900      	cmp	r1, #0
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	dd0b      	ble.n	8004552 <_printf_float+0x1ae>
 800453a:	6121      	str	r1, [r4, #16]
 800453c:	b913      	cbnz	r3, 8004544 <_printf_float+0x1a0>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	07d0      	lsls	r0, r2, #31
 8004542:	d502      	bpl.n	800454a <_printf_float+0x1a6>
 8004544:	3301      	adds	r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	65a1      	str	r1, [r4, #88]	; 0x58
 800454c:	f04f 0900 	mov.w	r9, #0
 8004550:	e7de      	b.n	8004510 <_printf_float+0x16c>
 8004552:	b913      	cbnz	r3, 800455a <_printf_float+0x1b6>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	07d2      	lsls	r2, r2, #31
 8004558:	d501      	bpl.n	800455e <_printf_float+0x1ba>
 800455a:	3302      	adds	r3, #2
 800455c:	e7f4      	b.n	8004548 <_printf_float+0x1a4>
 800455e:	2301      	movs	r3, #1
 8004560:	e7f2      	b.n	8004548 <_printf_float+0x1a4>
 8004562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004568:	4299      	cmp	r1, r3
 800456a:	db05      	blt.n	8004578 <_printf_float+0x1d4>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	6121      	str	r1, [r4, #16]
 8004570:	07d8      	lsls	r0, r3, #31
 8004572:	d5ea      	bpl.n	800454a <_printf_float+0x1a6>
 8004574:	1c4b      	adds	r3, r1, #1
 8004576:	e7e7      	b.n	8004548 <_printf_float+0x1a4>
 8004578:	2900      	cmp	r1, #0
 800457a:	bfd4      	ite	le
 800457c:	f1c1 0202 	rsble	r2, r1, #2
 8004580:	2201      	movgt	r2, #1
 8004582:	4413      	add	r3, r2
 8004584:	e7e0      	b.n	8004548 <_printf_float+0x1a4>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	055a      	lsls	r2, r3, #21
 800458a:	d407      	bmi.n	800459c <_printf_float+0x1f8>
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	4642      	mov	r2, r8
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	47b8      	blx	r7
 8004596:	3001      	adds	r0, #1
 8004598:	d12c      	bne.n	80045f4 <_printf_float+0x250>
 800459a:	e764      	b.n	8004466 <_printf_float+0xc2>
 800459c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045a0:	f240 80e0 	bls.w	8004764 <_printf_float+0x3c0>
 80045a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f7fc fabc 	bl	8000b28 <__aeabi_dcmpeq>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d034      	beq.n	800461e <_printf_float+0x27a>
 80045b4:	4a37      	ldr	r2, [pc, #220]	; (8004694 <_printf_float+0x2f0>)
 80045b6:	2301      	movs	r3, #1
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af51 	beq.w	8004466 <_printf_float+0xc2>
 80045c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c8:	429a      	cmp	r2, r3
 80045ca:	db02      	blt.n	80045d2 <_printf_float+0x22e>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	07d8      	lsls	r0, r3, #31
 80045d0:	d510      	bpl.n	80045f4 <_printf_float+0x250>
 80045d2:	ee18 3a10 	vmov	r3, s16
 80045d6:	4652      	mov	r2, sl
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f af41 	beq.w	8004466 <_printf_float+0xc2>
 80045e4:	f04f 0800 	mov.w	r8, #0
 80045e8:	f104 091a 	add.w	r9, r4, #26
 80045ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	4543      	cmp	r3, r8
 80045f2:	dc09      	bgt.n	8004608 <_printf_float+0x264>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	079b      	lsls	r3, r3, #30
 80045f8:	f100 8105 	bmi.w	8004806 <_printf_float+0x462>
 80045fc:	68e0      	ldr	r0, [r4, #12]
 80045fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004600:	4298      	cmp	r0, r3
 8004602:	bfb8      	it	lt
 8004604:	4618      	movlt	r0, r3
 8004606:	e730      	b.n	800446a <_printf_float+0xc6>
 8004608:	2301      	movs	r3, #1
 800460a:	464a      	mov	r2, r9
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	f43f af27 	beq.w	8004466 <_printf_float+0xc2>
 8004618:	f108 0801 	add.w	r8, r8, #1
 800461c:	e7e6      	b.n	80045ec <_printf_float+0x248>
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	dc39      	bgt.n	8004698 <_printf_float+0x2f4>
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <_printf_float+0x2f0>)
 8004626:	2301      	movs	r3, #1
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af19 	beq.w	8004466 <_printf_float+0xc2>
 8004634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004638:	4313      	orrs	r3, r2
 800463a:	d102      	bne.n	8004642 <_printf_float+0x29e>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07d9      	lsls	r1, r3, #31
 8004640:	d5d8      	bpl.n	80045f4 <_printf_float+0x250>
 8004642:	ee18 3a10 	vmov	r3, s16
 8004646:	4652      	mov	r2, sl
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af09 	beq.w	8004466 <_printf_float+0xc2>
 8004654:	f04f 0900 	mov.w	r9, #0
 8004658:	f104 0a1a 	add.w	sl, r4, #26
 800465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465e:	425b      	negs	r3, r3
 8004660:	454b      	cmp	r3, r9
 8004662:	dc01      	bgt.n	8004668 <_printf_float+0x2c4>
 8004664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004666:	e792      	b.n	800458e <_printf_float+0x1ea>
 8004668:	2301      	movs	r3, #1
 800466a:	4652      	mov	r2, sl
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f aef7 	beq.w	8004466 <_printf_float+0xc2>
 8004678:	f109 0901 	add.w	r9, r9, #1
 800467c:	e7ee      	b.n	800465c <_printf_float+0x2b8>
 800467e:	bf00      	nop
 8004680:	7fefffff 	.word	0x7fefffff
 8004684:	08006cac 	.word	0x08006cac
 8004688:	08006cb0 	.word	0x08006cb0
 800468c:	08006cb8 	.word	0x08006cb8
 8004690:	08006cb4 	.word	0x08006cb4
 8004694:	08006cbc 	.word	0x08006cbc
 8004698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800469a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800469c:	429a      	cmp	r2, r3
 800469e:	bfa8      	it	ge
 80046a0:	461a      	movge	r2, r3
 80046a2:	2a00      	cmp	r2, #0
 80046a4:	4691      	mov	r9, r2
 80046a6:	dc37      	bgt.n	8004718 <_printf_float+0x374>
 80046a8:	f04f 0b00 	mov.w	fp, #0
 80046ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b0:	f104 021a 	add.w	r2, r4, #26
 80046b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046b6:	9305      	str	r3, [sp, #20]
 80046b8:	eba3 0309 	sub.w	r3, r3, r9
 80046bc:	455b      	cmp	r3, fp
 80046be:	dc33      	bgt.n	8004728 <_printf_float+0x384>
 80046c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c4:	429a      	cmp	r2, r3
 80046c6:	db3b      	blt.n	8004740 <_printf_float+0x39c>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	07da      	lsls	r2, r3, #31
 80046cc:	d438      	bmi.n	8004740 <_printf_float+0x39c>
 80046ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046d0:	9b05      	ldr	r3, [sp, #20]
 80046d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	eba2 0901 	sub.w	r9, r2, r1
 80046da:	4599      	cmp	r9, r3
 80046dc:	bfa8      	it	ge
 80046de:	4699      	movge	r9, r3
 80046e0:	f1b9 0f00 	cmp.w	r9, #0
 80046e4:	dc35      	bgt.n	8004752 <_printf_float+0x3ae>
 80046e6:	f04f 0800 	mov.w	r8, #0
 80046ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ee:	f104 0a1a 	add.w	sl, r4, #26
 80046f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	eba3 0309 	sub.w	r3, r3, r9
 80046fc:	4543      	cmp	r3, r8
 80046fe:	f77f af79 	ble.w	80045f4 <_printf_float+0x250>
 8004702:	2301      	movs	r3, #1
 8004704:	4652      	mov	r2, sl
 8004706:	4631      	mov	r1, r6
 8004708:	4628      	mov	r0, r5
 800470a:	47b8      	blx	r7
 800470c:	3001      	adds	r0, #1
 800470e:	f43f aeaa 	beq.w	8004466 <_printf_float+0xc2>
 8004712:	f108 0801 	add.w	r8, r8, #1
 8004716:	e7ec      	b.n	80046f2 <_printf_float+0x34e>
 8004718:	4613      	mov	r3, r2
 800471a:	4631      	mov	r1, r6
 800471c:	4642      	mov	r2, r8
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d1c0      	bne.n	80046a8 <_printf_float+0x304>
 8004726:	e69e      	b.n	8004466 <_printf_float+0xc2>
 8004728:	2301      	movs	r3, #1
 800472a:	4631      	mov	r1, r6
 800472c:	4628      	mov	r0, r5
 800472e:	9205      	str	r2, [sp, #20]
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	f43f ae97 	beq.w	8004466 <_printf_float+0xc2>
 8004738:	9a05      	ldr	r2, [sp, #20]
 800473a:	f10b 0b01 	add.w	fp, fp, #1
 800473e:	e7b9      	b.n	80046b4 <_printf_float+0x310>
 8004740:	ee18 3a10 	vmov	r3, s16
 8004744:	4652      	mov	r2, sl
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	d1be      	bne.n	80046ce <_printf_float+0x32a>
 8004750:	e689      	b.n	8004466 <_printf_float+0xc2>
 8004752:	9a05      	ldr	r2, [sp, #20]
 8004754:	464b      	mov	r3, r9
 8004756:	4442      	add	r2, r8
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	d1c1      	bne.n	80046e6 <_printf_float+0x342>
 8004762:	e680      	b.n	8004466 <_printf_float+0xc2>
 8004764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004766:	2a01      	cmp	r2, #1
 8004768:	dc01      	bgt.n	800476e <_printf_float+0x3ca>
 800476a:	07db      	lsls	r3, r3, #31
 800476c:	d538      	bpl.n	80047e0 <_printf_float+0x43c>
 800476e:	2301      	movs	r3, #1
 8004770:	4642      	mov	r2, r8
 8004772:	4631      	mov	r1, r6
 8004774:	4628      	mov	r0, r5
 8004776:	47b8      	blx	r7
 8004778:	3001      	adds	r0, #1
 800477a:	f43f ae74 	beq.w	8004466 <_printf_float+0xc2>
 800477e:	ee18 3a10 	vmov	r3, s16
 8004782:	4652      	mov	r2, sl
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	f43f ae6b 	beq.w	8004466 <_printf_float+0xc2>
 8004790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	f7fc f9c6 	bl	8000b28 <__aeabi_dcmpeq>
 800479c:	b9d8      	cbnz	r0, 80047d6 <_printf_float+0x432>
 800479e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a0:	f108 0201 	add.w	r2, r8, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	d10e      	bne.n	80047ce <_printf_float+0x42a>
 80047b0:	e659      	b.n	8004466 <_printf_float+0xc2>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4652      	mov	r2, sl
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	f43f ae52 	beq.w	8004466 <_printf_float+0xc2>
 80047c2:	f108 0801 	add.w	r8, r8, #1
 80047c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4543      	cmp	r3, r8
 80047cc:	dcf1      	bgt.n	80047b2 <_printf_float+0x40e>
 80047ce:	464b      	mov	r3, r9
 80047d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047d4:	e6dc      	b.n	8004590 <_printf_float+0x1ec>
 80047d6:	f04f 0800 	mov.w	r8, #0
 80047da:	f104 0a1a 	add.w	sl, r4, #26
 80047de:	e7f2      	b.n	80047c6 <_printf_float+0x422>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4642      	mov	r2, r8
 80047e4:	e7df      	b.n	80047a6 <_printf_float+0x402>
 80047e6:	2301      	movs	r3, #1
 80047e8:	464a      	mov	r2, r9
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f ae38 	beq.w	8004466 <_printf_float+0xc2>
 80047f6:	f108 0801 	add.w	r8, r8, #1
 80047fa:	68e3      	ldr	r3, [r4, #12]
 80047fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047fe:	1a5b      	subs	r3, r3, r1
 8004800:	4543      	cmp	r3, r8
 8004802:	dcf0      	bgt.n	80047e6 <_printf_float+0x442>
 8004804:	e6fa      	b.n	80045fc <_printf_float+0x258>
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	f104 0919 	add.w	r9, r4, #25
 800480e:	e7f4      	b.n	80047fa <_printf_float+0x456>

08004810 <_printf_common>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	4616      	mov	r6, r2
 8004816:	4699      	mov	r9, r3
 8004818:	688a      	ldr	r2, [r1, #8]
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004820:	4293      	cmp	r3, r2
 8004822:	bfb8      	it	lt
 8004824:	4613      	movlt	r3, r2
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800482c:	4607      	mov	r7, r0
 800482e:	460c      	mov	r4, r1
 8004830:	b10a      	cbz	r2, 8004836 <_printf_common+0x26>
 8004832:	3301      	adds	r3, #1
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	0699      	lsls	r1, r3, #26
 800483a:	bf42      	ittt	mi
 800483c:	6833      	ldrmi	r3, [r6, #0]
 800483e:	3302      	addmi	r3, #2
 8004840:	6033      	strmi	r3, [r6, #0]
 8004842:	6825      	ldr	r5, [r4, #0]
 8004844:	f015 0506 	ands.w	r5, r5, #6
 8004848:	d106      	bne.n	8004858 <_printf_common+0x48>
 800484a:	f104 0a19 	add.w	sl, r4, #25
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	6832      	ldr	r2, [r6, #0]
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	42ab      	cmp	r3, r5
 8004856:	dc26      	bgt.n	80048a6 <_printf_common+0x96>
 8004858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800485c:	1e13      	subs	r3, r2, #0
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	2301      	movne	r3, #1
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	d42b      	bmi.n	80048c0 <_printf_common+0xb0>
 8004868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800486c:	4649      	mov	r1, r9
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d01e      	beq.n	80048b4 <_printf_common+0xa4>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	68e5      	ldr	r5, [r4, #12]
 800487a:	6832      	ldr	r2, [r6, #0]
 800487c:	f003 0306 	and.w	r3, r3, #6
 8004880:	2b04      	cmp	r3, #4
 8004882:	bf08      	it	eq
 8004884:	1aad      	subeq	r5, r5, r2
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	bf0c      	ite	eq
 800488c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004890:	2500      	movne	r5, #0
 8004892:	4293      	cmp	r3, r2
 8004894:	bfc4      	itt	gt
 8004896:	1a9b      	subgt	r3, r3, r2
 8004898:	18ed      	addgt	r5, r5, r3
 800489a:	2600      	movs	r6, #0
 800489c:	341a      	adds	r4, #26
 800489e:	42b5      	cmp	r5, r6
 80048a0:	d11a      	bne.n	80048d8 <_printf_common+0xc8>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e008      	b.n	80048b8 <_printf_common+0xa8>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4652      	mov	r2, sl
 80048aa:	4649      	mov	r1, r9
 80048ac:	4638      	mov	r0, r7
 80048ae:	47c0      	blx	r8
 80048b0:	3001      	adds	r0, #1
 80048b2:	d103      	bne.n	80048bc <_printf_common+0xac>
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	3501      	adds	r5, #1
 80048be:	e7c6      	b.n	800484e <_printf_common+0x3e>
 80048c0:	18e1      	adds	r1, r4, r3
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	2030      	movs	r0, #48	; 0x30
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ca:	4422      	add	r2, r4
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d4:	3302      	adds	r3, #2
 80048d6:	e7c7      	b.n	8004868 <_printf_common+0x58>
 80048d8:	2301      	movs	r3, #1
 80048da:	4622      	mov	r2, r4
 80048dc:	4649      	mov	r1, r9
 80048de:	4638      	mov	r0, r7
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d0e6      	beq.n	80048b4 <_printf_common+0xa4>
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7d9      	b.n	800489e <_printf_common+0x8e>
	...

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	460c      	mov	r4, r1
 80048f2:	4691      	mov	r9, r2
 80048f4:	7e27      	ldrb	r7, [r4, #24]
 80048f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048f8:	2f78      	cmp	r7, #120	; 0x78
 80048fa:	4680      	mov	r8, r0
 80048fc:	469a      	mov	sl, r3
 80048fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	; 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d8 	beq.w	8004abe <_printf_i+0x1d2>
 800490e:	2f58      	cmp	r7, #88	; 0x58
 8004910:	f000 80a3 	beq.w	8004a5a <_printf_i+0x16e>
 8004914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a001      	add	r0, pc, #4	; (adr r0, 800492c <_printf_i+0x40>)
 8004928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004aa5 	.word	0x08004aa5
 800495c:	080049c9 	.word	0x080049c9
 8004960:	08004a87 	.word	0x08004a87
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004ac7 	.word	0x08004ac7
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c9 	.word	0x080049c9
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a8f 	.word	0x08004a8f
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	600a      	str	r2, [r1, #0]
 800498c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e0a3      	b.n	8004ae0 <_printf_i+0x1f4>
 8004998:	6825      	ldr	r5, [r4, #0]
 800499a:	6808      	ldr	r0, [r1, #0]
 800499c:	062e      	lsls	r6, r5, #24
 800499e:	f100 0304 	add.w	r3, r0, #4
 80049a2:	d50a      	bpl.n	80049ba <_printf_i+0xce>
 80049a4:	6805      	ldr	r5, [r0, #0]
 80049a6:	600b      	str	r3, [r1, #0]
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	da03      	bge.n	80049b4 <_printf_i+0xc8>
 80049ac:	232d      	movs	r3, #45	; 0x2d
 80049ae:	426d      	negs	r5, r5
 80049b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b4:	485e      	ldr	r0, [pc, #376]	; (8004b30 <_printf_i+0x244>)
 80049b6:	230a      	movs	r3, #10
 80049b8:	e019      	b.n	80049ee <_printf_i+0x102>
 80049ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049be:	6805      	ldr	r5, [r0, #0]
 80049c0:	600b      	str	r3, [r1, #0]
 80049c2:	bf18      	it	ne
 80049c4:	b22d      	sxthne	r5, r5
 80049c6:	e7ef      	b.n	80049a8 <_printf_i+0xbc>
 80049c8:	680b      	ldr	r3, [r1, #0]
 80049ca:	6825      	ldr	r5, [r4, #0]
 80049cc:	1d18      	adds	r0, r3, #4
 80049ce:	6008      	str	r0, [r1, #0]
 80049d0:	0628      	lsls	r0, r5, #24
 80049d2:	d501      	bpl.n	80049d8 <_printf_i+0xec>
 80049d4:	681d      	ldr	r5, [r3, #0]
 80049d6:	e002      	b.n	80049de <_printf_i+0xf2>
 80049d8:	0669      	lsls	r1, r5, #25
 80049da:	d5fb      	bpl.n	80049d4 <_printf_i+0xe8>
 80049dc:	881d      	ldrh	r5, [r3, #0]
 80049de:	4854      	ldr	r0, [pc, #336]	; (8004b30 <_printf_i+0x244>)
 80049e0:	2f6f      	cmp	r7, #111	; 0x6f
 80049e2:	bf0c      	ite	eq
 80049e4:	2308      	moveq	r3, #8
 80049e6:	230a      	movne	r3, #10
 80049e8:	2100      	movs	r1, #0
 80049ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ee:	6866      	ldr	r6, [r4, #4]
 80049f0:	60a6      	str	r6, [r4, #8]
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	bfa2      	ittt	ge
 80049f6:	6821      	ldrge	r1, [r4, #0]
 80049f8:	f021 0104 	bicge.w	r1, r1, #4
 80049fc:	6021      	strge	r1, [r4, #0]
 80049fe:	b90d      	cbnz	r5, 8004a04 <_printf_i+0x118>
 8004a00:	2e00      	cmp	r6, #0
 8004a02:	d04d      	beq.n	8004aa0 <_printf_i+0x1b4>
 8004a04:	4616      	mov	r6, r2
 8004a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a0e:	5dc7      	ldrb	r7, [r0, r7]
 8004a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a14:	462f      	mov	r7, r5
 8004a16:	42bb      	cmp	r3, r7
 8004a18:	460d      	mov	r5, r1
 8004a1a:	d9f4      	bls.n	8004a06 <_printf_i+0x11a>
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d10b      	bne.n	8004a38 <_printf_i+0x14c>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	07df      	lsls	r7, r3, #31
 8004a24:	d508      	bpl.n	8004a38 <_printf_i+0x14c>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	6861      	ldr	r1, [r4, #4]
 8004a2a:	4299      	cmp	r1, r3
 8004a2c:	bfde      	ittt	le
 8004a2e:	2330      	movle	r3, #48	; 0x30
 8004a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a38:	1b92      	subs	r2, r2, r6
 8004a3a:	6122      	str	r2, [r4, #16]
 8004a3c:	f8cd a000 	str.w	sl, [sp]
 8004a40:	464b      	mov	r3, r9
 8004a42:	aa03      	add	r2, sp, #12
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7ff fee2 	bl	8004810 <_printf_common>
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d14c      	bne.n	8004aea <_printf_i+0x1fe>
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	b004      	add	sp, #16
 8004a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5a:	4835      	ldr	r0, [pc, #212]	; (8004b30 <_printf_i+0x244>)
 8004a5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	680e      	ldr	r6, [r1, #0]
 8004a64:	061f      	lsls	r7, r3, #24
 8004a66:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a6a:	600e      	str	r6, [r1, #0]
 8004a6c:	d514      	bpl.n	8004a98 <_printf_i+0x1ac>
 8004a6e:	07d9      	lsls	r1, r3, #31
 8004a70:	bf44      	itt	mi
 8004a72:	f043 0320 	orrmi.w	r3, r3, #32
 8004a76:	6023      	strmi	r3, [r4, #0]
 8004a78:	b91d      	cbnz	r5, 8004a82 <_printf_i+0x196>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f023 0320 	bic.w	r3, r3, #32
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	2310      	movs	r3, #16
 8004a84:	e7b0      	b.n	80049e8 <_printf_i+0xfc>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f043 0320 	orr.w	r3, r3, #32
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	2378      	movs	r3, #120	; 0x78
 8004a90:	4828      	ldr	r0, [pc, #160]	; (8004b34 <_printf_i+0x248>)
 8004a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a96:	e7e3      	b.n	8004a60 <_printf_i+0x174>
 8004a98:	065e      	lsls	r6, r3, #25
 8004a9a:	bf48      	it	mi
 8004a9c:	b2ad      	uxthmi	r5, r5
 8004a9e:	e7e6      	b.n	8004a6e <_printf_i+0x182>
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	e7bb      	b.n	8004a1c <_printf_i+0x130>
 8004aa4:	680b      	ldr	r3, [r1, #0]
 8004aa6:	6826      	ldr	r6, [r4, #0]
 8004aa8:	6960      	ldr	r0, [r4, #20]
 8004aaa:	1d1d      	adds	r5, r3, #4
 8004aac:	600d      	str	r5, [r1, #0]
 8004aae:	0635      	lsls	r5, r6, #24
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	d501      	bpl.n	8004ab8 <_printf_i+0x1cc>
 8004ab4:	6018      	str	r0, [r3, #0]
 8004ab6:	e002      	b.n	8004abe <_printf_i+0x1d2>
 8004ab8:	0671      	lsls	r1, r6, #25
 8004aba:	d5fb      	bpl.n	8004ab4 <_printf_i+0x1c8>
 8004abc:	8018      	strh	r0, [r3, #0]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	4616      	mov	r6, r2
 8004ac4:	e7ba      	b.n	8004a3c <_printf_i+0x150>
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	1d1a      	adds	r2, r3, #4
 8004aca:	600a      	str	r2, [r1, #0]
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7fb fbb4 	bl	8000240 <memchr>
 8004ad8:	b108      	cbz	r0, 8004ade <_printf_i+0x1f2>
 8004ada:	1b80      	subs	r0, r0, r6
 8004adc:	6060      	str	r0, [r4, #4]
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	6123      	str	r3, [r4, #16]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae8:	e7a8      	b.n	8004a3c <_printf_i+0x150>
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d0ab      	beq.n	8004a50 <_printf_i+0x164>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	079b      	lsls	r3, r3, #30
 8004afc:	d413      	bmi.n	8004b26 <_printf_i+0x23a>
 8004afe:	68e0      	ldr	r0, [r4, #12]
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	4298      	cmp	r0, r3
 8004b04:	bfb8      	it	lt
 8004b06:	4618      	movlt	r0, r3
 8004b08:	e7a4      	b.n	8004a54 <_printf_i+0x168>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4649      	mov	r1, r9
 8004b10:	4640      	mov	r0, r8
 8004b12:	47d0      	blx	sl
 8004b14:	3001      	adds	r0, #1
 8004b16:	d09b      	beq.n	8004a50 <_printf_i+0x164>
 8004b18:	3501      	adds	r5, #1
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	9903      	ldr	r1, [sp, #12]
 8004b1e:	1a5b      	subs	r3, r3, r1
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dcf2      	bgt.n	8004b0a <_printf_i+0x21e>
 8004b24:	e7eb      	b.n	8004afe <_printf_i+0x212>
 8004b26:	2500      	movs	r5, #0
 8004b28:	f104 0619 	add.w	r6, r4, #25
 8004b2c:	e7f5      	b.n	8004b1a <_printf_i+0x22e>
 8004b2e:	bf00      	nop
 8004b30:	08006cbe 	.word	0x08006cbe
 8004b34:	08006ccf 	.word	0x08006ccf

08004b38 <iprintf>:
 8004b38:	b40f      	push	{r0, r1, r2, r3}
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <iprintf+0x2c>)
 8004b3c:	b513      	push	{r0, r1, r4, lr}
 8004b3e:	681c      	ldr	r4, [r3, #0]
 8004b40:	b124      	cbz	r4, 8004b4c <iprintf+0x14>
 8004b42:	69a3      	ldr	r3, [r4, #24]
 8004b44:	b913      	cbnz	r3, 8004b4c <iprintf+0x14>
 8004b46:	4620      	mov	r0, r4
 8004b48:	f000 fede 	bl	8005908 <__sinit>
 8004b4c:	ab05      	add	r3, sp, #20
 8004b4e:	9a04      	ldr	r2, [sp, #16]
 8004b50:	68a1      	ldr	r1, [r4, #8]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	4620      	mov	r0, r4
 8004b56:	f001 fbf5 	bl	8006344 <_vfiprintf_r>
 8004b5a:	b002      	add	sp, #8
 8004b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b60:	b004      	add	sp, #16
 8004b62:	4770      	bx	lr
 8004b64:	2000000c 	.word	0x2000000c

08004b68 <quorem>:
 8004b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	6903      	ldr	r3, [r0, #16]
 8004b6e:	690c      	ldr	r4, [r1, #16]
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	4607      	mov	r7, r0
 8004b74:	f2c0 8081 	blt.w	8004c7a <quorem+0x112>
 8004b78:	3c01      	subs	r4, #1
 8004b7a:	f101 0814 	add.w	r8, r1, #20
 8004b7e:	f100 0514 	add.w	r5, r0, #20
 8004b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b90:	3301      	adds	r3, #1
 8004b92:	429a      	cmp	r2, r3
 8004b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ba0:	d331      	bcc.n	8004c06 <quorem+0x9e>
 8004ba2:	f04f 0e00 	mov.w	lr, #0
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	46ac      	mov	ip, r5
 8004baa:	46f2      	mov	sl, lr
 8004bac:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bb0:	b293      	uxth	r3, r2
 8004bb2:	fb06 e303 	mla	r3, r6, r3, lr
 8004bb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	ebaa 0303 	sub.w	r3, sl, r3
 8004bc0:	0c12      	lsrs	r2, r2, #16
 8004bc2:	f8dc a000 	ldr.w	sl, [ip]
 8004bc6:	fb06 e202 	mla	r2, r6, r2, lr
 8004bca:	fa13 f38a 	uxtah	r3, r3, sl
 8004bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bd2:	fa1f fa82 	uxth.w	sl, r2
 8004bd6:	f8dc 2000 	ldr.w	r2, [ip]
 8004bda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004bde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004be8:	4581      	cmp	r9, r0
 8004bea:	f84c 3b04 	str.w	r3, [ip], #4
 8004bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bf2:	d2db      	bcs.n	8004bac <quorem+0x44>
 8004bf4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bf8:	b92b      	cbnz	r3, 8004c06 <quorem+0x9e>
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	d32e      	bcc.n	8004c62 <quorem+0xfa>
 8004c04:	613c      	str	r4, [r7, #16]
 8004c06:	4638      	mov	r0, r7
 8004c08:	f001 f9b8 	bl	8005f7c <__mcmp>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	db24      	blt.n	8004c5a <quorem+0xf2>
 8004c10:	3601      	adds	r6, #1
 8004c12:	4628      	mov	r0, r5
 8004c14:	f04f 0c00 	mov.w	ip, #0
 8004c18:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c1c:	f8d0 e000 	ldr.w	lr, [r0]
 8004c20:	b293      	uxth	r3, r2
 8004c22:	ebac 0303 	sub.w	r3, ip, r3
 8004c26:	0c12      	lsrs	r2, r2, #16
 8004c28:	fa13 f38e 	uxtah	r3, r3, lr
 8004c2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c3a:	45c1      	cmp	r9, r8
 8004c3c:	f840 3b04 	str.w	r3, [r0], #4
 8004c40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c44:	d2e8      	bcs.n	8004c18 <quorem+0xb0>
 8004c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c4e:	b922      	cbnz	r2, 8004c5a <quorem+0xf2>
 8004c50:	3b04      	subs	r3, #4
 8004c52:	429d      	cmp	r5, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	d30a      	bcc.n	8004c6e <quorem+0x106>
 8004c58:	613c      	str	r4, [r7, #16]
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	b003      	add	sp, #12
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	3b04      	subs	r3, #4
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d1cc      	bne.n	8004c04 <quorem+0x9c>
 8004c6a:	3c01      	subs	r4, #1
 8004c6c:	e7c7      	b.n	8004bfe <quorem+0x96>
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1f0      	bne.n	8004c58 <quorem+0xf0>
 8004c76:	3c01      	subs	r4, #1
 8004c78:	e7eb      	b.n	8004c52 <quorem+0xea>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e7ee      	b.n	8004c5c <quorem+0xf4>
	...

08004c80 <_dtoa_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	ed2d 8b02 	vpush	{d8}
 8004c88:	ec57 6b10 	vmov	r6, r7, d0
 8004c8c:	b095      	sub	sp, #84	; 0x54
 8004c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c94:	9105      	str	r1, [sp, #20]
 8004c96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ca0:	b975      	cbnz	r5, 8004cc0 <_dtoa_r+0x40>
 8004ca2:	2010      	movs	r0, #16
 8004ca4:	f000 fed6 	bl	8005a54 <malloc>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6260      	str	r0, [r4, #36]	; 0x24
 8004cac:	b920      	cbnz	r0, 8004cb8 <_dtoa_r+0x38>
 8004cae:	4bb2      	ldr	r3, [pc, #712]	; (8004f78 <_dtoa_r+0x2f8>)
 8004cb0:	21ea      	movs	r1, #234	; 0xea
 8004cb2:	48b2      	ldr	r0, [pc, #712]	; (8004f7c <_dtoa_r+0x2fc>)
 8004cb4:	f001 fd9c 	bl	80067f0 <__assert_func>
 8004cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cbc:	6005      	str	r5, [r0, #0]
 8004cbe:	60c5      	str	r5, [r0, #12]
 8004cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	b151      	cbz	r1, 8004cdc <_dtoa_r+0x5c>
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	604a      	str	r2, [r1, #4]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4093      	lsls	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 ff15 	bl	8005b00 <_Bfree>
 8004cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	1e3b      	subs	r3, r7, #0
 8004cde:	bfb9      	ittee	lt
 8004ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ce4:	9303      	strlt	r3, [sp, #12]
 8004ce6:	2300      	movge	r3, #0
 8004ce8:	f8c8 3000 	strge.w	r3, [r8]
 8004cec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004cf0:	4ba3      	ldr	r3, [pc, #652]	; (8004f80 <_dtoa_r+0x300>)
 8004cf2:	bfbc      	itt	lt
 8004cf4:	2201      	movlt	r2, #1
 8004cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cfa:	ea33 0309 	bics.w	r3, r3, r9
 8004cfe:	d11b      	bne.n	8004d38 <_dtoa_r+0xb8>
 8004d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d0c:	4333      	orrs	r3, r6
 8004d0e:	f000 857a 	beq.w	8005806 <_dtoa_r+0xb86>
 8004d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d14:	b963      	cbnz	r3, 8004d30 <_dtoa_r+0xb0>
 8004d16:	4b9b      	ldr	r3, [pc, #620]	; (8004f84 <_dtoa_r+0x304>)
 8004d18:	e024      	b.n	8004d64 <_dtoa_r+0xe4>
 8004d1a:	4b9b      	ldr	r3, [pc, #620]	; (8004f88 <_dtoa_r+0x308>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	9800      	ldr	r0, [sp, #0]
 8004d26:	b015      	add	sp, #84	; 0x54
 8004d28:	ecbd 8b02 	vpop	{d8}
 8004d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d30:	4b94      	ldr	r3, [pc, #592]	; (8004f84 <_dtoa_r+0x304>)
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	3303      	adds	r3, #3
 8004d36:	e7f3      	b.n	8004d20 <_dtoa_r+0xa0>
 8004d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	ec51 0b17 	vmov	r0, r1, d7
 8004d42:	2300      	movs	r3, #0
 8004d44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d48:	f7fb feee 	bl	8000b28 <__aeabi_dcmpeq>
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	b158      	cbz	r0, 8004d68 <_dtoa_r+0xe8>
 8004d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d52:	2301      	movs	r3, #1
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8551 	beq.w	8005800 <_dtoa_r+0xb80>
 8004d5e:	488b      	ldr	r0, [pc, #556]	; (8004f8c <_dtoa_r+0x30c>)
 8004d60:	6018      	str	r0, [r3, #0]
 8004d62:	1e43      	subs	r3, r0, #1
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	e7dd      	b.n	8004d24 <_dtoa_r+0xa4>
 8004d68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d6c:	aa12      	add	r2, sp, #72	; 0x48
 8004d6e:	a913      	add	r1, sp, #76	; 0x4c
 8004d70:	4620      	mov	r0, r4
 8004d72:	f001 f9a7 	bl	80060c4 <__d2b>
 8004d76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d7a:	4683      	mov	fp, r0
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	d07c      	beq.n	8004e7a <_dtoa_r+0x1fa>
 8004d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d9a:	4b7d      	ldr	r3, [pc, #500]	; (8004f90 <_dtoa_r+0x310>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4630      	mov	r0, r6
 8004da0:	4639      	mov	r1, r7
 8004da2:	f7fb faa1 	bl	80002e8 <__aeabi_dsub>
 8004da6:	a36e      	add	r3, pc, #440	; (adr r3, 8004f60 <_dtoa_r+0x2e0>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fc54 	bl	8000658 <__aeabi_dmul>
 8004db0:	a36d      	add	r3, pc, #436	; (adr r3, 8004f68 <_dtoa_r+0x2e8>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fa99 	bl	80002ec <__adddf3>
 8004dba:	4606      	mov	r6, r0
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	f7fb fbe0 	bl	8000584 <__aeabi_i2d>
 8004dc4:	a36a      	add	r3, pc, #424	; (adr r3, 8004f70 <_dtoa_r+0x2f0>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f7fb fc45 	bl	8000658 <__aeabi_dmul>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	f7fb fa89 	bl	80002ec <__adddf3>
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	f7fb feeb 	bl	8000bb8 <__aeabi_d2iz>
 8004de2:	2200      	movs	r2, #0
 8004de4:	4682      	mov	sl, r0
 8004de6:	2300      	movs	r3, #0
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fb fea6 	bl	8000b3c <__aeabi_dcmplt>
 8004df0:	b148      	cbz	r0, 8004e06 <_dtoa_r+0x186>
 8004df2:	4650      	mov	r0, sl
 8004df4:	f7fb fbc6 	bl	8000584 <__aeabi_i2d>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	f7fb fe94 	bl	8000b28 <__aeabi_dcmpeq>
 8004e00:	b908      	cbnz	r0, 8004e06 <_dtoa_r+0x186>
 8004e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e06:	f1ba 0f16 	cmp.w	sl, #22
 8004e0a:	d854      	bhi.n	8004eb6 <_dtoa_r+0x236>
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <_dtoa_r+0x314>)
 8004e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e1a:	f7fb fe8f 	bl	8000b3c <__aeabi_dcmplt>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d04b      	beq.n	8004eba <_dtoa_r+0x23a>
 8004e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e26:	2300      	movs	r3, #0
 8004e28:	930e      	str	r3, [sp, #56]	; 0x38
 8004e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e2c:	1b5d      	subs	r5, r3, r5
 8004e2e:	1e6b      	subs	r3, r5, #1
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	bf43      	ittte	mi
 8004e34:	2300      	movmi	r3, #0
 8004e36:	f1c5 0801 	rsbmi	r8, r5, #1
 8004e3a:	9304      	strmi	r3, [sp, #16]
 8004e3c:	f04f 0800 	movpl.w	r8, #0
 8004e40:	f1ba 0f00 	cmp.w	sl, #0
 8004e44:	db3b      	blt.n	8004ebe <_dtoa_r+0x23e>
 8004e46:	9b04      	ldr	r3, [sp, #16]
 8004e48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004e4c:	4453      	add	r3, sl
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9306      	str	r3, [sp, #24]
 8004e54:	9b05      	ldr	r3, [sp, #20]
 8004e56:	2b09      	cmp	r3, #9
 8004e58:	d869      	bhi.n	8004f2e <_dtoa_r+0x2ae>
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	bfc4      	itt	gt
 8004e5e:	3b04      	subgt	r3, #4
 8004e60:	9305      	strgt	r3, [sp, #20]
 8004e62:	9b05      	ldr	r3, [sp, #20]
 8004e64:	f1a3 0302 	sub.w	r3, r3, #2
 8004e68:	bfcc      	ite	gt
 8004e6a:	2500      	movgt	r5, #0
 8004e6c:	2501      	movle	r5, #1
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d869      	bhi.n	8004f46 <_dtoa_r+0x2c6>
 8004e72:	e8df f003 	tbb	[pc, r3]
 8004e76:	4e2c      	.short	0x4e2c
 8004e78:	5a4c      	.short	0x5a4c
 8004e7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e7e:	441d      	add	r5, r3
 8004e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	bfc1      	itttt	gt
 8004e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e90:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e98:	bfda      	itte	le
 8004e9a:	f1c3 0320 	rsble	r3, r3, #32
 8004e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004ea2:	4318      	orrgt	r0, r3
 8004ea4:	f7fb fb5e 	bl	8000564 <__aeabi_ui2d>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4606      	mov	r6, r0
 8004eac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004eb0:	3d01      	subs	r5, #1
 8004eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8004eb4:	e771      	b.n	8004d9a <_dtoa_r+0x11a>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7b6      	b.n	8004e28 <_dtoa_r+0x1a8>
 8004eba:	900e      	str	r0, [sp, #56]	; 0x38
 8004ebc:	e7b5      	b.n	8004e2a <_dtoa_r+0x1aa>
 8004ebe:	f1ca 0300 	rsb	r3, sl, #0
 8004ec2:	9306      	str	r3, [sp, #24]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	eba8 080a 	sub.w	r8, r8, sl
 8004eca:	930d      	str	r3, [sp, #52]	; 0x34
 8004ecc:	e7c2      	b.n	8004e54 <_dtoa_r+0x1d4>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9308      	str	r3, [sp, #32]
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc39      	bgt.n	8004f4c <_dtoa_r+0x2cc>
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ee8:	2200      	movs	r2, #0
 8004eea:	6042      	str	r2, [r0, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f102 0614 	add.w	r6, r2, #20
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	6841      	ldr	r1, [r0, #4]
 8004ef6:	d92f      	bls.n	8004f58 <_dtoa_r+0x2d8>
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 fdc1 	bl	8005a80 <_Balloc>
 8004efe:	9000      	str	r0, [sp, #0]
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d14b      	bne.n	8004f9c <_dtoa_r+0x31c>
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <_dtoa_r+0x318>)
 8004f06:	4602      	mov	r2, r0
 8004f08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f0c:	e6d1      	b.n	8004cb2 <_dtoa_r+0x32>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e7de      	b.n	8004ed0 <_dtoa_r+0x250>
 8004f12:	2300      	movs	r3, #0
 8004f14:	9308      	str	r3, [sp, #32]
 8004f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f18:	eb0a 0903 	add.w	r9, sl, r3
 8004f1c:	f109 0301 	add.w	r3, r9, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	bfb8      	it	lt
 8004f26:	2301      	movlt	r3, #1
 8004f28:	e7dd      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7f2      	b.n	8004f14 <_dtoa_r+0x294>
 8004f2e:	2501      	movs	r5, #1
 8004f30:	2300      	movs	r3, #0
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	9508      	str	r5, [sp, #32]
 8004f36:	f04f 39ff 	mov.w	r9, #4294967295
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f40:	2312      	movs	r3, #18
 8004f42:	9209      	str	r2, [sp, #36]	; 0x24
 8004f44:	e7cf      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f46:	2301      	movs	r3, #1
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	e7f4      	b.n	8004f36 <_dtoa_r+0x2b6>
 8004f4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f54:	464b      	mov	r3, r9
 8004f56:	e7c6      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f58:	3101      	adds	r1, #1
 8004f5a:	6041      	str	r1, [r0, #4]
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	e7c6      	b.n	8004eee <_dtoa_r+0x26e>
 8004f60:	636f4361 	.word	0x636f4361
 8004f64:	3fd287a7 	.word	0x3fd287a7
 8004f68:	8b60c8b3 	.word	0x8b60c8b3
 8004f6c:	3fc68a28 	.word	0x3fc68a28
 8004f70:	509f79fb 	.word	0x509f79fb
 8004f74:	3fd34413 	.word	0x3fd34413
 8004f78:	08006ced 	.word	0x08006ced
 8004f7c:	08006d04 	.word	0x08006d04
 8004f80:	7ff00000 	.word	0x7ff00000
 8004f84:	08006ce9 	.word	0x08006ce9
 8004f88:	08006ce0 	.word	0x08006ce0
 8004f8c:	08006cbd 	.word	0x08006cbd
 8004f90:	3ff80000 	.word	0x3ff80000
 8004f94:	08006e60 	.word	0x08006e60
 8004f98:	08006d63 	.word	0x08006d63
 8004f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9e:	9a00      	ldr	r2, [sp, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	2b0e      	cmp	r3, #14
 8004fa6:	f200 80ad 	bhi.w	8005104 <_dtoa_r+0x484>
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	f000 80aa 	beq.w	8005104 <_dtoa_r+0x484>
 8004fb0:	f1ba 0f00 	cmp.w	sl, #0
 8004fb4:	dd36      	ble.n	8005024 <_dtoa_r+0x3a4>
 8004fb6:	4ac3      	ldr	r2, [pc, #780]	; (80052c4 <_dtoa_r+0x644>)
 8004fb8:	f00a 030f 	and.w	r3, sl, #15
 8004fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fc0:	ed93 7b00 	vldr	d7, [r3]
 8004fc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8004fd0:	eef0 8a67 	vmov.f32	s17, s15
 8004fd4:	d016      	beq.n	8005004 <_dtoa_r+0x384>
 8004fd6:	4bbc      	ldr	r3, [pc, #752]	; (80052c8 <_dtoa_r+0x648>)
 8004fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe0:	f7fb fc64 	bl	80008ac <__aeabi_ddiv>
 8004fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe8:	f007 070f 	and.w	r7, r7, #15
 8004fec:	2503      	movs	r5, #3
 8004fee:	4eb6      	ldr	r6, [pc, #728]	; (80052c8 <_dtoa_r+0x648>)
 8004ff0:	b957      	cbnz	r7, 8005008 <_dtoa_r+0x388>
 8004ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff6:	ec53 2b18 	vmov	r2, r3, d8
 8004ffa:	f7fb fc57 	bl	80008ac <__aeabi_ddiv>
 8004ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005002:	e029      	b.n	8005058 <_dtoa_r+0x3d8>
 8005004:	2502      	movs	r5, #2
 8005006:	e7f2      	b.n	8004fee <_dtoa_r+0x36e>
 8005008:	07f9      	lsls	r1, r7, #31
 800500a:	d508      	bpl.n	800501e <_dtoa_r+0x39e>
 800500c:	ec51 0b18 	vmov	r0, r1, d8
 8005010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005014:	f7fb fb20 	bl	8000658 <__aeabi_dmul>
 8005018:	ec41 0b18 	vmov	d8, r0, r1
 800501c:	3501      	adds	r5, #1
 800501e:	107f      	asrs	r7, r7, #1
 8005020:	3608      	adds	r6, #8
 8005022:	e7e5      	b.n	8004ff0 <_dtoa_r+0x370>
 8005024:	f000 80a6 	beq.w	8005174 <_dtoa_r+0x4f4>
 8005028:	f1ca 0600 	rsb	r6, sl, #0
 800502c:	4ba5      	ldr	r3, [pc, #660]	; (80052c4 <_dtoa_r+0x644>)
 800502e:	4fa6      	ldr	r7, [pc, #664]	; (80052c8 <_dtoa_r+0x648>)
 8005030:	f006 020f 	and.w	r2, r6, #15
 8005034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005040:	f7fb fb0a 	bl	8000658 <__aeabi_dmul>
 8005044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005048:	1136      	asrs	r6, r6, #4
 800504a:	2300      	movs	r3, #0
 800504c:	2502      	movs	r5, #2
 800504e:	2e00      	cmp	r6, #0
 8005050:	f040 8085 	bne.w	800515e <_dtoa_r+0x4de>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1d2      	bne.n	8004ffe <_dtoa_r+0x37e>
 8005058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 808c 	beq.w	8005178 <_dtoa_r+0x4f8>
 8005060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005064:	4b99      	ldr	r3, [pc, #612]	; (80052cc <_dtoa_r+0x64c>)
 8005066:	2200      	movs	r2, #0
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb fd66 	bl	8000b3c <__aeabi_dcmplt>
 8005070:	2800      	cmp	r0, #0
 8005072:	f000 8081 	beq.w	8005178 <_dtoa_r+0x4f8>
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d07d      	beq.n	8005178 <_dtoa_r+0x4f8>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	dd3c      	ble.n	80050fc <_dtoa_r+0x47c>
 8005082:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	2200      	movs	r2, #0
 800508a:	4b91      	ldr	r3, [pc, #580]	; (80052d0 <_dtoa_r+0x650>)
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	f7fb fae2 	bl	8000658 <__aeabi_dmul>
 8005094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005098:	3501      	adds	r5, #1
 800509a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800509e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050a2:	4628      	mov	r0, r5
 80050a4:	f7fb fa6e 	bl	8000584 <__aeabi_i2d>
 80050a8:	4632      	mov	r2, r6
 80050aa:	463b      	mov	r3, r7
 80050ac:	f7fb fad4 	bl	8000658 <__aeabi_dmul>
 80050b0:	4b88      	ldr	r3, [pc, #544]	; (80052d4 <_dtoa_r+0x654>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	f7fb f91a 	bl	80002ec <__adddf3>
 80050b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80050bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d15c      	bne.n	8005182 <_dtoa_r+0x502>
 80050c8:	4b83      	ldr	r3, [pc, #524]	; (80052d8 <_dtoa_r+0x658>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb f90a 	bl	80002e8 <__aeabi_dsub>
 80050d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	f7fb fd4c 	bl	8000b78 <__aeabi_dcmpgt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f040 8296 	bne.w	8005612 <_dtoa_r+0x992>
 80050e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80050ea:	4630      	mov	r0, r6
 80050ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fd23 	bl	8000b3c <__aeabi_dcmplt>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f040 8288 	bne.w	800560c <_dtoa_r+0x98c>
 80050fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005106:	2b00      	cmp	r3, #0
 8005108:	f2c0 8158 	blt.w	80053bc <_dtoa_r+0x73c>
 800510c:	f1ba 0f0e 	cmp.w	sl, #14
 8005110:	f300 8154 	bgt.w	80053bc <_dtoa_r+0x73c>
 8005114:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <_dtoa_r+0x644>)
 8005116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800511a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	f280 80e3 	bge.w	80052ec <_dtoa_r+0x66c>
 8005126:	9b01      	ldr	r3, [sp, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f300 80df 	bgt.w	80052ec <_dtoa_r+0x66c>
 800512e:	f040 826d 	bne.w	800560c <_dtoa_r+0x98c>
 8005132:	4b69      	ldr	r3, [pc, #420]	; (80052d8 <_dtoa_r+0x658>)
 8005134:	2200      	movs	r2, #0
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	f7fb fa8d 	bl	8000658 <__aeabi_dmul>
 800513e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005142:	f7fb fd0f 	bl	8000b64 <__aeabi_dcmpge>
 8005146:	9e01      	ldr	r6, [sp, #4]
 8005148:	4637      	mov	r7, r6
 800514a:	2800      	cmp	r0, #0
 800514c:	f040 8243 	bne.w	80055d6 <_dtoa_r+0x956>
 8005150:	9d00      	ldr	r5, [sp, #0]
 8005152:	2331      	movs	r3, #49	; 0x31
 8005154:	f805 3b01 	strb.w	r3, [r5], #1
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	e23f      	b.n	80055de <_dtoa_r+0x95e>
 800515e:	07f2      	lsls	r2, r6, #31
 8005160:	d505      	bpl.n	800516e <_dtoa_r+0x4ee>
 8005162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005166:	f7fb fa77 	bl	8000658 <__aeabi_dmul>
 800516a:	3501      	adds	r5, #1
 800516c:	2301      	movs	r3, #1
 800516e:	1076      	asrs	r6, r6, #1
 8005170:	3708      	adds	r7, #8
 8005172:	e76c      	b.n	800504e <_dtoa_r+0x3ce>
 8005174:	2502      	movs	r5, #2
 8005176:	e76f      	b.n	8005058 <_dtoa_r+0x3d8>
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	f8cd a01c 	str.w	sl, [sp, #28]
 800517e:	930c      	str	r3, [sp, #48]	; 0x30
 8005180:	e78d      	b.n	800509e <_dtoa_r+0x41e>
 8005182:	9900      	ldr	r1, [sp, #0]
 8005184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005188:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <_dtoa_r+0x644>)
 800518a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800518e:	4401      	add	r1, r0
 8005190:	9102      	str	r1, [sp, #8]
 8005192:	9908      	ldr	r1, [sp, #32]
 8005194:	eeb0 8a47 	vmov.f32	s16, s14
 8005198:	eef0 8a67 	vmov.f32	s17, s15
 800519c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d045      	beq.n	8005234 <_dtoa_r+0x5b4>
 80051a8:	494c      	ldr	r1, [pc, #304]	; (80052dc <_dtoa_r+0x65c>)
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7fb fb7e 	bl	80008ac <__aeabi_ddiv>
 80051b0:	ec53 2b18 	vmov	r2, r3, d8
 80051b4:	f7fb f898 	bl	80002e8 <__aeabi_dsub>
 80051b8:	9d00      	ldr	r5, [sp, #0]
 80051ba:	ec41 0b18 	vmov	d8, r0, r1
 80051be:	4639      	mov	r1, r7
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7fb fcf9 	bl	8000bb8 <__aeabi_d2iz>
 80051c6:	900c      	str	r0, [sp, #48]	; 0x30
 80051c8:	f7fb f9dc 	bl	8000584 <__aeabi_i2d>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4630      	mov	r0, r6
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb f888 	bl	80002e8 <__aeabi_dsub>
 80051d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051da:	3330      	adds	r3, #48	; 0x30
 80051dc:	f805 3b01 	strb.w	r3, [r5], #1
 80051e0:	ec53 2b18 	vmov	r2, r3, d8
 80051e4:	4606      	mov	r6, r0
 80051e6:	460f      	mov	r7, r1
 80051e8:	f7fb fca8 	bl	8000b3c <__aeabi_dcmplt>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d165      	bne.n	80052bc <_dtoa_r+0x63c>
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	4935      	ldr	r1, [pc, #212]	; (80052cc <_dtoa_r+0x64c>)
 80051f6:	2000      	movs	r0, #0
 80051f8:	f7fb f876 	bl	80002e8 <__aeabi_dsub>
 80051fc:	ec53 2b18 	vmov	r2, r3, d8
 8005200:	f7fb fc9c 	bl	8000b3c <__aeabi_dcmplt>
 8005204:	2800      	cmp	r0, #0
 8005206:	f040 80b9 	bne.w	800537c <_dtoa_r+0x6fc>
 800520a:	9b02      	ldr	r3, [sp, #8]
 800520c:	429d      	cmp	r5, r3
 800520e:	f43f af75 	beq.w	80050fc <_dtoa_r+0x47c>
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <_dtoa_r+0x650>)
 8005214:	ec51 0b18 	vmov	r0, r1, d8
 8005218:	2200      	movs	r2, #0
 800521a:	f7fb fa1d 	bl	8000658 <__aeabi_dmul>
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <_dtoa_r+0x650>)
 8005220:	ec41 0b18 	vmov	d8, r0, r1
 8005224:	2200      	movs	r2, #0
 8005226:	4630      	mov	r0, r6
 8005228:	4639      	mov	r1, r7
 800522a:	f7fb fa15 	bl	8000658 <__aeabi_dmul>
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	e7c4      	b.n	80051be <_dtoa_r+0x53e>
 8005234:	ec51 0b17 	vmov	r0, r1, d7
 8005238:	f7fb fa0e 	bl	8000658 <__aeabi_dmul>
 800523c:	9b02      	ldr	r3, [sp, #8]
 800523e:	9d00      	ldr	r5, [sp, #0]
 8005240:	930c      	str	r3, [sp, #48]	; 0x30
 8005242:	ec41 0b18 	vmov	d8, r0, r1
 8005246:	4639      	mov	r1, r7
 8005248:	4630      	mov	r0, r6
 800524a:	f7fb fcb5 	bl	8000bb8 <__aeabi_d2iz>
 800524e:	9011      	str	r0, [sp, #68]	; 0x44
 8005250:	f7fb f998 	bl	8000584 <__aeabi_i2d>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb f844 	bl	80002e8 <__aeabi_dsub>
 8005260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005262:	3330      	adds	r3, #48	; 0x30
 8005264:	f805 3b01 	strb.w	r3, [r5], #1
 8005268:	9b02      	ldr	r3, [sp, #8]
 800526a:	429d      	cmp	r5, r3
 800526c:	4606      	mov	r6, r0
 800526e:	460f      	mov	r7, r1
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	d134      	bne.n	80052e0 <_dtoa_r+0x660>
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <_dtoa_r+0x65c>)
 8005278:	ec51 0b18 	vmov	r0, r1, d8
 800527c:	f7fb f836 	bl	80002ec <__adddf3>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4630      	mov	r0, r6
 8005286:	4639      	mov	r1, r7
 8005288:	f7fb fc76 	bl	8000b78 <__aeabi_dcmpgt>
 800528c:	2800      	cmp	r0, #0
 800528e:	d175      	bne.n	800537c <_dtoa_r+0x6fc>
 8005290:	ec53 2b18 	vmov	r2, r3, d8
 8005294:	4911      	ldr	r1, [pc, #68]	; (80052dc <_dtoa_r+0x65c>)
 8005296:	2000      	movs	r0, #0
 8005298:	f7fb f826 	bl	80002e8 <__aeabi_dsub>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fc4a 	bl	8000b3c <__aeabi_dcmplt>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f43f af27 	beq.w	80050fc <_dtoa_r+0x47c>
 80052ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052b0:	1e6b      	subs	r3, r5, #1
 80052b2:	930c      	str	r3, [sp, #48]	; 0x30
 80052b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d0f8      	beq.n	80052ae <_dtoa_r+0x62e>
 80052bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80052c0:	e04a      	b.n	8005358 <_dtoa_r+0x6d8>
 80052c2:	bf00      	nop
 80052c4:	08006e60 	.word	0x08006e60
 80052c8:	08006e38 	.word	0x08006e38
 80052cc:	3ff00000 	.word	0x3ff00000
 80052d0:	40240000 	.word	0x40240000
 80052d4:	401c0000 	.word	0x401c0000
 80052d8:	40140000 	.word	0x40140000
 80052dc:	3fe00000 	.word	0x3fe00000
 80052e0:	4baf      	ldr	r3, [pc, #700]	; (80055a0 <_dtoa_r+0x920>)
 80052e2:	f7fb f9b9 	bl	8000658 <__aeabi_dmul>
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	e7ac      	b.n	8005246 <_dtoa_r+0x5c6>
 80052ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052f0:	9d00      	ldr	r5, [sp, #0]
 80052f2:	4642      	mov	r2, r8
 80052f4:	464b      	mov	r3, r9
 80052f6:	4630      	mov	r0, r6
 80052f8:	4639      	mov	r1, r7
 80052fa:	f7fb fad7 	bl	80008ac <__aeabi_ddiv>
 80052fe:	f7fb fc5b 	bl	8000bb8 <__aeabi_d2iz>
 8005302:	9002      	str	r0, [sp, #8]
 8005304:	f7fb f93e 	bl	8000584 <__aeabi_i2d>
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	f7fb f9a4 	bl	8000658 <__aeabi_dmul>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4630      	mov	r0, r6
 8005316:	4639      	mov	r1, r7
 8005318:	f7fa ffe6 	bl	80002e8 <__aeabi_dsub>
 800531c:	9e02      	ldr	r6, [sp, #8]
 800531e:	9f01      	ldr	r7, [sp, #4]
 8005320:	3630      	adds	r6, #48	; 0x30
 8005322:	f805 6b01 	strb.w	r6, [r5], #1
 8005326:	9e00      	ldr	r6, [sp, #0]
 8005328:	1bae      	subs	r6, r5, r6
 800532a:	42b7      	cmp	r7, r6
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	d137      	bne.n	80053a2 <_dtoa_r+0x722>
 8005332:	f7fa ffdb 	bl	80002ec <__adddf3>
 8005336:	4642      	mov	r2, r8
 8005338:	464b      	mov	r3, r9
 800533a:	4606      	mov	r6, r0
 800533c:	460f      	mov	r7, r1
 800533e:	f7fb fc1b 	bl	8000b78 <__aeabi_dcmpgt>
 8005342:	b9c8      	cbnz	r0, 8005378 <_dtoa_r+0x6f8>
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fb fbec 	bl	8000b28 <__aeabi_dcmpeq>
 8005350:	b110      	cbz	r0, 8005358 <_dtoa_r+0x6d8>
 8005352:	9b02      	ldr	r3, [sp, #8]
 8005354:	07d9      	lsls	r1, r3, #31
 8005356:	d40f      	bmi.n	8005378 <_dtoa_r+0x6f8>
 8005358:	4620      	mov	r0, r4
 800535a:	4659      	mov	r1, fp
 800535c:	f000 fbd0 	bl	8005b00 <_Bfree>
 8005360:	2300      	movs	r3, #0
 8005362:	702b      	strb	r3, [r5, #0]
 8005364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005366:	f10a 0001 	add.w	r0, sl, #1
 800536a:	6018      	str	r0, [r3, #0]
 800536c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800536e:	2b00      	cmp	r3, #0
 8005370:	f43f acd8 	beq.w	8004d24 <_dtoa_r+0xa4>
 8005374:	601d      	str	r5, [r3, #0]
 8005376:	e4d5      	b.n	8004d24 <_dtoa_r+0xa4>
 8005378:	f8cd a01c 	str.w	sl, [sp, #28]
 800537c:	462b      	mov	r3, r5
 800537e:	461d      	mov	r5, r3
 8005380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005384:	2a39      	cmp	r2, #57	; 0x39
 8005386:	d108      	bne.n	800539a <_dtoa_r+0x71a>
 8005388:	9a00      	ldr	r2, [sp, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d1f7      	bne.n	800537e <_dtoa_r+0x6fe>
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	9900      	ldr	r1, [sp, #0]
 8005392:	3201      	adds	r2, #1
 8005394:	9207      	str	r2, [sp, #28]
 8005396:	2230      	movs	r2, #48	; 0x30
 8005398:	700a      	strb	r2, [r1, #0]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	3201      	adds	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e78c      	b.n	80052bc <_dtoa_r+0x63c>
 80053a2:	4b7f      	ldr	r3, [pc, #508]	; (80055a0 <_dtoa_r+0x920>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	f7fb f957 	bl	8000658 <__aeabi_dmul>
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	f7fb fbb9 	bl	8000b28 <__aeabi_dcmpeq>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d09b      	beq.n	80052f2 <_dtoa_r+0x672>
 80053ba:	e7cd      	b.n	8005358 <_dtoa_r+0x6d8>
 80053bc:	9a08      	ldr	r2, [sp, #32]
 80053be:	2a00      	cmp	r2, #0
 80053c0:	f000 80c4 	beq.w	800554c <_dtoa_r+0x8cc>
 80053c4:	9a05      	ldr	r2, [sp, #20]
 80053c6:	2a01      	cmp	r2, #1
 80053c8:	f300 80a8 	bgt.w	800551c <_dtoa_r+0x89c>
 80053cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	f000 80a0 	beq.w	8005514 <_dtoa_r+0x894>
 80053d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053d8:	9e06      	ldr	r6, [sp, #24]
 80053da:	4645      	mov	r5, r8
 80053dc:	9a04      	ldr	r2, [sp, #16]
 80053de:	2101      	movs	r1, #1
 80053e0:	441a      	add	r2, r3
 80053e2:	4620      	mov	r0, r4
 80053e4:	4498      	add	r8, r3
 80053e6:	9204      	str	r2, [sp, #16]
 80053e8:	f000 fc46 	bl	8005c78 <__i2b>
 80053ec:	4607      	mov	r7, r0
 80053ee:	2d00      	cmp	r5, #0
 80053f0:	dd0b      	ble.n	800540a <_dtoa_r+0x78a>
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd08      	ble.n	800540a <_dtoa_r+0x78a>
 80053f8:	42ab      	cmp	r3, r5
 80053fa:	9a04      	ldr	r2, [sp, #16]
 80053fc:	bfa8      	it	ge
 80053fe:	462b      	movge	r3, r5
 8005400:	eba8 0803 	sub.w	r8, r8, r3
 8005404:	1aed      	subs	r5, r5, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	b1fb      	cbz	r3, 800544e <_dtoa_r+0x7ce>
 800540e:	9b08      	ldr	r3, [sp, #32]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 809f 	beq.w	8005554 <_dtoa_r+0x8d4>
 8005416:	2e00      	cmp	r6, #0
 8005418:	dd11      	ble.n	800543e <_dtoa_r+0x7be>
 800541a:	4639      	mov	r1, r7
 800541c:	4632      	mov	r2, r6
 800541e:	4620      	mov	r0, r4
 8005420:	f000 fce6 	bl	8005df0 <__pow5mult>
 8005424:	465a      	mov	r2, fp
 8005426:	4601      	mov	r1, r0
 8005428:	4607      	mov	r7, r0
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fc3a 	bl	8005ca4 <__multiply>
 8005430:	4659      	mov	r1, fp
 8005432:	9007      	str	r0, [sp, #28]
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fb63 	bl	8005b00 <_Bfree>
 800543a:	9b07      	ldr	r3, [sp, #28]
 800543c:	469b      	mov	fp, r3
 800543e:	9b06      	ldr	r3, [sp, #24]
 8005440:	1b9a      	subs	r2, r3, r6
 8005442:	d004      	beq.n	800544e <_dtoa_r+0x7ce>
 8005444:	4659      	mov	r1, fp
 8005446:	4620      	mov	r0, r4
 8005448:	f000 fcd2 	bl	8005df0 <__pow5mult>
 800544c:	4683      	mov	fp, r0
 800544e:	2101      	movs	r1, #1
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fc11 	bl	8005c78 <__i2b>
 8005456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	4606      	mov	r6, r0
 800545c:	dd7c      	ble.n	8005558 <_dtoa_r+0x8d8>
 800545e:	461a      	mov	r2, r3
 8005460:	4601      	mov	r1, r0
 8005462:	4620      	mov	r0, r4
 8005464:	f000 fcc4 	bl	8005df0 <__pow5mult>
 8005468:	9b05      	ldr	r3, [sp, #20]
 800546a:	2b01      	cmp	r3, #1
 800546c:	4606      	mov	r6, r0
 800546e:	dd76      	ble.n	800555e <_dtoa_r+0x8de>
 8005470:	2300      	movs	r3, #0
 8005472:	9306      	str	r3, [sp, #24]
 8005474:	6933      	ldr	r3, [r6, #16]
 8005476:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800547a:	6918      	ldr	r0, [r3, #16]
 800547c:	f000 fbac 	bl	8005bd8 <__hi0bits>
 8005480:	f1c0 0020 	rsb	r0, r0, #32
 8005484:	9b04      	ldr	r3, [sp, #16]
 8005486:	4418      	add	r0, r3
 8005488:	f010 001f 	ands.w	r0, r0, #31
 800548c:	f000 8086 	beq.w	800559c <_dtoa_r+0x91c>
 8005490:	f1c0 0320 	rsb	r3, r0, #32
 8005494:	2b04      	cmp	r3, #4
 8005496:	dd7f      	ble.n	8005598 <_dtoa_r+0x918>
 8005498:	f1c0 001c 	rsb	r0, r0, #28
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	4403      	add	r3, r0
 80054a0:	4480      	add	r8, r0
 80054a2:	4405      	add	r5, r0
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	f1b8 0f00 	cmp.w	r8, #0
 80054aa:	dd05      	ble.n	80054b8 <_dtoa_r+0x838>
 80054ac:	4659      	mov	r1, fp
 80054ae:	4642      	mov	r2, r8
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 fcf7 	bl	8005ea4 <__lshift>
 80054b6:	4683      	mov	fp, r0
 80054b8:	9b04      	ldr	r3, [sp, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd05      	ble.n	80054ca <_dtoa_r+0x84a>
 80054be:	4631      	mov	r1, r6
 80054c0:	461a      	mov	r2, r3
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 fcee 	bl	8005ea4 <__lshift>
 80054c8:	4606      	mov	r6, r0
 80054ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d069      	beq.n	80055a4 <_dtoa_r+0x924>
 80054d0:	4631      	mov	r1, r6
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fd52 	bl	8005f7c <__mcmp>
 80054d8:	2800      	cmp	r0, #0
 80054da:	da63      	bge.n	80055a4 <_dtoa_r+0x924>
 80054dc:	2300      	movs	r3, #0
 80054de:	4659      	mov	r1, fp
 80054e0:	220a      	movs	r2, #10
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fb2e 	bl	8005b44 <__multadd>
 80054e8:	9b08      	ldr	r3, [sp, #32]
 80054ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ee:	4683      	mov	fp, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 818f 	beq.w	8005814 <_dtoa_r+0xb94>
 80054f6:	4639      	mov	r1, r7
 80054f8:	2300      	movs	r3, #0
 80054fa:	220a      	movs	r2, #10
 80054fc:	4620      	mov	r0, r4
 80054fe:	f000 fb21 	bl	8005b44 <__multadd>
 8005502:	f1b9 0f00 	cmp.w	r9, #0
 8005506:	4607      	mov	r7, r0
 8005508:	f300 808e 	bgt.w	8005628 <_dtoa_r+0x9a8>
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	2b02      	cmp	r3, #2
 8005510:	dc50      	bgt.n	80055b4 <_dtoa_r+0x934>
 8005512:	e089      	b.n	8005628 <_dtoa_r+0x9a8>
 8005514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800551a:	e75d      	b.n	80053d8 <_dtoa_r+0x758>
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	1e5e      	subs	r6, r3, #1
 8005520:	9b06      	ldr	r3, [sp, #24]
 8005522:	42b3      	cmp	r3, r6
 8005524:	bfbf      	itttt	lt
 8005526:	9b06      	ldrlt	r3, [sp, #24]
 8005528:	9606      	strlt	r6, [sp, #24]
 800552a:	1af2      	sublt	r2, r6, r3
 800552c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800552e:	bfb6      	itet	lt
 8005530:	189b      	addlt	r3, r3, r2
 8005532:	1b9e      	subge	r6, r3, r6
 8005534:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	bfb8      	it	lt
 800553a:	2600      	movlt	r6, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfb5      	itete	lt
 8005540:	eba8 0503 	sublt.w	r5, r8, r3
 8005544:	9b01      	ldrge	r3, [sp, #4]
 8005546:	2300      	movlt	r3, #0
 8005548:	4645      	movge	r5, r8
 800554a:	e747      	b.n	80053dc <_dtoa_r+0x75c>
 800554c:	9e06      	ldr	r6, [sp, #24]
 800554e:	9f08      	ldr	r7, [sp, #32]
 8005550:	4645      	mov	r5, r8
 8005552:	e74c      	b.n	80053ee <_dtoa_r+0x76e>
 8005554:	9a06      	ldr	r2, [sp, #24]
 8005556:	e775      	b.n	8005444 <_dtoa_r+0x7c4>
 8005558:	9b05      	ldr	r3, [sp, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	dc18      	bgt.n	8005590 <_dtoa_r+0x910>
 800555e:	9b02      	ldr	r3, [sp, #8]
 8005560:	b9b3      	cbnz	r3, 8005590 <_dtoa_r+0x910>
 8005562:	9b03      	ldr	r3, [sp, #12]
 8005564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005568:	b9a3      	cbnz	r3, 8005594 <_dtoa_r+0x914>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005570:	0d1b      	lsrs	r3, r3, #20
 8005572:	051b      	lsls	r3, r3, #20
 8005574:	b12b      	cbz	r3, 8005582 <_dtoa_r+0x902>
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	3301      	adds	r3, #1
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	f108 0801 	add.w	r8, r8, #1
 8005580:	2301      	movs	r3, #1
 8005582:	9306      	str	r3, [sp, #24]
 8005584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005586:	2b00      	cmp	r3, #0
 8005588:	f47f af74 	bne.w	8005474 <_dtoa_r+0x7f4>
 800558c:	2001      	movs	r0, #1
 800558e:	e779      	b.n	8005484 <_dtoa_r+0x804>
 8005590:	2300      	movs	r3, #0
 8005592:	e7f6      	b.n	8005582 <_dtoa_r+0x902>
 8005594:	9b02      	ldr	r3, [sp, #8]
 8005596:	e7f4      	b.n	8005582 <_dtoa_r+0x902>
 8005598:	d085      	beq.n	80054a6 <_dtoa_r+0x826>
 800559a:	4618      	mov	r0, r3
 800559c:	301c      	adds	r0, #28
 800559e:	e77d      	b.n	800549c <_dtoa_r+0x81c>
 80055a0:	40240000 	.word	0x40240000
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dc38      	bgt.n	800561c <_dtoa_r+0x99c>
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	dd35      	ble.n	800561c <_dtoa_r+0x99c>
 80055b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	d10d      	bne.n	80055d6 <_dtoa_r+0x956>
 80055ba:	4631      	mov	r1, r6
 80055bc:	464b      	mov	r3, r9
 80055be:	2205      	movs	r2, #5
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fabf 	bl	8005b44 <__multadd>
 80055c6:	4601      	mov	r1, r0
 80055c8:	4606      	mov	r6, r0
 80055ca:	4658      	mov	r0, fp
 80055cc:	f000 fcd6 	bl	8005f7c <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f73f adbd 	bgt.w	8005150 <_dtoa_r+0x4d0>
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	9d00      	ldr	r5, [sp, #0]
 80055da:	ea6f 0a03 	mvn.w	sl, r3
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	4631      	mov	r1, r6
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 fa8b 	bl	8005b00 <_Bfree>
 80055ea:	2f00      	cmp	r7, #0
 80055ec:	f43f aeb4 	beq.w	8005358 <_dtoa_r+0x6d8>
 80055f0:	f1b8 0f00 	cmp.w	r8, #0
 80055f4:	d005      	beq.n	8005602 <_dtoa_r+0x982>
 80055f6:	45b8      	cmp	r8, r7
 80055f8:	d003      	beq.n	8005602 <_dtoa_r+0x982>
 80055fa:	4641      	mov	r1, r8
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fa7f 	bl	8005b00 <_Bfree>
 8005602:	4639      	mov	r1, r7
 8005604:	4620      	mov	r0, r4
 8005606:	f000 fa7b 	bl	8005b00 <_Bfree>
 800560a:	e6a5      	b.n	8005358 <_dtoa_r+0x6d8>
 800560c:	2600      	movs	r6, #0
 800560e:	4637      	mov	r7, r6
 8005610:	e7e1      	b.n	80055d6 <_dtoa_r+0x956>
 8005612:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005618:	4637      	mov	r7, r6
 800561a:	e599      	b.n	8005150 <_dtoa_r+0x4d0>
 800561c:	9b08      	ldr	r3, [sp, #32]
 800561e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80fd 	beq.w	8005822 <_dtoa_r+0xba2>
 8005628:	2d00      	cmp	r5, #0
 800562a:	dd05      	ble.n	8005638 <_dtoa_r+0x9b8>
 800562c:	4639      	mov	r1, r7
 800562e:	462a      	mov	r2, r5
 8005630:	4620      	mov	r0, r4
 8005632:	f000 fc37 	bl	8005ea4 <__lshift>
 8005636:	4607      	mov	r7, r0
 8005638:	9b06      	ldr	r3, [sp, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d05c      	beq.n	80056f8 <_dtoa_r+0xa78>
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fa1d 	bl	8005a80 <_Balloc>
 8005646:	4605      	mov	r5, r0
 8005648:	b928      	cbnz	r0, 8005656 <_dtoa_r+0x9d6>
 800564a:	4b80      	ldr	r3, [pc, #512]	; (800584c <_dtoa_r+0xbcc>)
 800564c:	4602      	mov	r2, r0
 800564e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005652:	f7ff bb2e 	b.w	8004cb2 <_dtoa_r+0x32>
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	3202      	adds	r2, #2
 800565a:	0092      	lsls	r2, r2, #2
 800565c:	f107 010c 	add.w	r1, r7, #12
 8005660:	300c      	adds	r0, #12
 8005662:	f000 f9ff 	bl	8005a64 <memcpy>
 8005666:	2201      	movs	r2, #1
 8005668:	4629      	mov	r1, r5
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fc1a 	bl	8005ea4 <__lshift>
 8005670:	9b00      	ldr	r3, [sp, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	9b00      	ldr	r3, [sp, #0]
 8005678:	444b      	add	r3, r9
 800567a:	9307      	str	r3, [sp, #28]
 800567c:	9b02      	ldr	r3, [sp, #8]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	46b8      	mov	r8, r7
 8005684:	9306      	str	r3, [sp, #24]
 8005686:	4607      	mov	r7, r0
 8005688:	9b01      	ldr	r3, [sp, #4]
 800568a:	4631      	mov	r1, r6
 800568c:	3b01      	subs	r3, #1
 800568e:	4658      	mov	r0, fp
 8005690:	9302      	str	r3, [sp, #8]
 8005692:	f7ff fa69 	bl	8004b68 <quorem>
 8005696:	4603      	mov	r3, r0
 8005698:	3330      	adds	r3, #48	; 0x30
 800569a:	9004      	str	r0, [sp, #16]
 800569c:	4641      	mov	r1, r8
 800569e:	4658      	mov	r0, fp
 80056a0:	9308      	str	r3, [sp, #32]
 80056a2:	f000 fc6b 	bl	8005f7c <__mcmp>
 80056a6:	463a      	mov	r2, r7
 80056a8:	4681      	mov	r9, r0
 80056aa:	4631      	mov	r1, r6
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fc81 	bl	8005fb4 <__mdiff>
 80056b2:	68c2      	ldr	r2, [r0, #12]
 80056b4:	9b08      	ldr	r3, [sp, #32]
 80056b6:	4605      	mov	r5, r0
 80056b8:	bb02      	cbnz	r2, 80056fc <_dtoa_r+0xa7c>
 80056ba:	4601      	mov	r1, r0
 80056bc:	4658      	mov	r0, fp
 80056be:	f000 fc5d 	bl	8005f7c <__mcmp>
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	4602      	mov	r2, r0
 80056c6:	4629      	mov	r1, r5
 80056c8:	4620      	mov	r0, r4
 80056ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80056ce:	f000 fa17 	bl	8005b00 <_Bfree>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d6:	9d01      	ldr	r5, [sp, #4]
 80056d8:	ea43 0102 	orr.w	r1, r3, r2
 80056dc:	9b06      	ldr	r3, [sp, #24]
 80056de:	430b      	orrs	r3, r1
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	d10d      	bne.n	8005700 <_dtoa_r+0xa80>
 80056e4:	2b39      	cmp	r3, #57	; 0x39
 80056e6:	d029      	beq.n	800573c <_dtoa_r+0xabc>
 80056e8:	f1b9 0f00 	cmp.w	r9, #0
 80056ec:	dd01      	ble.n	80056f2 <_dtoa_r+0xa72>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	3331      	adds	r3, #49	; 0x31
 80056f2:	9a02      	ldr	r2, [sp, #8]
 80056f4:	7013      	strb	r3, [r2, #0]
 80056f6:	e774      	b.n	80055e2 <_dtoa_r+0x962>
 80056f8:	4638      	mov	r0, r7
 80056fa:	e7b9      	b.n	8005670 <_dtoa_r+0x9f0>
 80056fc:	2201      	movs	r2, #1
 80056fe:	e7e2      	b.n	80056c6 <_dtoa_r+0xa46>
 8005700:	f1b9 0f00 	cmp.w	r9, #0
 8005704:	db06      	blt.n	8005714 <_dtoa_r+0xa94>
 8005706:	9905      	ldr	r1, [sp, #20]
 8005708:	ea41 0909 	orr.w	r9, r1, r9
 800570c:	9906      	ldr	r1, [sp, #24]
 800570e:	ea59 0101 	orrs.w	r1, r9, r1
 8005712:	d120      	bne.n	8005756 <_dtoa_r+0xad6>
 8005714:	2a00      	cmp	r2, #0
 8005716:	ddec      	ble.n	80056f2 <_dtoa_r+0xa72>
 8005718:	4659      	mov	r1, fp
 800571a:	2201      	movs	r2, #1
 800571c:	4620      	mov	r0, r4
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	f000 fbc0 	bl	8005ea4 <__lshift>
 8005724:	4631      	mov	r1, r6
 8005726:	4683      	mov	fp, r0
 8005728:	f000 fc28 	bl	8005f7c <__mcmp>
 800572c:	2800      	cmp	r0, #0
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	dc02      	bgt.n	8005738 <_dtoa_r+0xab8>
 8005732:	d1de      	bne.n	80056f2 <_dtoa_r+0xa72>
 8005734:	07da      	lsls	r2, r3, #31
 8005736:	d5dc      	bpl.n	80056f2 <_dtoa_r+0xa72>
 8005738:	2b39      	cmp	r3, #57	; 0x39
 800573a:	d1d8      	bne.n	80056ee <_dtoa_r+0xa6e>
 800573c:	9a02      	ldr	r2, [sp, #8]
 800573e:	2339      	movs	r3, #57	; 0x39
 8005740:	7013      	strb	r3, [r2, #0]
 8005742:	462b      	mov	r3, r5
 8005744:	461d      	mov	r5, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800574c:	2a39      	cmp	r2, #57	; 0x39
 800574e:	d050      	beq.n	80057f2 <_dtoa_r+0xb72>
 8005750:	3201      	adds	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e745      	b.n	80055e2 <_dtoa_r+0x962>
 8005756:	2a00      	cmp	r2, #0
 8005758:	dd03      	ble.n	8005762 <_dtoa_r+0xae2>
 800575a:	2b39      	cmp	r3, #57	; 0x39
 800575c:	d0ee      	beq.n	800573c <_dtoa_r+0xabc>
 800575e:	3301      	adds	r3, #1
 8005760:	e7c7      	b.n	80056f2 <_dtoa_r+0xa72>
 8005762:	9a01      	ldr	r2, [sp, #4]
 8005764:	9907      	ldr	r1, [sp, #28]
 8005766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800576a:	428a      	cmp	r2, r1
 800576c:	d02a      	beq.n	80057c4 <_dtoa_r+0xb44>
 800576e:	4659      	mov	r1, fp
 8005770:	2300      	movs	r3, #0
 8005772:	220a      	movs	r2, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f9e5 	bl	8005b44 <__multadd>
 800577a:	45b8      	cmp	r8, r7
 800577c:	4683      	mov	fp, r0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	f04f 020a 	mov.w	r2, #10
 8005786:	4641      	mov	r1, r8
 8005788:	4620      	mov	r0, r4
 800578a:	d107      	bne.n	800579c <_dtoa_r+0xb1c>
 800578c:	f000 f9da 	bl	8005b44 <__multadd>
 8005790:	4680      	mov	r8, r0
 8005792:	4607      	mov	r7, r0
 8005794:	9b01      	ldr	r3, [sp, #4]
 8005796:	3301      	adds	r3, #1
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	e775      	b.n	8005688 <_dtoa_r+0xa08>
 800579c:	f000 f9d2 	bl	8005b44 <__multadd>
 80057a0:	4639      	mov	r1, r7
 80057a2:	4680      	mov	r8, r0
 80057a4:	2300      	movs	r3, #0
 80057a6:	220a      	movs	r2, #10
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 f9cb 	bl	8005b44 <__multadd>
 80057ae:	4607      	mov	r7, r0
 80057b0:	e7f0      	b.n	8005794 <_dtoa_r+0xb14>
 80057b2:	f1b9 0f00 	cmp.w	r9, #0
 80057b6:	9a00      	ldr	r2, [sp, #0]
 80057b8:	bfcc      	ite	gt
 80057ba:	464d      	movgt	r5, r9
 80057bc:	2501      	movle	r5, #1
 80057be:	4415      	add	r5, r2
 80057c0:	f04f 0800 	mov.w	r8, #0
 80057c4:	4659      	mov	r1, fp
 80057c6:	2201      	movs	r2, #1
 80057c8:	4620      	mov	r0, r4
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	f000 fb6a 	bl	8005ea4 <__lshift>
 80057d0:	4631      	mov	r1, r6
 80057d2:	4683      	mov	fp, r0
 80057d4:	f000 fbd2 	bl	8005f7c <__mcmp>
 80057d8:	2800      	cmp	r0, #0
 80057da:	dcb2      	bgt.n	8005742 <_dtoa_r+0xac2>
 80057dc:	d102      	bne.n	80057e4 <_dtoa_r+0xb64>
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	07db      	lsls	r3, r3, #31
 80057e2:	d4ae      	bmi.n	8005742 <_dtoa_r+0xac2>
 80057e4:	462b      	mov	r3, r5
 80057e6:	461d      	mov	r5, r3
 80057e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ec:	2a30      	cmp	r2, #48	; 0x30
 80057ee:	d0fa      	beq.n	80057e6 <_dtoa_r+0xb66>
 80057f0:	e6f7      	b.n	80055e2 <_dtoa_r+0x962>
 80057f2:	9a00      	ldr	r2, [sp, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d1a5      	bne.n	8005744 <_dtoa_r+0xac4>
 80057f8:	f10a 0a01 	add.w	sl, sl, #1
 80057fc:	2331      	movs	r3, #49	; 0x31
 80057fe:	e779      	b.n	80056f4 <_dtoa_r+0xa74>
 8005800:	4b13      	ldr	r3, [pc, #76]	; (8005850 <_dtoa_r+0xbd0>)
 8005802:	f7ff baaf 	b.w	8004d64 <_dtoa_r+0xe4>
 8005806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005808:	2b00      	cmp	r3, #0
 800580a:	f47f aa86 	bne.w	8004d1a <_dtoa_r+0x9a>
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <_dtoa_r+0xbd4>)
 8005810:	f7ff baa8 	b.w	8004d64 <_dtoa_r+0xe4>
 8005814:	f1b9 0f00 	cmp.w	r9, #0
 8005818:	dc03      	bgt.n	8005822 <_dtoa_r+0xba2>
 800581a:	9b05      	ldr	r3, [sp, #20]
 800581c:	2b02      	cmp	r3, #2
 800581e:	f73f aec9 	bgt.w	80055b4 <_dtoa_r+0x934>
 8005822:	9d00      	ldr	r5, [sp, #0]
 8005824:	4631      	mov	r1, r6
 8005826:	4658      	mov	r0, fp
 8005828:	f7ff f99e 	bl	8004b68 <quorem>
 800582c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005830:	f805 3b01 	strb.w	r3, [r5], #1
 8005834:	9a00      	ldr	r2, [sp, #0]
 8005836:	1aaa      	subs	r2, r5, r2
 8005838:	4591      	cmp	r9, r2
 800583a:	ddba      	ble.n	80057b2 <_dtoa_r+0xb32>
 800583c:	4659      	mov	r1, fp
 800583e:	2300      	movs	r3, #0
 8005840:	220a      	movs	r2, #10
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f97e 	bl	8005b44 <__multadd>
 8005848:	4683      	mov	fp, r0
 800584a:	e7eb      	b.n	8005824 <_dtoa_r+0xba4>
 800584c:	08006d63 	.word	0x08006d63
 8005850:	08006cbc 	.word	0x08006cbc
 8005854:	08006ce0 	.word	0x08006ce0

08005858 <std>:
 8005858:	2300      	movs	r3, #0
 800585a:	b510      	push	{r4, lr}
 800585c:	4604      	mov	r4, r0
 800585e:	e9c0 3300 	strd	r3, r3, [r0]
 8005862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005866:	6083      	str	r3, [r0, #8]
 8005868:	8181      	strh	r1, [r0, #12]
 800586a:	6643      	str	r3, [r0, #100]	; 0x64
 800586c:	81c2      	strh	r2, [r0, #14]
 800586e:	6183      	str	r3, [r0, #24]
 8005870:	4619      	mov	r1, r3
 8005872:	2208      	movs	r2, #8
 8005874:	305c      	adds	r0, #92	; 0x5c
 8005876:	f7fe fced 	bl	8004254 <memset>
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <std+0x38>)
 800587c:	6263      	str	r3, [r4, #36]	; 0x24
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x3c>)
 8005880:	62a3      	str	r3, [r4, #40]	; 0x28
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x40>)
 8005884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x44>)
 8005888:	6224      	str	r4, [r4, #32]
 800588a:	6323      	str	r3, [r4, #48]	; 0x30
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	080065c5 	.word	0x080065c5
 8005894:	080065e7 	.word	0x080065e7
 8005898:	0800661f 	.word	0x0800661f
 800589c:	08006643 	.word	0x08006643

080058a0 <_cleanup_r>:
 80058a0:	4901      	ldr	r1, [pc, #4]	; (80058a8 <_cleanup_r+0x8>)
 80058a2:	f000 b8af 	b.w	8005a04 <_fwalk_reent>
 80058a6:	bf00      	nop
 80058a8:	08006959 	.word	0x08006959

080058ac <__sfmoreglue>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	1e4a      	subs	r2, r1, #1
 80058b0:	2568      	movs	r5, #104	; 0x68
 80058b2:	4355      	muls	r5, r2
 80058b4:	460e      	mov	r6, r1
 80058b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ba:	f000 fcbf 	bl	800623c <_malloc_r>
 80058be:	4604      	mov	r4, r0
 80058c0:	b140      	cbz	r0, 80058d4 <__sfmoreglue+0x28>
 80058c2:	2100      	movs	r1, #0
 80058c4:	e9c0 1600 	strd	r1, r6, [r0]
 80058c8:	300c      	adds	r0, #12
 80058ca:	60a0      	str	r0, [r4, #8]
 80058cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d0:	f7fe fcc0 	bl	8004254 <memset>
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}

080058d8 <__sfp_lock_acquire>:
 80058d8:	4801      	ldr	r0, [pc, #4]	; (80058e0 <__sfp_lock_acquire+0x8>)
 80058da:	f000 b8b8 	b.w	8005a4e <__retarget_lock_acquire_recursive>
 80058de:	bf00      	nop
 80058e0:	200002fc 	.word	0x200002fc

080058e4 <__sfp_lock_release>:
 80058e4:	4801      	ldr	r0, [pc, #4]	; (80058ec <__sfp_lock_release+0x8>)
 80058e6:	f000 b8b3 	b.w	8005a50 <__retarget_lock_release_recursive>
 80058ea:	bf00      	nop
 80058ec:	200002fc 	.word	0x200002fc

080058f0 <__sinit_lock_acquire>:
 80058f0:	4801      	ldr	r0, [pc, #4]	; (80058f8 <__sinit_lock_acquire+0x8>)
 80058f2:	f000 b8ac 	b.w	8005a4e <__retarget_lock_acquire_recursive>
 80058f6:	bf00      	nop
 80058f8:	200002f7 	.word	0x200002f7

080058fc <__sinit_lock_release>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__sinit_lock_release+0x8>)
 80058fe:	f000 b8a7 	b.w	8005a50 <__retarget_lock_release_recursive>
 8005902:	bf00      	nop
 8005904:	200002f7 	.word	0x200002f7

08005908 <__sinit>:
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
 800590c:	f7ff fff0 	bl	80058f0 <__sinit_lock_acquire>
 8005910:	69a3      	ldr	r3, [r4, #24]
 8005912:	b11b      	cbz	r3, 800591c <__sinit+0x14>
 8005914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005918:	f7ff bff0 	b.w	80058fc <__sinit_lock_release>
 800591c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005920:	6523      	str	r3, [r4, #80]	; 0x50
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <__sinit+0x68>)
 8005924:	4a13      	ldr	r2, [pc, #76]	; (8005974 <__sinit+0x6c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	62a2      	str	r2, [r4, #40]	; 0x28
 800592a:	42a3      	cmp	r3, r4
 800592c:	bf04      	itt	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	61a3      	streq	r3, [r4, #24]
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f820 	bl	8005978 <__sfp>
 8005938:	6060      	str	r0, [r4, #4]
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f81c 	bl	8005978 <__sfp>
 8005940:	60a0      	str	r0, [r4, #8]
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f818 	bl	8005978 <__sfp>
 8005948:	2200      	movs	r2, #0
 800594a:	60e0      	str	r0, [r4, #12]
 800594c:	2104      	movs	r1, #4
 800594e:	6860      	ldr	r0, [r4, #4]
 8005950:	f7ff ff82 	bl	8005858 <std>
 8005954:	68a0      	ldr	r0, [r4, #8]
 8005956:	2201      	movs	r2, #1
 8005958:	2109      	movs	r1, #9
 800595a:	f7ff ff7d 	bl	8005858 <std>
 800595e:	68e0      	ldr	r0, [r4, #12]
 8005960:	2202      	movs	r2, #2
 8005962:	2112      	movs	r1, #18
 8005964:	f7ff ff78 	bl	8005858 <std>
 8005968:	2301      	movs	r3, #1
 800596a:	61a3      	str	r3, [r4, #24]
 800596c:	e7d2      	b.n	8005914 <__sinit+0xc>
 800596e:	bf00      	nop
 8005970:	08006ca8 	.word	0x08006ca8
 8005974:	080058a1 	.word	0x080058a1

08005978 <__sfp>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	4607      	mov	r7, r0
 800597c:	f7ff ffac 	bl	80058d8 <__sfp_lock_acquire>
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <__sfp+0x84>)
 8005982:	681e      	ldr	r6, [r3, #0]
 8005984:	69b3      	ldr	r3, [r6, #24]
 8005986:	b913      	cbnz	r3, 800598e <__sfp+0x16>
 8005988:	4630      	mov	r0, r6
 800598a:	f7ff ffbd 	bl	8005908 <__sinit>
 800598e:	3648      	adds	r6, #72	; 0x48
 8005990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005994:	3b01      	subs	r3, #1
 8005996:	d503      	bpl.n	80059a0 <__sfp+0x28>
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	b30b      	cbz	r3, 80059e0 <__sfp+0x68>
 800599c:	6836      	ldr	r6, [r6, #0]
 800599e:	e7f7      	b.n	8005990 <__sfp+0x18>
 80059a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059a4:	b9d5      	cbnz	r5, 80059dc <__sfp+0x64>
 80059a6:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <__sfp+0x88>)
 80059a8:	60e3      	str	r3, [r4, #12]
 80059aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059ae:	6665      	str	r5, [r4, #100]	; 0x64
 80059b0:	f000 f84c 	bl	8005a4c <__retarget_lock_init_recursive>
 80059b4:	f7ff ff96 	bl	80058e4 <__sfp_lock_release>
 80059b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059c0:	6025      	str	r5, [r4, #0]
 80059c2:	61a5      	str	r5, [r4, #24]
 80059c4:	2208      	movs	r2, #8
 80059c6:	4629      	mov	r1, r5
 80059c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059cc:	f7fe fc42 	bl	8004254 <memset>
 80059d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059d8:	4620      	mov	r0, r4
 80059da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059dc:	3468      	adds	r4, #104	; 0x68
 80059de:	e7d9      	b.n	8005994 <__sfp+0x1c>
 80059e0:	2104      	movs	r1, #4
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff ff62 	bl	80058ac <__sfmoreglue>
 80059e8:	4604      	mov	r4, r0
 80059ea:	6030      	str	r0, [r6, #0]
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d1d5      	bne.n	800599c <__sfp+0x24>
 80059f0:	f7ff ff78 	bl	80058e4 <__sfp_lock_release>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	e7ee      	b.n	80059d8 <__sfp+0x60>
 80059fa:	bf00      	nop
 80059fc:	08006ca8 	.word	0x08006ca8
 8005a00:	ffff0001 	.word	0xffff0001

08005a04 <_fwalk_reent>:
 8005a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a08:	4606      	mov	r6, r0
 8005a0a:	4688      	mov	r8, r1
 8005a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a10:	2700      	movs	r7, #0
 8005a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a16:	f1b9 0901 	subs.w	r9, r9, #1
 8005a1a:	d505      	bpl.n	8005a28 <_fwalk_reent+0x24>
 8005a1c:	6824      	ldr	r4, [r4, #0]
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	d1f7      	bne.n	8005a12 <_fwalk_reent+0xe>
 8005a22:	4638      	mov	r0, r7
 8005a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a28:	89ab      	ldrh	r3, [r5, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d907      	bls.n	8005a3e <_fwalk_reent+0x3a>
 8005a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a32:	3301      	adds	r3, #1
 8005a34:	d003      	beq.n	8005a3e <_fwalk_reent+0x3a>
 8005a36:	4629      	mov	r1, r5
 8005a38:	4630      	mov	r0, r6
 8005a3a:	47c0      	blx	r8
 8005a3c:	4307      	orrs	r7, r0
 8005a3e:	3568      	adds	r5, #104	; 0x68
 8005a40:	e7e9      	b.n	8005a16 <_fwalk_reent+0x12>
	...

08005a44 <_localeconv_r>:
 8005a44:	4800      	ldr	r0, [pc, #0]	; (8005a48 <_localeconv_r+0x4>)
 8005a46:	4770      	bx	lr
 8005a48:	20000160 	.word	0x20000160

08005a4c <__retarget_lock_init_recursive>:
 8005a4c:	4770      	bx	lr

08005a4e <__retarget_lock_acquire_recursive>:
 8005a4e:	4770      	bx	lr

08005a50 <__retarget_lock_release_recursive>:
 8005a50:	4770      	bx	lr
	...

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 bbef 	b.w	800623c <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	2000000c 	.word	0x2000000c

08005a64 <memcpy>:
 8005a64:	440a      	add	r2, r1
 8005a66:	4291      	cmp	r1, r2
 8005a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a6c:	d100      	bne.n	8005a70 <memcpy+0xc>
 8005a6e:	4770      	bx	lr
 8005a70:	b510      	push	{r4, lr}
 8005a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	d1f9      	bne.n	8005a72 <memcpy+0xe>
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <_Balloc>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	b976      	cbnz	r6, 8005aa8 <_Balloc+0x28>
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f7ff ffe2 	bl	8005a54 <malloc>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6260      	str	r0, [r4, #36]	; 0x24
 8005a94:	b920      	cbnz	r0, 8005aa0 <_Balloc+0x20>
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <_Balloc+0x78>)
 8005a98:	4818      	ldr	r0, [pc, #96]	; (8005afc <_Balloc+0x7c>)
 8005a9a:	2166      	movs	r1, #102	; 0x66
 8005a9c:	f000 fea8 	bl	80067f0 <__assert_func>
 8005aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa4:	6006      	str	r6, [r0, #0]
 8005aa6:	60c6      	str	r6, [r0, #12]
 8005aa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aaa:	68f3      	ldr	r3, [r6, #12]
 8005aac:	b183      	cbz	r3, 8005ad0 <_Balloc+0x50>
 8005aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ab6:	b9b8      	cbnz	r0, 8005ae8 <_Balloc+0x68>
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f605 	lsl.w	r6, r1, r5
 8005abe:	1d72      	adds	r2, r6, #5
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fb5a 	bl	800617c <_calloc_r>
 8005ac8:	b160      	cbz	r0, 8005ae4 <_Balloc+0x64>
 8005aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ace:	e00e      	b.n	8005aee <_Balloc+0x6e>
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fb51 	bl	800617c <_calloc_r>
 8005ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005adc:	60f0      	str	r0, [r6, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <_Balloc+0x2e>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	6802      	ldr	r2, [r0, #0]
 8005aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aee:	2300      	movs	r3, #0
 8005af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af4:	e7f7      	b.n	8005ae6 <_Balloc+0x66>
 8005af6:	bf00      	nop
 8005af8:	08006ced 	.word	0x08006ced
 8005afc:	08006dd4 	.word	0x08006dd4

08005b00 <_Bfree>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	b976      	cbnz	r6, 8005b28 <_Bfree+0x28>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f7ff ffa2 	bl	8005a54 <malloc>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6268      	str	r0, [r5, #36]	; 0x24
 8005b14:	b920      	cbnz	r0, 8005b20 <_Bfree+0x20>
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <_Bfree+0x3c>)
 8005b18:	4809      	ldr	r0, [pc, #36]	; (8005b40 <_Bfree+0x40>)
 8005b1a:	218a      	movs	r1, #138	; 0x8a
 8005b1c:	f000 fe68 	bl	80067f0 <__assert_func>
 8005b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b24:	6006      	str	r6, [r0, #0]
 8005b26:	60c6      	str	r6, [r0, #12]
 8005b28:	b13c      	cbz	r4, 8005b3a <_Bfree+0x3a>
 8005b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b2c:	6862      	ldr	r2, [r4, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b34:	6021      	str	r1, [r4, #0]
 8005b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	08006ced 	.word	0x08006ced
 8005b40:	08006dd4 	.word	0x08006dd4

08005b44 <__multadd>:
 8005b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b48:	690e      	ldr	r6, [r1, #16]
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	4698      	mov	r8, r3
 8005b4e:	460c      	mov	r4, r1
 8005b50:	f101 0014 	add.w	r0, r1, #20
 8005b54:	2300      	movs	r3, #0
 8005b56:	6805      	ldr	r5, [r0, #0]
 8005b58:	b2a9      	uxth	r1, r5
 8005b5a:	fb02 8101 	mla	r1, r2, r1, r8
 8005b5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b62:	0c2d      	lsrs	r5, r5, #16
 8005b64:	fb02 c505 	mla	r5, r2, r5, ip
 8005b68:	b289      	uxth	r1, r1
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b70:	429e      	cmp	r6, r3
 8005b72:	f840 1b04 	str.w	r1, [r0], #4
 8005b76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b7a:	dcec      	bgt.n	8005b56 <__multadd+0x12>
 8005b7c:	f1b8 0f00 	cmp.w	r8, #0
 8005b80:	d022      	beq.n	8005bc8 <__multadd+0x84>
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	42b3      	cmp	r3, r6
 8005b86:	dc19      	bgt.n	8005bbc <__multadd+0x78>
 8005b88:	6861      	ldr	r1, [r4, #4]
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	f7ff ff77 	bl	8005a80 <_Balloc>
 8005b92:	4605      	mov	r5, r0
 8005b94:	b928      	cbnz	r0, 8005ba2 <__multadd+0x5e>
 8005b96:	4602      	mov	r2, r0
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <__multadd+0x8c>)
 8005b9a:	480e      	ldr	r0, [pc, #56]	; (8005bd4 <__multadd+0x90>)
 8005b9c:	21b5      	movs	r1, #181	; 0xb5
 8005b9e:	f000 fe27 	bl	80067f0 <__assert_func>
 8005ba2:	6922      	ldr	r2, [r4, #16]
 8005ba4:	3202      	adds	r2, #2
 8005ba6:	f104 010c 	add.w	r1, r4, #12
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	300c      	adds	r0, #12
 8005bae:	f7ff ff59 	bl	8005a64 <memcpy>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f7ff ffa3 	bl	8005b00 <_Bfree>
 8005bba:	462c      	mov	r4, r5
 8005bbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	f8c3 8014 	str.w	r8, [r3, #20]
 8005bc6:	6126      	str	r6, [r4, #16]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bce:	bf00      	nop
 8005bd0:	08006d63 	.word	0x08006d63
 8005bd4:	08006dd4 	.word	0x08006dd4

08005bd8 <__hi0bits>:
 8005bd8:	0c03      	lsrs	r3, r0, #16
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	b9d3      	cbnz	r3, 8005c14 <__hi0bits+0x3c>
 8005bde:	0400      	lsls	r0, r0, #16
 8005be0:	2310      	movs	r3, #16
 8005be2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005be6:	bf04      	itt	eq
 8005be8:	0200      	lsleq	r0, r0, #8
 8005bea:	3308      	addeq	r3, #8
 8005bec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bf0:	bf04      	itt	eq
 8005bf2:	0100      	lsleq	r0, r0, #4
 8005bf4:	3304      	addeq	r3, #4
 8005bf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bfa:	bf04      	itt	eq
 8005bfc:	0080      	lsleq	r0, r0, #2
 8005bfe:	3302      	addeq	r3, #2
 8005c00:	2800      	cmp	r0, #0
 8005c02:	db05      	blt.n	8005c10 <__hi0bits+0x38>
 8005c04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c08:	f103 0301 	add.w	r3, r3, #1
 8005c0c:	bf08      	it	eq
 8005c0e:	2320      	moveq	r3, #32
 8005c10:	4618      	mov	r0, r3
 8005c12:	4770      	bx	lr
 8005c14:	2300      	movs	r3, #0
 8005c16:	e7e4      	b.n	8005be2 <__hi0bits+0xa>

08005c18 <__lo0bits>:
 8005c18:	6803      	ldr	r3, [r0, #0]
 8005c1a:	f013 0207 	ands.w	r2, r3, #7
 8005c1e:	4601      	mov	r1, r0
 8005c20:	d00b      	beq.n	8005c3a <__lo0bits+0x22>
 8005c22:	07da      	lsls	r2, r3, #31
 8005c24:	d424      	bmi.n	8005c70 <__lo0bits+0x58>
 8005c26:	0798      	lsls	r0, r3, #30
 8005c28:	bf49      	itett	mi
 8005c2a:	085b      	lsrmi	r3, r3, #1
 8005c2c:	089b      	lsrpl	r3, r3, #2
 8005c2e:	2001      	movmi	r0, #1
 8005c30:	600b      	strmi	r3, [r1, #0]
 8005c32:	bf5c      	itt	pl
 8005c34:	600b      	strpl	r3, [r1, #0]
 8005c36:	2002      	movpl	r0, #2
 8005c38:	4770      	bx	lr
 8005c3a:	b298      	uxth	r0, r3
 8005c3c:	b9b0      	cbnz	r0, 8005c6c <__lo0bits+0x54>
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	2010      	movs	r0, #16
 8005c42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c46:	bf04      	itt	eq
 8005c48:	0a1b      	lsreq	r3, r3, #8
 8005c4a:	3008      	addeq	r0, #8
 8005c4c:	071a      	lsls	r2, r3, #28
 8005c4e:	bf04      	itt	eq
 8005c50:	091b      	lsreq	r3, r3, #4
 8005c52:	3004      	addeq	r0, #4
 8005c54:	079a      	lsls	r2, r3, #30
 8005c56:	bf04      	itt	eq
 8005c58:	089b      	lsreq	r3, r3, #2
 8005c5a:	3002      	addeq	r0, #2
 8005c5c:	07da      	lsls	r2, r3, #31
 8005c5e:	d403      	bmi.n	8005c68 <__lo0bits+0x50>
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	f100 0001 	add.w	r0, r0, #1
 8005c66:	d005      	beq.n	8005c74 <__lo0bits+0x5c>
 8005c68:	600b      	str	r3, [r1, #0]
 8005c6a:	4770      	bx	lr
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	e7e8      	b.n	8005c42 <__lo0bits+0x2a>
 8005c70:	2000      	movs	r0, #0
 8005c72:	4770      	bx	lr
 8005c74:	2020      	movs	r0, #32
 8005c76:	4770      	bx	lr

08005c78 <__i2b>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	f7ff feff 	bl	8005a80 <_Balloc>
 8005c82:	4602      	mov	r2, r0
 8005c84:	b928      	cbnz	r0, 8005c92 <__i2b+0x1a>
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <__i2b+0x24>)
 8005c88:	4805      	ldr	r0, [pc, #20]	; (8005ca0 <__i2b+0x28>)
 8005c8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c8e:	f000 fdaf 	bl	80067f0 <__assert_func>
 8005c92:	2301      	movs	r3, #1
 8005c94:	6144      	str	r4, [r0, #20]
 8005c96:	6103      	str	r3, [r0, #16]
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08006d63 	.word	0x08006d63
 8005ca0:	08006dd4 	.word	0x08006dd4

08005ca4 <__multiply>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	4614      	mov	r4, r2
 8005caa:	690a      	ldr	r2, [r1, #16]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bfb8      	it	lt
 8005cb2:	460b      	movlt	r3, r1
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	bfbc      	itt	lt
 8005cb8:	4625      	movlt	r5, r4
 8005cba:	461c      	movlt	r4, r3
 8005cbc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005cc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cc4:	68ab      	ldr	r3, [r5, #8]
 8005cc6:	6869      	ldr	r1, [r5, #4]
 8005cc8:	eb0a 0709 	add.w	r7, sl, r9
 8005ccc:	42bb      	cmp	r3, r7
 8005cce:	b085      	sub	sp, #20
 8005cd0:	bfb8      	it	lt
 8005cd2:	3101      	addlt	r1, #1
 8005cd4:	f7ff fed4 	bl	8005a80 <_Balloc>
 8005cd8:	b930      	cbnz	r0, 8005ce8 <__multiply+0x44>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4b42      	ldr	r3, [pc, #264]	; (8005de8 <__multiply+0x144>)
 8005cde:	4843      	ldr	r0, [pc, #268]	; (8005dec <__multiply+0x148>)
 8005ce0:	f240 115d 	movw	r1, #349	; 0x15d
 8005ce4:	f000 fd84 	bl	80067f0 <__assert_func>
 8005ce8:	f100 0614 	add.w	r6, r0, #20
 8005cec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005cf0:	4633      	mov	r3, r6
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4543      	cmp	r3, r8
 8005cf6:	d31e      	bcc.n	8005d36 <__multiply+0x92>
 8005cf8:	f105 0c14 	add.w	ip, r5, #20
 8005cfc:	f104 0314 	add.w	r3, r4, #20
 8005d00:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d04:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d08:	9202      	str	r2, [sp, #8]
 8005d0a:	ebac 0205 	sub.w	r2, ip, r5
 8005d0e:	3a15      	subs	r2, #21
 8005d10:	f022 0203 	bic.w	r2, r2, #3
 8005d14:	3204      	adds	r2, #4
 8005d16:	f105 0115 	add.w	r1, r5, #21
 8005d1a:	458c      	cmp	ip, r1
 8005d1c:	bf38      	it	cc
 8005d1e:	2204      	movcc	r2, #4
 8005d20:	9201      	str	r2, [sp, #4]
 8005d22:	9a02      	ldr	r2, [sp, #8]
 8005d24:	9303      	str	r3, [sp, #12]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d808      	bhi.n	8005d3c <__multiply+0x98>
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	dc55      	bgt.n	8005dda <__multiply+0x136>
 8005d2e:	6107      	str	r7, [r0, #16]
 8005d30:	b005      	add	sp, #20
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	f843 2b04 	str.w	r2, [r3], #4
 8005d3a:	e7db      	b.n	8005cf4 <__multiply+0x50>
 8005d3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d40:	f1ba 0f00 	cmp.w	sl, #0
 8005d44:	d020      	beq.n	8005d88 <__multiply+0xe4>
 8005d46:	f105 0e14 	add.w	lr, r5, #20
 8005d4a:	46b1      	mov	r9, r6
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005d52:	f8d9 b000 	ldr.w	fp, [r9]
 8005d56:	b2a1      	uxth	r1, r4
 8005d58:	fa1f fb8b 	uxth.w	fp, fp
 8005d5c:	fb0a b101 	mla	r1, sl, r1, fp
 8005d60:	4411      	add	r1, r2
 8005d62:	f8d9 2000 	ldr.w	r2, [r9]
 8005d66:	0c24      	lsrs	r4, r4, #16
 8005d68:	0c12      	lsrs	r2, r2, #16
 8005d6a:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d6e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d72:	b289      	uxth	r1, r1
 8005d74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d78:	45f4      	cmp	ip, lr
 8005d7a:	f849 1b04 	str.w	r1, [r9], #4
 8005d7e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d82:	d8e4      	bhi.n	8005d4e <__multiply+0xaa>
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	5072      	str	r2, [r6, r1]
 8005d88:	9a03      	ldr	r2, [sp, #12]
 8005d8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	f1b9 0f00 	cmp.w	r9, #0
 8005d94:	d01f      	beq.n	8005dd6 <__multiply+0x132>
 8005d96:	6834      	ldr	r4, [r6, #0]
 8005d98:	f105 0114 	add.w	r1, r5, #20
 8005d9c:	46b6      	mov	lr, r6
 8005d9e:	f04f 0a00 	mov.w	sl, #0
 8005da2:	880a      	ldrh	r2, [r1, #0]
 8005da4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005da8:	fb09 b202 	mla	r2, r9, r2, fp
 8005dac:	4492      	add	sl, r2
 8005dae:	b2a4      	uxth	r4, r4
 8005db0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005db4:	f84e 4b04 	str.w	r4, [lr], #4
 8005db8:	f851 4b04 	ldr.w	r4, [r1], #4
 8005dbc:	f8be 2000 	ldrh.w	r2, [lr]
 8005dc0:	0c24      	lsrs	r4, r4, #16
 8005dc2:	fb09 2404 	mla	r4, r9, r4, r2
 8005dc6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005dca:	458c      	cmp	ip, r1
 8005dcc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005dd0:	d8e7      	bhi.n	8005da2 <__multiply+0xfe>
 8005dd2:	9a01      	ldr	r2, [sp, #4]
 8005dd4:	50b4      	str	r4, [r6, r2]
 8005dd6:	3604      	adds	r6, #4
 8005dd8:	e7a3      	b.n	8005d22 <__multiply+0x7e>
 8005dda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1a5      	bne.n	8005d2e <__multiply+0x8a>
 8005de2:	3f01      	subs	r7, #1
 8005de4:	e7a1      	b.n	8005d2a <__multiply+0x86>
 8005de6:	bf00      	nop
 8005de8:	08006d63 	.word	0x08006d63
 8005dec:	08006dd4 	.word	0x08006dd4

08005df0 <__pow5mult>:
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4615      	mov	r5, r2
 8005df6:	f012 0203 	ands.w	r2, r2, #3
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	d007      	beq.n	8005e10 <__pow5mult+0x20>
 8005e00:	4c25      	ldr	r4, [pc, #148]	; (8005e98 <__pow5mult+0xa8>)
 8005e02:	3a01      	subs	r2, #1
 8005e04:	2300      	movs	r3, #0
 8005e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e0a:	f7ff fe9b 	bl	8005b44 <__multadd>
 8005e0e:	4607      	mov	r7, r0
 8005e10:	10ad      	asrs	r5, r5, #2
 8005e12:	d03d      	beq.n	8005e90 <__pow5mult+0xa0>
 8005e14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e16:	b97c      	cbnz	r4, 8005e38 <__pow5mult+0x48>
 8005e18:	2010      	movs	r0, #16
 8005e1a:	f7ff fe1b 	bl	8005a54 <malloc>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6270      	str	r0, [r6, #36]	; 0x24
 8005e22:	b928      	cbnz	r0, 8005e30 <__pow5mult+0x40>
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <__pow5mult+0xac>)
 8005e26:	481e      	ldr	r0, [pc, #120]	; (8005ea0 <__pow5mult+0xb0>)
 8005e28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e2c:	f000 fce0 	bl	80067f0 <__assert_func>
 8005e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e34:	6004      	str	r4, [r0, #0]
 8005e36:	60c4      	str	r4, [r0, #12]
 8005e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e40:	b94c      	cbnz	r4, 8005e56 <__pow5mult+0x66>
 8005e42:	f240 2171 	movw	r1, #625	; 0x271
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff ff16 	bl	8005c78 <__i2b>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e52:	4604      	mov	r4, r0
 8005e54:	6003      	str	r3, [r0, #0]
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	07eb      	lsls	r3, r5, #31
 8005e5c:	d50a      	bpl.n	8005e74 <__pow5mult+0x84>
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4622      	mov	r2, r4
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff1e 	bl	8005ca4 <__multiply>
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff fe47 	bl	8005b00 <_Bfree>
 8005e72:	4647      	mov	r7, r8
 8005e74:	106d      	asrs	r5, r5, #1
 8005e76:	d00b      	beq.n	8005e90 <__pow5mult+0xa0>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	b938      	cbnz	r0, 8005e8c <__pow5mult+0x9c>
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff ff0f 	bl	8005ca4 <__multiply>
 8005e86:	6020      	str	r0, [r4, #0]
 8005e88:	f8c0 9000 	str.w	r9, [r0]
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e7e4      	b.n	8005e5a <__pow5mult+0x6a>
 8005e90:	4638      	mov	r0, r7
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	bf00      	nop
 8005e98:	08006f28 	.word	0x08006f28
 8005e9c:	08006ced 	.word	0x08006ced
 8005ea0:	08006dd4 	.word	0x08006dd4

08005ea4 <__lshift>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	4691      	mov	r9, r2
 8005eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ebc:	f108 0601 	add.w	r6, r8, #1
 8005ec0:	42b3      	cmp	r3, r6
 8005ec2:	db0b      	blt.n	8005edc <__lshift+0x38>
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff fddb 	bl	8005a80 <_Balloc>
 8005eca:	4605      	mov	r5, r0
 8005ecc:	b948      	cbnz	r0, 8005ee2 <__lshift+0x3e>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <__lshift+0xd0>)
 8005ed2:	4829      	ldr	r0, [pc, #164]	; (8005f78 <__lshift+0xd4>)
 8005ed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ed8:	f000 fc8a 	bl	80067f0 <__assert_func>
 8005edc:	3101      	adds	r1, #1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__lshift+0x1c>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f100 0114 	add.w	r1, r0, #20
 8005ee8:	f100 0210 	add.w	r2, r0, #16
 8005eec:	4618      	mov	r0, r3
 8005eee:	4553      	cmp	r3, sl
 8005ef0:	db33      	blt.n	8005f5a <__lshift+0xb6>
 8005ef2:	6920      	ldr	r0, [r4, #16]
 8005ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ef8:	f104 0314 	add.w	r3, r4, #20
 8005efc:	f019 091f 	ands.w	r9, r9, #31
 8005f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f08:	d02b      	beq.n	8005f62 <__lshift+0xbe>
 8005f0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f0e:	468a      	mov	sl, r1
 8005f10:	2200      	movs	r2, #0
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	fa00 f009 	lsl.w	r0, r0, r9
 8005f18:	4302      	orrs	r2, r0
 8005f1a:	f84a 2b04 	str.w	r2, [sl], #4
 8005f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f22:	459c      	cmp	ip, r3
 8005f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f28:	d8f3      	bhi.n	8005f12 <__lshift+0x6e>
 8005f2a:	ebac 0304 	sub.w	r3, ip, r4
 8005f2e:	3b15      	subs	r3, #21
 8005f30:	f023 0303 	bic.w	r3, r3, #3
 8005f34:	3304      	adds	r3, #4
 8005f36:	f104 0015 	add.w	r0, r4, #21
 8005f3a:	4584      	cmp	ip, r0
 8005f3c:	bf38      	it	cc
 8005f3e:	2304      	movcc	r3, #4
 8005f40:	50ca      	str	r2, [r1, r3]
 8005f42:	b10a      	cbz	r2, 8005f48 <__lshift+0xa4>
 8005f44:	f108 0602 	add.w	r6, r8, #2
 8005f48:	3e01      	subs	r6, #1
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	612e      	str	r6, [r5, #16]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	f7ff fdd6 	bl	8005b00 <_Bfree>
 8005f54:	4628      	mov	r0, r5
 8005f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f5e:	3301      	adds	r3, #1
 8005f60:	e7c5      	b.n	8005eee <__lshift+0x4a>
 8005f62:	3904      	subs	r1, #4
 8005f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f68:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f6c:	459c      	cmp	ip, r3
 8005f6e:	d8f9      	bhi.n	8005f64 <__lshift+0xc0>
 8005f70:	e7ea      	b.n	8005f48 <__lshift+0xa4>
 8005f72:	bf00      	nop
 8005f74:	08006d63 	.word	0x08006d63
 8005f78:	08006dd4 	.word	0x08006dd4

08005f7c <__mcmp>:
 8005f7c:	b530      	push	{r4, r5, lr}
 8005f7e:	6902      	ldr	r2, [r0, #16]
 8005f80:	690c      	ldr	r4, [r1, #16]
 8005f82:	1b12      	subs	r2, r2, r4
 8005f84:	d10e      	bne.n	8005fa4 <__mcmp+0x28>
 8005f86:	f100 0314 	add.w	r3, r0, #20
 8005f8a:	3114      	adds	r1, #20
 8005f8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f9c:	42a5      	cmp	r5, r4
 8005f9e:	d003      	beq.n	8005fa8 <__mcmp+0x2c>
 8005fa0:	d305      	bcc.n	8005fae <__mcmp+0x32>
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	bd30      	pop	{r4, r5, pc}
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	d3f3      	bcc.n	8005f94 <__mcmp+0x18>
 8005fac:	e7fa      	b.n	8005fa4 <__mcmp+0x28>
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	e7f7      	b.n	8005fa4 <__mcmp+0x28>

08005fb4 <__mdiff>:
 8005fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	460c      	mov	r4, r1
 8005fba:	4606      	mov	r6, r0
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4617      	mov	r7, r2
 8005fc2:	f7ff ffdb 	bl	8005f7c <__mcmp>
 8005fc6:	1e05      	subs	r5, r0, #0
 8005fc8:	d110      	bne.n	8005fec <__mdiff+0x38>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f7ff fd57 	bl	8005a80 <_Balloc>
 8005fd2:	b930      	cbnz	r0, 8005fe2 <__mdiff+0x2e>
 8005fd4:	4b39      	ldr	r3, [pc, #228]	; (80060bc <__mdiff+0x108>)
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	f240 2132 	movw	r1, #562	; 0x232
 8005fdc:	4838      	ldr	r0, [pc, #224]	; (80060c0 <__mdiff+0x10c>)
 8005fde:	f000 fc07 	bl	80067f0 <__assert_func>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	bfa4      	itt	ge
 8005fee:	463b      	movge	r3, r7
 8005ff0:	4627      	movge	r7, r4
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	bfa6      	itte	ge
 8005ff8:	461c      	movge	r4, r3
 8005ffa:	2500      	movge	r5, #0
 8005ffc:	2501      	movlt	r5, #1
 8005ffe:	f7ff fd3f 	bl	8005a80 <_Balloc>
 8006002:	b920      	cbnz	r0, 800600e <__mdiff+0x5a>
 8006004:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <__mdiff+0x108>)
 8006006:	4602      	mov	r2, r0
 8006008:	f44f 7110 	mov.w	r1, #576	; 0x240
 800600c:	e7e6      	b.n	8005fdc <__mdiff+0x28>
 800600e:	693e      	ldr	r6, [r7, #16]
 8006010:	60c5      	str	r5, [r0, #12]
 8006012:	6925      	ldr	r5, [r4, #16]
 8006014:	f107 0114 	add.w	r1, r7, #20
 8006018:	f104 0914 	add.w	r9, r4, #20
 800601c:	f100 0e14 	add.w	lr, r0, #20
 8006020:	f107 0210 	add.w	r2, r7, #16
 8006024:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006028:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800602c:	46f2      	mov	sl, lr
 800602e:	2700      	movs	r7, #0
 8006030:	f859 3b04 	ldr.w	r3, [r9], #4
 8006034:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006038:	fa1f f883 	uxth.w	r8, r3
 800603c:	fa17 f78b 	uxtah	r7, r7, fp
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	eba7 0808 	sub.w	r8, r7, r8
 8006046:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800604a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800604e:	fa1f f888 	uxth.w	r8, r8
 8006052:	141f      	asrs	r7, r3, #16
 8006054:	454d      	cmp	r5, r9
 8006056:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800605a:	f84a 3b04 	str.w	r3, [sl], #4
 800605e:	d8e7      	bhi.n	8006030 <__mdiff+0x7c>
 8006060:	1b2b      	subs	r3, r5, r4
 8006062:	3b15      	subs	r3, #21
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	3304      	adds	r3, #4
 800606a:	3415      	adds	r4, #21
 800606c:	42a5      	cmp	r5, r4
 800606e:	bf38      	it	cc
 8006070:	2304      	movcc	r3, #4
 8006072:	4419      	add	r1, r3
 8006074:	4473      	add	r3, lr
 8006076:	469e      	mov	lr, r3
 8006078:	460d      	mov	r5, r1
 800607a:	4565      	cmp	r5, ip
 800607c:	d30e      	bcc.n	800609c <__mdiff+0xe8>
 800607e:	f10c 0203 	add.w	r2, ip, #3
 8006082:	1a52      	subs	r2, r2, r1
 8006084:	f022 0203 	bic.w	r2, r2, #3
 8006088:	3903      	subs	r1, #3
 800608a:	458c      	cmp	ip, r1
 800608c:	bf38      	it	cc
 800608e:	2200      	movcc	r2, #0
 8006090:	441a      	add	r2, r3
 8006092:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006096:	b17b      	cbz	r3, 80060b8 <__mdiff+0x104>
 8006098:	6106      	str	r6, [r0, #16]
 800609a:	e7a5      	b.n	8005fe8 <__mdiff+0x34>
 800609c:	f855 8b04 	ldr.w	r8, [r5], #4
 80060a0:	fa17 f488 	uxtah	r4, r7, r8
 80060a4:	1422      	asrs	r2, r4, #16
 80060a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80060aa:	b2a4      	uxth	r4, r4
 80060ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80060b0:	f84e 4b04 	str.w	r4, [lr], #4
 80060b4:	1417      	asrs	r7, r2, #16
 80060b6:	e7e0      	b.n	800607a <__mdiff+0xc6>
 80060b8:	3e01      	subs	r6, #1
 80060ba:	e7ea      	b.n	8006092 <__mdiff+0xde>
 80060bc:	08006d63 	.word	0x08006d63
 80060c0:	08006dd4 	.word	0x08006dd4

080060c4 <__d2b>:
 80060c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	4689      	mov	r9, r1
 80060ca:	2101      	movs	r1, #1
 80060cc:	ec57 6b10 	vmov	r6, r7, d0
 80060d0:	4690      	mov	r8, r2
 80060d2:	f7ff fcd5 	bl	8005a80 <_Balloc>
 80060d6:	4604      	mov	r4, r0
 80060d8:	b930      	cbnz	r0, 80060e8 <__d2b+0x24>
 80060da:	4602      	mov	r2, r0
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <__d2b+0xb0>)
 80060de:	4826      	ldr	r0, [pc, #152]	; (8006178 <__d2b+0xb4>)
 80060e0:	f240 310a 	movw	r1, #778	; 0x30a
 80060e4:	f000 fb84 	bl	80067f0 <__assert_func>
 80060e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060f0:	bb35      	cbnz	r5, 8006140 <__d2b+0x7c>
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	d028      	beq.n	800614a <__d2b+0x86>
 80060f8:	4668      	mov	r0, sp
 80060fa:	9600      	str	r6, [sp, #0]
 80060fc:	f7ff fd8c 	bl	8005c18 <__lo0bits>
 8006100:	9900      	ldr	r1, [sp, #0]
 8006102:	b300      	cbz	r0, 8006146 <__d2b+0x82>
 8006104:	9a01      	ldr	r2, [sp, #4]
 8006106:	f1c0 0320 	rsb	r3, r0, #32
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	430b      	orrs	r3, r1
 8006110:	40c2      	lsrs	r2, r0
 8006112:	6163      	str	r3, [r4, #20]
 8006114:	9201      	str	r2, [sp, #4]
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	61a3      	str	r3, [r4, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf14      	ite	ne
 800611e:	2202      	movne	r2, #2
 8006120:	2201      	moveq	r2, #1
 8006122:	6122      	str	r2, [r4, #16]
 8006124:	b1d5      	cbz	r5, 800615c <__d2b+0x98>
 8006126:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800612a:	4405      	add	r5, r0
 800612c:	f8c9 5000 	str.w	r5, [r9]
 8006130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006134:	f8c8 0000 	str.w	r0, [r8]
 8006138:	4620      	mov	r0, r4
 800613a:	b003      	add	sp, #12
 800613c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006144:	e7d5      	b.n	80060f2 <__d2b+0x2e>
 8006146:	6161      	str	r1, [r4, #20]
 8006148:	e7e5      	b.n	8006116 <__d2b+0x52>
 800614a:	a801      	add	r0, sp, #4
 800614c:	f7ff fd64 	bl	8005c18 <__lo0bits>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	6163      	str	r3, [r4, #20]
 8006154:	2201      	movs	r2, #1
 8006156:	6122      	str	r2, [r4, #16]
 8006158:	3020      	adds	r0, #32
 800615a:	e7e3      	b.n	8006124 <__d2b+0x60>
 800615c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006164:	f8c9 0000 	str.w	r0, [r9]
 8006168:	6918      	ldr	r0, [r3, #16]
 800616a:	f7ff fd35 	bl	8005bd8 <__hi0bits>
 800616e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006172:	e7df      	b.n	8006134 <__d2b+0x70>
 8006174:	08006d63 	.word	0x08006d63
 8006178:	08006dd4 	.word	0x08006dd4

0800617c <_calloc_r>:
 800617c:	b513      	push	{r0, r1, r4, lr}
 800617e:	434a      	muls	r2, r1
 8006180:	4611      	mov	r1, r2
 8006182:	9201      	str	r2, [sp, #4]
 8006184:	f000 f85a 	bl	800623c <_malloc_r>
 8006188:	4604      	mov	r4, r0
 800618a:	b118      	cbz	r0, 8006194 <_calloc_r+0x18>
 800618c:	9a01      	ldr	r2, [sp, #4]
 800618e:	2100      	movs	r1, #0
 8006190:	f7fe f860 	bl	8004254 <memset>
 8006194:	4620      	mov	r0, r4
 8006196:	b002      	add	sp, #8
 8006198:	bd10      	pop	{r4, pc}
	...

0800619c <_free_r>:
 800619c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800619e:	2900      	cmp	r1, #0
 80061a0:	d048      	beq.n	8006234 <_free_r+0x98>
 80061a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a6:	9001      	str	r0, [sp, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f1a1 0404 	sub.w	r4, r1, #4
 80061ae:	bfb8      	it	lt
 80061b0:	18e4      	addlt	r4, r4, r3
 80061b2:	f000 fca7 	bl	8006b04 <__malloc_lock>
 80061b6:	4a20      	ldr	r2, [pc, #128]	; (8006238 <_free_r+0x9c>)
 80061b8:	9801      	ldr	r0, [sp, #4]
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	4615      	mov	r5, r2
 80061be:	b933      	cbnz	r3, 80061ce <_free_r+0x32>
 80061c0:	6063      	str	r3, [r4, #4]
 80061c2:	6014      	str	r4, [r2, #0]
 80061c4:	b003      	add	sp, #12
 80061c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ca:	f000 bca1 	b.w	8006b10 <__malloc_unlock>
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	d90b      	bls.n	80061ea <_free_r+0x4e>
 80061d2:	6821      	ldr	r1, [r4, #0]
 80061d4:	1862      	adds	r2, r4, r1
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bf04      	itt	eq
 80061da:	681a      	ldreq	r2, [r3, #0]
 80061dc:	685b      	ldreq	r3, [r3, #4]
 80061de:	6063      	str	r3, [r4, #4]
 80061e0:	bf04      	itt	eq
 80061e2:	1852      	addeq	r2, r2, r1
 80061e4:	6022      	streq	r2, [r4, #0]
 80061e6:	602c      	str	r4, [r5, #0]
 80061e8:	e7ec      	b.n	80061c4 <_free_r+0x28>
 80061ea:	461a      	mov	r2, r3
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	b10b      	cbz	r3, 80061f4 <_free_r+0x58>
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	d9fa      	bls.n	80061ea <_free_r+0x4e>
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	1855      	adds	r5, r2, r1
 80061f8:	42a5      	cmp	r5, r4
 80061fa:	d10b      	bne.n	8006214 <_free_r+0x78>
 80061fc:	6824      	ldr	r4, [r4, #0]
 80061fe:	4421      	add	r1, r4
 8006200:	1854      	adds	r4, r2, r1
 8006202:	42a3      	cmp	r3, r4
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	d1dd      	bne.n	80061c4 <_free_r+0x28>
 8006208:	681c      	ldr	r4, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	6053      	str	r3, [r2, #4]
 800620e:	4421      	add	r1, r4
 8006210:	6011      	str	r1, [r2, #0]
 8006212:	e7d7      	b.n	80061c4 <_free_r+0x28>
 8006214:	d902      	bls.n	800621c <_free_r+0x80>
 8006216:	230c      	movs	r3, #12
 8006218:	6003      	str	r3, [r0, #0]
 800621a:	e7d3      	b.n	80061c4 <_free_r+0x28>
 800621c:	6825      	ldr	r5, [r4, #0]
 800621e:	1961      	adds	r1, r4, r5
 8006220:	428b      	cmp	r3, r1
 8006222:	bf04      	itt	eq
 8006224:	6819      	ldreq	r1, [r3, #0]
 8006226:	685b      	ldreq	r3, [r3, #4]
 8006228:	6063      	str	r3, [r4, #4]
 800622a:	bf04      	itt	eq
 800622c:	1949      	addeq	r1, r1, r5
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	6054      	str	r4, [r2, #4]
 8006232:	e7c7      	b.n	80061c4 <_free_r+0x28>
 8006234:	b003      	add	sp, #12
 8006236:	bd30      	pop	{r4, r5, pc}
 8006238:	20000258 	.word	0x20000258

0800623c <_malloc_r>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	1ccd      	adds	r5, r1, #3
 8006240:	f025 0503 	bic.w	r5, r5, #3
 8006244:	3508      	adds	r5, #8
 8006246:	2d0c      	cmp	r5, #12
 8006248:	bf38      	it	cc
 800624a:	250c      	movcc	r5, #12
 800624c:	2d00      	cmp	r5, #0
 800624e:	4606      	mov	r6, r0
 8006250:	db01      	blt.n	8006256 <_malloc_r+0x1a>
 8006252:	42a9      	cmp	r1, r5
 8006254:	d903      	bls.n	800625e <_malloc_r+0x22>
 8006256:	230c      	movs	r3, #12
 8006258:	6033      	str	r3, [r6, #0]
 800625a:	2000      	movs	r0, #0
 800625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625e:	f000 fc51 	bl	8006b04 <__malloc_lock>
 8006262:	4921      	ldr	r1, [pc, #132]	; (80062e8 <_malloc_r+0xac>)
 8006264:	680a      	ldr	r2, [r1, #0]
 8006266:	4614      	mov	r4, r2
 8006268:	b99c      	cbnz	r4, 8006292 <_malloc_r+0x56>
 800626a:	4f20      	ldr	r7, [pc, #128]	; (80062ec <_malloc_r+0xb0>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	b923      	cbnz	r3, 800627a <_malloc_r+0x3e>
 8006270:	4621      	mov	r1, r4
 8006272:	4630      	mov	r0, r6
 8006274:	f000 f996 	bl	80065a4 <_sbrk_r>
 8006278:	6038      	str	r0, [r7, #0]
 800627a:	4629      	mov	r1, r5
 800627c:	4630      	mov	r0, r6
 800627e:	f000 f991 	bl	80065a4 <_sbrk_r>
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	d123      	bne.n	80062ce <_malloc_r+0x92>
 8006286:	230c      	movs	r3, #12
 8006288:	6033      	str	r3, [r6, #0]
 800628a:	4630      	mov	r0, r6
 800628c:	f000 fc40 	bl	8006b10 <__malloc_unlock>
 8006290:	e7e3      	b.n	800625a <_malloc_r+0x1e>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	1b5b      	subs	r3, r3, r5
 8006296:	d417      	bmi.n	80062c8 <_malloc_r+0x8c>
 8006298:	2b0b      	cmp	r3, #11
 800629a:	d903      	bls.n	80062a4 <_malloc_r+0x68>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	441c      	add	r4, r3
 80062a0:	6025      	str	r5, [r4, #0]
 80062a2:	e004      	b.n	80062ae <_malloc_r+0x72>
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	42a2      	cmp	r2, r4
 80062a8:	bf0c      	ite	eq
 80062aa:	600b      	streq	r3, [r1, #0]
 80062ac:	6053      	strne	r3, [r2, #4]
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 fc2e 	bl	8006b10 <__malloc_unlock>
 80062b4:	f104 000b 	add.w	r0, r4, #11
 80062b8:	1d23      	adds	r3, r4, #4
 80062ba:	f020 0007 	bic.w	r0, r0, #7
 80062be:	1ac2      	subs	r2, r0, r3
 80062c0:	d0cc      	beq.n	800625c <_malloc_r+0x20>
 80062c2:	1a1b      	subs	r3, r3, r0
 80062c4:	50a3      	str	r3, [r4, r2]
 80062c6:	e7c9      	b.n	800625c <_malloc_r+0x20>
 80062c8:	4622      	mov	r2, r4
 80062ca:	6864      	ldr	r4, [r4, #4]
 80062cc:	e7cc      	b.n	8006268 <_malloc_r+0x2c>
 80062ce:	1cc4      	adds	r4, r0, #3
 80062d0:	f024 0403 	bic.w	r4, r4, #3
 80062d4:	42a0      	cmp	r0, r4
 80062d6:	d0e3      	beq.n	80062a0 <_malloc_r+0x64>
 80062d8:	1a21      	subs	r1, r4, r0
 80062da:	4630      	mov	r0, r6
 80062dc:	f000 f962 	bl	80065a4 <_sbrk_r>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d1dd      	bne.n	80062a0 <_malloc_r+0x64>
 80062e4:	e7cf      	b.n	8006286 <_malloc_r+0x4a>
 80062e6:	bf00      	nop
 80062e8:	20000258 	.word	0x20000258
 80062ec:	2000025c 	.word	0x2000025c

080062f0 <__sfputc_r>:
 80062f0:	6893      	ldr	r3, [r2, #8]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	b410      	push	{r4}
 80062f8:	6093      	str	r3, [r2, #8]
 80062fa:	da08      	bge.n	800630e <__sfputc_r+0x1e>
 80062fc:	6994      	ldr	r4, [r2, #24]
 80062fe:	42a3      	cmp	r3, r4
 8006300:	db01      	blt.n	8006306 <__sfputc_r+0x16>
 8006302:	290a      	cmp	r1, #10
 8006304:	d103      	bne.n	800630e <__sfputc_r+0x1e>
 8006306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800630a:	f000 b99f 	b.w	800664c <__swbuf_r>
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	1c58      	adds	r0, r3, #1
 8006312:	6010      	str	r0, [r2, #0]
 8006314:	7019      	strb	r1, [r3, #0]
 8006316:	4608      	mov	r0, r1
 8006318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800631c:	4770      	bx	lr

0800631e <__sfputs_r>:
 800631e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006320:	4606      	mov	r6, r0
 8006322:	460f      	mov	r7, r1
 8006324:	4614      	mov	r4, r2
 8006326:	18d5      	adds	r5, r2, r3
 8006328:	42ac      	cmp	r4, r5
 800632a:	d101      	bne.n	8006330 <__sfputs_r+0x12>
 800632c:	2000      	movs	r0, #0
 800632e:	e007      	b.n	8006340 <__sfputs_r+0x22>
 8006330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006334:	463a      	mov	r2, r7
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ffda 	bl	80062f0 <__sfputc_r>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d1f3      	bne.n	8006328 <__sfputs_r+0xa>
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006344 <_vfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	460d      	mov	r5, r1
 800634a:	b09d      	sub	sp, #116	; 0x74
 800634c:	4614      	mov	r4, r2
 800634e:	4698      	mov	r8, r3
 8006350:	4606      	mov	r6, r0
 8006352:	b118      	cbz	r0, 800635c <_vfiprintf_r+0x18>
 8006354:	6983      	ldr	r3, [r0, #24]
 8006356:	b90b      	cbnz	r3, 800635c <_vfiprintf_r+0x18>
 8006358:	f7ff fad6 	bl	8005908 <__sinit>
 800635c:	4b89      	ldr	r3, [pc, #548]	; (8006584 <_vfiprintf_r+0x240>)
 800635e:	429d      	cmp	r5, r3
 8006360:	d11b      	bne.n	800639a <_vfiprintf_r+0x56>
 8006362:	6875      	ldr	r5, [r6, #4]
 8006364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	d405      	bmi.n	8006376 <_vfiprintf_r+0x32>
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	059a      	lsls	r2, r3, #22
 800636e:	d402      	bmi.n	8006376 <_vfiprintf_r+0x32>
 8006370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006372:	f7ff fb6c 	bl	8005a4e <__retarget_lock_acquire_recursive>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	071b      	lsls	r3, r3, #28
 800637a:	d501      	bpl.n	8006380 <_vfiprintf_r+0x3c>
 800637c:	692b      	ldr	r3, [r5, #16]
 800637e:	b9eb      	cbnz	r3, 80063bc <_vfiprintf_r+0x78>
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f000 f9c6 	bl	8006714 <__swsetup_r>
 8006388:	b1c0      	cbz	r0, 80063bc <_vfiprintf_r+0x78>
 800638a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800638c:	07dc      	lsls	r4, r3, #31
 800638e:	d50e      	bpl.n	80063ae <_vfiprintf_r+0x6a>
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	b01d      	add	sp, #116	; 0x74
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639a:	4b7b      	ldr	r3, [pc, #492]	; (8006588 <_vfiprintf_r+0x244>)
 800639c:	429d      	cmp	r5, r3
 800639e:	d101      	bne.n	80063a4 <_vfiprintf_r+0x60>
 80063a0:	68b5      	ldr	r5, [r6, #8]
 80063a2:	e7df      	b.n	8006364 <_vfiprintf_r+0x20>
 80063a4:	4b79      	ldr	r3, [pc, #484]	; (800658c <_vfiprintf_r+0x248>)
 80063a6:	429d      	cmp	r5, r3
 80063a8:	bf08      	it	eq
 80063aa:	68f5      	ldreq	r5, [r6, #12]
 80063ac:	e7da      	b.n	8006364 <_vfiprintf_r+0x20>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	0598      	lsls	r0, r3, #22
 80063b2:	d4ed      	bmi.n	8006390 <_vfiprintf_r+0x4c>
 80063b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b6:	f7ff fb4b 	bl	8005a50 <__retarget_lock_release_recursive>
 80063ba:	e7e9      	b.n	8006390 <_vfiprintf_r+0x4c>
 80063bc:	2300      	movs	r3, #0
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	2320      	movs	r3, #32
 80063c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ca:	2330      	movs	r3, #48	; 0x30
 80063cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006590 <_vfiprintf_r+0x24c>
 80063d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063d4:	f04f 0901 	mov.w	r9, #1
 80063d8:	4623      	mov	r3, r4
 80063da:	469a      	mov	sl, r3
 80063dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e0:	b10a      	cbz	r2, 80063e6 <_vfiprintf_r+0xa2>
 80063e2:	2a25      	cmp	r2, #37	; 0x25
 80063e4:	d1f9      	bne.n	80063da <_vfiprintf_r+0x96>
 80063e6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ea:	d00b      	beq.n	8006404 <_vfiprintf_r+0xc0>
 80063ec:	465b      	mov	r3, fp
 80063ee:	4622      	mov	r2, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ff93 	bl	800631e <__sfputs_r>
 80063f8:	3001      	adds	r0, #1
 80063fa:	f000 80aa 	beq.w	8006552 <_vfiprintf_r+0x20e>
 80063fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006400:	445a      	add	r2, fp
 8006402:	9209      	str	r2, [sp, #36]	; 0x24
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a2 	beq.w	8006552 <_vfiprintf_r+0x20e>
 800640e:	2300      	movs	r3, #0
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006418:	f10a 0a01 	add.w	sl, sl, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006424:	931a      	str	r3, [sp, #104]	; 0x68
 8006426:	4654      	mov	r4, sl
 8006428:	2205      	movs	r2, #5
 800642a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642e:	4858      	ldr	r0, [pc, #352]	; (8006590 <_vfiprintf_r+0x24c>)
 8006430:	f7f9 ff06 	bl	8000240 <memchr>
 8006434:	9a04      	ldr	r2, [sp, #16]
 8006436:	b9d8      	cbnz	r0, 8006470 <_vfiprintf_r+0x12c>
 8006438:	06d1      	lsls	r1, r2, #27
 800643a:	bf44      	itt	mi
 800643c:	2320      	movmi	r3, #32
 800643e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006442:	0713      	lsls	r3, r2, #28
 8006444:	bf44      	itt	mi
 8006446:	232b      	movmi	r3, #43	; 0x2b
 8006448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b2a      	cmp	r3, #42	; 0x2a
 8006452:	d015      	beq.n	8006480 <_vfiprintf_r+0x13c>
 8006454:	9a07      	ldr	r2, [sp, #28]
 8006456:	4654      	mov	r4, sl
 8006458:	2000      	movs	r0, #0
 800645a:	f04f 0c0a 	mov.w	ip, #10
 800645e:	4621      	mov	r1, r4
 8006460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006464:	3b30      	subs	r3, #48	; 0x30
 8006466:	2b09      	cmp	r3, #9
 8006468:	d94e      	bls.n	8006508 <_vfiprintf_r+0x1c4>
 800646a:	b1b0      	cbz	r0, 800649a <_vfiprintf_r+0x156>
 800646c:	9207      	str	r2, [sp, #28]
 800646e:	e014      	b.n	800649a <_vfiprintf_r+0x156>
 8006470:	eba0 0308 	sub.w	r3, r0, r8
 8006474:	fa09 f303 	lsl.w	r3, r9, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	46a2      	mov	sl, r4
 800647e:	e7d2      	b.n	8006426 <_vfiprintf_r+0xe2>
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	1d19      	adds	r1, r3, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfbb      	ittet	lt
 800648c:	425b      	neglt	r3, r3
 800648e:	f042 0202 	orrlt.w	r2, r2, #2
 8006492:	9307      	strge	r3, [sp, #28]
 8006494:	9307      	strlt	r3, [sp, #28]
 8006496:	bfb8      	it	lt
 8006498:	9204      	strlt	r2, [sp, #16]
 800649a:	7823      	ldrb	r3, [r4, #0]
 800649c:	2b2e      	cmp	r3, #46	; 0x2e
 800649e:	d10c      	bne.n	80064ba <_vfiprintf_r+0x176>
 80064a0:	7863      	ldrb	r3, [r4, #1]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d135      	bne.n	8006512 <_vfiprintf_r+0x1ce>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	9203      	str	r2, [sp, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfb8      	it	lt
 80064b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80064b6:	3402      	adds	r4, #2
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065a0 <_vfiprintf_r+0x25c>
 80064be:	7821      	ldrb	r1, [r4, #0]
 80064c0:	2203      	movs	r2, #3
 80064c2:	4650      	mov	r0, sl
 80064c4:	f7f9 febc 	bl	8000240 <memchr>
 80064c8:	b140      	cbz	r0, 80064dc <_vfiprintf_r+0x198>
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	eba0 000a 	sub.w	r0, r0, sl
 80064d0:	fa03 f000 	lsl.w	r0, r3, r0
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	4303      	orrs	r3, r0
 80064d8:	3401      	adds	r4, #1
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e0:	482c      	ldr	r0, [pc, #176]	; (8006594 <_vfiprintf_r+0x250>)
 80064e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e6:	2206      	movs	r2, #6
 80064e8:	f7f9 feaa 	bl	8000240 <memchr>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d03f      	beq.n	8006570 <_vfiprintf_r+0x22c>
 80064f0:	4b29      	ldr	r3, [pc, #164]	; (8006598 <_vfiprintf_r+0x254>)
 80064f2:	bb1b      	cbnz	r3, 800653c <_vfiprintf_r+0x1f8>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	3307      	adds	r3, #7
 80064f8:	f023 0307 	bic.w	r3, r3, #7
 80064fc:	3308      	adds	r3, #8
 80064fe:	9303      	str	r3, [sp, #12]
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	443b      	add	r3, r7
 8006504:	9309      	str	r3, [sp, #36]	; 0x24
 8006506:	e767      	b.n	80063d8 <_vfiprintf_r+0x94>
 8006508:	fb0c 3202 	mla	r2, ip, r2, r3
 800650c:	460c      	mov	r4, r1
 800650e:	2001      	movs	r0, #1
 8006510:	e7a5      	b.n	800645e <_vfiprintf_r+0x11a>
 8006512:	2300      	movs	r3, #0
 8006514:	3401      	adds	r4, #1
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	4619      	mov	r1, r3
 800651a:	f04f 0c0a 	mov.w	ip, #10
 800651e:	4620      	mov	r0, r4
 8006520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006524:	3a30      	subs	r2, #48	; 0x30
 8006526:	2a09      	cmp	r2, #9
 8006528:	d903      	bls.n	8006532 <_vfiprintf_r+0x1ee>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c5      	beq.n	80064ba <_vfiprintf_r+0x176>
 800652e:	9105      	str	r1, [sp, #20]
 8006530:	e7c3      	b.n	80064ba <_vfiprintf_r+0x176>
 8006532:	fb0c 2101 	mla	r1, ip, r1, r2
 8006536:	4604      	mov	r4, r0
 8006538:	2301      	movs	r3, #1
 800653a:	e7f0      	b.n	800651e <_vfiprintf_r+0x1da>
 800653c:	ab03      	add	r3, sp, #12
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	462a      	mov	r2, r5
 8006542:	4b16      	ldr	r3, [pc, #88]	; (800659c <_vfiprintf_r+0x258>)
 8006544:	a904      	add	r1, sp, #16
 8006546:	4630      	mov	r0, r6
 8006548:	f7fd ff2c 	bl	80043a4 <_printf_float>
 800654c:	4607      	mov	r7, r0
 800654e:	1c78      	adds	r0, r7, #1
 8006550:	d1d6      	bne.n	8006500 <_vfiprintf_r+0x1bc>
 8006552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006554:	07d9      	lsls	r1, r3, #31
 8006556:	d405      	bmi.n	8006564 <_vfiprintf_r+0x220>
 8006558:	89ab      	ldrh	r3, [r5, #12]
 800655a:	059a      	lsls	r2, r3, #22
 800655c:	d402      	bmi.n	8006564 <_vfiprintf_r+0x220>
 800655e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006560:	f7ff fa76 	bl	8005a50 <__retarget_lock_release_recursive>
 8006564:	89ab      	ldrh	r3, [r5, #12]
 8006566:	065b      	lsls	r3, r3, #25
 8006568:	f53f af12 	bmi.w	8006390 <_vfiprintf_r+0x4c>
 800656c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800656e:	e711      	b.n	8006394 <_vfiprintf_r+0x50>
 8006570:	ab03      	add	r3, sp, #12
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	4b09      	ldr	r3, [pc, #36]	; (800659c <_vfiprintf_r+0x258>)
 8006578:	a904      	add	r1, sp, #16
 800657a:	4630      	mov	r0, r6
 800657c:	f7fe f9b6 	bl	80048ec <_printf_i>
 8006580:	e7e4      	b.n	800654c <_vfiprintf_r+0x208>
 8006582:	bf00      	nop
 8006584:	08006d94 	.word	0x08006d94
 8006588:	08006db4 	.word	0x08006db4
 800658c:	08006d74 	.word	0x08006d74
 8006590:	08006f34 	.word	0x08006f34
 8006594:	08006f3e 	.word	0x08006f3e
 8006598:	080043a5 	.word	0x080043a5
 800659c:	0800631f 	.word	0x0800631f
 80065a0:	08006f3a 	.word	0x08006f3a

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	; (80065c0 <_sbrk_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fb f83e 	bl	8001630 <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20000300 	.word	0x20000300

080065c4 <__sread>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	460c      	mov	r4, r1
 80065c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065cc:	f000 faa6 	bl	8006b1c <_read_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	bfab      	itete	ge
 80065d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065d6:	89a3      	ldrhlt	r3, [r4, #12]
 80065d8:	181b      	addge	r3, r3, r0
 80065da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065de:	bfac      	ite	ge
 80065e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80065e2:	81a3      	strhlt	r3, [r4, #12]
 80065e4:	bd10      	pop	{r4, pc}

080065e6 <__swrite>:
 80065e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ea:	461f      	mov	r7, r3
 80065ec:	898b      	ldrh	r3, [r1, #12]
 80065ee:	05db      	lsls	r3, r3, #23
 80065f0:	4605      	mov	r5, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4616      	mov	r6, r2
 80065f6:	d505      	bpl.n	8006604 <__swrite+0x1e>
 80065f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fc:	2302      	movs	r3, #2
 80065fe:	2200      	movs	r2, #0
 8006600:	f000 f9f8 	bl	80069f4 <_lseek_r>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	4632      	mov	r2, r6
 8006612:	463b      	mov	r3, r7
 8006614:	4628      	mov	r0, r5
 8006616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661a:	f000 b869 	b.w	80066f0 <_write_r>

0800661e <__sseek>:
 800661e:	b510      	push	{r4, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006626:	f000 f9e5 	bl	80069f4 <_lseek_r>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	bf15      	itete	ne
 8006630:	6560      	strne	r0, [r4, #84]	; 0x54
 8006632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800663a:	81a3      	strheq	r3, [r4, #12]
 800663c:	bf18      	it	ne
 800663e:	81a3      	strhne	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__sclose>:
 8006642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006646:	f000 b8f1 	b.w	800682c <_close_r>
	...

0800664c <__swbuf_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	460e      	mov	r6, r1
 8006650:	4614      	mov	r4, r2
 8006652:	4605      	mov	r5, r0
 8006654:	b118      	cbz	r0, 800665e <__swbuf_r+0x12>
 8006656:	6983      	ldr	r3, [r0, #24]
 8006658:	b90b      	cbnz	r3, 800665e <__swbuf_r+0x12>
 800665a:	f7ff f955 	bl	8005908 <__sinit>
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <__swbuf_r+0x98>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d12b      	bne.n	80066bc <__swbuf_r+0x70>
 8006664:	686c      	ldr	r4, [r5, #4]
 8006666:	69a3      	ldr	r3, [r4, #24]
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	071a      	lsls	r2, r3, #28
 800666e:	d52f      	bpl.n	80066d0 <__swbuf_r+0x84>
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b36b      	cbz	r3, 80066d0 <__swbuf_r+0x84>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1ac0      	subs	r0, r0, r3
 800667a:	6963      	ldr	r3, [r4, #20]
 800667c:	b2f6      	uxtb	r6, r6
 800667e:	4283      	cmp	r3, r0
 8006680:	4637      	mov	r7, r6
 8006682:	dc04      	bgt.n	800668e <__swbuf_r+0x42>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f966 	bl	8006958 <_fflush_r>
 800668c:	bb30      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	3b01      	subs	r3, #1
 8006692:	60a3      	str	r3, [r4, #8]
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	701e      	strb	r6, [r3, #0]
 800669c:	6963      	ldr	r3, [r4, #20]
 800669e:	3001      	adds	r0, #1
 80066a0:	4283      	cmp	r3, r0
 80066a2:	d004      	beq.n	80066ae <__swbuf_r+0x62>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d506      	bpl.n	80066b8 <__swbuf_r+0x6c>
 80066aa:	2e0a      	cmp	r6, #10
 80066ac:	d104      	bne.n	80066b8 <__swbuf_r+0x6c>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f951 	bl	8006958 <_fflush_r>
 80066b6:	b988      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 80066b8:	4638      	mov	r0, r7
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <__swbuf_r+0x9c>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d101      	bne.n	80066c6 <__swbuf_r+0x7a>
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	e7cf      	b.n	8006666 <__swbuf_r+0x1a>
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <__swbuf_r+0xa0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	bf08      	it	eq
 80066cc:	68ec      	ldreq	r4, [r5, #12]
 80066ce:	e7ca      	b.n	8006666 <__swbuf_r+0x1a>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f81e 	bl	8006714 <__swsetup_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0cb      	beq.n	8006674 <__swbuf_r+0x28>
 80066dc:	f04f 37ff 	mov.w	r7, #4294967295
 80066e0:	e7ea      	b.n	80066b8 <__swbuf_r+0x6c>
 80066e2:	bf00      	nop
 80066e4:	08006d94 	.word	0x08006d94
 80066e8:	08006db4 	.word	0x08006db4
 80066ec:	08006d74 	.word	0x08006d74

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_write_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa ff45 	bl	800158e <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000300 	.word	0x20000300

08006714 <__swsetup_r>:
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <__swsetup_r+0xcc>)
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	4606      	mov	r6, r0
 800671c:	460c      	mov	r4, r1
 800671e:	b125      	cbz	r5, 800672a <__swsetup_r+0x16>
 8006720:	69ab      	ldr	r3, [r5, #24]
 8006722:	b913      	cbnz	r3, 800672a <__swsetup_r+0x16>
 8006724:	4628      	mov	r0, r5
 8006726:	f7ff f8ef 	bl	8005908 <__sinit>
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <__swsetup_r+0xd0>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d10f      	bne.n	8006750 <__swsetup_r+0x3c>
 8006730:	686c      	ldr	r4, [r5, #4]
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006738:	0719      	lsls	r1, r3, #28
 800673a:	d42c      	bmi.n	8006796 <__swsetup_r+0x82>
 800673c:	06dd      	lsls	r5, r3, #27
 800673e:	d411      	bmi.n	8006764 <__swsetup_r+0x50>
 8006740:	2309      	movs	r3, #9
 8006742:	6033      	str	r3, [r6, #0]
 8006744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	e03e      	b.n	80067ce <__swsetup_r+0xba>
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <__swsetup_r+0xd4>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d101      	bne.n	800675a <__swsetup_r+0x46>
 8006756:	68ac      	ldr	r4, [r5, #8]
 8006758:	e7eb      	b.n	8006732 <__swsetup_r+0x1e>
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <__swsetup_r+0xd8>)
 800675c:	429c      	cmp	r4, r3
 800675e:	bf08      	it	eq
 8006760:	68ec      	ldreq	r4, [r5, #12]
 8006762:	e7e6      	b.n	8006732 <__swsetup_r+0x1e>
 8006764:	0758      	lsls	r0, r3, #29
 8006766:	d512      	bpl.n	800678e <__swsetup_r+0x7a>
 8006768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676a:	b141      	cbz	r1, 800677e <__swsetup_r+0x6a>
 800676c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006770:	4299      	cmp	r1, r3
 8006772:	d002      	beq.n	800677a <__swsetup_r+0x66>
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff fd11 	bl	800619c <_free_r>
 800677a:	2300      	movs	r3, #0
 800677c:	6363      	str	r3, [r4, #52]	; 0x34
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	2300      	movs	r3, #0
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	b94b      	cbnz	r3, 80067ae <__swsetup_r+0x9a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d003      	beq.n	80067ae <__swsetup_r+0x9a>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f959 	bl	8006a60 <__smakebuf_r>
 80067ae:	89a0      	ldrh	r0, [r4, #12]
 80067b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067b4:	f010 0301 	ands.w	r3, r0, #1
 80067b8:	d00a      	beq.n	80067d0 <__swsetup_r+0xbc>
 80067ba:	2300      	movs	r3, #0
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	6963      	ldr	r3, [r4, #20]
 80067c0:	425b      	negs	r3, r3
 80067c2:	61a3      	str	r3, [r4, #24]
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	b943      	cbnz	r3, 80067da <__swsetup_r+0xc6>
 80067c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067cc:	d1ba      	bne.n	8006744 <__swsetup_r+0x30>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	0781      	lsls	r1, r0, #30
 80067d2:	bf58      	it	pl
 80067d4:	6963      	ldrpl	r3, [r4, #20]
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	e7f4      	b.n	80067c4 <__swsetup_r+0xb0>
 80067da:	2000      	movs	r0, #0
 80067dc:	e7f7      	b.n	80067ce <__swsetup_r+0xba>
 80067de:	bf00      	nop
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	08006d94 	.word	0x08006d94
 80067e8:	08006db4 	.word	0x08006db4
 80067ec:	08006d74 	.word	0x08006d74

080067f0 <__assert_func>:
 80067f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067f2:	4614      	mov	r4, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <__assert_func+0x2c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4605      	mov	r5, r0
 80067fc:	68d8      	ldr	r0, [r3, #12]
 80067fe:	b14c      	cbz	r4, 8006814 <__assert_func+0x24>
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <__assert_func+0x30>)
 8006802:	9100      	str	r1, [sp, #0]
 8006804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006808:	4906      	ldr	r1, [pc, #24]	; (8006824 <__assert_func+0x34>)
 800680a:	462b      	mov	r3, r5
 800680c:	f000 f8e0 	bl	80069d0 <fiprintf>
 8006810:	f000 f9a3 	bl	8006b5a <abort>
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <__assert_func+0x38>)
 8006816:	461c      	mov	r4, r3
 8006818:	e7f3      	b.n	8006802 <__assert_func+0x12>
 800681a:	bf00      	nop
 800681c:	2000000c 	.word	0x2000000c
 8006820:	08006f45 	.word	0x08006f45
 8006824:	08006f52 	.word	0x08006f52
 8006828:	08006f80 	.word	0x08006f80

0800682c <_close_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_close_r+0x1c>)
 8006830:	2300      	movs	r3, #0
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fa fec5 	bl	80015c6 <_close>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_close_r+0x1a>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_close_r+0x1a>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	20000300 	.word	0x20000300

0800684c <__sflush_r>:
 800684c:	898a      	ldrh	r2, [r1, #12]
 800684e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	0710      	lsls	r0, r2, #28
 8006856:	460c      	mov	r4, r1
 8006858:	d458      	bmi.n	800690c <__sflush_r+0xc0>
 800685a:	684b      	ldr	r3, [r1, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dc05      	bgt.n	800686c <__sflush_r+0x20>
 8006860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	dc02      	bgt.n	800686c <__sflush_r+0x20>
 8006866:	2000      	movs	r0, #0
 8006868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800686e:	2e00      	cmp	r6, #0
 8006870:	d0f9      	beq.n	8006866 <__sflush_r+0x1a>
 8006872:	2300      	movs	r3, #0
 8006874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006878:	682f      	ldr	r7, [r5, #0]
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	d032      	beq.n	80068e4 <__sflush_r+0x98>
 800687e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	075a      	lsls	r2, r3, #29
 8006884:	d505      	bpl.n	8006892 <__sflush_r+0x46>
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	1ac0      	subs	r0, r0, r3
 800688a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800688c:	b10b      	cbz	r3, 8006892 <__sflush_r+0x46>
 800688e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006890:	1ac0      	subs	r0, r0, r3
 8006892:	2300      	movs	r3, #0
 8006894:	4602      	mov	r2, r0
 8006896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006898:	6a21      	ldr	r1, [r4, #32]
 800689a:	4628      	mov	r0, r5
 800689c:	47b0      	blx	r6
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	d106      	bne.n	80068b2 <__sflush_r+0x66>
 80068a4:	6829      	ldr	r1, [r5, #0]
 80068a6:	291d      	cmp	r1, #29
 80068a8:	d82c      	bhi.n	8006904 <__sflush_r+0xb8>
 80068aa:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <__sflush_r+0x108>)
 80068ac:	40ca      	lsrs	r2, r1
 80068ae:	07d6      	lsls	r6, r2, #31
 80068b0:	d528      	bpl.n	8006904 <__sflush_r+0xb8>
 80068b2:	2200      	movs	r2, #0
 80068b4:	6062      	str	r2, [r4, #4]
 80068b6:	04d9      	lsls	r1, r3, #19
 80068b8:	6922      	ldr	r2, [r4, #16]
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	d504      	bpl.n	80068c8 <__sflush_r+0x7c>
 80068be:	1c42      	adds	r2, r0, #1
 80068c0:	d101      	bne.n	80068c6 <__sflush_r+0x7a>
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b903      	cbnz	r3, 80068c8 <__sflush_r+0x7c>
 80068c6:	6560      	str	r0, [r4, #84]	; 0x54
 80068c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ca:	602f      	str	r7, [r5, #0]
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d0ca      	beq.n	8006866 <__sflush_r+0x1a>
 80068d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068d4:	4299      	cmp	r1, r3
 80068d6:	d002      	beq.n	80068de <__sflush_r+0x92>
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff fc5f 	bl	800619c <_free_r>
 80068de:	2000      	movs	r0, #0
 80068e0:	6360      	str	r0, [r4, #52]	; 0x34
 80068e2:	e7c1      	b.n	8006868 <__sflush_r+0x1c>
 80068e4:	6a21      	ldr	r1, [r4, #32]
 80068e6:	2301      	movs	r3, #1
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b0      	blx	r6
 80068ec:	1c41      	adds	r1, r0, #1
 80068ee:	d1c7      	bne.n	8006880 <__sflush_r+0x34>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0c4      	beq.n	8006880 <__sflush_r+0x34>
 80068f6:	2b1d      	cmp	r3, #29
 80068f8:	d001      	beq.n	80068fe <__sflush_r+0xb2>
 80068fa:	2b16      	cmp	r3, #22
 80068fc:	d101      	bne.n	8006902 <__sflush_r+0xb6>
 80068fe:	602f      	str	r7, [r5, #0]
 8006900:	e7b1      	b.n	8006866 <__sflush_r+0x1a>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	e7ad      	b.n	8006868 <__sflush_r+0x1c>
 800690c:	690f      	ldr	r7, [r1, #16]
 800690e:	2f00      	cmp	r7, #0
 8006910:	d0a9      	beq.n	8006866 <__sflush_r+0x1a>
 8006912:	0793      	lsls	r3, r2, #30
 8006914:	680e      	ldr	r6, [r1, #0]
 8006916:	bf08      	it	eq
 8006918:	694b      	ldreq	r3, [r1, #20]
 800691a:	600f      	str	r7, [r1, #0]
 800691c:	bf18      	it	ne
 800691e:	2300      	movne	r3, #0
 8006920:	eba6 0807 	sub.w	r8, r6, r7
 8006924:	608b      	str	r3, [r1, #8]
 8006926:	f1b8 0f00 	cmp.w	r8, #0
 800692a:	dd9c      	ble.n	8006866 <__sflush_r+0x1a>
 800692c:	6a21      	ldr	r1, [r4, #32]
 800692e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006930:	4643      	mov	r3, r8
 8006932:	463a      	mov	r2, r7
 8006934:	4628      	mov	r0, r5
 8006936:	47b0      	blx	r6
 8006938:	2800      	cmp	r0, #0
 800693a:	dc06      	bgt.n	800694a <__sflush_r+0xfe>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e78e      	b.n	8006868 <__sflush_r+0x1c>
 800694a:	4407      	add	r7, r0
 800694c:	eba8 0800 	sub.w	r8, r8, r0
 8006950:	e7e9      	b.n	8006926 <__sflush_r+0xda>
 8006952:	bf00      	nop
 8006954:	20400001 	.word	0x20400001

08006958 <_fflush_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	690b      	ldr	r3, [r1, #16]
 800695c:	4605      	mov	r5, r0
 800695e:	460c      	mov	r4, r1
 8006960:	b913      	cbnz	r3, 8006968 <_fflush_r+0x10>
 8006962:	2500      	movs	r5, #0
 8006964:	4628      	mov	r0, r5
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	b118      	cbz	r0, 8006972 <_fflush_r+0x1a>
 800696a:	6983      	ldr	r3, [r0, #24]
 800696c:	b90b      	cbnz	r3, 8006972 <_fflush_r+0x1a>
 800696e:	f7fe ffcb 	bl	8005908 <__sinit>
 8006972:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <_fflush_r+0x6c>)
 8006974:	429c      	cmp	r4, r3
 8006976:	d11b      	bne.n	80069b0 <_fflush_r+0x58>
 8006978:	686c      	ldr	r4, [r5, #4]
 800697a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ef      	beq.n	8006962 <_fflush_r+0xa>
 8006982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006984:	07d0      	lsls	r0, r2, #31
 8006986:	d404      	bmi.n	8006992 <_fflush_r+0x3a>
 8006988:	0599      	lsls	r1, r3, #22
 800698a:	d402      	bmi.n	8006992 <_fflush_r+0x3a>
 800698c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800698e:	f7ff f85e 	bl	8005a4e <__retarget_lock_acquire_recursive>
 8006992:	4628      	mov	r0, r5
 8006994:	4621      	mov	r1, r4
 8006996:	f7ff ff59 	bl	800684c <__sflush_r>
 800699a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800699c:	07da      	lsls	r2, r3, #31
 800699e:	4605      	mov	r5, r0
 80069a0:	d4e0      	bmi.n	8006964 <_fflush_r+0xc>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	059b      	lsls	r3, r3, #22
 80069a6:	d4dd      	bmi.n	8006964 <_fflush_r+0xc>
 80069a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069aa:	f7ff f851 	bl	8005a50 <__retarget_lock_release_recursive>
 80069ae:	e7d9      	b.n	8006964 <_fflush_r+0xc>
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <_fflush_r+0x70>)
 80069b2:	429c      	cmp	r4, r3
 80069b4:	d101      	bne.n	80069ba <_fflush_r+0x62>
 80069b6:	68ac      	ldr	r4, [r5, #8]
 80069b8:	e7df      	b.n	800697a <_fflush_r+0x22>
 80069ba:	4b04      	ldr	r3, [pc, #16]	; (80069cc <_fflush_r+0x74>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	bf08      	it	eq
 80069c0:	68ec      	ldreq	r4, [r5, #12]
 80069c2:	e7da      	b.n	800697a <_fflush_r+0x22>
 80069c4:	08006d94 	.word	0x08006d94
 80069c8:	08006db4 	.word	0x08006db4
 80069cc:	08006d74 	.word	0x08006d74

080069d0 <fiprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b503      	push	{r0, r1, lr}
 80069d4:	4601      	mov	r1, r0
 80069d6:	ab03      	add	r3, sp, #12
 80069d8:	4805      	ldr	r0, [pc, #20]	; (80069f0 <fiprintf+0x20>)
 80069da:	f853 2b04 	ldr.w	r2, [r3], #4
 80069de:	6800      	ldr	r0, [r0, #0]
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f7ff fcaf 	bl	8006344 <_vfiprintf_r>
 80069e6:	b002      	add	sp, #8
 80069e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069ec:	b003      	add	sp, #12
 80069ee:	4770      	bx	lr
 80069f0:	2000000c 	.word	0x2000000c

080069f4 <_lseek_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d07      	ldr	r5, [pc, #28]	; (8006a14 <_lseek_r+0x20>)
 80069f8:	4604      	mov	r4, r0
 80069fa:	4608      	mov	r0, r1
 80069fc:	4611      	mov	r1, r2
 80069fe:	2200      	movs	r2, #0
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f7fa fe06 	bl	8001614 <_lseek>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_lseek_r+0x1e>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_lseek_r+0x1e>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	20000300 	.word	0x20000300

08006a18 <__swhatbuf_r>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	460e      	mov	r6, r1
 8006a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a20:	2900      	cmp	r1, #0
 8006a22:	b096      	sub	sp, #88	; 0x58
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	da07      	bge.n	8006a3a <__swhatbuf_r+0x22>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	89b3      	ldrh	r3, [r6, #12]
 8006a30:	061a      	lsls	r2, r3, #24
 8006a32:	d410      	bmi.n	8006a56 <__swhatbuf_r+0x3e>
 8006a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a38:	e00e      	b.n	8006a58 <__swhatbuf_r+0x40>
 8006a3a:	466a      	mov	r2, sp
 8006a3c:	f000 f894 	bl	8006b68 <_fstat_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	dbf2      	blt.n	8006a2a <__swhatbuf_r+0x12>
 8006a44:	9a01      	ldr	r2, [sp, #4]
 8006a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a4e:	425a      	negs	r2, r3
 8006a50:	415a      	adcs	r2, r3
 8006a52:	602a      	str	r2, [r5, #0]
 8006a54:	e7ee      	b.n	8006a34 <__swhatbuf_r+0x1c>
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	2000      	movs	r0, #0
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	b016      	add	sp, #88	; 0x58
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}

08006a60 <__smakebuf_r>:
 8006a60:	898b      	ldrh	r3, [r1, #12]
 8006a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a64:	079d      	lsls	r5, r3, #30
 8006a66:	4606      	mov	r6, r0
 8006a68:	460c      	mov	r4, r1
 8006a6a:	d507      	bpl.n	8006a7c <__smakebuf_r+0x1c>
 8006a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	2301      	movs	r3, #1
 8006a76:	6163      	str	r3, [r4, #20]
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	ab01      	add	r3, sp, #4
 8006a7e:	466a      	mov	r2, sp
 8006a80:	f7ff ffca 	bl	8006a18 <__swhatbuf_r>
 8006a84:	9900      	ldr	r1, [sp, #0]
 8006a86:	4605      	mov	r5, r0
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7ff fbd7 	bl	800623c <_malloc_r>
 8006a8e:	b948      	cbnz	r0, 8006aa4 <__smakebuf_r+0x44>
 8006a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a94:	059a      	lsls	r2, r3, #22
 8006a96:	d4ef      	bmi.n	8006a78 <__smakebuf_r+0x18>
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	e7e3      	b.n	8006a6c <__smakebuf_r+0xc>
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <__smakebuf_r+0x7c>)
 8006aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	6020      	str	r0, [r4, #0]
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	6163      	str	r3, [r4, #20]
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	6120      	str	r0, [r4, #16]
 8006aba:	b15b      	cbz	r3, 8006ad4 <__smakebuf_r+0x74>
 8006abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f863 	bl	8006b8c <_isatty_r>
 8006ac6:	b128      	cbz	r0, 8006ad4 <__smakebuf_r+0x74>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	89a0      	ldrh	r0, [r4, #12]
 8006ad6:	4305      	orrs	r5, r0
 8006ad8:	81a5      	strh	r5, [r4, #12]
 8006ada:	e7cd      	b.n	8006a78 <__smakebuf_r+0x18>
 8006adc:	080058a1 	.word	0x080058a1

08006ae0 <__ascii_mbtowc>:
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	b901      	cbnz	r1, 8006ae6 <__ascii_mbtowc+0x6>
 8006ae4:	a901      	add	r1, sp, #4
 8006ae6:	b142      	cbz	r2, 8006afa <__ascii_mbtowc+0x1a>
 8006ae8:	b14b      	cbz	r3, 8006afe <__ascii_mbtowc+0x1e>
 8006aea:	7813      	ldrb	r3, [r2, #0]
 8006aec:	600b      	str	r3, [r1, #0]
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	1e10      	subs	r0, r2, #0
 8006af2:	bf18      	it	ne
 8006af4:	2001      	movne	r0, #1
 8006af6:	b002      	add	sp, #8
 8006af8:	4770      	bx	lr
 8006afa:	4610      	mov	r0, r2
 8006afc:	e7fb      	b.n	8006af6 <__ascii_mbtowc+0x16>
 8006afe:	f06f 0001 	mvn.w	r0, #1
 8006b02:	e7f8      	b.n	8006af6 <__ascii_mbtowc+0x16>

08006b04 <__malloc_lock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_lock+0x8>)
 8006b06:	f7fe bfa2 	b.w	8005a4e <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	200002f8 	.word	0x200002f8

08006b10 <__malloc_unlock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_unlock+0x8>)
 8006b12:	f7fe bf9d 	b.w	8005a50 <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	200002f8 	.word	0x200002f8

08006b1c <_read_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_read_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa fd12 	bl	8001554 <_read>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_read_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_read_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000300 	.word	0x20000300

08006b40 <__ascii_wctomb>:
 8006b40:	b149      	cbz	r1, 8006b56 <__ascii_wctomb+0x16>
 8006b42:	2aff      	cmp	r2, #255	; 0xff
 8006b44:	bf85      	ittet	hi
 8006b46:	238a      	movhi	r3, #138	; 0x8a
 8006b48:	6003      	strhi	r3, [r0, #0]
 8006b4a:	700a      	strbls	r2, [r1, #0]
 8006b4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b50:	bf98      	it	ls
 8006b52:	2001      	movls	r0, #1
 8006b54:	4770      	bx	lr
 8006b56:	4608      	mov	r0, r1
 8006b58:	4770      	bx	lr

08006b5a <abort>:
 8006b5a:	b508      	push	{r3, lr}
 8006b5c:	2006      	movs	r0, #6
 8006b5e:	f000 f84d 	bl	8006bfc <raise>
 8006b62:	2001      	movs	r0, #1
 8006b64:	f7fa fcec 	bl	8001540 <_exit>

08006b68 <_fstat_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	; (8006b88 <_fstat_r+0x20>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	f7fa fd32 	bl	80015de <_fstat>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d102      	bne.n	8006b84 <_fstat_r+0x1c>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	b103      	cbz	r3, 8006b84 <_fstat_r+0x1c>
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	20000300 	.word	0x20000300

08006b8c <_isatty_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d06      	ldr	r5, [pc, #24]	; (8006ba8 <_isatty_r+0x1c>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7fa fd31 	bl	80015fe <_isatty>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_isatty_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_isatty_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	20000300 	.word	0x20000300

08006bac <_raise_r>:
 8006bac:	291f      	cmp	r1, #31
 8006bae:	b538      	push	{r3, r4, r5, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	d904      	bls.n	8006bc0 <_raise_r+0x14>
 8006bb6:	2316      	movs	r3, #22
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bc2:	b112      	cbz	r2, 8006bca <_raise_r+0x1e>
 8006bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bc8:	b94b      	cbnz	r3, 8006bde <_raise_r+0x32>
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 f830 	bl	8006c30 <_getpid_r>
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bda:	f000 b817 	b.w	8006c0c <_kill_r>
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d00a      	beq.n	8006bf8 <_raise_r+0x4c>
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	d103      	bne.n	8006bee <_raise_r+0x42>
 8006be6:	2316      	movs	r3, #22
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	2001      	movs	r0, #1
 8006bec:	e7e7      	b.n	8006bbe <_raise_r+0x12>
 8006bee:	2400      	movs	r4, #0
 8006bf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	4798      	blx	r3
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e7e0      	b.n	8006bbe <_raise_r+0x12>

08006bfc <raise>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	; (8006c08 <raise+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f7ff bfd3 	b.w	8006bac <_raise_r>
 8006c06:	bf00      	nop
 8006c08:	2000000c 	.word	0x2000000c

08006c0c <_kill_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d07      	ldr	r5, [pc, #28]	; (8006c2c <_kill_r+0x20>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	f7fa fc81 	bl	8001520 <_kill>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d102      	bne.n	8006c28 <_kill_r+0x1c>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	b103      	cbz	r3, 8006c28 <_kill_r+0x1c>
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	bd38      	pop	{r3, r4, r5, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000300 	.word	0x20000300

08006c30 <_getpid_r>:
 8006c30:	f7fa bc6e 	b.w	8001510 <_getpid>

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr
